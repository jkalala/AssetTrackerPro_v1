[{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\App.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\__tests__\\components\\auth\\mfa-setup-modal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\__tests__\\lib\\middleware\\permission-enforcement.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\__tests__\\lib\\services\\department-delegation.test.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":319,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":319,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9892,9895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9892,9895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":395,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":395,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12317,12320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12317,12320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\__tests__\\lib\\services\\role-service.test.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[601,604],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[601,604],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":410,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":410,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11838,11841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11838,11841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\[lang]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\activity-feed\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[333,336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[333,336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\nimport { useEffect, useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\n\nexport default function ActivityFeedPage() {\n  const [logs, setLogs] = useState<any[]>([])\n  useEffect(() => {\n    fetch('/api/audit-logs')\n      .then(res => res.json())\n      .then(res => setLogs(res.data || []))\n  }, [])\n  return (\n    <div className=\"max-w-4xl mx-auto py-8\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Activity Feed / Audit Logs</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>User</TableHead>\n                <TableHead>Action</TableHead>\n                <TableHead>Entity</TableHead>\n                <TableHead>Entity ID</TableHead>\n                <TableHead>Time</TableHead>\n                <TableHead>Details</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {logs.map(log => (\n                <TableRow key={log.id}>\n                  <TableCell>{log.user_id}</TableCell>\n                  <TableCell>{log.action}</TableCell>\n                  <TableCell>{log.entity}</TableCell>\n                  <TableCell>{log.entity_id}</TableCell>\n                  <TableCell>{new Date(log.created_at).toLocaleString()}</TableCell>\n                  <TableCell>\n                    <pre className=\"text-xs\">{JSON.stringify(log.details, null, 2)}</pre>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\add-asset\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\admin\\page.tsx","messages":[{"ruleId":"no-extra-semi","severity":2,"message":"Unnecessary semicolon.","line":304,"column":7,"nodeType":"EmptyStatement","messageId":"unexpected","endLine":304,"endColumn":8,"fix":{"range":[10890,10900],"text":"{\n      ("}}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1773,1776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1773,1776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1861,1864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1861,1864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2328,2331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2328,2331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2464,2467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2464,2467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2590,2593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2590,2593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2809,2812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2809,2812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2949,2952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2949,2952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3089,3092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3089,3092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3647,3650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3647,3650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4017,4020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4017,4020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4155,4158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4155,4158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4353,4356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4353,4356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4374,4377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4374,4377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4482,4485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4482,4485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiTab' is assigned a value but never used.","line":149,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setApiTab' is assigned a value but never used.","line":149,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4580,4583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4580,4583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4791,4794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4791,4794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":160,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5016,5019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5016,5019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":167,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5387,5390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5387,5390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5495,5498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5495,5498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6104,6107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6104,6107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'roleSearch' is assigned a value but never used.","line":189,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setRoleSearch' is assigned a value but never used.","line":189,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":35,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'roleFilter' is assigned a value but never used.","line":190,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setRoleFilter' is assigned a value but never used.","line":190,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":35,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'changeRoleDialog' is assigned a value but never used.","line":191,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":191,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setChangeRoleDialog' is assigned a value but never used.","line":191,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":191,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6666,6669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6666,6669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newRole' is assigned a value but never used.","line":195,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setNewRole' is assigned a value but never used.","line":195,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'roleUpdating' is assigned a value but never used.","line":196,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":196,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setRoleUpdating' is assigned a value but never used.","line":196,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":196,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'viewPermsRole' is assigned a value but never used.","line":197,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":197,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":198,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6933,6936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6933,6936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'editPermsRole' is assigned a value but never used.","line":199,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":199,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setEditPermsRole' is assigned a value but never used.","line":199,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":199,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'editPerms' is assigned a value but never used.","line":200,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":200,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7123,7126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7123,7126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7516,7519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7516,7519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7694,7697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7694,7697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":221,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8123,8126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8123,8126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":253,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":253,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":253,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9245,9248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9245,9248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":292,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":292,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":292,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":292,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10650,10653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10650,10653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":320,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11457,11460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11457,11460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":326,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":326,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11669,11672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11669,11672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":336,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11955,11958],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11955,11958],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":348,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":348,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12411,12414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12411,12414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":356,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12729,12732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12729,12732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":362,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13008,13011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13008,13011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'stats' is assigned a value but never used.","line":365,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":365,"endColumn":14,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":388,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":388,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13838,13841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13838,13841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":402,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":402,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14435,14438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14435,14438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":418,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":418,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15064,15067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15064,15067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":430,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":430,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15508,15511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15508,15511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":451,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":451,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16349,16352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16349,16352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":508,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":508,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18539,18542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18539,18542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":525,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19081,19084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19081,19084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":546,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":546,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19786,19789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19786,19789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":559,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":559,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20313,20316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20313,20316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":596,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":596,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21717,21720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21717,21720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":608,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":608,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22231,22234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22231,22234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":639,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":639,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23442,23445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23442,23445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":651,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":651,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24009,24012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24009,24012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":659,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":659,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24279,24282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24279,24282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":662,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":662,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24394,24397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24394,24397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":684,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":684,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25342,25345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25342,25345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":725,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":725,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26867,26870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26867,26870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":728,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":728,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26974,26977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26974,26977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":767,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":767,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28482,28485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28482,28485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":775,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":775,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28832,28835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28832,28835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":776,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":776,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28873,28876],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28873,28876],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":794,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":794,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29639,29642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29639,29642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":795,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":795,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29668,29671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29668,29671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":802,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":802,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29853,29856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29853,29856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":803,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":803,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29890,29893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29890,29893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":814,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":814,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30344,30347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30344,30347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":817,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":817,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30487,30490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30487,30490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":819,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":819,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30629,30632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30629,30632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":821,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":821,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30750,30753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30750,30753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":837,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":837,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31299,31302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31299,31302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":839,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":839,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31419,31422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31419,31422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":841,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":841,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31551,31554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31551,31554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":843,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":843,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31663,31666],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31663,31666],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":850,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":850,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31824,31827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31824,31827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":878,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":878,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32751,32754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32751,32754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":910,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":910,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33937,33940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33937,33940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":931,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":931,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34635,34638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34635,34638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1010,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1010,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37153,37156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37153,37156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1142,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1142,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42381,42384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42381,42384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1333,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1333,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[50767,50770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[50767,50770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1545,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1545,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[59665,59668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[59665,59668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1635,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1635,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[63399,63402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[63399,63402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1728,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1728,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[67299,67302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[67299,67302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1814,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1814,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[70893,70896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[70893,70896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1902,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1902,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[74633,74636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[74633,74636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2345,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2345,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[94118,94121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[94118,94121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2389,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2389,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[95923,95926],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[95923,95926],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars */\n'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useAuth } from '@/components/auth/auth-provider'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport {\n  Loader2,\n  Shield,\n  Pencil,\n  Trash2,\n  UserPlus,\n  CheckSquare,\n  Square,\n  Download,\n  Info,\n  Plus,\n  Users as UsersIcon,\n  X as XIcon,\n  Copy,\n  Key,\n  Trash,\n  BarChart3,\n  PieChart,\n  Edit,\n  FileText,\n  Eye,\n} from 'lucide-react'\nimport { Input } from '@/components/ui/input'\nimport { Button } from '@/components/ui/button'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog'\nimport { useToast } from '@/components/ui/use-toast'\nimport React from 'react'\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  Pie,\n} from 'recharts'\nimport { Calendar } from '@/components/ui/calendar'\nimport type { DateRange } from 'react-day-picker'\nimport { Permission } from '@/lib/rbac/types'\n\nconst ADMIN_ROLES = ['admin', 'super_admin']\n\nconst ALL_PERMISSIONS: Permission[] = [\n  'create:asset',\n  'read:asset',\n  'update:asset',\n  'delete:asset',\n  'manage:users',\n  'manage:roles',\n  'manage:tenants',\n  'view:analytics',\n  'manage:billing',\n  'manage:settings',\n]\n\nexport default function AdminPanelPage() {\n  const { user, loading } = useAuth()\n  const [profile, setProfile] = useState<any>(null)\n  const [tab, setTab] = useState('users')\n  const [data, setData] = useState<any>({ users: [], assets: [], logs: [], teams: [] })\n  const [dataLoading, setDataLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [userSearch, setUserSearch] = useState('')\n  const [inviteDialogOpen, setInviteDialogOpen] = useState(false)\n  const [inviteEmail, setInviteEmail] = useState('')\n  const [inviteLoading, setInviteLoading] = useState(false)\n  const [roleDialog, setRoleDialog] = useState<{ open: boolean; role: any | null }>({\n    open: false,\n    role: null,\n  })\n  const [deactivateDialog, setDeactivateDialog] = useState<{ open: boolean; user: any | null }>({\n    open: false,\n    user: null,\n  })\n  const [resetDialog, setResetDialog] = useState<{ open: boolean; user: any | null }>({\n    open: false,\n    user: null,\n  })\n  const { toast } = useToast()\n  const [assetSearch, setAssetSearch] = useState('')\n  const [editAssetDialog, setEditAssetDialog] = useState<{ open: boolean; asset: any | null }>({\n    open: false,\n    asset: null,\n  })\n  const [deleteAssetDialog, setDeleteAssetDialog] = useState<{ open: boolean; asset: any | null }>({\n    open: false,\n    asset: null,\n  })\n  const [assignAssetDialog, setAssignAssetDialog] = useState<{ open: boolean; asset: any | null }>({\n    open: false,\n    asset: null,\n  })\n  const [bulkSelected, setBulkSelected] = useState<string[]>([])\n  const [bulkDeleteDialog, setBulkDeleteDialog] = useState(false)\n  const [assignUserEmail, setAssignUserEmail] = useState('')\n  const [editAssetName, setEditAssetName] = useState('')\n  const [editAssetCategory, setEditAssetCategory] = useState('')\n  const [editAssetStatus, setEditAssetStatus] = useState('')\n  const [logSearch, setLogSearch] = useState('')\n  const [logDetailDialog, setLogDetailDialog] = useState<{ open: boolean; log: any | null }>({\n    open: false,\n    log: null,\n  })\n  const [logPage, setLogPage] = useState(1)\n  const LOGS_PER_PAGE = 10\n  const [teamSearch, setTeamSearch] = useState('')\n  const [addTeamDialog, setAddTeamDialog] = useState(false)\n  const [newTeamName, setNewTeamName] = useState('')\n  const [removeTeamDialog, setRemoveTeamDialog] = useState<{ open: boolean; team: any | null }>({\n    open: false,\n    team: null,\n  })\n  const [teamMembersDialog, setTeamMembersDialog] = useState<{ open: boolean; team: any | null }>({\n    open: false,\n    team: null,\n  })\n  const [memberEmail, setMemberEmail] = useState('')\n  const [memberRoleDialog, setMemberRoleDialog] = useState<{\n    open: boolean\n    member: any | null\n    team: any | null\n  }>({ open: false, member: null, team: null })\n  const [teamMembers, setTeamMembers] = useState<any[]>([])\n  const [apiTab, setApiTab] = useState(false)\n  const [apiKeys, setApiKeys] = useState<any[]>([])\n  const [apiKeyDialog, setApiKeyDialog] = useState(false)\n  const [newApiKeyName, setNewApiKeyName] = useState('')\n  const [revokeApiKeyDialog, setRevokeApiKeyDialog] = useState<{ open: boolean; key: any | null }>({\n    open: false,\n    key: null,\n  })\n  const [copiedKeyId, setCopiedKeyId] = useState<string | null>(null)\n  const [depreciationEditDialog, setDepreciationEditDialog] = useState<{\n    open: boolean\n    asset: any | null\n  }>({ open: false, asset: null })\n  const [depValue, setDepValue] = useState('')\n  const [depDate, setDepDate] = useState('')\n  const [depMethod, setDepMethod] = useState('straight_line')\n  const [depYears, setDepYears] = useState('')\n  const [depSalvage, setDepSalvage] = useState('')\n  const [chartDialog, setChartDialog] = useState<{ open: boolean; asset: any | null }>({\n    open: false,\n    asset: null,\n  })\n  const [customReports, setCustomReports] = useState<any[]>([])\n  const [reportsLoading, setReportsLoading] = useState(false)\n  const [reportsError, setReportsError] = useState<string | null>(null)\n  const [reportDialog, setReportDialog] = useState(false)\n  const [reportName, setReportName] = useState('')\n  const [reportSource, setReportSource] = useState<keyof typeof sources>('assets')\n  const [reportFields, setReportFields] = useState<string[]>([])\n  const [reportFilter, setReportFilter] = useState('')\n  const [reportAgg, setReportAgg] = useState('')\n  const [reportChart, setReportChart] = useState('table')\n  const [runReport, setRunReport] = useState<any | null>(null)\n  const [editReportIdx, setEditReportIdx] = useState<number | null>(null)\n  const [reportFilters, setReportFilters] = useState<\n    { field: string; op: string; value: string }[]\n  >([])\n  const [reportAggType, setReportAggType] = useState('')\n  const [reportAggField, setReportAggField] = useState('')\n  const [reportGroupBy, setReportGroupBy] = useState('')\n  const [roleSearch, setRoleSearch] = useState('')\n  const [roleFilter, setRoleFilter] = useState('')\n  const [changeRoleDialog, setChangeRoleDialog] = useState<{ open: boolean; user: any | null }>({\n    open: false,\n    user: null,\n  })\n  const [newRole, setNewRole] = useState<string>('')\n  const [roleUpdating, setRoleUpdating] = useState(false)\n  const [viewPermsRole, setViewPermsRole] = useState<string>('')\n  const [users, setUsers] = useState<any[]>(data.users || [])\n  const [editPermsRole, setEditPermsRole] = useState<string>('')\n  const [editPerms, setEditPerms] = useState<Permission[]>([])\n  const [roles, setRoles] = useState<any[]>([])\n  const [rolesLoading, setRolesLoading] = useState(false)\n  const [rolesError, setRolesError] = useState<string | null>(null)\n  const [roleName, setRoleName] = useState('')\n  const [rolePerms, setRolePerms] = useState<Permission[]>([])\n  const [roleSaveLoading, setRoleSaveLoading] = useState(false)\n  const [deleteRoleDialog, setDeleteRoleDialog] = useState<{ open: boolean; role: any | null }>({\n    open: false,\n    role: null,\n  })\n  // Add a separate userDialog state for user dialogs\n  const [userDialog, setUserDialog] = useState<{ open: boolean; user: any | null }>({\n    open: false,\n    user: null,\n  })\n  // Add state for bulk update dialog and fields\n  const [bulkUpdateDialog, setBulkUpdateDialog] = useState(false)\n  const [bulkUpdateStatus, setBulkUpdateStatus] = useState('')\n  const [bulkUpdateCategory, setBulkUpdateCategory] = useState('')\n  const [bulkUpdateLocation, setBulkUpdateLocation] = useState('')\n  const [undoBulkUpdateData, setUndoBulkUpdateData] = useState<any[]>([])\n  const [undoBulkUpdateIds, setUndoBulkUpdateIds] = useState<string[]>([])\n\n  // Data sources and fields\n  const sources: {\n    [key: string]: { label: string; fields: string[] }\n  } = {\n    assets: {\n      label: 'Assets',\n      fields: ['name', 'category', 'status', 'purchase_value', 'created_at'],\n    },\n    users: { label: 'Users', fields: ['email', 'full_name', 'role', 'created_at'] },\n    teams: { label: 'Teams', fields: ['name', 'created_by', 'created_at'] },\n    logs: { label: 'Logs', fields: ['action', 'performed_by', 'created_at'] },\n  }\n\n  useEffect(() => {\n    if (!user) return\n    // Fetch profile to get role\n    const fetchProfile = async () => {\n      setDataLoading(true)\n      setError(null)\n      try {\n        const { createClient } = await import('@/lib/supabase/client')\n        const supabase = createClient()\n        const { data: profile, error } = await supabase\n          .from('profiles')\n          .select('id, email, full_name, role, tenant_id')\n          .eq('id', user.id)\n          .single()\n        if (error) throw error\n        setProfile(profile)\n      } catch (err: any) {\n        setError('Failed to load profile')\n      } finally {\n        setDataLoading(false)\n      }\n    }\n    fetchProfile()\n  }, [user])\n\n  useEffect(() => {\n    if (!profile || !ADMIN_ROLES.includes(profile.role)) return\n    // Fetch all admin data\n    const fetchData = async () => {\n      setDataLoading(true)\n      setError(null)\n      try {\n        const { createClient } = await import('@/lib/supabase/client')\n        const supabase = createClient()\n        // Users\n        const { data: users } = await supabase\n          .from('profiles')\n          .select('id, email, full_name, role, created_at')\n          .order('created_at', { ascending: false })\n        // Assets\n        const { data: assets } = await supabase\n          .from('assets')\n          .select('asset_id, name, category, status, created_at')\n          .order('created_at', { ascending: false })\n        // Audit logs\n        const { data: logs } = await supabase\n          .from('audit_logs')\n          .select('id, action, performed_by, created_at')\n          .order('created_at', { ascending: false })\n        // Teams\n        const { data: teams } = await supabase\n          .from('teams')\n          .select('id, name, created_by, created_at')\n          .order('created_at', { ascending: false })\n        setData({ users: users || [], assets: assets || [], logs: logs || [], teams: teams || [] })\n      } catch (err: any) {\n        setError('Failed to load admin data')\n      } finally {\n        setDataLoading(false)\n      }\n    }\n    fetchData()\n  }, [profile])\n\n  // Fetch API keys when API tab is selected\n  useEffect(() => {\n    if (tab === 'apikeys') {\n      ;(async () => {\n        try {\n          const { createClient } = await import('@/lib/supabase/client')\n          const supabase = createClient()\n          const { data: keys } = await supabase\n            .from('api_keys')\n            .select('id, name, created_at, last_used_at, revoked, key')\n          setApiKeys(keys || [])\n        } catch {\n          toast({ title: 'Error', description: 'Failed to load API keys', variant: 'destructive' })\n        }\n      })()\n    }\n  }, [tab, toast])\n\n  // Filtered users\n  const filteredUsers = data.users.filter((u: any) => {\n    const q = userSearch.toLowerCase()\n    return u.email?.toLowerCase().includes(q) || u.full_name?.toLowerCase().includes(q)\n  })\n\n  // Filtered assets\n  const filteredAssets = data.assets.filter((a: any) => {\n    const q = assetSearch.toLowerCase()\n    return (\n      a.asset_id?.toLowerCase().includes(q) ||\n      a.name?.toLowerCase().includes(q) ||\n      a.category?.toLowerCase().includes(q)\n    )\n  })\n\n  // Filtered and paginated logs\n  const filteredLogs = data.logs.filter((l: any) => {\n    const q = logSearch.toLowerCase()\n    return (\n      l.action?.toLowerCase().includes(q) ||\n      l.performed_by?.toLowerCase().includes(q) ||\n      l.created_at?.slice(0, 10).includes(q)\n    )\n  })\n  const paginatedLogs = filteredLogs.slice((logPage - 1) * LOGS_PER_PAGE, logPage * LOGS_PER_PAGE)\n  const totalLogPages = Math.ceil(filteredLogs.length / LOGS_PER_PAGE)\n\n  // Analytics widgets\n  const assetsThisMonth = data.assets.filter((a: any) => {\n    if (!a.created_at) return false\n    const d = new Date(a.created_at)\n    const now = new Date()\n    return d.getFullYear() === now.getFullYear() && d.getMonth() === now.getMonth()\n  }).length\n  // Most active user (by audit logs)\n  const userActivity: Record<string, number> = {}\n  data.logs.forEach((l: any) => {\n    if (l.performed_by) userActivity[l.performed_by] = (userActivity[l.performed_by] || 0) + 1\n  })\n  const mostActiveUserId = Object.entries(userActivity).sort(\n    (a, b) => (b[1] as number) - (a[1] as number)\n  )[0]?.[0]\n  const mostActiveUser = data.users.find((u: any) => u.id === mostActiveUserId)\n\n  // Quick stats\n  const stats = [\n    { label: 'Users', value: data.users.length },\n    { label: 'Assets', value: data.assets.length },\n    { label: 'Teams', value: data.teams.length },\n    { label: 'Logs', value: data.logs.length },\n  ]\n\n  // User actions\n  const handleInvite = async () => {\n    setInviteLoading(true)\n    try {\n      // Simulate invite (replace with real API call)\n      await new Promise(res => setTimeout(res, 1000))\n      toast({ title: 'Invite sent', description: `Invitation sent to ${inviteEmail}` })\n      setInviteDialogOpen(false)\n      setInviteEmail('')\n    } catch {\n      toast({ title: 'Error', description: 'Failed to send invite', variant: 'destructive' })\n    } finally {\n      setInviteLoading(false)\n    }\n  }\n\n  const handleChangeRole = async (userObj: any, newRole: string) => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      await supabase.from('profiles').update({ role: newRole }).eq('id', userObj.id)\n      toast({ title: 'Role updated', description: `${userObj.email} is now ${newRole}` })\n      setUserDialog({ open: false, user: userDialog.user })\n      // Refresh users\n      setProfile({ ...profile })\n    } catch {\n      toast({ title: 'Error', description: 'Failed to update role', variant: 'destructive' })\n    }\n  }\n\n  const handleDeactivate = async (userObj: any, deactivate: boolean) => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      await supabase.from('profiles').update({ deactivated: deactivate }).eq('id', userObj.id)\n      toast({\n        title: deactivate ? 'User deactivated' : 'User reactivated',\n        description: userObj.email,\n      })\n      setUserDialog({ open: false, user: userDialog.user })\n      setProfile({ ...profile })\n    } catch {\n      toast({ title: 'Error', description: 'Failed to update user', variant: 'destructive' })\n    }\n  }\n\n  const handleResetPassword = async (userObj: any) => {\n    try {\n      // Simulate reset (replace with real API call)\n      await new Promise(res => setTimeout(res, 1000))\n      toast({ title: 'Password reset email sent', description: userObj.email })\n      setUserDialog({ open: false, user: userDialog.user })\n    } catch {\n      toast({ title: 'Error', description: 'Failed to send reset email', variant: 'destructive' })\n    }\n  }\n\n  // Asset actions\n  const handleEditAsset = (asset: any) => {\n    setEditAssetName(asset.name)\n    setEditAssetCategory(asset.category)\n    setEditAssetStatus(asset.status)\n    setEditAssetDialog({ open: true, asset })\n  }\n  const handleSaveAsset = async () => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      await supabase\n        .from('assets')\n        .update({ name: editAssetName, category: editAssetCategory, status: editAssetStatus })\n        .eq('asset_id', editAssetDialog.asset.asset_id)\n      toast({ title: 'Asset updated', description: editAssetName })\n      setEditAssetDialog({ open: false, asset: null })\n      setProfile({ ...profile })\n    } catch {\n      toast({ title: 'Error', description: 'Failed to update asset', variant: 'destructive' })\n    }\n  }\n  const handleDeleteAsset = async (asset: any) => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      await supabase.from('assets').delete().eq('asset_id', asset.asset_id)\n      toast({ title: 'Asset deleted', description: asset.name })\n      setDeleteAssetDialog({ open: false, asset: null })\n      setProfile({ ...profile })\n    } catch {\n      toast({ title: 'Error', description: 'Failed to delete asset', variant: 'destructive' })\n    }\n  }\n  const handleAssignAsset = async () => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      // Find user by email\n      const { data: user } = await supabase\n        .from('profiles')\n        .select('id')\n        .eq('email', assignUserEmail)\n        .single()\n      if (!user) throw new Error('User not found')\n      await supabase\n        .from('assets')\n        .update({ assignee_id: user.id })\n        .eq('asset_id', assignAssetDialog.asset.asset_id)\n      toast({ title: 'Asset assigned', description: `Assigned to ${assignUserEmail}` })\n      setAssignAssetDialog({ open: false, asset: null })\n      setAssignUserEmail('')\n      setProfile({ ...profile })\n    } catch {\n      toast({ title: 'Error', description: 'Failed to assign asset', variant: 'destructive' })\n    }\n  }\n  const handleBulkSelect = (assetId: string) => {\n    setBulkSelected(prev =>\n      prev.includes(assetId) ? prev.filter(id => id !== assetId) : [...prev, assetId]\n    )\n  }\n  const handleBulkDelete = async () => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      await supabase.from('assets').delete().in('asset_id', bulkSelected)\n      toast({ title: 'Assets deleted', description: `${bulkSelected.length} assets deleted` })\n      setBulkDeleteDialog(false)\n      setBulkSelected([])\n      setProfile({ ...profile })\n    } catch {\n      toast({ title: 'Error', description: 'Failed to delete assets', variant: 'destructive' })\n    }\n  }\n\n  // Export logs to CSV\n  const handleExportLogs = () => {\n    const headers = ['Action', 'By', 'Date']\n    const rows = filteredLogs.map((l: any) => [\n      l.action,\n      l.performed_by,\n      l.created_at?.slice(0, 10),\n    ])\n    const csv = [headers, ...rows].map(r => r.join(',')).join('\\n')\n    const blob = new Blob([csv], { type: 'text/csv' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = 'audit-logs.csv'\n    a.click()\n    URL.revokeObjectURL(url)\n    toast({ title: 'Logs exported', description: 'Audit logs exported to CSV' })\n  }\n\n  // Filtered teams\n  const filteredTeams = data.teams.filter((t: any) => {\n    const q = teamSearch.toLowerCase()\n    return t.name?.toLowerCase().includes(q)\n  })\n\n  // Add team\n  const handleAddTeam = async () => {\n    if (!user) return\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      await supabase.from('teams').insert({ name: newTeamName, created_by: user.id })\n      toast({ title: 'Team created', description: newTeamName })\n      setAddTeamDialog(false)\n      setNewTeamName('')\n      setProfile({ ...profile })\n    } catch {\n      toast({ title: 'Error', description: 'Failed to create team', variant: 'destructive' })\n    }\n  }\n  // Remove team\n  const handleRemoveTeam = async (team: any) => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      await supabase.from('teams').delete().eq('id', team.id)\n      toast({ title: 'Team removed', description: team.name })\n      setRemoveTeamDialog({ open: false, team: null })\n      setProfile({ ...profile })\n    } catch {\n      toast({ title: 'Error', description: 'Failed to remove team', variant: 'destructive' })\n    }\n  }\n  // Open team members dialog\n  const openTeamMembers = async (team: any) => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      const { data: members } = await supabase\n        .from('team_members')\n        .select('id, user_id, role, joined_at, profiles:profiles(full_name, email)')\n        .eq('team_id', team.id)\n      setTeamMembers(members || [])\n      setTeamMembersDialog({ open: true, team })\n    } catch {\n      toast({ title: 'Error', description: 'Failed to load team members', variant: 'destructive' })\n    }\n  }\n  // Add member\n  const handleAddMember = async () => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      // Find user by email\n      const { data: userProfile } = await supabase\n        .from('profiles')\n        .select('id')\n        .eq('email', memberEmail)\n        .single()\n      if (!userProfile) throw new Error('User not found')\n      await supabase\n        .from('team_members')\n        .insert({ team_id: teamMembersDialog.team.id, user_id: userProfile.id, role: 'member' })\n      toast({ title: 'Member added', description: memberEmail })\n      setMemberEmail('')\n      openTeamMembers(teamMembersDialog.team)\n    } catch {\n      toast({ title: 'Error', description: 'Failed to add member', variant: 'destructive' })\n    }\n  }\n  // Remove member\n  const handleRemoveMember = async (member: any) => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      await supabase.from('team_members').delete().eq('id', member.id)\n      toast({ title: 'Member removed', description: member.profiles?.email })\n      openTeamMembers(teamMembersDialog.team)\n    } catch {\n      toast({ title: 'Error', description: 'Failed to remove member', variant: 'destructive' })\n    }\n  }\n  // Change member role\n  const handleChangeMemberRole = async (member: any, newRole: string) => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      await supabase.from('team_members').update({ role: newRole }).eq('id', member.id)\n      toast({ title: 'Role updated', description: `${member.profiles?.email} is now ${newRole}` })\n      setMemberRoleDialog({ open: false, member: null, team: null })\n      openTeamMembers(teamMembersDialog.team)\n    } catch {\n      toast({ title: 'Error', description: 'Failed to update role', variant: 'destructive' })\n    }\n  }\n\n  // API Key actions\n  const handleCreateApiKey = async () => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      const { data: key } = await supabase\n        .from('api_keys')\n        .insert({ name: newApiKeyName })\n        .select()\n        .single()\n      toast({ title: 'API Key created', description: key?.key })\n      setApiKeyDialog(false)\n      setNewApiKeyName('')\n      setApiKeys([key, ...apiKeys])\n    } catch {\n      toast({ title: 'Error', description: 'Failed to create API key', variant: 'destructive' })\n    }\n  }\n  const handleRevokeApiKey = async (key: any) => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      await supabase.from('api_keys').update({ revoked: true }).eq('id', key.id)\n      toast({ title: 'API Key revoked', description: key.name })\n      setRevokeApiKeyDialog({ open: false, key: null })\n      setApiKeys(apiKeys.map(k => (k.id === key.id ? { ...k, revoked: true } : k)))\n    } catch {\n      toast({ title: 'Error', description: 'Failed to revoke API key', variant: 'destructive' })\n    }\n  }\n  const handleCopyApiKey = (key: any) => {\n    navigator.clipboard.writeText(key.key)\n    setCopiedKeyId(key.id)\n    toast({ title: 'Copied', description: 'API key copied to clipboard' })\n    setTimeout(() => setCopiedKeyId(null), 1500)\n  }\n\n  // Depreciation calculation\n  const getBookValue = (asset: any) => {\n    try {\n      // Dynamic import for depreciation calculation\n      const calculateBookValue = (params: any) => {\n        // Simplified calculation for now\n        const { purchase_value, purchase_date, depreciation_period_years, salvage_value } = params\n        const yearsElapsed =\n          (new Date().getTime() - new Date(purchase_date).getTime()) / (1000 * 60 * 60 * 24 * 365)\n        const annualDepreciation =\n          (purchase_value - (salvage_value || 0)) / depreciation_period_years\n        return Math.max(purchase_value - annualDepreciation * yearsElapsed, salvage_value || 0)\n      }\n      return calculateBookValue({\n        purchase_value: Number(asset.purchase_value),\n        purchase_date: asset.purchase_date,\n        depreciation_method: asset.depreciation_method || 'straight_line',\n        depreciation_period_years: Number(asset.depreciation_period_years),\n        salvage_value: Number(asset.salvage_value) || 0,\n      })\n    } catch {\n      return '-'\n    }\n  }\n\n  // Open edit dialog\n  const openDepreciationEdit = (asset: any) => {\n    setDepValue(asset.purchase_value || '')\n    setDepDate(asset.purchase_date || '')\n    setDepMethod(asset.depreciation_method || 'straight_line')\n    setDepYears(asset.depreciation_period_years || '')\n    setDepSalvage(asset.salvage_value || '')\n    setDepreciationEditDialog({ open: true, asset })\n  }\n  // Save depreciation params\n  const handleSaveDepreciation = async () => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      const { error } = await supabase\n        .from('assets')\n        .update({\n          purchase_value: Number(depValue),\n          purchase_date: depDate,\n          depreciation_method: depMethod,\n          depreciation_period_years: Number(depYears),\n          salvage_value: Number(depSalvage),\n        })\n        .eq('asset_id', depreciationEditDialog.asset.asset_id)\n      if (error) {\n        console.error('Depreciation update error:', error)\n        toast({\n          title: 'Error',\n          description: error.message || 'Failed to update depreciation',\n          variant: 'destructive',\n        })\n        return\n      }\n      toast({ title: 'Depreciation updated', description: depreciationEditDialog.asset.name })\n      setDepreciationEditDialog({ open: false, asset: null })\n      setProfile({ ...profile })\n    } catch (e) {\n      toast({ title: 'Error', description: String(e), variant: 'destructive' })\n    }\n  }\n\n  // Generate value-over-time data for chart\n  const getValueOverTime = (asset: any) => {\n    try {\n      // Use the same simplified calculation\n      const calculateBookValue = (params: any) => {\n        const { purchase_value, purchase_date, depreciation_period_years, salvage_value } = params\n        const yearsElapsed =\n          (new Date(params.current_date || new Date()).getTime() -\n            new Date(purchase_date).getTime()) /\n          (1000 * 60 * 60 * 24 * 365)\n        const annualDepreciation =\n          (purchase_value - (salvage_value || 0)) / depreciation_period_years\n        return Math.max(purchase_value - annualDepreciation * yearsElapsed, salvage_value || 0)\n      }\n      if (!asset.purchase_date || !asset.purchase_value || !asset.depreciation_period_years)\n        return []\n      const start = new Date(asset.purchase_date)\n      const years = Number(asset.depreciation_period_years)\n      const data = []\n      for (let i = 0; i <= years; i++) {\n        const date = new Date(start)\n        date.setFullYear(date.getFullYear() + i)\n        data.push({\n          year: start.getFullYear() + i,\n          value: calculateBookValue(\n            {\n              purchase_value: Number(asset.purchase_value),\n              purchase_date: asset.purchase_date,\n              depreciation_method: asset.depreciation_method || 'straight_line',\n              depreciation_period_years: Number(asset.depreciation_period_years),\n              salvage_value: Number(asset.salvage_value) || 0,\n            },\n            i\n          ),\n        })\n      }\n      return data\n    } catch {\n      return []\n    }\n  }\n\n  // Enhanced getReportData\n  const getReportData = (report: any) => {\n    let rows = []\n    if (report.source === 'assets') rows = data.assets\n    if (report.source === 'users') rows = data.users\n    if (report.source === 'teams') rows = data.teams\n    if (report.source === 'logs') rows = data.logs\n    // Advanced filters\n    if (report.filters && report.filters.length > 0) {\n      rows = rows.filter((row: any) =>\n        report.filters.every((f: any) => {\n          const v = row[f.field]\n          if (f.op === '=') return String(v) === f.value\n          if (f.op === 'contains') return String(v).toLowerCase().includes(f.value.toLowerCase())\n          if (f.op === '>') return Number(v) > Number(f.value)\n          if (f.op === '<') return Number(v) < Number(f.value)\n          if (f.op === '>=') return Number(v) >= Number(f.value)\n          if (f.op === '<=') return Number(v) <= Number(f.value)\n          if (f.op === 'between') {\n            const [min, max] = f.value.split(',')\n            return Number(v) >= Number(min) && Number(v) <= Number(max)\n          }\n          return true\n        })\n      )\n    }\n    // Fields\n    if (report.fields && report.fields.length > 0) {\n      rows = rows.map((row: any) => {\n        const obj: any = {}\n        report.fields.forEach((f: string) => (obj[f] = row[f]))\n        return obj\n      })\n    }\n    // Group by\n    if (report.groupBy) {\n      const grouped: Record<string, any[]> = {}\n      rows.forEach((row: any) => {\n        const key = row[report.groupBy]\n        if (!grouped[key]) grouped[key] = []\n        grouped[key].push(row)\n      })\n      // Aggregation on group\n      if (report.aggType && report.aggField) {\n        const aggRows = Object.entries(grouped).map(([k, group]) => {\n          let val = null\n          if (report.aggType === 'count') val = group.length\n          if (report.aggType === 'sum')\n            val = group.reduce((a: number, b: any) => a + Number(b[report.aggField]), 0)\n          if (report.aggType === 'avg')\n            val =\n              group.reduce((a: number, b: any) => a + Number(b[report.aggField]), 0) / group.length\n          if (report.aggType === 'min')\n            val = Math.min(...group.map((b: any) => Number(b[report.aggField])))\n          if (report.aggType === 'max')\n            val = Math.max(...group.map((b: any) => Number(b[report.aggField])))\n          return { [report.groupBy]: k, [report.aggField]: val }\n        })\n        return aggRows\n      }\n      // No aggregation, just group\n      return Object.entries(grouped).map(([k, group]) => ({\n        [report.groupBy]: k,\n        count: group.length,\n      }))\n    }\n    // Aggregation (if not grouped)\n    if (report.aggType && report.aggField) {\n      let val = null\n      if (report.aggType === 'count') val = rows.length\n      if (report.aggType === 'sum')\n        val = rows.reduce((a: number, b: any) => a + Number(b[report.aggField]), 0)\n      if (report.aggType === 'avg')\n        val = rows.reduce((a: number, b: any) => a + Number(b[report.aggField]), 0) / rows.length\n      if (report.aggType === 'min')\n        val = Math.min(...rows.map((b: any) => Number(b[report.aggField])))\n      if (report.aggType === 'max')\n        val = Math.max(...rows.map((b: any) => Number(b[report.aggField])))\n      return [{ [report.aggField]: val }]\n    }\n    return rows\n  }\n\n  // Export to CSV\n  const handleExportReport = (rows: any[]) => {\n    if (!rows.length) return\n    const headers = Object.keys(rows[0])\n    const csv = [headers.join(','), ...rows.map(r => headers.map(h => r[h]).join(','))].join('\\n')\n    const blob = new Blob([csv], { type: 'text/csv' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = 'custom-report.csv'\n    a.click()\n    URL.revokeObjectURL(url)\n    toast({ title: 'Report exported', description: 'CSV downloaded' })\n  }\n\n  // Fetch reports from backend\n  React.useEffect(() => {\n    setReportsLoading(true)\n    fetch('/api/custom-reports')\n      .then(res => res.json())\n      .then(res => {\n        setCustomReports(res.data || [])\n        setReportsError(null)\n      })\n      .catch(() => setReportsError('Failed to load reports'))\n      .finally(() => setReportsLoading(false))\n  }, [])\n\n  // Save report to backend\n  const saveReport = async (report: any, editIdx: number | null) => {\n    try {\n      setReportsLoading(true)\n      if (editIdx !== null && customReports[editIdx]?.id) {\n        // Update\n        const res = await fetch('/api/custom-reports', {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            id: customReports[editIdx].id,\n            name: report.name,\n            config: report,\n          }),\n        })\n        const json = await res.json()\n        if (json.error) throw new Error(json.error)\n        setCustomReports(\n          customReports.map((r, i) => (i === editIdx ? { ...json.data, config: report } : r))\n        )\n        toast({ title: 'Report updated' })\n      } else {\n        // Create\n        const res = await fetch('/api/custom-reports', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ name: report.name, config: report }),\n        })\n        const json = await res.json()\n        if (json.error) throw new Error(json.error)\n        setCustomReports([json.data, ...customReports])\n        toast({ title: 'Report created' })\n      }\n    } catch (e: any) {\n      toast({ title: 'Error', description: e.message, variant: 'destructive' })\n    } finally {\n      setReportsLoading(false)\n    }\n  }\n\n  // Delete report from backend\n  const deleteReport = async (idx: number) => {\n    try {\n      setReportsLoading(true)\n      const id = customReports[idx].id\n      const res = await fetch('/api/custom-reports', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id }),\n      })\n      const json = await res.json()\n      if (json.error) throw new Error(json.error)\n      setCustomReports(customReports.filter((_, i) => i !== idx))\n      toast({ title: 'Report deleted' })\n    } catch (e: any) {\n      toast({ title: 'Error', description: e.message, variant: 'destructive' })\n    } finally {\n      setReportsLoading(false)\n    }\n  }\n\n  // Fetch roles on mount\n  useEffect(() => {\n    setRolesLoading(true)\n    fetch('/api/roles')\n      .then(res => res.json())\n      .then(res => {\n        setRoles(res.data || [])\n        setRolesError(null)\n      })\n      .catch(() => setRolesError('Failed to load roles'))\n      .finally(() => setRolesLoading(false))\n  }, [])\n\n  // Create or update role\n  const saveRole = async () => {\n    setRoleSaveLoading(true)\n    const method = roleDialog.role ? 'PUT' : 'POST'\n    const body = roleDialog.role\n      ? { id: roleDialog.role.id, name: roleName, permissions: rolePerms }\n      : { name: roleName, permissions: rolePerms }\n    const res = await fetch('/api/roles', {\n      method,\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body),\n    })\n    const json = await res.json()\n    setRoleSaveLoading(false)\n    if (json.error) {\n      toast({ title: 'Error', description: json.error, variant: 'destructive' })\n      return\n    }\n    if (roleDialog.role) {\n      setRoles(roles.map(r => (r.id === json.data.id ? json.data : r)))\n      toast({ title: 'Role updated' })\n    } else {\n      setRoles([json.data, ...roles])\n      toast({ title: 'Role created' })\n    }\n    setRoleDialog({ open: false, role: null })\n  }\n\n  // Delete role\n  const deleteRole = async () => {\n    if (!deleteRoleDialog.role) return\n    const res = await fetch('/api/roles', {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ id: deleteRoleDialog.role.id }),\n    })\n    const json = await res.json()\n    if (json.error) {\n      toast({ title: 'Error', description: json.error, variant: 'destructive' })\n      return\n    }\n    setRoles(roles.filter(r => r.id !== deleteRoleDialog.role.id))\n    toast({ title: 'Role deleted' })\n    setDeleteRoleDialog({ open: false, role: null })\n  }\n\n  // Bulk update handler\n  const handleBulkUpdate = async () => {\n    try {\n      // Fetch previous asset data for undo\n      const res = await fetch('/api/assets/bulk-fetch', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ assetIds: bulkSelected }),\n      })\n      const prevData = await res.json()\n      setUndoBulkUpdateData(prevData.assets || [])\n      setUndoBulkUpdateIds(bulkSelected)\n      // Prepare update fields\n      const updateFields: any = {}\n      if (bulkUpdateStatus) updateFields.status = bulkUpdateStatus\n      if (bulkUpdateCategory) updateFields.category = bulkUpdateCategory\n      if (bulkUpdateLocation) updateFields.location = bulkUpdateLocation\n      // Update assets\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      await supabase.from('assets').update(updateFields).in('asset_id', bulkSelected)\n      toast({\n        title: 'Assets updated',\n        description:\n          `${bulkSelected.length} assets updated` +\n          (Object.keys(updateFields).length ? ` (${Object.keys(updateFields).join(', ')})` : ''),\n        action: (\n          <Button variant=\"outline\" onClick={handleUndoBulkUpdate}>\n            Undo\n          </Button>\n        ),\n      })\n      setBulkUpdateDialog(false)\n      setBulkSelected([])\n      setBulkUpdateStatus('')\n      setBulkUpdateCategory('')\n      setBulkUpdateLocation('')\n      setProfile({ ...profile })\n    } catch {\n      toast({ title: 'Error', description: 'Failed to update assets', variant: 'destructive' })\n    }\n  }\n  // Undo bulk update handler\n  const handleUndoBulkUpdate = async () => {\n    try {\n      await fetch('/api/assets/bulk-restore', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ assets: undoBulkUpdateData }),\n      })\n      toast({\n        title: 'Undo successful',\n        description: `${undoBulkUpdateIds.length} assets restored`,\n      })\n      setUndoBulkUpdateData([])\n      setUndoBulkUpdateIds([])\n      setProfile({ ...profile })\n    } catch {\n      toast({ title: 'Error', description: 'Failed to undo update', variant: 'destructive' })\n    }\n  }\n\n  if (loading || dataLoading) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-gray-500\" />\n      </div>\n    )\n  }\n\n  if (!user || !profile) {\n    return null\n  }\n\n  if (!ADMIN_ROLES.includes(profile.role)) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center\">\n        <Alert variant=\"destructive\">\n          <Shield className=\"h-5 w-5 mr-2\" />\n          <AlertDescription>\n            <b>Unauthorized:</b> You do not have permission to access the Admin Panel.\n          </AlertDescription>\n        </Alert>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-start bg-gradient-to-br from-gray-50 via-white to-blue-50 p-4\">\n      <Card className=\"w-full max-w-5xl mb-6\">\n        <CardHeader>\n          <CardTitle>Admin Panel</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n            {[\n              { label: 'Users', value: data.users.length },\n              { label: 'Assets', value: data.assets.length },\n              { label: 'Teams', value: data.teams.length },\n              { label: 'Logs', value: data.logs.length },\n              { label: 'Assets This Month', value: assetsThisMonth },\n              mostActiveUser && { label: 'Most Active User', value: mostActiveUser.email },\n            ]\n              .filter(Boolean)\n              .map((s, i) => (\n                <div key={s.label + i} className=\"bg-blue-100 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold\">{s.value}</div>\n                  <div className=\"text-xs text-gray-600\">{s.label}</div>\n                </div>\n              ))}\n          </div>\n          <Tabs value={tab} onValueChange={setTab} className=\"w-full\">\n            <TabsList className=\"mb-4\">\n              <TabsTrigger value=\"users\">Users</TabsTrigger>\n              <TabsTrigger value=\"assets\">Assets</TabsTrigger>\n              <TabsTrigger value=\"logs\">Audit Logs</TabsTrigger>\n              <TabsTrigger value=\"teams\">Teams</TabsTrigger>\n              <TabsTrigger value=\"apikeys\">API Keys</TabsTrigger>\n              <TabsTrigger value=\"depreciation\">Depreciation</TabsTrigger>\n              <TabsTrigger value=\"customreports\">Custom Reports</TabsTrigger>\n              <TabsTrigger value=\"roles\">Roles & Permissions</TabsTrigger>\n            </TabsList>\n            <TabsContent value=\"users\">\n              <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-4 gap-2\">\n                <Input\n                  placeholder=\"Search users by email or name...\"\n                  value={userSearch}\n                  onChange={e => setUserSearch(e.target.value)}\n                  className=\"max-w-xs\"\n                />\n                <Button onClick={() => setInviteDialogOpen(true)} variant=\"outline\">\n                  Invite User\n                </Button>\n              </div>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Role</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredUsers.map((u: any) => (\n                    <TableRow key={u.id}>\n                      <TableCell>{u.email}</TableCell>\n                      <TableCell>{u.full_name}</TableCell>\n                      <TableCell>\n                        <select\n                          value={u.role_id || ''}\n                          onChange={async e => {\n                            const newRoleId = e.target.value\n                            // Update user role_id in backend\n                            await fetch('/api/users', {\n                              method: 'PUT',\n                              headers: { 'Content-Type': 'application/json' },\n                              body: JSON.stringify({ id: u.id, role_id: newRoleId }),\n                            })\n                            setUsers(\n                              users.map(user =>\n                                user.id === u.id ? { ...user, role_id: newRoleId } : user\n                              )\n                            )\n                            toast({ title: 'User role updated' })\n                          }}\n                        >\n                          <option value=\"\">Select role</option>\n                          {roles.map(role => (\n                            <option key={role.id} value={role.id}>\n                              {role.name}\n                            </option>\n                          ))}\n                        </select>\n                      </TableCell>\n                      <TableCell>{u.deactivated ? 'Deactivated' : 'Active'}</TableCell>\n                      <TableCell>\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          onClick={() => setUserDialog({ open: true, user: u })}\n                        >\n                          Change Role\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          className=\"ml-2\"\n                          onClick={() => setDeactivateDialog({ open: true, user: u })}\n                        >\n                          {u.deactivated ? 'Reactivate' : 'Deactivate'}\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          className=\"ml-2\"\n                          onClick={() => setResetDialog({ open: true, user: u })}\n                        >\n                          Reset Password\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              {/* Invite User Dialog */}\n              <Dialog open={inviteDialogOpen} onOpenChange={setInviteDialogOpen}>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Invite User</DialogTitle>\n                  </DialogHeader>\n                  <Input\n                    placeholder=\"Email address\"\n                    value={inviteEmail}\n                    onChange={e => setInviteEmail(e.target.value)}\n                  />\n                  <DialogFooter>\n                    <Button onClick={handleInvite} disabled={!inviteEmail || inviteLoading}>\n                      {inviteLoading ? (\n                        <span className=\"flex items-center\">\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" /> Sending...\n                        </span>\n                      ) : (\n                        'Send Invite'\n                      )}\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n              {/* Change Role Dialog */}\n              <Dialog\n                open={userDialog.open}\n                onOpenChange={open => setUserDialog({ open, user: userDialog.user })}\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Change User Role</DialogTitle>\n                  </DialogHeader>\n                  <div>\n                    Change role for <b>{userDialog.user?.email}</b>:\n                  </div>\n                  <div className=\"flex gap-2 mt-2\">\n                    {['user', 'manager', 'admin', 'super_admin'].map(r => (\n                      <Button\n                        key={r}\n                        variant={userDialog.user?.role === r ? 'default' : 'outline'}\n                        onClick={() => handleChangeRole(userDialog.user, r)}\n                      >\n                        {r}\n                      </Button>\n                    ))}\n                  </div>\n                </DialogContent>\n              </Dialog>\n              {/* Deactivate/Reactivate Dialog */}\n              <Dialog\n                open={deactivateDialog.open}\n                onOpenChange={open => setDeactivateDialog({ open, user: deactivateDialog.user })}\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>\n                      {deactivateDialog.user?.deactivated ? 'Reactivate' : 'Deactivate'} User\n                    </DialogTitle>\n                  </DialogHeader>\n                  <div>\n                    Are you sure you want to{' '}\n                    {deactivateDialog.user?.deactivated ? 'reactivate' : 'deactivate'}{' '}\n                    <b>{deactivateDialog.user?.email}</b>?\n                  </div>\n                  <DialogFooter>\n                    <Button\n                      variant=\"destructive\"\n                      onClick={() =>\n                        handleDeactivate(deactivateDialog.user, !deactivateDialog.user?.deactivated)\n                      }\n                    >\n                      Yes, {deactivateDialog.user?.deactivated ? 'Reactivate' : 'Deactivate'}\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n              {/* Reset Password Dialog */}\n              <Dialog\n                open={resetDialog.open}\n                onOpenChange={open => setResetDialog({ open, user: resetDialog.user })}\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Reset Password</DialogTitle>\n                  </DialogHeader>\n                  <div>\n                    Send password reset email to <b>{resetDialog.user?.email}</b>?\n                  </div>\n                  <DialogFooter>\n                    <Button onClick={() => handleResetPassword(resetDialog.user)}>\n                      Send Reset Email\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            </TabsContent>\n            <TabsContent value=\"assets\">\n              <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-4 gap-2\">\n                <Input\n                  placeholder=\"Search assets by name, ID, or category...\"\n                  value={assetSearch}\n                  onChange={e => setAssetSearch(e.target.value)}\n                  className=\"max-w-xs\"\n                />\n                {bulkSelected.length > 0 && (\n                  <div className=\"flex gap-2\">\n                    <Button variant=\"secondary\" onClick={() => setBulkUpdateDialog(true)}>\n                      Update Selected ({bulkSelected.length})\n                    </Button>\n                    <Button variant=\"destructive\" onClick={() => setBulkDeleteDialog(true)}>\n                      Delete Selected ({bulkSelected.length})\n                    </Button>\n                  </div>\n                )}\n              </div>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>\n                      <CheckSquare className=\"inline h-4 w-4\" />\n                    </TableHead>\n                    <TableHead>Asset ID</TableHead>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Category</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredAssets.map((a: any) => (\n                    <TableRow key={a.asset_id}>\n                      <TableCell>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleBulkSelect(a.asset_id)}\n                        >\n                          {bulkSelected.includes(a.asset_id) ? (\n                            <CheckSquare className=\"h-4 w-4 text-blue-600\" />\n                          ) : (\n                            <Square className=\"h-4 w-4 text-gray-400\" />\n                          )}\n                        </Button>\n                      </TableCell>\n                      <TableCell>{a.asset_id}</TableCell>\n                      <TableCell>{a.name}</TableCell>\n                      <TableCell>{a.category}</TableCell>\n                      <TableCell>{a.status}</TableCell>\n                      <TableCell>\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          onClick={() => window.open(`/asset/${a.asset_id}`, '_blank')}\n                          title=\"Preview\"\n                          aria-label=\"Preview asset\"\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          className=\"ml-2\"\n                          onClick={() => handleEditAsset(a)}\n                          title=\"Edit\"\n                          aria-label=\"Edit asset\"\n                        >\n                          <Pencil className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          className=\"ml-2\"\n                          onClick={() => setAssignAssetDialog({ open: true, asset: a })}\n                          title=\"Assign\"\n                          aria-label=\"Assign asset\"\n                        >\n                          <UserPlus className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          className=\"ml-2\"\n                          onClick={() => setDeleteAssetDialog({ open: true, asset: a })}\n                          title=\"Delete\"\n                          aria-label=\"Delete asset\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              {/* Edit Asset Dialog */}\n              <Dialog\n                open={editAssetDialog.open}\n                onOpenChange={open => setEditAssetDialog({ open, asset: editAssetDialog.asset })}\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Edit Asset</DialogTitle>\n                  </DialogHeader>\n                  <Input\n                    placeholder=\"Name\"\n                    value={editAssetName}\n                    onChange={e => setEditAssetName(e.target.value)}\n                    className=\"mb-2\"\n                  />\n                  <Input\n                    placeholder=\"Category\"\n                    value={editAssetCategory}\n                    onChange={e => setEditAssetCategory(e.target.value)}\n                    className=\"mb-2\"\n                  />\n                  <Input\n                    placeholder=\"Status\"\n                    value={editAssetStatus}\n                    onChange={e => setEditAssetStatus(e.target.value)}\n                    className=\"mb-2\"\n                  />\n                  <DialogFooter>\n                    <Button onClick={handleSaveAsset}>Save</Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n              {/* Delete Asset Dialog */}\n              <Dialog\n                open={deleteAssetDialog.open}\n                onOpenChange={open =>\n                  setDeleteAssetDialog({ open, asset: deleteAssetDialog.asset })\n                }\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Delete Asset</DialogTitle>\n                  </DialogHeader>\n                  <div>\n                    Are you sure you want to delete <b>{deleteAssetDialog.asset?.name}</b>?\n                  </div>\n                  <DialogFooter>\n                    <Button\n                      variant=\"destructive\"\n                      onClick={() => handleDeleteAsset(deleteAssetDialog.asset)}\n                    >\n                      Delete\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n              {/* Assign Asset Dialog */}\n              <Dialog\n                open={assignAssetDialog.open}\n                onOpenChange={open =>\n                  setAssignAssetDialog({ open, asset: assignAssetDialog.asset })\n                }\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Assign Asset</DialogTitle>\n                  </DialogHeader>\n                  <Input\n                    placeholder=\"User email\"\n                    value={assignUserEmail}\n                    onChange={e => setAssignUserEmail(e.target.value)}\n                  />\n                  <DialogFooter>\n                    <Button onClick={handleAssignAsset}>Assign</Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n              {/* Bulk Delete Dialog */}\n              <Dialog open={bulkDeleteDialog} onOpenChange={setBulkDeleteDialog}>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Delete Selected Assets</DialogTitle>\n                  </DialogHeader>\n                  <div>\n                    Are you sure you want to delete <b>{bulkSelected.length}</b> assets?\n                  </div>\n                  <DialogFooter>\n                    <Button variant=\"destructive\" onClick={handleBulkDelete}>\n                      Delete All\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n              {/* Bulk Update Dialog */}\n              <Dialog open={bulkUpdateDialog} onOpenChange={setBulkUpdateDialog}>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Update Selected Assets</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"flex flex-col gap-2\">\n                    <Input\n                      placeholder=\"Status\"\n                      value={bulkUpdateStatus}\n                      onChange={e => setBulkUpdateStatus(e.target.value)}\n                      className=\"mb-2\"\n                    />\n                    <Input\n                      placeholder=\"Category\"\n                      value={bulkUpdateCategory}\n                      onChange={e => setBulkUpdateCategory(e.target.value)}\n                      className=\"mb-2\"\n                    />\n                    <Input\n                      placeholder=\"Location\"\n                      value={bulkUpdateLocation}\n                      onChange={e => setBulkUpdateLocation(e.target.value)}\n                      className=\"mb-2\"\n                    />\n                  </div>\n                  <DialogFooter>\n                    <Button onClick={handleBulkUpdate}>Update All</Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            </TabsContent>\n            <TabsContent value=\"logs\">\n              <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-4 gap-2\">\n                <Input\n                  placeholder=\"Search logs by action, user, or date...\"\n                  value={logSearch}\n                  onChange={e => setLogSearch(e.target.value)}\n                  className=\"max-w-xs\"\n                />\n                <Button variant=\"outline\" onClick={handleExportLogs}>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export CSV\n                </Button>\n              </div>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Action</TableHead>\n                    <TableHead>By</TableHead>\n                    <TableHead>Date</TableHead>\n                    <TableHead>Details</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {paginatedLogs.map((l: any) => (\n                    <TableRow key={l.id}>\n                      <TableCell>{l.action}</TableCell>\n                      <TableCell>{l.performed_by}</TableCell>\n                      <TableCell>{l.created_at?.slice(0, 10)}</TableCell>\n                      <TableCell>\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          onClick={() => setLogDetailDialog({ open: true, log: l })}\n                        >\n                          <Info className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              {/* Pagination */}\n              <div className=\"flex justify-end items-center gap-2 mt-2\">\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  disabled={logPage === 1}\n                  onClick={() => setLogPage(p => Math.max(1, p - 1))}\n                >\n                  Prev\n                </Button>\n                <span className=\"text-xs\">\n                  Page {logPage} of {totalLogPages}\n                </span>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  disabled={logPage === totalLogPages || totalLogPages === 0}\n                  onClick={() => setLogPage(p => Math.min(totalLogPages, p + 1))}\n                >\n                  Next\n                </Button>\n              </div>\n              {/* Log Detail Dialog */}\n              <Dialog\n                open={logDetailDialog.open}\n                onOpenChange={open => setLogDetailDialog({ open, log: logDetailDialog.log })}\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Log Details</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"mb-2\">\n                    <b>Action:</b> {logDetailDialog.log?.action}\n                  </div>\n                  <div className=\"mb-2\">\n                    <b>By:</b> {logDetailDialog.log?.performed_by}\n                  </div>\n                  <div className=\"mb-2\">\n                    <b>Date:</b> {logDetailDialog.log?.created_at?.slice(0, 10)}\n                  </div>\n                  {logDetailDialog.log && (\n                    <pre className=\"bg-gray-100 rounded p-2 text-xs overflow-x-auto\">\n                      {JSON.stringify(logDetailDialog.log, null, 2)}\n                    </pre>\n                  )}\n                </DialogContent>\n              </Dialog>\n            </TabsContent>\n            <TabsContent value=\"teams\">\n              <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-4 gap-2\">\n                <Input\n                  placeholder=\"Search teams by name...\"\n                  value={teamSearch}\n                  onChange={e => setTeamSearch(e.target.value)}\n                  className=\"max-w-xs\"\n                />\n                <Button variant=\"outline\" onClick={() => setAddTeamDialog(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Team\n                </Button>\n              </div>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Created By</TableHead>\n                    <TableHead>Created</TableHead>\n                    <TableHead>Members</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredTeams.map((t: any) => (\n                    <TableRow key={t.id}>\n                      <TableCell>{t.name}</TableCell>\n                      <TableCell>{t.created_by}</TableCell>\n                      <TableCell>{t.created_at?.slice(0, 10)}</TableCell>\n                      <TableCell>\n                        <Button size=\"sm\" variant=\"secondary\" onClick={() => openTeamMembers(t)}>\n                          <UsersIcon className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                      <TableCell>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => setRemoveTeamDialog({ open: true, team: t })}\n                        >\n                          <XIcon className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              {/* Add Team Dialog */}\n              <Dialog open={addTeamDialog} onOpenChange={setAddTeamDialog}>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add Team</DialogTitle>\n                  </DialogHeader>\n                  <Input\n                    placeholder=\"Team name\"\n                    value={newTeamName}\n                    onChange={e => setNewTeamName(e.target.value)}\n                  />\n                  <DialogFooter>\n                    <Button onClick={handleAddTeam} disabled={!newTeamName}>\n                      Add\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n              {/* Remove Team Dialog */}\n              <Dialog\n                open={removeTeamDialog.open}\n                onOpenChange={open => setRemoveTeamDialog({ open, team: removeTeamDialog.team })}\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Remove Team</DialogTitle>\n                  </DialogHeader>\n                  <div>\n                    Are you sure you want to remove <b>{removeTeamDialog.team?.name}</b>?\n                  </div>\n                  <DialogFooter>\n                    <Button\n                      variant=\"destructive\"\n                      onClick={() => handleRemoveTeam(removeTeamDialog.team)}\n                    >\n                      Remove\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n              {/* Team Members Dialog */}\n              <Dialog\n                open={teamMembersDialog.open}\n                onOpenChange={open => setTeamMembersDialog({ open, team: teamMembersDialog.team })}\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Team Members</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"mb-2 flex gap-2\">\n                    <Input\n                      placeholder=\"User email\"\n                      value={memberEmail}\n                      onChange={e => setMemberEmail(e.target.value)}\n                    />\n                    <Button onClick={handleAddMember} disabled={!memberEmail}>\n                      Add\n                    </Button>\n                  </div>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Email</TableHead>\n                        <TableHead>Role</TableHead>\n                        <TableHead>Joined</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {teamMembers.map((m: any) => (\n                        <TableRow key={m.id}>\n                          <TableCell>{m.profiles?.full_name}</TableCell>\n                          <TableCell>{m.profiles?.email}</TableCell>\n                          <TableCell>\n                            <Button\n                              size=\"sm\"\n                              variant=\"secondary\"\n                              onClick={() =>\n                                setMemberRoleDialog({\n                                  open: true,\n                                  member: m,\n                                  team: teamMembersDialog.team,\n                                })\n                              }\n                            >\n                              {m.role}\n                            </Button>\n                          </TableCell>\n                          <TableCell>{m.joined_at?.slice(0, 10)}</TableCell>\n                          <TableCell>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => handleRemoveMember(m)}\n                            >\n                              <XIcon className=\"h-4 w-4\" />\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </DialogContent>\n              </Dialog>\n              {/* Change Member Role Dialog */}\n              <Dialog\n                open={memberRoleDialog.open}\n                onOpenChange={open =>\n                  setMemberRoleDialog({\n                    open,\n                    member: memberRoleDialog.member,\n                    team: memberRoleDialog.team,\n                  })\n                }\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Change Member Role</DialogTitle>\n                  </DialogHeader>\n                  <div>\n                    Change role for <b>{memberRoleDialog.member?.profiles?.email}</b>:\n                  </div>\n                  <div className=\"flex gap-2 mt-2\">\n                    {['member', 'admin'].map(r => (\n                      <Button\n                        key={r}\n                        variant={memberRoleDialog.member?.role === r ? 'default' : 'outline'}\n                        onClick={() => handleChangeMemberRole(memberRoleDialog.member, r)}\n                      >\n                        {r}\n                      </Button>\n                    ))}\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </TabsContent>\n            <TabsContent value=\"apikeys\">\n              <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-4 gap-2\">\n                <Button variant=\"outline\" onClick={() => setApiKeyDialog(true)}>\n                  <Key className=\"h-4 w-4 mr-2\" />\n                  Create API Key\n                </Button>\n              </div>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Created</TableHead>\n                    <TableHead>Last Used</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Key</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {apiKeys.map((k: any) => (\n                    <TableRow key={k.id}>\n                      <TableCell>{k.name}</TableCell>\n                      <TableCell>{k.created_at?.slice(0, 10)}</TableCell>\n                      <TableCell>{k.last_used_at?.slice(0, 10) || '-'}</TableCell>\n                      <TableCell>{k.revoked ? 'Revoked' : 'Active'}</TableCell>\n                      <TableCell>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => handleCopyApiKey(k)}\n                          disabled={k.revoked}\n                        >\n                          <Copy className=\"h-4 w-4\" />\n                          {copiedKeyId === k.id ? 'Copied!' : 'Copy'}\n                        </Button>\n                      </TableCell>\n                      <TableCell>\n                        {!k.revoked && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            onClick={() => setRevokeApiKeyDialog({ open: true, key: k })}\n                          >\n                            <Trash className=\"h-4 w-4\" /> Revoke\n                          </Button>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              {/* Create API Key Dialog */}\n              <Dialog open={apiKeyDialog} onOpenChange={setApiKeyDialog}>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Create API Key</DialogTitle>\n                  </DialogHeader>\n                  <Input\n                    placeholder=\"API Key name\"\n                    value={newApiKeyName}\n                    onChange={e => setNewApiKeyName(e.target.value)}\n                  />\n                  <DialogFooter>\n                    <Button onClick={handleCreateApiKey} disabled={!newApiKeyName}>\n                      Create\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n              {/* Revoke API Key Dialog */}\n              <Dialog\n                open={revokeApiKeyDialog.open}\n                onOpenChange={open => setRevokeApiKeyDialog({ open, key: revokeApiKeyDialog.key })}\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Revoke API Key</DialogTitle>\n                  </DialogHeader>\n                  <div>\n                    Are you sure you want to revoke <b>{revokeApiKeyDialog.key?.name}</b>?\n                  </div>\n                  <DialogFooter>\n                    <Button\n                      variant=\"destructive\"\n                      onClick={() => handleRevokeApiKey(revokeApiKeyDialog.key)}\n                    >\n                      Revoke\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            </TabsContent>\n            <TabsContent value=\"depreciation\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Asset</TableHead>\n                    <TableHead>Purchase Value</TableHead>\n                    <TableHead>Purchase Date</TableHead>\n                    <TableHead>Method</TableHead>\n                    <TableHead>Years</TableHead>\n                    <TableHead>Salvage</TableHead>\n                    <TableHead>Book Value</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {data.assets.map((a: any) => (\n                    <TableRow key={a.asset_id}>\n                      <TableCell>{a.name}</TableCell>\n                      <TableCell>{a.purchase_value}</TableCell>\n                      <TableCell>{a.purchase_date}</TableCell>\n                      <TableCell>{a.depreciation_method || 'straight_line'}</TableCell>\n                      <TableCell>{a.depreciation_period_years}</TableCell>\n                      <TableCell>{a.salvage_value}</TableCell>\n                      <TableCell>{getBookValue(a)}</TableCell>\n                      <TableCell>\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          onClick={() => openDepreciationEdit(a)}\n                        >\n                          <BarChart3 className=\"h-4 w-4\" /> Edit\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          className=\"ml-2\"\n                          onClick={() => setChartDialog({ open: true, asset: a })}\n                        >\n                          View Chart\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              {/* Edit Depreciation Dialog */}\n              <Dialog\n                open={depreciationEditDialog.open}\n                onOpenChange={open =>\n                  setDepreciationEditDialog({ open, asset: depreciationEditDialog.asset })\n                }\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Edit Depreciation</DialogTitle>\n                  </DialogHeader>\n                  <Input\n                    placeholder=\"Purchase Value\"\n                    type=\"number\"\n                    value={depValue}\n                    onChange={e => setDepValue(e.target.value)}\n                    className=\"mb-2\"\n                  />\n                  <Input\n                    placeholder=\"Purchase Date\"\n                    type=\"date\"\n                    value={depDate}\n                    onChange={e => setDepDate(e.target.value)}\n                    className=\"mb-2\"\n                  />\n                  <select\n                    value={depMethod}\n                    onChange={e => setDepMethod(e.target.value)}\n                    className=\"w-full mb-2 border rounded p-2\"\n                  >\n                    <option value=\"straight_line\">Straight Line</option>\n                  </select>\n                  <Input\n                    placeholder=\"Years\"\n                    type=\"number\"\n                    value={depYears}\n                    onChange={e => setDepYears(e.target.value)}\n                    className=\"mb-2\"\n                  />\n                  <Input\n                    placeholder=\"Salvage Value\"\n                    type=\"number\"\n                    value={depSalvage}\n                    onChange={e => setDepSalvage(e.target.value)}\n                    className=\"mb-2\"\n                  />\n                  <DialogFooter>\n                    <Button onClick={handleSaveDepreciation}>Save</Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n              {/* Value Over Time Chart Dialog */}\n              <Dialog\n                open={chartDialog.open}\n                onOpenChange={open => setChartDialog({ open, asset: chartDialog.asset })}\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Value Over Time: {chartDialog.asset?.name}</DialogTitle>\n                  </DialogHeader>\n                  {chartDialog.asset && (\n                    <ResponsiveContainer width=\"100%\" height={300}>\n                      <LineChart data={getValueOverTime(chartDialog.asset)}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"year\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Line type=\"monotone\" dataKey=\"value\" stroke=\"#2563eb\" dot={false} />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  )}\n                </DialogContent>\n              </Dialog>\n            </TabsContent>\n            <TabsContent value=\"customreports\">\n              <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-4 gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setReportDialog(true)\n                    setEditReportIdx(null)\n                    setReportName('')\n                    setReportSource('assets')\n                    setReportFields([])\n                    setReportFilter('')\n                    setReportAgg('')\n                    setReportChart('table')\n                  }}\n                >\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  New Report\n                </Button>\n              </div>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Source</TableHead>\n                    <TableHead>Fields</TableHead>\n                    <TableHead>Filter</TableHead>\n                    <TableHead>Aggregation</TableHead>\n                    <TableHead>Chart</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {customReports.map((r, idx) => (\n                    <TableRow key={idx}>\n                      <TableCell>{r.name}</TableCell>\n                      <TableCell>{sources[r.source]?.label}</TableCell>\n                      <TableCell>{r.fields?.join(', ')}</TableCell>\n                      <TableCell>{r.filter}</TableCell>\n                      <TableCell>{r.agg}</TableCell>\n                      <TableCell>{r.chart}</TableCell>\n                      <TableCell>\n                        <Button size=\"sm\" variant=\"secondary\" onClick={() => setRunReport(r)}>\n                          Run\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          className=\"ml-2\"\n                          onClick={() => {\n                            setEditReportIdx(idx)\n                            setReportDialog(true)\n                            setReportName(r.name)\n                            setReportSource(r.source)\n                            setReportFields(r.fields)\n                            setReportFilter(r.filter)\n                            setReportAgg(r.agg)\n                            setReportChart(r.chart)\n                          }}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          className=\"ml-2\"\n                          onClick={() => deleteReport(idx)}\n                        >\n                          <Trash className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              {/* Report Builder Dialog */}\n              <Dialog open={reportDialog} onOpenChange={setReportDialog}>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>\n                      {editReportIdx !== null ? 'Edit' : 'New'} Custom Report\n                    </DialogTitle>\n                  </DialogHeader>\n                  <Input\n                    placeholder=\"Report name\"\n                    value={reportName}\n                    onChange={e => setReportName(e.target.value)}\n                    className=\"mb-2\"\n                  />\n                  <div className=\"mb-2\">\n                    <label>Source: </label>\n                    <select\n                      value={reportSource}\n                      onChange={e => {\n                        setReportSource(e.target.value as keyof typeof sources)\n                        setReportFields([])\n                      }}\n                      className=\"border rounded p-2 ml-2\"\n                    >\n                      {Object.entries(sources).map(([k, v]) => (\n                        <option key={k} value={k}>\n                          {v.label}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  <div className=\"mb-2\">\n                    <label>Fields: </label>\n                    {sources[reportSource].fields.map((f: string) => (\n                      <label key={f} className=\"ml-2\">\n                        <input\n                          type=\"checkbox\"\n                          checked={reportFields.includes(f)}\n                          onChange={e =>\n                            setReportFields(\n                              e.target.checked\n                                ? [...reportFields, f]\n                                : reportFields.filter(x => x !== f)\n                            )\n                          }\n                        />{' '}\n                        {f}\n                      </label>\n                    ))}\n                  </div>\n                  <div className=\"mb-2\">\n                    <label>Advanced Filters: </label>\n                    {reportFilters.map((f, i) => (\n                      <div key={i} className=\"flex gap-2 mb-1\">\n                        <select\n                          value={f.field}\n                          onChange={e =>\n                            setReportFilters(\n                              reportFilters.map((x, j) =>\n                                j === i ? { ...x, field: e.target.value } : x\n                              )\n                            )\n                          }\n                        >\n                          {sources[reportSource].fields.map((fld: string) => (\n                            <option key={fld} value={fld}>\n                              {fld}\n                            </option>\n                          ))}\n                        </select>\n                        <select\n                          value={f.op}\n                          onChange={e =>\n                            setReportFilters(\n                              reportFilters.map((x, j) =>\n                                j === i ? { ...x, op: e.target.value } : x\n                              )\n                            )\n                          }\n                        >\n                          <option value=\"=\">=</option>\n                          <option value=\"contains\">contains</option>\n                          <option value=\">\">&gt;</option>\n                          <option value=\"<\">&lt;</option>\n                          <option value=\">=\">&ge;</option>\n                          <option value=\"<=\">&le;</option>\n                          <option value=\"between\">between</option>\n                        </select>\n                        {(() => {\n                          const isDate = ['created_at', 'purchase_date'].includes(f.field)\n                          if (isDate && f.op === 'between') {\n                            const [start, end] = f.value.split(',')\n                            const range: DateRange = {\n                              from: start ? new Date(start) : undefined,\n                              to: end ? new Date(end) : undefined,\n                            }\n                            return (\n                              <Calendar\n                                mode=\"range\"\n                                selected={range}\n                                onSelect={(range: DateRange | undefined) => {\n                                  setReportFilters(\n                                    reportFilters.map((x, j) =>\n                                      j === i\n                                        ? {\n                                            ...x,\n                                            value:\n                                              (range?.from\n                                                ? range.from.toISOString().slice(0, 10)\n                                                : '') +\n                                              ',' +\n                                              (range?.to\n                                                ? range.to.toISOString().slice(0, 10)\n                                                : ''),\n                                          }\n                                        : x\n                                    )\n                                  )\n                                }}\n                              />\n                            )\n                          } else if (isDate) {\n                            return (\n                              <Calendar\n                                mode=\"single\"\n                                selected={f.value ? new Date(f.value) : undefined}\n                                onSelect={(d: Date | undefined) =>\n                                  setReportFilters(\n                                    reportFilters.map((x, j) =>\n                                      j === i\n                                        ? { ...x, value: d ? d.toISOString().slice(0, 10) : '' }\n                                        : x\n                                    )\n                                  )\n                                }\n                              />\n                            )\n                          } else {\n                            return (\n                              <Input\n                                value={f.value}\n                                onChange={e =>\n                                  setReportFilters(\n                                    reportFilters.map((x, j) =>\n                                      j === i ? { ...x, value: e.target.value } : x\n                                    )\n                                  )\n                                }\n                                placeholder=\"Value\"\n                              />\n                            )\n                          }\n                        })()}\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => setReportFilters(reportFilters.filter((_, j) => j !== i))}\n                        >\n                          Remove\n                        </Button>\n                      </div>\n                    ))}\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() =>\n                        setReportFilters([\n                          ...reportFilters,\n                          { field: sources[reportSource].fields[0], op: '=', value: '' },\n                        ])\n                      }\n                    >\n                      Add Filter\n                    </Button>\n                  </div>\n                  <div className=\"mb-2\">\n                    <label>Group By: </label>\n                    <select\n                      value={reportGroupBy}\n                      onChange={e => setReportGroupBy(e.target.value)}\n                      className=\"border rounded p-2 ml-2\"\n                    >\n                      <option value=\"\">None</option>\n                      {sources[reportSource].fields.map((fld: string) => (\n                        <option key={fld} value={fld}>\n                          {fld}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  <div className=\"mb-2\">\n                    <label>Aggregation: </label>\n                    <select\n                      value={reportAggType}\n                      onChange={e => setReportAggType(e.target.value)}\n                      className=\"border rounded p-2 ml-2\"\n                    >\n                      <option value=\"\">None</option>\n                      <option value=\"count\">Count</option>\n                      <option value=\"sum\">Sum</option>\n                      <option value=\"avg\">Average</option>\n                      <option value=\"min\">Min</option>\n                      <option value=\"max\">Max</option>\n                    </select>\n                    {reportAggType && reportAggType !== 'count' && (\n                      <select\n                        value={reportAggField}\n                        onChange={e => setReportAggField(e.target.value)}\n                        className=\"border rounded p-2 ml-2\"\n                      >\n                        {sources[reportSource].fields.map((fld: string) => (\n                          <option key={fld} value={fld}>\n                            {fld}\n                          </option>\n                        ))}\n                      </select>\n                    )}\n                  </div>\n                  <DialogFooter>\n                    <Button\n                      onClick={() => {\n                        const report = {\n                          name: reportName,\n                          source: reportSource,\n                          fields: reportFields,\n                          filter: reportFilter,\n                          filters: reportFilters,\n                          agg: reportAgg,\n                          aggType: reportAggType,\n                          aggField: reportAggField,\n                          groupBy: reportGroupBy,\n                          chart: reportChart,\n                        }\n                        saveReport(report, editReportIdx)\n                        setReportDialog(false)\n                      }}\n                      disabled={!reportName || !reportFields.length || reportsLoading}\n                    >\n                      Save\n                    </Button>\n                  </DialogFooter>\n                  <div className=\"mt-4\">\n                    <div className=\"font-bold mb-2\">Live Preview:</div>\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          {reportFields.map((f: string) => (\n                            <TableHead key={f}>{f}</TableHead>\n                          ))}\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {getReportData({\n                          name: reportName,\n                          source: reportSource,\n                          fields: reportFields,\n                          filter: reportFilter,\n                          filters: reportFilters,\n                          agg: reportAgg,\n                          aggType: reportAggType,\n                          aggField: reportAggField,\n                          groupBy: reportGroupBy,\n                          chart: reportChart,\n                        })\n                          .slice(0, 5)\n                          .map((row: any, i: number) => (\n                            <TableRow key={i}>\n                              {reportFields.map((f: string) => (\n                                <TableCell key={f}>{row[f]}</TableCell>\n                              ))}\n                            </TableRow>\n                          ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </DialogContent>\n              </Dialog>\n              {/* Run Report Dialog */}\n              <Dialog\n                open={!!runReport}\n                onOpenChange={open => {\n                  if (!open) setRunReport(null)\n                }}\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Report: {runReport?.name}</DialogTitle>\n                  </DialogHeader>\n                  {runReport && (\n                    <>\n                      <div className=\"mb-2 flex gap-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleExportReport(getReportData(runReport))}\n                        >\n                          Export CSV\n                        </Button>\n                      </div>\n                      {runReport.chart === 'table' && (\n                        <Table>\n                          <TableHeader>\n                            <TableRow>\n                              {runReport.fields.map((f: string) => (\n                                <TableHead key={f}>{f}</TableHead>\n                              ))}\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {getReportData(runReport).map((row: any, i: number) => (\n                              <TableRow key={i}>\n                                {runReport.fields.map((f: string) => (\n                                  <TableCell key={f}>{row[f]}</TableCell>\n                                ))}\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      )}\n                      {runReport.chart === 'bar' && (\n                        <ResponsiveContainer width=\"100%\" height={300}>\n                          <BarChart data={getReportData(runReport)}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey={runReport.fields[0]} />\n                            <YAxis />\n                            <Tooltip />\n                            <Bar dataKey={runReport.fields[1]} fill=\"#2563eb\" />\n                          </BarChart>\n                        </ResponsiveContainer>\n                      )}\n                      {runReport.chart === 'pie' && (\n                        <ResponsiveContainer width=\"100%\" height={300}>\n                          <PieChart>\n                            <Pie\n                              data={getReportData(runReport)}\n                              dataKey={runReport.fields[1]}\n                              nameKey={runReport.fields[0]}\n                              cx=\"50%\"\n                              cy=\"50%\"\n                              outerRadius={80}\n                              fill=\"#2563eb\"\n                              label\n                            />\n                            <Tooltip />\n                          </PieChart>\n                        </ResponsiveContainer>\n                      )}\n                    </>\n                  )}\n                </DialogContent>\n              </Dialog>\n              {reportsLoading && <div className=\"p-4 text-center\">Loading reports...</div>}\n              {reportsError && <div className=\"p-4 text-center text-red-500\">{reportsError}</div>}\n            </TabsContent>\n            <TabsContent value=\"roles\">\n              <div className=\"mb-4 flex flex-col md:flex-row md:items-center md:justify-between gap-2\">\n                <Button\n                  onClick={() => {\n                    setRoleDialog({ open: true, role: null })\n                    setRoleName('')\n                    setRolePerms([])\n                  }}\n                >\n                  Create Role\n                </Button>\n                {rolesLoading && <span className=\"ml-4\">Loading roles...</span>}\n                {rolesError && <span className=\"ml-4 text-red-500\">{rolesError}</span>}\n              </div>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Permissions</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {roles.map(role => (\n                    <TableRow key={role.id}>\n                      <TableCell>{role.name}</TableCell>\n                      <TableCell>{role.permissions.join(', ')}</TableCell>\n                      <TableCell>{role.is_builtin ? 'Built-in' : 'Custom'}</TableCell>\n                      <TableCell>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"mr-2\"\n                          onClick={() => {\n                            setViewPermsRole(role.name)\n                            setEditPerms(role.permissions)\n                          }}\n                        >\n                          View\n                        </Button>\n                        {!role.is_builtin && (\n                          <>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"mr-2\"\n                              onClick={() => {\n                                setRoleDialog({ open: true, role })\n                                setRoleName(role.name)\n                                setRolePerms(role.permissions)\n                              }}\n                            >\n                              Edit\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => setDeleteRoleDialog({ open: true, role })}\n                            >\n                              Delete\n                            </Button>\n                          </>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              {/* Create/Edit Role Dialog */}\n              <Dialog\n                open={roleDialog.open}\n                onOpenChange={open => setRoleDialog({ open, role: roleDialog.role })}\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>{roleDialog.role ? 'Edit Role' : 'Create Role'}</DialogTitle>\n                  </DialogHeader>\n                  <Input\n                    placeholder=\"Role name\"\n                    value={roleName}\n                    onChange={e => setRoleName(e.target.value)}\n                    className=\"mb-2\"\n                  />\n                  <div className=\"mb-2\">Permissions:</div>\n                  {ALL_PERMISSIONS.map(p => (\n                    <label key={p} className=\"flex items-center gap-2 mb-1\">\n                      <input\n                        type=\"checkbox\"\n                        checked={rolePerms.includes(p)}\n                        onChange={e =>\n                          setRolePerms(\n                            e.target.checked ? [...rolePerms, p] : rolePerms.filter(x => x !== p)\n                          )\n                        }\n                      />\n                      {p}\n                    </label>\n                  ))}\n                  <DialogFooter>\n                    <Button onClick={saveRole} disabled={roleSaveLoading || !roleName}>\n                      {roleSaveLoading ? 'Saving...' : 'Save'}\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n              {/* Delete Role Dialog */}\n              <Dialog\n                open={deleteRoleDialog.open}\n                onOpenChange={open => setDeleteRoleDialog({ open, role: deleteRoleDialog.role })}\n              >\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Delete Role</DialogTitle>\n                  </DialogHeader>\n                  <div>\n                    Are you sure you want to delete the role &quot;{deleteRoleDialog.role?.name}\n                    &quot;?\n                  </div>\n                  <DialogFooter>\n                    <Button variant=\"destructive\" onClick={deleteRole}>\n                      Delete\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setDeleteRoleDialog({ open: false, role: null })}\n                    >\n                      Cancel\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            </TabsContent>\n          </Tabs>\n          {error && (\n            <Alert variant=\"destructive\" className=\"mt-4\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\admin\\security-events\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\analytics\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DollarSign' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Package' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MapPin' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":72,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport {\n  BarChart3,\n  TrendingUp,\n  Activity,\n  Users,\n  Download,\n  Filter,\n  Calendar,\n  Zap,\n  RefreshCw,\n  AlertCircle,\n  FileText,\n  DollarSign,\n  Package,\n  MapPin,\n  Clock,\n} from 'lucide-react'\nimport { useAnalytics } from '@/hooks/use-analytics'\nimport { useAnalyticsExport } from '@/hooks/use-analytics-export'\nimport { useToast } from '@/hooks/use-toast'\nimport {\n  AnalyticsSummaryCards,\n  CategoryDistributionChart,\n  StatusDistributionChart,\n  LocationDistributionChart,\n  TimeSeriesChart,\n  ScanActivityChart,\n} from '@/components/analytics-charts'\nimport {\n  AssetValueReport,\n  AssetStatusReport,\n  LocationReport,\n  UserActivityReport,\n} from '@/components/analytics-reports'\n\nexport default function AnalyticsPage() {\n  const [activeTab, setActiveTab] = useState('overview')\n  const { data, loading, error, refresh } = useAnalytics()\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const { exportAll, exporting } = useAnalyticsExport()\n  const { toast } = useToast()\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true)\n    await refresh()\n    setTimeout(() => setIsRefreshing(false), 1000)\n  }\n\n  const handleExportAll = async () => {\n    try {\n      const result = await exportAll('json')\n      if (result.success) {\n        toast({\n          title: 'Export Successful',\n          description: 'All analytics data exported as JSON',\n        })\n      } else {\n        toast({\n          title: 'Export Failed',\n          description: result.error || 'Failed to export data',\n          variant: 'destructive',\n        })\n      }\n    } catch (error) {\n      toast({\n        title: 'Export Failed',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  const formatLastUpdated = (timestamp: string) => {\n    const now = new Date()\n    const updated = new Date(timestamp)\n    const diffInSeconds = Math.floor((now.getTime() - updated.getTime()) / 1000)\n\n    if (diffInSeconds < 60) return `${diffInSeconds}s ago`\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`\n    return `${Math.floor(diffInSeconds / 3600)}h ago`\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"bg-white border-b\">\n          <div className=\"max-w-7xl mx-auto px-4 py-6\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n              <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-10 bg-gray-200 rounded w-full\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {[...Array(2)].map((_, i) => (\n                <div key={i} className=\"h-80 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>Failed to load analytics data: {error}</AlertDescription>\n          </Alert>\n        </div>\n      </div>\n    )\n  }\n\n  if (!data) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              No analytics data available. Please add some assets to see analytics.\n            </AlertDescription>\n          </Alert>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n                <BarChart3 className=\"h-8 w-8 mr-3 text-blue-600\" />\n                Analytics & Reporting\n              </h1>\n              <p className=\"text-gray-600 mt-1\">\n                Comprehensive insights and detailed reports for your asset management system\n                {data.overview.lastUpdated && (\n                  <span className=\"ml-2 text-sm text-gray-500\">\n                    • Last updated {formatLastUpdated(data.overview.lastUpdated)}\n                  </span>\n                )}\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button onClick={handleRefresh} disabled={isRefreshing} variant=\"outline\" size=\"sm\">\n                <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n                Refresh\n              </Button>\n              <Button onClick={handleExportAll} disabled={exporting} variant=\"outline\" size=\"sm\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export All\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Filters\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Calendar className=\"h-4 w-4 mr-2\" />\n                Date Range\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-6\">\n            <TabsTrigger value=\"overview\" className=\"flex items-center\">\n              <Zap className=\"h-4 w-4 mr-2\" />\n              Overview\n            </TabsTrigger>\n            <TabsTrigger value=\"charts\" className=\"flex items-center\">\n              <BarChart3 className=\"h-4 w-4 mr-2\" />\n              Charts\n            </TabsTrigger>\n            <TabsTrigger value=\"reports\" className=\"flex items-center\">\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Reports\n            </TabsTrigger>\n            <TabsTrigger value=\"trends\" className=\"flex items-center\">\n              <TrendingUp className=\"h-4 w-4 mr-2\" />\n              Trends\n            </TabsTrigger>\n            <TabsTrigger value=\"activity\" className=\"flex items-center\">\n              <Activity className=\"h-4 w-4 mr-2\" />\n              Activity\n            </TabsTrigger>\n            <TabsTrigger value=\"users\" className=\"flex items-center\">\n              <Users className=\"h-4 w-4 mr-2\" />\n              Users\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\">\n            <div className=\"space-y-6\">\n              <AnalyticsSummaryCards overview={data.overview} />\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <TimeSeriesChart data={data.timeSeries} />\n                <ScanActivityChart data={data.scanData} />\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <CategoryDistributionChart data={data.categories} />\n                <StatusDistributionChart data={data.status} />\n                <LocationDistributionChart data={data.locations} />\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Charts Tab */}\n          <TabsContent value=\"charts\">\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <TimeSeriesChart data={data.timeSeries} />\n                <ScanActivityChart data={data.scanData} />\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <CategoryDistributionChart data={data.categories} />\n                <StatusDistributionChart data={data.status} />\n                <LocationDistributionChart data={data.locations} />\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Reports Tab */}\n          <TabsContent value=\"reports\">\n            <div className=\"space-y-6\">\n              <AssetValueReport data={data} />\n              <AssetStatusReport data={data} />\n              <LocationReport data={data} />\n              <UserActivityReport data={data} />\n            </div>\n          </TabsContent>\n\n          {/* Trends Tab */}\n          <TabsContent value=\"trends\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <TrendingUp className=\"h-5 w-5 mr-2\" />\n                    Growth Trends\n                  </CardTitle>\n                  <CardDescription>Asset growth and activity trends over time</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <TimeSeriesChart data={data.timeSeries} />\n                </CardContent>\n              </Card>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        +{data.overview.assetsCreatedThisWeek}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Assets This Week</div>\n                      <Badge variant=\"outline\" className=\"mt-2\">\n                        <TrendingUp className=\"h-3 w-3 mr-1\" />\n                        Growing\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">\n                        +{data.overview.assetsCreatedThisMonth}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Assets This Month</div>\n                      <Badge variant=\"outline\" className=\"mt-2\">\n                        <TrendingUp className=\"h-3 w-3 mr-1\" />\n                        Steady Growth\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-purple-600\">\n                        {data.userActivity.newUsersThisMonth}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">New Users This Month</div>\n                      <Badge variant=\"outline\" className=\"mt-2\">\n                        <Users className=\"h-3 w-3 mr-1\" />\n                        Expanding\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Activity Tab */}\n          <TabsContent value=\"activity\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Activity className=\"h-5 w-5 mr-2\" />\n                    Recent Activity\n                  </CardTitle>\n                  <CardDescription>Latest asset updates and system activities</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {data.recentActivity.slice(0, 10).map(activity => (\n                      <div\n                        key={activity.id}\n                        className=\"flex items-center justify-between p-4 border rounded-lg\"\n                      >\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                          <div>\n                            <div className=\"font-medium\">{activity.name}</div>\n                            <div className=\"text-sm text-gray-500\">\n                              Updated {new Date(activity.updated_at).toLocaleString()}\n                            </div>\n                          </div>\n                        </div>\n                        <Badge variant={activity.status === 'active' ? 'default' : 'secondary'}>\n                          {activity.status}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <ScanActivityChart data={data.scanData} />\n            </div>\n          </TabsContent>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\">\n            <div className=\"space-y-6\">\n              <UserActivityReport data={data} />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold\">{data.userActivity.totalUsers}</div>\n                      <div className=\"text-sm text-gray-600\">Total Users</div>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {data.userActivity.activeUsers}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Active Users</div>\n                      <Badge variant=\"default\" className=\"mt-2\">\n                        {data.userActivity.totalUsers > 0\n                          ? Math.round(\n                              (data.userActivity.activeUsers / data.userActivity.totalUsers) * 100\n                            )\n                          : 0}\n                        % active\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">\n                        {data.userActivity.newUsersThisMonth}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">New This Month</div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\analytics\\reports\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[432,435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[432,435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[651,654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[651,654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[703,706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[703,706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[910,913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[910,913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1307,1310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1307,1310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1719,1722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1719,1722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1798,1801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1798,1801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3117,3120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3117,3120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3510,3513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3510,3513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3735,3738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3735,3738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\nimport { useEffect, useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport CustomReportBuilder from '@/components/custom-report-builder'\nimport jsPDF from 'jspdf'\n\nexport default function CustomReportsPage() {\n  const [reports, setReports] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [showBuilder, setShowBuilder] = useState(false)\n  const [editReport, setEditReport] = useState<any>(null)\n  const [results, setResults] = useState<any[]>([])\n  const [resultsFields, setResultsFields] = useState<string[]>([])\n  const [runningReport, setRunningReport] = useState<string | null>(null)\n  const [groupedResults, setGroupedResults] = useState<any[]>([])\n  const [groupLabels, setGroupLabels] = useState<string[]>([])\n\n  useEffect(() => {\n    fetchReports()\n  }, [])\n\n  const fetchReports = async () => {\n    setLoading(true)\n    setError(null)\n    try {\n      const res = await fetch('/api/custom-reports')\n      const data = await res.json()\n      if (data.error) throw new Error(data.error)\n      setReports(data.reports)\n    } catch (e: any) {\n      setError(e.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('Delete this report?')) return\n    setError(null)\n    try {\n      const res = await fetch(`/api/custom-reports/${id}`, { method: 'DELETE' })\n      const data = await res.json()\n      if (data.error) throw new Error(data.error)\n      fetchReports()\n    } catch (e: any) {\n      setError(e.message)\n    }\n  }\n\n  const handleRun = async (report: any) => {\n    setRunningReport(report.id)\n    setResults([])\n    setResultsFields([])\n    setGroupedResults([])\n    setGroupLabels([])\n    try {\n      // Fetch assets with selected fields and filters\n      const fields = report.config.fields\n      const params = new URLSearchParams()\n      params.set('fields', fields.join(','))\n      if (report.config.dateFrom) params.set('dateFrom', report.config.dateFrom)\n      if (report.config.dateTo) params.set('dateTo', report.config.dateTo)\n      if (report.config.category) params.set('category', report.config.category)\n      if (report.config.status) params.set('status', report.config.status)\n      const res = await fetch(`/api/assets?${params.toString()}`)\n      const data = await res.json()\n      if (data.error) throw new Error(data.error)\n      let rows = data.assets\n      // Sort\n      if (report.config.sortBy) {\n        rows = [...rows].sort((a, b) => {\n          const dir = report.config.sortDir === 'desc' ? -1 : 1\n          if (a[report.config.sortBy] < b[report.config.sortBy]) return -1 * dir\n          if (a[report.config.sortBy] > b[report.config.sortBy]) return 1 * dir\n          return 0\n        })\n      }\n      setResults(rows)\n      setResultsFields(fields)\n      // Group\n      if (report.config.groupBy) {\n        const groupMap: Record<string, any[]> = {}\n        for (const row of rows) {\n          const key = row[report.config.groupBy] ?? '(none)'\n          if (!groupMap[key]) groupMap[key] = []\n          groupMap[key].push(row)\n        }\n        setGroupedResults(Object.values(groupMap))\n        setGroupLabels(Object.keys(groupMap))\n      } else {\n        setGroupedResults([])\n        setGroupLabels([])\n      }\n    } catch (e: any) {\n      setError(e.message)\n    } finally {\n      setRunningReport(null)\n    }\n  }\n\n  const exportCSV = () => {\n    if (!results.length) return\n    const csv = [\n      resultsFields.join(','),\n      ...results.map((row: any) => resultsFields.map(f => JSON.stringify(row[f] ?? '')).join(',')),\n    ].join('\\n')\n    const blob = new Blob([csv], { type: 'text/csv' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = 'custom-report.csv'\n    a.click()\n    URL.revokeObjectURL(url)\n  }\n\n  const exportPDF = () => {\n    if (!results.length) return\n    const pdf = new jsPDF({ orientation: 'landscape' })\n    let y = 20\n    pdf.setFontSize(12)\n    pdf.text('Custom Report', 14, y)\n    y += 10\n    // Header\n    resultsFields.forEach((f, i) => {\n      pdf.text(f, 14 + i * 40, y)\n    })\n    y += 8\n    // Rows\n    results.forEach((row, rowIdx) => {\n      resultsFields.forEach((f, i) => {\n        pdf.text(String(row[f] ?? ''), 14 + i * 40, y + rowIdx * 8)\n      })\n    })\n    pdf.save('custom-report.pdf')\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Custom Reports</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          {loading ? (\n            <div>Loading reports...</div>\n          ) : (\n            <>\n              <div className=\"mb-4 flex justify-between items-center\">\n                <div className=\"font-medium\">Saved Reports</div>\n                <Button\n                  onClick={() => {\n                    setShowBuilder(true)\n                    setEditReport(null)\n                  }}\n                >\n                  New Report\n                </Button>\n              </div>\n              <div className=\"space-y-2\">\n                {reports.length === 0 && <div className=\"text-gray-500\">No reports found.</div>}\n                {reports.map(r => (\n                  <div key={r.id} className=\"flex items-center gap-4 border p-2 rounded\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-semibold\">{r.name}</div>\n                      <div className=\"text-xs text-gray-500\">\n                        Last updated: {new Date(r.updated_at).toLocaleString()}\n                      </div>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setShowBuilder(true)\n                        setEditReport(r)\n                      }}\n                    >\n                      Edit\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleDelete(r.id)}>\n                      Delete\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"default\"\n                      onClick={() => handleRun(r)}\n                      disabled={runningReport === r.id}\n                    >\n                      {runningReport === r.id ? 'Running...' : 'Run'}\n                    </Button>\n                  </div>\n                ))}\n              </div>\n              {showBuilder && (\n                <CustomReportBuilder\n                  report={editReport}\n                  onClose={() => {\n                    setShowBuilder(false)\n                    setEditReport(null)\n                    fetchReports()\n                  }}\n                />\n              )}\n              {/* Results Table and Chart */}\n              {results.length > 0 && (\n                <div className=\"mt-8\">\n                  {/* Chart if grouped */}\n                  {groupLabels.length > 0 && (\n                    <div className=\"mb-4\">\n                      <div className=\"font-medium mb-2\">Group Summary</div>\n                      {/* Simple SVG bar chart */}\n                      <svg width={groupLabels.length * 60} height=\"120\">\n                        {groupLabels.map((label, i) => {\n                          const count = groupedResults[i]?.length || 0\n                          const max = Math.max(...groupedResults.map(g => g.length)) || 1\n                          const barHeight = (count / max) * 100\n                          return (\n                            <g key={label}>\n                              <rect\n                                x={i * 60 + 10}\n                                y={110 - barHeight}\n                                width=\"40\"\n                                height={barHeight}\n                                fill=\"#2563eb\"\n                              />\n                              <text x={i * 60 + 30} y={115} textAnchor=\"middle\" fontSize=\"10\">\n                                {label}\n                              </text>\n                              <text\n                                x={i * 60 + 30}\n                                y={110 - barHeight - 4}\n                                textAnchor=\"middle\"\n                                fontSize=\"10\"\n                              >\n                                {count}\n                              </text>\n                            </g>\n                          )\n                        })}\n                      </svg>\n                    </div>\n                  )}\n                  <div className=\"flex gap-2 mb-2\">\n                    <Button variant=\"outline\" onClick={exportCSV}>\n                      Export CSV\n                    </Button>\n                    <Button variant=\"outline\" onClick={exportPDF}>\n                      Export PDF\n                    </Button>\n                  </div>\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"min-w-full border\">\n                      <thead>\n                        <tr>\n                          {resultsFields.map(f => (\n                            <th\n                              key={f}\n                              className=\"border px-2 py-1 text-xs text-gray-600 bg-gray-50\"\n                            >\n                              {f}\n                            </th>\n                          ))}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {groupLabels.length > 0\n                          ? groupedResults.flat().map((row, idx) => (\n                              <tr key={idx} className=\"even:bg-gray-50\">\n                                {resultsFields.map(f => (\n                                  <td key={f} className=\"border px-2 py-1 text-xs\">\n                                    {String(row[f] ?? '')}\n                                  </td>\n                                ))}\n                              </tr>\n                            ))\n                          : results.map((row, idx) => (\n                              <tr key={idx} className=\"even:bg-gray-50\">\n                                {resultsFields.map(f => (\n                                  <td key={f} className=\"border px-2 py-1 text-xs\">\n                                    {String(row[f] ?? '')}\n                                  </td>\n                                ))}\n                              </tr>\n                            ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\analytics\\advanced\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\analytics\\export\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6068,6071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6068,6071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":207,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":207,"endColumn":57},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":208,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":208,"endColumn":32},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":210,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":210,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6799,6802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6799,6802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":219,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":219,"endColumn":46},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":229,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":229,"endColumn":58},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":230,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":230,"endColumn":48},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":231,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":231,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7611,7614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7611,7614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":242,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":242,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":267,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8652,8655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8652,8655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":284,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":284,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9434,9437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9434,9437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":291,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9641,9644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9641,9644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":298,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9860,9863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9860,9863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":305,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10112,10115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10112,10115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":312,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":312,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10474,10477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10474,10477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\n\nexport const runtime = 'nodejs'\n\nexport async function POST(request: Request) {\n  const supabase = await createClient()\n\n  try {\n    // Get user for authentication\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n\n    if (userError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const {\n      format = 'json',\n      reportType = 'all',\n      dateFrom,\n      dateTo,\n      category,\n      status,\n    } = await request.json()\n\n    // Get current date and calculate date ranges\n    const now = new Date()\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())\n    const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000)\n    const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000)\n\n    let query = supabase\n      .from('assets')\n      .select('id, name, status, category, purchase_value, created_at')\n    if (dateFrom) query = query.gte('created_at', dateFrom)\n    if (dateTo) query = query.lte('created_at', dateTo)\n    if (category) query = query.eq('category', category)\n    if (status) query = query.eq('status', status)\n\n    const { data, error } = await query\n    if (error) return NextResponse.json({ error: error.message }, { status: 400 })\n\n    // Fetch comprehensive analytics data\n    const [\n      totalAssets,\n      activeAssets,\n      assetsCreatedToday,\n      assetsCreatedThisWeek,\n      assetsCreatedThisMonth,\n      assetsByCategory,\n      assetsByStatus,\n      recentActivity,\n      qrCodeStats,\n      userActivity,\n      locationStats,\n      valueStats,\n      allAssets,\n    ] = await Promise.all([\n      // Total assets\n      supabase.from('assets').select('id', { count: 'exact' }),\n\n      // Active assets\n      supabase.from('assets').select('id', { count: 'exact' }).eq('status', 'active'),\n\n      // Assets created today\n      supabase\n        .from('assets')\n        .select('id', { count: 'exact' })\n        .gte('created_at', today.toISOString()),\n\n      // Assets created this week\n      supabase\n        .from('assets')\n        .select('id', { count: 'exact' })\n        .gte('created_at', weekAgo.toISOString()),\n\n      // Assets created this month\n      supabase\n        .from('assets')\n        .select('id', { count: 'exact' })\n        .gte('created_at', monthAgo.toISOString()),\n\n      // Assets by category\n      supabase.from('assets').select('category, id').not('category', 'is', null),\n\n      // Assets by status\n      supabase.from('assets').select('status, id'),\n\n      // Recent activity (last 50 activities)\n      supabase\n        .from('assets')\n        .select('id, name, created_at, updated_at, status')\n        .order('updated_at', { ascending: false })\n        .limit(50),\n\n      // QR code statistics\n      supabase.from('assets').select('id, qr_code').not('qr_code', 'is', null),\n\n      // User activity (profiles)\n      supabase.from('profiles').select('id, full_name, created_at, last_sign_in_at'),\n\n      // Location statistics\n      supabase.from('assets').select('location').not('location', 'is', null),\n\n      // Value statistics\n      supabase.from('assets').select('purchase_value').not('purchase_value', 'is', null),\n\n      // All assets for detailed export\n      supabase.from('assets').select('*').order('created_at', { ascending: false }),\n    ])\n\n    // Process data similar to analytics endpoint\n    const categoryCounts: { [key: string]: number } = {}\n    if (assetsByCategory.data) {\n      assetsByCategory.data.forEach(asset => {\n        if (asset.category) {\n          categoryCounts[asset.category] = (categoryCounts[asset.category] || 0) + 1\n        }\n      })\n    }\n\n    const statusCounts: { [key: string]: number } = {}\n    if (assetsByStatus.data) {\n      assetsByStatus.data.forEach(asset => {\n        if (asset.status) {\n          statusCounts[asset.status] = (statusCounts[asset.status] || 0) + 1\n        }\n      })\n    }\n\n    const locationCounts: { [key: string]: number } = {}\n    if (locationStats.data) {\n      locationStats.data.forEach(asset => {\n        if (asset.location) {\n          locationCounts[asset.location] = (locationCounts[asset.location] || 0) + 1\n        }\n      })\n    }\n\n    const totalValue =\n      valueStats.data?.reduce((sum, asset) => {\n        return sum + (asset.purchase_value || 0)\n      }, 0) || 0\n\n    const qrCoverage =\n      totalAssets.count && qrCodeStats.data\n        ? Math.round((qrCodeStats.data.length / totalAssets.count) * 100)\n        : 0\n\n    const analytics = {\n      overview: {\n        totalAssets: totalAssets.count || 0,\n        activeAssets: activeAssets.count || 0,\n        assetsCreatedToday: assetsCreatedToday.count || 0,\n        assetsCreatedThisWeek: assetsCreatedThisWeek.count || 0,\n        assetsCreatedThisMonth: assetsCreatedThisMonth.count || 0,\n        totalValue: totalValue,\n        qrCoverage: qrCoverage,\n        lastUpdated: now.toISOString(),\n      },\n      categories: Object.entries(categoryCounts).map(([category, count]) => ({\n        category,\n        count,\n        percentage: totalAssets.count ? Math.round((count / totalAssets.count) * 100) : 0,\n      })),\n      status: Object.entries(statusCounts).map(([status, count]) => ({\n        status,\n        count,\n        percentage: totalAssets.count ? Math.round((count / totalAssets.count) * 100) : 0,\n      })),\n      locations: Object.entries(locationCounts).map(([location, count]) => ({\n        location,\n        count,\n        percentage: totalAssets.count ? Math.round((count / totalAssets.count) * 100) : 0,\n      })),\n      recentActivity: recentActivity.data || [],\n      userActivity: {\n        totalUsers: userActivity.data?.length || 0,\n        activeUsers: userActivity.data?.filter(u => u.last_sign_in_at).length || 0,\n        newUsersThisMonth:\n          userActivity.data?.filter(u => new Date(u.created_at) >= monthAgo).length || 0,\n      },\n      assets: allAssets.data || [],\n    }\n\n    let exportData: any\n    let contentType: string\n    let filename: string\n\n    switch (format.toLowerCase()) {\n      case 'csv':\n        exportData = convertToCSV(analytics, reportType)\n        contentType = 'text/csv'\n        filename = `assetpro-analytics-${reportType}-${now.toISOString().split('T')[0]}.csv`\n        break\n\n      case 'json':\n        exportData = JSON.stringify(analytics, null, 2)\n        contentType = 'application/json'\n        filename = `assetpro-analytics-${reportType}-${now.toISOString().split('T')[0]}.json`\n        break\n\n      case 'pdf':\n        const { default: jsPDF } = await import('jspdf')\n        const doc = new jsPDF()\n        doc.text('Asset Report', 10, 10)\n        let y = 20\n        data.forEach((asset: any, i: number) => {\n          doc.text(\n            `${i + 1}. ${asset.name} | ${asset.category} | ${asset.status} | $${asset.purchase_value} | ${asset.created_at}`,\n            10,\n            y\n          )\n          y += 10\n        })\n        const pdf = doc.output('arraybuffer')\n        return new NextResponse(Buffer.from(pdf), {\n          status: 200,\n          headers: {\n            'Content-Type': 'application/pdf',\n            'Content-Disposition': 'attachment; filename=asset-report.pdf',\n          },\n        })\n\n      case 'xlsx':\n        const ExcelJS = (await import('exceljs')).default\n        const workbook = new ExcelJS.Workbook()\n        const sheet = workbook.addWorksheet('Assets')\n        sheet.addRow(['Name', 'Category', 'Status', 'Value', 'Created At'])\n        data.forEach((asset: any) => {\n          sheet.addRow([\n            asset.name,\n            asset.category,\n            asset.status,\n            asset.purchase_value,\n            asset.created_at,\n          ])\n        })\n        const buffer = await workbook.xlsx.writeBuffer()\n        return new NextResponse(Buffer.from(buffer), {\n          status: 200,\n          headers: {\n            'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n            'Content-Disposition': 'attachment; filename=asset-report.xlsx',\n          },\n        })\n\n      default:\n        return NextResponse.json({ error: 'Unsupported format' }, { status: 400 })\n    }\n\n    return new NextResponse(exportData, {\n      headers: {\n        'Content-Type': contentType,\n        'Content-Disposition': `attachment; filename=\"${filename}\"`,\n      },\n    })\n  } catch (error) {\n    console.error('Analytics export error:', error)\n    return NextResponse.json({ error: 'Failed to export analytics data' }, { status: 500 })\n  }\n}\n\nfunction convertToCSV(data: any, reportType: string): string {\n  let csvContent = ''\n\n  switch (reportType) {\n    case 'overview':\n      csvContent = 'Metric,Value\\n'\n      csvContent += `Total Assets,${data.overview.totalAssets}\\n`\n      csvContent += `Active Assets,${data.overview.activeAssets}\\n`\n      csvContent += `Assets Created Today,${data.overview.assetsCreatedToday}\\n`\n      csvContent += `Assets Created This Week,${data.overview.assetsCreatedThisWeek}\\n`\n      csvContent += `Assets Created This Month,${data.overview.assetsCreatedThisMonth}\\n`\n      csvContent += `Total Value,${data.overview.totalValue}\\n`\n      csvContent += `QR Coverage,${data.overview.qrCoverage}%\\n`\n      break\n\n    case 'categories':\n      csvContent = 'Category,Count,Percentage\\n'\n      data.categories.forEach((cat: any) => {\n        csvContent += `${cat.category},${cat.count},${cat.percentage}%\\n`\n      })\n      break\n\n    case 'status':\n      csvContent = 'Status,Count,Percentage\\n'\n      data.status.forEach((status: any) => {\n        csvContent += `${status.status},${status.count},${status.percentage}%\\n`\n      })\n      break\n\n    case 'locations':\n      csvContent = 'Location,Count,Percentage\\n'\n      data.locations.forEach((loc: any) => {\n        csvContent += `${loc.location},${loc.count},${loc.percentage}%\\n`\n      })\n      break\n\n    case 'assets':\n      csvContent = 'ID,Name,Category,Status,Location,Purchase Value,Created At,Updated At\\n'\n      data.assets.forEach((asset: any) => {\n        csvContent += `${asset.id},${asset.name || ''},${asset.category || ''},${asset.status || ''},${asset.location || ''},${asset.purchase_value || ''},${asset.created_at || ''},${asset.updated_at || ''}\\n`\n      })\n      break\n\n    case 'activity':\n      csvContent = 'Asset Name,Status,Last Updated\\n'\n      data.recentActivity.forEach((activity: any) => {\n        csvContent += `${activity.name || ''},${activity.status || ''},${activity.updated_at || ''}\\n`\n      })\n      break\n\n    case 'users':\n      csvContent = 'Metric,Value\\n'\n      csvContent += `Total Users,${data.userActivity.totalUsers}\\n`\n      csvContent += `Active Users,${data.userActivity.activeUsers}\\n`\n      csvContent += `New Users This Month,${data.userActivity.newUsersThisMonth}\\n`\n      break\n\n    case 'all':\n      csvContent = 'Report Type,Data\\n'\n      csvContent += `Overview,${JSON.stringify(data.overview)}\\n`\n      csvContent += `Categories,${JSON.stringify(data.categories)}\\n`\n      csvContent += `Status,${JSON.stringify(data.status)}\\n`\n      csvContent += `Locations,${JSON.stringify(data.locations)}\\n`\n      csvContent += `User Activity,${JSON.stringify(data.userActivity)}\\n`\n      break\n\n    default:\n      csvContent = 'No data available for this report type\\n'\n  }\n\n  return csvContent\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\analytics\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\[assetId]\\assignments\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":23,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\n\nexport const runtime = 'nodejs'\n\nexport async function GET(request: Request, { params }: { params: { assetId: string } }) {\n  try {\n    const supabase = await createClient()\n    const assetId = params.assetId\n    // Fetch assignment history for the asset\n    const { data, error } = await supabase\n      .from('asset_assignments')\n      .select('*, assignee:assignee_id(full_name), assigned_by_profile:assigned_by(full_name)')\n      .eq('asset_id', assetId)\n      .order('checked_out_at', { ascending: false })\n    if (error) {\n      return NextResponse.json(\n        { error: 'Failed to fetch assignment history: ' + error.message },\n        { status: 500 }\n      )\n    }\n    return NextResponse.json({ success: true, assignments: data })\n  } catch (err) {\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\[assetId]\\attachments\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'uploadData' is assigned a value but never used.","line":52,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'params' is defined but never used.","line":78,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient as createClientServer } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\nimport { isAuthorized } from '@/lib/rbac/utils'\nimport { Permission } from '@/lib/rbac/types'\n\nexport const runtime = 'nodejs'\n\n// GET: List attachments for asset\nexport async function GET(req: Request, { params }: { params: { assetId: string } }) {\n  const supabase = await createClientServer()\n  const { assetId } = params\n  // Auth check\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser()\n  if (userError || !user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  // List attachments\n  const { data, error } = await supabase\n    .from('asset_attachments')\n    .select('*')\n    .eq('asset_id', assetId)\n    .order('uploaded_at', { ascending: false })\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ attachments: data })\n}\n\n// POST: Upload attachment\nexport async function POST(req: Request, { params }: { params: { assetId: string } }) {\n  const supabase = await createClientServer()\n  const { assetId } = params\n  // Auth check\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser()\n  if (userError || !user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  // RBAC permission check\n  const authorized = await isAuthorized(user.id, 'update:asset' as Permission)\n  if (!authorized) {\n    return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 })\n  }\n  // Parse multipart form\n  const formData = await req.formData()\n  const file = formData.get('file') as File | null\n  const description = formData.get('description') as string | null\n  if (!file) return NextResponse.json({ error: 'No file uploaded' }, { status: 400 })\n  // Upload to Supabase Storage\n  const ext = file.name.split('.').pop() || 'bin'\n  const fileName = `${crypto.randomUUID()}.${ext}`\n  const filePath = `${assetId}/${fileName}`\n  const { data: uploadData, error: uploadError } = await supabase.storage\n    .from('asset-attachments')\n    .upload(filePath, file, { contentType: file.type, upsert: false })\n  if (uploadError) return NextResponse.json({ error: uploadError.message }, { status: 500 })\n  // Get public URL\n  const { data: publicUrlData } = supabase.storage.from('asset-attachments').getPublicUrl(filePath)\n  const fileUrl = publicUrlData.publicUrl\n  // Save metadata\n  const { data: insertData, error: insertError } = await supabase\n    .from('asset_attachments')\n    .insert({\n      asset_id: assetId,\n      file_url: fileUrl,\n      file_name: file.name,\n      type: file.type,\n      size: file.size,\n      uploaded_by: user.id,\n      description: description || null,\n    })\n    .select()\n    .single()\n  if (insertError) return NextResponse.json({ error: insertError.message }, { status: 500 })\n  return NextResponse.json({ attachment: insertData })\n}\n\n// DELETE: Remove attachment\nexport async function DELETE(req: Request, { params }: { params: { assetId: string } }) {\n  const supabase = await createClientServer()\n  // Auth check\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser()\n  if (userError || !user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  // RBAC permission check\n  const authorized = await isAuthorized(user.id, 'update:asset' as Permission)\n  if (!authorized) {\n    return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 })\n  }\n  const body = await req.json()\n  const { id } = body\n  if (!id) return NextResponse.json({ error: 'Missing attachment id' }, { status: 400 })\n  // Get attachment\n  const { data: attachment, error: fetchError } = await supabase\n    .from('asset_attachments')\n    .select('*')\n    .eq('id', id)\n    .single()\n  if (fetchError || !attachment)\n    return NextResponse.json({ error: 'Attachment not found' }, { status: 404 })\n  // Remove from storage\n  const filePath = attachment.file_url.split('/asset-attachments/')[1]\n  if (filePath) {\n    await supabase.storage.from('asset-attachments').remove([filePath])\n  }\n  // Remove from DB\n  const { error: deleteError } = await supabase.from('asset_attachments').delete().eq('id', id)\n  if (deleteError) return NextResponse.json({ error: deleteError.message }, { status: 500 })\n  return NextResponse.json({ success: true })\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\[assetId]\\book-value\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":27,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\nimport { calculateBookValue } from '@/lib/asset-depreciation'\n\nexport const runtime = 'nodejs'\n\nexport async function GET(request: Request, { params }: { params: { assetId: string } }) {\n  try {\n    const supabase = await createClient()\n    const assetId = params.assetId\n    const { data: asset, error } = await supabase\n      .from('assets')\n      .select('*')\n      .eq('asset_id', assetId)\n      .single()\n    if (error || !asset) {\n      return NextResponse.json({ error: 'Asset not found' }, { status: 404 })\n    }\n    const bookValue = calculateBookValue({\n      purchase_value: Number(asset.purchase_value),\n      purchase_date: asset.purchase_date,\n      depreciation_method: asset.depreciation_method,\n      depreciation_period_years: asset.depreciation_period_years,\n      salvage_value: Number(asset.salvage_value) || 0,\n    })\n    return NextResponse.json({ success: true, bookValue })\n  } catch (err) {\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\[assetId]\\custom-fields\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\[assetId]\\location-history\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\[assetId]\\location\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'prevError' is assigned a value but never used.","line":40,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\n\nexport const runtime = 'nodejs'\n\n// GET: Get asset location\nexport async function GET(request: Request, { params }: { params: { assetId: string } }) {\n  const supabase = await createClient()\n  const assetId = params.assetId\n  const { data: asset, error } = await supabase\n    .from('assets')\n    .select('id, location_text, location_lat, location_lng, location_source, location_updated_at')\n    .eq('asset_id', assetId)\n    .single()\n  if (error || !asset) {\n    return NextResponse.json({ error: 'Asset not found' }, { status: 404 })\n  }\n  return NextResponse.json({ location: asset })\n}\n\n// PUT: Update asset location\nexport async function PUT(request: Request, { params }: { params: { assetId: string } }) {\n  const supabase = await createClient()\n  const assetId = params.assetId\n  // Auth check\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser()\n  if (userError || !user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  const body = await request.json()\n  const { location_text, location_lat, location_lng, location_source } = body\n  const { data: asset, error: fetchError } = await supabase\n    .from('assets')\n    .select('id')\n    .eq('asset_id', assetId)\n    .single()\n  if (fetchError || !asset) return NextResponse.json({ error: 'Asset not found' }, { status: 404 })\n  // Fetch current location before update\n  const { data: prevAsset, error: prevError } = await supabase\n    .from('assets')\n    .select('location_text, location_lat, location_lng')\n    .eq('id', asset.id)\n    .single()\n  const { error: updateError, data: updated } = await supabase\n    .from('assets')\n    .update({\n      location_text,\n      location_lat,\n      location_lng,\n      location_source,\n      location_updated_at: new Date().toISOString(),\n    })\n    .eq('id', asset.id)\n    .select('id, location_text, location_lat, location_lng, location_source, location_updated_at')\n    .single()\n  if (updateError) return NextResponse.json({ error: updateError.message }, { status: 500 })\n  // Log to location history\n  await supabase.from('asset_location_history').insert({\n    asset_id: asset.id,\n    location_text,\n    location_lat,\n    location_lng,\n    location_source,\n    updated_by: user.id,\n    updated_at: new Date().toISOString(),\n    prev_location_text: prevAsset?.location_text ?? null,\n    prev_location_lat: prevAsset?.location_lat ?? null,\n    prev_location_lng: prevAsset?.location_lng ?? null,\n  })\n  return NextResponse.json({ location: updated })\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\[assetId]\\maintenance\\history\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\[assetId]\\maintenance\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\[assetId]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\assign\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":49,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\nimport { isAuthorized } from '@/lib/rbac/utils'\nimport { Permission } from '@/lib/rbac/types'\n\nexport const runtime = 'nodejs'\n\nexport async function POST(request: Request) {\n  try {\n    const supabase = await createClient()\n    const { assetId, assigneeId, notes } = await request.json()\n    // Authenticate assigner\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n    if (userError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n    // RBAC permission check\n    const authorized = await isAuthorized(user.id, 'update:asset' as Permission)\n    if (!authorized) {\n      return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 })\n    }\n    // Update asset\n    const { error: updateError } = await supabase\n      .from('assets')\n      .update({\n        assignee_id: assigneeId,\n        checked_out_at: new Date().toISOString(),\n        status: 'checked_out',\n      })\n      .eq('id', assetId)\n    if (updateError) {\n      return NextResponse.json(\n        { error: 'Failed to assign asset: ' + updateError.message },\n        { status: 500 }\n      )\n    }\n    // Log assignment\n    await supabase.from('asset_assignments').insert({\n      asset_id: assetId,\n      assignee_id: assigneeId,\n      assigned_by: user.id,\n      checked_out_at: new Date().toISOString(),\n      notes: notes || null,\n    })\n    return NextResponse.json({ success: true })\n  } catch (err) {\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\bulk-fetch\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":23,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\n\nexport const runtime = 'nodejs'\n\nexport async function POST(request: Request) {\n  try {\n    const supabase = await createClient()\n    const body = await request.json()\n    const { asset_ids, field } = body\n    if (!asset_ids || !Array.isArray(asset_ids) || asset_ids.length === 0) {\n      return NextResponse.json([], { status: 200 })\n    }\n    let query = supabase.from('assets').select('*').in('id', asset_ids)\n    if (field) {\n      query = supabase.from('assets').select(`id,${field}`).in('id', asset_ids)\n    }\n    const { data, error } = await query\n    if (error) {\n      return NextResponse.json([], { status: 200 })\n    }\n    return NextResponse.json(data || [], { status: 200 })\n  } catch (err) {\n    return NextResponse.json([], { status: 200 })\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\bulk-restore\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":15,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":21,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\n\nexport const runtime = 'nodejs'\n\nexport async function POST(request: Request) {\n  try {\n    const supabase = await createClient()\n    const body = await request.json()\n    const { assets } = body\n    if (!assets || !Array.isArray(assets) || assets.length === 0) {\n      return NextResponse.json({ success: false, error: 'No assets to restore' }, { status: 400 })\n    }\n    // Remove id to avoid conflicts if using serial PK\n    const assetsToInsert = assets.map(({ id, ...rest }) => rest)\n    const { error } = await supabase.from('assets').insert(assetsToInsert)\n    if (error) {\n      return NextResponse.json({ success: false, error: error.message }, { status: 500 })\n    }\n    return NextResponse.json({ success: true, restored: assets.length })\n  } catch (err) {\n    return NextResponse.json({ success: false, error: 'Internal Server Error' }, { status: 500 })\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\bulk\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\checkin\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":56,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\nimport { isAuthorized } from '@/lib/rbac/utils'\nimport { Permission } from '@/lib/rbac/types'\n\nexport const runtime = 'nodejs'\n\nexport async function POST(request: Request) {\n  try {\n    const supabase = await createClient()\n    const { assetId } = await request.json()\n    // Authenticate user\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n    if (userError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n    // RBAC permission check\n    const authorized = await isAuthorized(user.id, 'update:asset' as Permission)\n    if (!authorized) {\n      return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 })\n    }\n    // Update asset (set assignee_id to null, checked_in_at, status)\n    const { error: updateError } = await supabase\n      .from('assets')\n      .update({\n        assignee_id: null,\n        checked_in_at: new Date().toISOString(),\n        status: 'available',\n      })\n      .eq('id', assetId)\n    if (updateError) {\n      return NextResponse.json(\n        { error: 'Failed to check in asset: ' + updateError.message },\n        { status: 500 }\n      )\n    }\n    // Update latest assignment record for this asset (set checked_in_at)\n    const { data: assignment, error: assignmentError } = await supabase\n      .from('asset_assignments')\n      .select('id')\n      .eq('asset_id', assetId)\n      .is('checked_in_at', null)\n      .order('checked_out_at', { ascending: false })\n      .limit(1)\n      .single()\n    if (!assignmentError && assignment) {\n      await supabase\n        .from('asset_assignments')\n        .update({ checked_in_at: new Date().toISOString() })\n        .eq('id', assignment.id)\n    }\n    return NextResponse.json({ success: true })\n  } catch (err) {\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\export\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used.","line":4,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":38,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\n\nexport async function GET(request: Request) {\n  try {\n    const supabase = await createClient()\n    // Authenticate user\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n    if (userError || !user) {\n      return new NextResponse('Unauthorized', { status: 401 })\n    }\n    // Fetch assets for this user\n    const { data: assets, error: assetsError } = await supabase\n      .from('assets')\n      .select('*')\n      .eq('created_by', user.id)\n    if (assetsError) {\n      return new NextResponse('Failed to fetch assets', { status: 500 })\n    }\n    // Convert to CSV\n    const fields = assets && assets.length > 0 ? Object.keys(assets[0]) : []\n    const csvRows = [\n      fields.join(','),\n      ...assets.map(asset => fields.map(f => JSON.stringify(asset[f] ?? '')).join(',')),\n    ]\n    const csv = csvRows.join('\\r\\n')\n    // Return as file\n    return new NextResponse(csv, {\n      status: 200,\n      headers: {\n        'Content-Type': 'text/csv',\n        'Content-Disposition': 'attachment; filename=\"assets-export.csv\"',\n      },\n    })\n  } catch (err) {\n    return new NextResponse('Internal Server Error', { status: 500 })\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\import\\history\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used.","line":4,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":25,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\n\nexport async function GET(request: Request) {\n  try {\n    const supabase = await createClient()\n    // Authenticate user\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n    if (userError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n    // Fetch import history\n    const { data: history, error } = await supabase\n      .from('asset_imports')\n      .select('id, file_name, success_count, error_count, created_at, undone')\n      .eq('user_id', user.id)\n      .order('created_at', { ascending: false })\n    if (error) {\n      return NextResponse.json({ error: error.message }, { status: 500 })\n    }\n    return NextResponse.json({ success: true, history })\n  } catch (err) {\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\import\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1165,1168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1165,1168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1197,1200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1197,1200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1388,1391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1388,1391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":1,"message":"'errorRows' is never reassigned. Use 'const' instead.","line":55,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":55,"endColumn":25,"fix":{"range":[2103,2128],"text":"const errorRows: any[] = []"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2118,2121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2118,2121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":1,"message":"'importedAssetIds' is never reassigned. Use 'const' instead.","line":56,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":56,"endColumn":35,"fix":{"range":[2133,2168],"text":"const importedAssetIds: string[] = []"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":97,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\nimport Papa from 'papaparse'\nimport * as XLSX from 'xlsx'\nimport { isAuthorized } from '@/lib/rbac/utils'\nimport { Permission } from '@/lib/rbac/types'\n\nexport const runtime = 'nodejs' // Ensure Node.js runtime for file parsing\n\nexport async function POST(request: Request) {\n  try {\n    const supabase = await createClient()\n    // Authenticate user\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n    if (userError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n    // RBAC permission check\n    const authorized = await isAuthorized(user.id, 'create:asset' as Permission)\n    if (!authorized) {\n      return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 })\n    }\n    // Parse multipart form data\n    const formData = await request.formData()\n    const file = formData.get('file') as File | null\n    if (!file) {\n      return NextResponse.json({ error: 'No file uploaded' }, { status: 400 })\n    }\n    const fileName = file.name || ''\n    let rows: any[] = []\n    let parseErrors: any[] = []\n    if (fileName.endsWith('.csv')) {\n      const text = await file.text()\n      const parsed = Papa.parse(text, { header: true, skipEmptyLines: true })\n      rows = parsed.data as any[]\n      parseErrors = parsed.errors\n    } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\n      const arrayBuffer = await file.arrayBuffer()\n      const workbook = XLSX.read(arrayBuffer, { type: 'array' })\n      const sheetName = workbook.SheetNames[0]\n      const worksheet = workbook.Sheets[sheetName]\n      rows = XLSX.utils.sheet_to_json(worksheet)\n    } else {\n      return NextResponse.json({ error: 'Unsupported file type' }, { status: 400 })\n    }\n    if (parseErrors && parseErrors.length > 0) {\n      return NextResponse.json({ error: 'CSV parse error', details: parseErrors }, { status: 400 })\n    }\n    // Insert/update assets\n    let successCount = 0\n    let errorCount = 0\n    let errorRows: any[] = []\n    let importedAssetIds: string[] = []\n    const REQUIRED_COLUMNS = ['asset_id', 'name']\n    for (const row of rows) {\n      // Validate required columns\n      const missing = REQUIRED_COLUMNS.filter(col => !row[col])\n      if (missing.length > 0) {\n        errorCount++\n        errorRows.push({ row, error: `Missing required fields: ${missing.join(', ')}` })\n        continue\n      }\n      // Optionally: validate data types (e.g., value is a number)\n      if (row.value && isNaN(Number(row.value))) {\n        errorCount++\n        errorRows.push({ row, error: 'Value must be a number' })\n        continue\n      }\n      const { error } = await supabase.from('assets').upsert(\n        {\n          ...row,\n          created_by: user.id,\n        },\n        { onConflict: 'asset_id' }\n      )\n      if (error) {\n        errorCount++\n        errorRows.push({ row, error: error.message })\n      } else {\n        successCount++\n        importedAssetIds.push(row.asset_id)\n      }\n    }\n    // Log import event\n    await supabase.from('asset_imports').insert({\n      user_id: user.id,\n      file_name: fileName,\n      success_count: successCount,\n      error_count: errorCount,\n      error_rows: errorRows,\n      asset_ids: importedAssetIds,\n    })\n    return NextResponse.json({ success: true, successCount, errorCount, errorRows })\n  } catch (err) {\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\import\\undo\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used.","line":6,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":44,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\n\nexport const runtime = 'nodejs'\n\nexport async function POST(request: Request) {\n  try {\n    const supabase = await createClient()\n    // Authenticate user\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n    if (userError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n    // Find the most recent import for this user\n    const { data: importLog, error: importError } = await supabase\n      .from('asset_imports')\n      .select('*')\n      .eq('user_id', user.id)\n      .order('created_at', { ascending: false })\n      .limit(1)\n      .single()\n    if (importError || !importLog) {\n      return NextResponse.json({ error: 'No import found to undo' }, { status: 404 })\n    }\n    const assetIds = importLog.asset_ids || []\n    if (!assetIds.length) {\n      return NextResponse.json({ error: 'No assets to delete in last import' }, { status: 400 })\n    }\n    // Delete assets\n    const { error: deleteError } = await supabase.from('assets').delete().in('asset_id', assetIds)\n    if (deleteError) {\n      return NextResponse.json({ error: deleteError.message }, { status: 500 })\n    }\n    // Optionally, mark the import as undone\n    await supabase.from('asset_imports').update({ undone: true }).eq('id', importLog.id)\n    return NextResponse.json({\n      success: true,\n      deletedCount: assetIds.length,\n      importId: importLog.id,\n    })\n  } catch (err) {\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\assets\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\audit-logs\\export\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\audit-logs\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\auth\\api-keys\\[keyId]\\usage\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\auth\\api-keys\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\auth\\callback\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\auth\\login\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\auth\\mfa\\backup-codes\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_request' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_request' is defined but never used.","line":41,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\nimport { mfaService } from '@/lib/services/mfa-service'\n\nexport async function GET(_request: NextRequest) {\n  try {\n    const supabase = await createClient()\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser()\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Get user's tenant ID\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('tenant_id')\n      .eq('id', user.id)\n      .single()\n\n    if (!profile?.tenant_id) {\n      return NextResponse.json({ error: 'User not associated with tenant' }, { status: 400 })\n    }\n\n    // Get MFA status which includes backup codes remaining\n    const status = await mfaService.getMfaStatus(profile.tenant_id, user.id)\n\n    return NextResponse.json({\n      backupCodesRemaining: status.backupCodesRemaining,\n      hasBackupCodes: status.backupCodesRemaining > 0,\n    })\n  } catch (error) {\n    console.error('Get backup codes error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n\nexport async function POST(_request: NextRequest) {\n  try {\n    const supabase = await createClient()\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser()\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Get user's tenant ID\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('tenant_id')\n      .eq('id', user.id)\n      .single()\n\n    if (!profile?.tenant_id) {\n      return NextResponse.json({ error: 'User not associated with tenant' }, { status: 400 })\n    }\n\n    const result = await mfaService.generateNewBackupCodes(profile.tenant_id, user.id)\n\n    if (!result.success) {\n      return NextResponse.json({ error: result.error }, { status: 400 })\n    }\n\n    return NextResponse.json({\n      success: true,\n      backupCodes: result.backupCodes,\n    })\n  } catch (error) {\n    console.error('Generate backup codes error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\auth\\mfa\\setup\\route.ts","messages":[{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":55,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":55,"endColumn":49}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\nimport { mfaService } from '@/lib/services/mfa-service'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const supabase = await createClient()\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser()\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const body = await request.json()\n    const { method_type, method_name, phone_number, email } = body\n\n    if (!method_type || !method_name) {\n      return NextResponse.json({ error: 'Method type and name are required' }, { status: 400 })\n    }\n\n    // Get user's tenant ID\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('tenant_id')\n      .eq('id', user.id)\n      .single()\n\n    if (!profile?.tenant_id) {\n      return NextResponse.json({ error: 'User not associated with tenant' }, { status: 400 })\n    }\n\n    let result\n\n    switch (method_type) {\n      case 'totp':\n        result = await mfaService.setupTOTP(\n          profile.tenant_id,\n          user.id,\n          method_name,\n          user.email || ''\n        )\n        break\n\n      case 'sms':\n        if (!phone_number) {\n          return NextResponse.json({ error: 'Phone number is required for SMS' }, { status: 400 })\n        }\n        result = await mfaService.setupSMS(profile.tenant_id, user.id, method_name, phone_number)\n        break\n\n      case 'email':\n        const emailAddress = email || user.email\n        if (!emailAddress) {\n          return NextResponse.json({ error: 'Email address is required' }, { status: 400 })\n        }\n        result = await mfaService.setupEmail(profile.tenant_id, user.id, method_name, emailAddress)\n        break\n\n      default:\n        return NextResponse.json({ error: 'Invalid method type' }, { status: 400 })\n    }\n\n    if (!result.success) {\n      return NextResponse.json({ error: result.error }, { status: 400 })\n    }\n\n    // Return setup data (secret is only returned during setup, not stored in method)\n    const response: {\n      success: boolean\n      method: unknown\n      qrCode?: string\n      secret?: string\n      backupCodes?: string[]\n    } = {\n      success: true,\n      method: result.method,\n    }\n\n    if (result.qrCode) {\n      response.qrCode = result.qrCode\n    }\n\n    if (result.secret) {\n      response.secret = result.secret\n    }\n\n    if (result.backupCodes) {\n      response.backupCodes = result.backupCodes\n    }\n\n    return NextResponse.json(response)\n  } catch (error) {\n    console.error('MFA setup error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\auth\\mfa\\status\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_request' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\nimport { mfaService } from '@/lib/services/mfa-service'\n\nexport async function GET(_request: NextRequest) {\n  try {\n    const supabase = await createClient()\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser()\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Get user's tenant ID\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('tenant_id')\n      .eq('id', user.id)\n      .single()\n\n    if (!profile?.tenant_id) {\n      return NextResponse.json({ error: 'User not associated with tenant' }, { status: 400 })\n    }\n\n    const status = await mfaService.getMfaStatus(profile.tenant_id, user.id)\n\n    return NextResponse.json(status)\n  } catch (error) {\n    console.error('MFA status error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    const supabase = await createClient()\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser()\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const { searchParams } = new URL(request.url)\n    const methodId = searchParams.get('method_id')\n\n    if (!methodId) {\n      return NextResponse.json({ error: 'Method ID is required' }, { status: 400 })\n    }\n\n    // Get user's tenant ID\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('tenant_id')\n      .eq('id', user.id)\n      .single()\n\n    if (!profile?.tenant_id) {\n      return NextResponse.json({ error: 'User not associated with tenant' }, { status: 400 })\n    }\n\n    const result = await mfaService.disableMfaMethod(profile.tenant_id, user.id, methodId)\n\n    if (!result.success) {\n      return NextResponse.json({ error: result.error }, { status: 400 })\n    }\n\n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('MFA disable error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\auth\\mfa\\verify\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\auth\\sessions\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\auth\\sessions\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\auth\\set-session\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\auth\\sso\\callback\\[providerId]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\auth\\sso\\initiate\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\categories\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\custom-fields\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_req' is defined but never used.","line":20,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\nimport { isAuthorized } from '@/lib/rbac/utils'\nimport { Permission } from '@/lib/rbac/types'\n\n// Helper to get tenant_id from user profile\nasync function getTenantId(\n  supabase: ReturnType<typeof createClient>,\n  userId: string\n): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('profiles')\n    .select('tenant_id')\n    .eq('id', userId)\n    .single()\n  if (error || !data) return null\n  return data.tenant_id\n}\n\nexport async function GET(_req: NextRequest) {\n  const supabase = await createClient()\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser()\n  if (userError || !user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  const tenant_id = await getTenantId(supabase, user.id)\n  if (!tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 403 })\n  const { data, error } = await supabase\n    .from('asset_field_definitions')\n    .select('*')\n    .eq('tenant_id', tenant_id)\n    .order('created_at', { ascending: false })\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ data })\n}\n\nexport async function POST(req: NextRequest) {\n  const supabase = await createClient()\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser()\n  if (userError || !user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  // RBAC permission check\n  const authorized = await isAuthorized(user.id, 'manage:settings' as Permission)\n  if (!authorized) {\n    return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 })\n  }\n  const tenant_id = await getTenantId(supabase, user.id)\n  if (!tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 403 })\n  const { name, label, type, options, required, validation } = await req.json()\n  const { data, error } = await supabase\n    .from('asset_field_definitions')\n    .insert({ tenant_id, name, label, type, options, required, validation })\n    .select()\n    .single()\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ data })\n}\n\nexport async function PUT(req: NextRequest) {\n  const supabase = await createClient()\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser()\n  if (userError || !user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  // RBAC permission check\n  const authorized = await isAuthorized(user.id, 'manage:settings' as Permission)\n  if (!authorized) {\n    return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 })\n  }\n  const tenant_id = await getTenantId(supabase, user.id)\n  if (!tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 403 })\n  const { id, name, label, type, options, required, validation } = await req.json()\n  const { data, error } = await supabase\n    .from('asset_field_definitions')\n    .update({\n      name,\n      label,\n      type,\n      options,\n      required,\n      validation,\n      updated_at: new Date().toISOString(),\n    })\n    .eq('id', id)\n    .eq('tenant_id', tenant_id)\n    .select()\n    .single()\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ data })\n}\n\nexport async function DELETE(req: NextRequest) {\n  const supabase = await createClient()\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser()\n  if (userError || !user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  // RBAC permission check\n  const authorized = await isAuthorized(user.id, 'manage:settings' as Permission)\n  if (!authorized) {\n    return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 })\n  }\n  const tenant_id = await getTenantId(supabase, user.id)\n  if (!tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 403 })\n  const { id } = await req.json()\n  const { error } = await supabase\n    .from('asset_field_definitions')\n    .delete()\n    .eq('id', id)\n    .eq('tenant_id', tenant_id)\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ success: true })\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\custom-reports\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\custom-reports\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_req' is defined but never used.","line":4,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\nexport async function GET(_req: NextRequest) {\n  const supabase = await createClient()\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n\n  const { data, error } = await supabase\n    .from('custom_reports')\n    .select('*')\n    .eq('user_id', user.id)\n    .order('created_at', { ascending: false })\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ reports: data })\n}\n\nexport async function POST(req: NextRequest) {\n  const supabase = await createClient()\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n\n  const body = await req.json()\n  const { name, config } = body\n  if (!name || !config) return NextResponse.json({ error: 'Missing fields' }, { status: 400 })\n\n  const { data, error } = await supabase\n    .from('custom_reports')\n    .insert({\n      user_id: user.id,\n      name,\n      config,\n    })\n    .select('*')\n    .single()\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ report: data })\n}\n\nexport async function PUT(req: NextRequest) {\n  const supabase = await createClient()\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser()\n  if (userError || !user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  const { id, name, config } = await req.json()\n  const { data, error } = await supabase\n    .from('custom_reports')\n    .update({ name, config, updated_at: new Date().toISOString() })\n    .eq('id', id)\n    .eq('user_id', user.id)\n    .select()\n    .single()\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ data })\n}\n\nexport async function DELETE(req: NextRequest) {\n  const supabase = await createClient()\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser()\n  if (userError || !user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  const { id } = await req.json()\n  const { error } = await supabase\n    .from('custom_reports')\n    .delete()\n    .eq('id', id)\n    .eq('user_id', user.id)\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ success: true })\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\docs\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\external\\analytics\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\external\\assets\\[assetId]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\external\\assets\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\external\\docs\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\external\\users\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\gdpr\\delete-user-data\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\gdpr\\export-user-data\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_request' is defined but never used.","line":4,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\nexport async function GET(_request: NextRequest) {\n  const supabase = await createClient()\n  // Get current user\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n\n  // Fetch user profile\n  const { data: profile } = await supabase.from('profiles').select('*').eq('id', user.id).single()\n  // Fetch assets created by user\n  const { data: assets } = await supabase.from('assets').select('*').eq('created_by', user.id)\n  // Fetch asset history\n  const { data: assetHistory } = await supabase\n    .from('asset_history')\n    .select('*')\n    .eq('performed_by', user.id)\n  // Fetch audit logs\n  const { data: auditLogs } = await supabase.from('audit_logs').select('*').eq('user_id', user.id)\n\n  const exportData = {\n    profile,\n    assets,\n    assetHistory,\n    auditLogs,\n  }\n\n  const json = JSON.stringify(exportData, null, 2)\n  return new NextResponse(json, {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json',\n      'Content-Disposition': 'attachment; filename=\"user-data.json\"',\n    },\n  })\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\geofence-rules\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\geofence-rules\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_req' is defined but never used.","line":4,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\nexport async function GET(_req: NextRequest) {\n  const supabase = await createClient()\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n\n  // Get tenant_id from user profile\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('tenant_id')\n    .eq('id', user.id)\n    .single()\n  if (!profile?.tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 400 })\n\n  const { data, error } = await supabase\n    .from('geofence_rules')\n    .select('*')\n    .eq('tenant_id', profile.tenant_id)\n    .order('created_at', { ascending: false })\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ rules: data })\n}\n\nexport async function POST(req: NextRequest) {\n  const supabase = await createClient()\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n\n  // Get tenant_id from user profile\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('tenant_id')\n    .eq('id', user.id)\n    .single()\n  if (!profile?.tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 400 })\n\n  const body = await req.json()\n  const {\n    asset_id,\n    category,\n    geofence_id,\n    trigger_event,\n    min_duration_minutes,\n    notify_email,\n    notify_in_app,\n    escalation_level,\n    is_active,\n  } = body\n  if (!trigger_event || !geofence_id)\n    return NextResponse.json({ error: 'Missing required fields' }, { status: 400 })\n\n  const { data, error } = await supabase\n    .from('geofence_rules')\n    .insert({\n      tenant_id: profile.tenant_id,\n      asset_id,\n      category,\n      geofence_id,\n      trigger_event,\n      min_duration_minutes,\n      notify_email,\n      notify_in_app,\n      escalation_level,\n      is_active: is_active !== false,\n    })\n    .select('*')\n    .single()\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ rule: data })\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\geofence\\check\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\geofence\\zones\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\integrations\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\integrations\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_request' is defined but never used.","line":32,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\nexport async function POST(request: Request) {\n  const supabase = await createClient()\n  const { type, webhook_url } = await request.json()\n  if (!type || !webhook_url || !['slack', 'teams', 'custom'].includes(type)) {\n    return NextResponse.json({ error: 'Missing or invalid type/webhook_url' }, { status: 400 })\n  }\n  // Get current user and tenant\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('tenant_id')\n    .eq('id', user.id)\n    .single()\n  if (!profile?.tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 400 })\n  // Insert integration\n  const { error } = await supabase.from('integrations').insert({\n    tenant_id: profile.tenant_id,\n    type,\n    webhook_url,\n    status: 'active',\n  })\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ success: true })\n}\n\nexport async function GET(_request: Request) {\n  const supabase = await createClient()\n  // Get current user and tenant\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('tenant_id')\n    .eq('id', user.id)\n    .single()\n  if (!profile?.tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 400 })\n  // List integrations\n  const { data, error } = await supabase\n    .from('integrations')\n    .select('*')\n    .eq('tenant_id', profile.tenant_id)\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ integrations: data })\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\lifecycle-rules\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[504,507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[504,507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\nexport async function GET() {\n  const supabase = await createClient()\n  const { data, error } = await supabase\n    .from('asset_lifecycle_rules')\n    .select('*, asset:asset_id(name)')\n    .order('created_at', { ascending: false })\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  // Add asset_name for convenience\n  const withAssetName = (data || []).map((r: any) => ({ ...r, asset_name: r.asset?.name }))\n  return NextResponse.json({ data: withAssetName })\n}\n\nexport async function POST(req: NextRequest) {\n  const supabase = await createClient()\n  const { asset_id, type, trigger_field, interval, trigger_date, status } = await req.json()\n  const { data, error } = await supabase\n    .from('asset_lifecycle_rules')\n    .insert({ asset_id: asset_id || null, type, trigger_field, interval, trigger_date, status })\n    .select()\n    .single()\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ data })\n}\n\nexport async function PUT(req: NextRequest) {\n  const supabase = await createClient()\n  const { id, asset_id, type, trigger_field, interval, trigger_date, status } = await req.json()\n  const { data, error } = await supabase\n    .from('asset_lifecycle_rules')\n    .update({\n      asset_id: asset_id || null,\n      type,\n      trigger_field,\n      interval,\n      trigger_date,\n      status,\n      updated_at: new Date().toISOString(),\n    })\n    .eq('id', id)\n    .select()\n    .single()\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ data })\n}\n\nexport async function DELETE(req: NextRequest) {\n  const supabase = await createClient()\n  const { id } = await req.json()\n  const { error } = await supabase.from('asset_lifecycle_rules').delete().eq('id', id)\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ success: true })\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\ml\\predict-maintenance\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\notifications\\send\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\notifications\\token\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\qr-templates\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\qr-templates\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'req' is defined but never used.","line":4,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\nexport async function GET(req: NextRequest) {\n  const supabase = await createClient()\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n\n  // Get tenant_id from user profile\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('tenant_id')\n    .eq('id', user.id)\n    .single()\n  if (!profile?.tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 400 })\n\n  const { data, error } = await supabase\n    .from('qr_templates')\n    .select('*')\n    .eq('tenant_id', profile.tenant_id)\n    .order('created_at', { ascending: false })\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ templates: data })\n}\n\nexport async function POST(req: NextRequest) {\n  const supabase = await createClient()\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n\n  // Get tenant_id from user profile\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('tenant_id')\n    .eq('id', user.id)\n    .single()\n  if (!profile?.tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 400 })\n\n  const body = await req.json()\n  const { name, config, is_default } = body\n  if (!name || !config) return NextResponse.json({ error: 'Missing fields' }, { status: 400 })\n\n  const { data, error } = await supabase\n    .from('qr_templates')\n    .insert({\n      tenant_id: profile.tenant_id,\n      name,\n      config,\n      is_default: !!is_default,\n    })\n    .select('*')\n    .single()\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ template: data })\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\redis\\test\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3035,3038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3035,3038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result' is assigned a value but never used.","line":228,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":228,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Redis Test API Route\n * Tests Redis connectivity and basic operations\n */\n\nimport { NextResponse } from 'next/server'\nimport { enhancedRedisService } from '@/lib/services/enhanced-redis-service'\nimport { hasRedis } from '@/lib/config/redis'\n\nexport const runtime = 'nodejs'\n\nexport async function GET() {\n  try {\n    // Check if Redis is configured\n    if (!hasRedis) {\n      return NextResponse.json({\n        status: 'disabled',\n        message:\n          'Redis is not configured. Set UPSTASH_REDIS_REST_URL and UPSTASH_REDIS_REST_TOKEN environment variables.',\n        timestamp: new Date().toISOString(),\n      })\n    }\n\n    // Perform health check\n    const healthCheck = await enhancedRedisService.healthCheck()\n\n    if (healthCheck.status !== 'healthy') {\n      return NextResponse.json(\n        {\n          status: 'error',\n          message: 'Redis health check failed',\n          details: healthCheck,\n          timestamp: new Date().toISOString(),\n        },\n        { status: 503 }\n      )\n    }\n\n    // Test basic operations\n    const testKey = `test:${Date.now()}`\n    const testValue = { message: 'Redis test successful', timestamp: new Date().toISOString() }\n\n    // Test cache operation\n    const cacheResult = await enhancedRedisService.cache(\n      testKey,\n      async () => testValue,\n      60 // 1 minute TTL\n    )\n\n    // Test counter operation\n    const counterKey = `counter:test:${Date.now()}`\n    const counterValue = await enhancedRedisService.incrementCounter(counterKey, 1, 60)\n\n    // Test rate limiting\n    const rateLimitResult = await enhancedRedisService.checkRateLimit(\n      `test:${Date.now()}`,\n      10, // 10 requests\n      60 // per minute\n    )\n\n    return NextResponse.json({\n      status: 'success',\n      message: 'Redis is working correctly',\n      tests: {\n        healthCheck,\n        cache: {\n          key: testKey,\n          value: cacheResult,\n          success: JSON.stringify(cacheResult) === JSON.stringify(testValue),\n        },\n        counter: {\n          key: counterKey,\n          value: counterValue,\n          success: counterValue === 1,\n        },\n        rateLimit: {\n          allowed: rateLimitResult.allowed,\n          remaining: rateLimitResult.remaining,\n          success: rateLimitResult.allowed === true,\n        },\n      },\n      timestamp: new Date().toISOString(),\n    })\n  } catch (error) {\n    console.error('Redis test failed:', error)\n\n    return NextResponse.json(\n      {\n        status: 'error',\n        message: 'Redis test failed',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    const { operation, key, value, ttl } = body\n\n    if (!hasRedis) {\n      return NextResponse.json(\n        {\n          status: 'disabled',\n          message: 'Redis is not configured',\n        },\n        { status: 503 }\n      )\n    }\n\n    let result: any\n\n    switch (operation) {\n      case 'set':\n        if (!key || value === undefined) {\n          return NextResponse.json(\n            {\n              status: 'error',\n              message: 'Key and value are required for set operation',\n            },\n            { status: 400 }\n          )\n        }\n        result = await enhancedRedisService.cache(key, async () => value, ttl || 300)\n        break\n\n      case 'get':\n        if (!key) {\n          return NextResponse.json(\n            {\n              status: 'error',\n              message: 'Key is required for get operation',\n            },\n            { status: 400 }\n          )\n        }\n        result = await enhancedRedisService.cache(key, async () => null, 0)\n        break\n\n      case 'increment':\n        if (!key) {\n          return NextResponse.json(\n            {\n              status: 'error',\n              message: 'Key is required for increment operation',\n            },\n            { status: 400 }\n          )\n        }\n        result = await enhancedRedisService.incrementCounter(key, value || 1, ttl)\n        break\n\n      case 'rateLimit':\n        if (!key) {\n          return NextResponse.json(\n            {\n              status: 'error',\n              message: 'Key is required for rate limit operation',\n            },\n            { status: 400 }\n          )\n        }\n        result = await enhancedRedisService.checkRateLimit(key, value || 60, ttl || 60)\n        break\n\n      default:\n        return NextResponse.json(\n          {\n            status: 'error',\n            message: 'Invalid operation. Supported operations: set, get, increment, rateLimit',\n          },\n          { status: 400 }\n        )\n    }\n\n    return NextResponse.json({\n      status: 'success',\n      operation,\n      key,\n      result,\n      timestamp: new Date().toISOString(),\n    })\n  } catch (error) {\n    console.error('Redis operation failed:', error)\n\n    return NextResponse.json(\n      {\n        status: 'error',\n        message: 'Redis operation failed',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const key = searchParams.get('key')\n\n    if (!hasRedis) {\n      return NextResponse.json(\n        {\n          status: 'disabled',\n          message: 'Redis is not configured',\n        },\n        { status: 503 }\n      )\n    }\n\n    if (!key) {\n      return NextResponse.json(\n        {\n          status: 'error',\n          message: 'Key parameter is required',\n        },\n        { status: 400 }\n      )\n    }\n\n    // For testing purposes, we'll use a simple approach\n    // In production, you might want to implement a proper delete method\n    const result = await enhancedRedisService.cache(\n      key,\n      async () => null,\n      1 // Very short TTL to effectively delete\n    )\n\n    return NextResponse.json({\n      status: 'success',\n      message: 'Key deleted (expired)',\n      key,\n      timestamp: new Date().toISOString(),\n    })\n  } catch (error) {\n    console.error('Redis delete failed:', error)\n\n    return NextResponse.json(\n      {\n        status: 'error',\n        message: 'Redis delete failed',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\roles\\[id]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1028,1031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1028,1031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1736,1739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1736,1739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2493,2496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2493,2496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// ROLE BY ID API ROUTE\n// =====================================================\n// API endpoints for individual role management\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { RoleService } from '@/lib/services/role-service'\nimport { withPermissions, PERMISSIONS } from '@/lib/middleware/role-validation'\n\nconst roleService = new RoleService()\n\n// GET /api/roles/[id] - Get role by ID\nexport async function GET(request: NextRequest, { params }: { params: { id: string } }) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const tenantId = searchParams.get('tenant_id')\n\n    if (!tenantId) {\n      return NextResponse.json({ error: 'Tenant ID is required' }, { status: 400 })\n    }\n\n    const role = await roleService.getRole(tenantId, params.id)\n\n    if (!role) {\n      return NextResponse.json({ error: 'Role not found' }, { status: 404 })\n    }\n\n    return NextResponse.json({\n      success: true,\n      role,\n    })\n  } catch (error: any) {\n    console.error('Error getting role:', error)\n    return NextResponse.json({ error: error.message || 'Failed to get role' }, { status: 500 })\n  }\n}\n\n// PUT /api/roles/[id] - Update role\nexport const PUT = withPermissions([PERMISSIONS.ROLES.UPDATE])(async (\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) => {\n  try {\n    const body = await request.json()\n    const { tenant_id, ...updates } = body\n\n    if (!tenant_id) {\n      return NextResponse.json({ error: 'Tenant ID is required' }, { status: 400 })\n    }\n\n    const role = await roleService.updateRole(tenant_id, params.id, updates)\n\n    return NextResponse.json({\n      success: true,\n      role,\n    })\n  } catch (error: any) {\n    console.error('Error updating role:', error)\n    return NextResponse.json({ error: error.message || 'Failed to update role' }, { status: 500 })\n  }\n})\n\n// DELETE /api/roles/[id] - Delete role\nexport const DELETE = withPermissions([PERMISSIONS.ROLES.DELETE])(async (\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) => {\n  try {\n    const { searchParams } = new URL(request.url)\n    const tenantId = searchParams.get('tenant_id')\n\n    if (!tenantId) {\n      return NextResponse.json({ error: 'Tenant ID is required' }, { status: 400 })\n    }\n\n    const success = await roleService.deleteRole(tenantId, params.id)\n\n    return NextResponse.json({\n      success,\n      message: 'Role deleted successfully',\n    })\n  } catch (error: any) {\n    console.error('Error deleting role:', error)\n    return NextResponse.json({ error: error.message || 'Failed to delete role' }, { status: 500 })\n  }\n})\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\roles\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1313,1316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1313,1316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1888,1891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1888,1891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2198,2201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2198,2201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// ROLES API ROUTE\n// =====================================================\n// API endpoints for role management\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { RoleService } from '@/lib/services/role-service'\nimport { withPermissions, PERMISSIONS } from '@/lib/middleware/role-validation'\nimport { createClient } from '@/lib/supabase/server'\n\nconst roleService = new RoleService()\n\n// GET /api/roles - Get all roles for tenant\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const tenantId = searchParams.get('tenant_id')\n    const includeInactive = searchParams.get('include_inactive') === 'true'\n\n    if (!tenantId) {\n      return NextResponse.json({ error: 'Tenant ID is required' }, { status: 400 })\n    }\n\n    // Verify user has permission to read roles\n    const supabase = await createClient()\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser()\n\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const roles = await roleService.getRoles(tenantId, includeInactive)\n\n    return NextResponse.json({\n      success: true,\n      roles,\n    })\n  } catch (error: any) {\n    console.error('Error getting roles:', error)\n    return NextResponse.json({ error: error.message || 'Failed to get roles' }, { status: 500 })\n  }\n}\n\n// POST /api/roles - Create new role\nexport const POST = withPermissions([PERMISSIONS.ROLES.CREATE])(async (request: NextRequest) => {\n  try {\n    const body = await request.json()\n    const { tenant_id, ...roleData } = body\n\n    if (!tenant_id) {\n      return NextResponse.json({ error: 'Tenant ID is required' }, { status: 400 })\n    }\n\n    // Get user context from middleware\n    const userContext = (request as any).userContext\n    if (!userContext) {\n      return NextResponse.json({ error: 'User context not found' }, { status: 401 })\n    }\n\n    const role = await roleService.createRole(tenant_id, roleData, userContext.userId)\n\n    return NextResponse.json({\n      success: true,\n      role,\n    })\n  } catch (error: any) {\n    console.error('Error creating role:', error)\n    return NextResponse.json({ error: error.message || 'Failed to create role' }, { status: 500 })\n  }\n})\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\sentry-example-api\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\settings\\api-keys\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\settings\\api-keys\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1958,1961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1958,1961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { storeApiKey } from '@/lib/api-key'\nimport { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\nimport { isAuthorized } from '@/lib/rbac/utils'\nimport { Permission } from '@/lib/rbac/types'\n\nexport async function GET() {\n  const supabase = await createClient()\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  // Get tenant_id from user profile\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('tenant_id')\n    .eq('id', user.id)\n    .single()\n  if (!profile?.tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 400 })\n  const { data, error } = await supabase\n    .from('api_keys')\n    .select('id, name, created_at, revoked, user_id')\n    .eq('tenant_id', profile.tenant_id)\n    .order('created_at', { ascending: false })\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ keys: data })\n}\n\nexport async function POST(request: Request) {\n  const supabase = await createClient()\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  // RBAC permission check\n  const authorized = await isAuthorized(user.id, 'manage:settings' as Permission)\n  if (!authorized) {\n    return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 })\n  }\n  const { name } = await request.json()\n  // Get tenant_id from user profile\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('tenant_id')\n    .eq('id', user.id)\n    .single()\n  if (!profile?.tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 400 })\n  try {\n    const { apiKey } = await storeApiKey({ tenant_id: profile.tenant_id, user_id: user.id, name })\n    return NextResponse.json({ apiKey })\n  } catch (error: any) {\n    return NextResponse.json(\n      { error: error.message || 'Failed to create API key' },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\support\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\teams\\[teamId]\\analytics\\assets\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\teams\\[teamId]\\analytics\\summary\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\teams\\[teamId]\\invitations\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\teams\\[teamId]\\members\\[userId]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\teams\\[teamId]\\members\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\teams\\invitations\\[invitationId]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\teams\\invitations\\accept\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\teams\\invite\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2215,2218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2215,2218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\nimport { randomBytes } from 'crypto'\nimport { isAuthorized } from '@/lib/rbac/utils'\nimport { logAuditEvent } from '@/lib/audit-log'\nimport { sendInvitationEmail } from '@/lib/notifications'\n\nexport async function POST(request: Request) {\n  const supabase = await createClient()\n  const { email, role = 'member', team_id } = await request.json()\n  if (!email || !team_id) {\n    return NextResponse.json({ error: 'Missing email or team_id' }, { status: 400 })\n  }\n  // Get the inviter (current user)\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  // Check inviter's role in the team\n  const { data: member } = await supabase\n    .from('team_members')\n    .select('role')\n    .eq('team_id', team_id)\n    .eq('user_id', user.id)\n    .single()\n  if (!member || !(await isAuthorized(user.id, 'manage:users'))) {\n    return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 })\n  }\n  // Generate a unique token\n  const token = randomBytes(32).toString('hex')\n  // Insert invitation\n  const { error, data: invitation } = await supabase\n    .from('team_invitations')\n    .insert({\n      team_id,\n      email,\n      role,\n      token,\n      invited_by: user.id,\n      status: 'pending',\n    })\n    .select()\n    .single()\n  if (error) {\n    await logAuditEvent({\n      user_id: user.id,\n      action: 'invite_failed',\n      entity: 'team_invitation',\n      entity_id: undefined,\n      details: { email, team_id, error: error.message },\n      tenant_id: undefined,\n    })\n    return NextResponse.json({ error: error.message }, { status: 500 })\n  }\n  // Send invitation email\n  try {\n    // Get team name for email\n    const { data: team } = await supabase.from('teams').select('name').eq('id', team_id).single()\n    const inviteLink = `${process.env.APP_URL || 'http://localhost:3000'}/accept-invite?token=${token}`\n    await sendInvitationEmail({\n      to: email,\n      inviteLink,\n      teamName: team?.name || 'your team',\n      inviterName: user.email || 'A team member',\n    })\n  } catch (emailError: any) {\n    await logAuditEvent({\n      user_id: user.id,\n      action: 'invite_email_failed',\n      entity: 'team_invitation',\n      entity_id: invitation?.id,\n      details: { email, team_id, error: emailError?.message },\n      tenant_id: undefined,\n    })\n    return NextResponse.json({ error: 'Failed to send invitation email' }, { status: 500 })\n  }\n  // Audit log: invitation sent\n  await logAuditEvent({\n    user_id: user.id,\n    action: 'invite_sent',\n    entity: 'team_invitation',\n    entity_id: invitation.id,\n    details: { email, team_id, role },\n    tenant_id: undefined,\n  })\n  return NextResponse.json({ success: true, token })\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\tenant-sso-configs\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used.","line":4,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\nexport async function GET(request: NextRequest) {\n  const supabase = await createClient()\n  // Get current user and tenant\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('tenant_id')\n    .eq('id', user.id)\n    .single()\n  if (!profile?.tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 400 })\n  // List SSO configs for tenant\n  const { data, error } = await supabase\n    .from('tenant_sso_configs')\n    .select('*')\n    .eq('tenant_id', profile.tenant_id)\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ configs: data })\n}\n\nexport async function POST(request: NextRequest) {\n  const supabase = await createClient()\n  const { provider, metadata, client_id, client_secret, enabled } = await request.json()\n  // Get current user and tenant\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('tenant_id')\n    .eq('id', user.id)\n    .single()\n  if (!profile?.tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 400 })\n  // Upsert SSO config for tenant/provider\n  const { error } = await supabase.from('tenant_sso_configs').upsert(\n    {\n      tenant_id: profile.tenant_id,\n      provider,\n      metadata,\n      client_id,\n      client_secret,\n      enabled,\n      updated_at: new Date().toISOString(),\n    },\n    { onConflict: 'tenant_id,provider' }\n  )\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ success: true })\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\test-auth\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\webhooks\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\api\\webhooks\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used.","line":33,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\nexport async function POST(request: Request) {\n  const supabase = await createClient()\n  const { url, events, secret } = await request.json()\n  if (!url || !events || !Array.isArray(events) || events.length === 0) {\n    return NextResponse.json({ error: 'Missing url or events' }, { status: 400 })\n  }\n  // Get current user and tenant\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('tenant_id')\n    .eq('id', user.id)\n    .single()\n  if (!profile?.tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 400 })\n  // Insert webhook\n  const { error } = await supabase.from('webhooks').insert({\n    tenant_id: profile.tenant_id,\n    url,\n    events,\n    secret,\n    status: 'active',\n  })\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ success: true })\n}\n\nexport async function GET(request: Request) {\n  const supabase = await createClient()\n  // Get current user and tenant\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('tenant_id')\n    .eq('id', user.id)\n    .single()\n  if (!profile?.tenant_id) return NextResponse.json({ error: 'No tenant' }, { status: 400 })\n  // List webhooks\n  const { data, error } = await supabase\n    .from('webhooks')\n    .select('*')\n    .eq('tenant_id', profile.tenant_id)\n  if (error) return NextResponse.json({ error: error.message }, { status: 500 })\n  return NextResponse.json({ webhooks: data })\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\asset-tracker-preview\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\asset-tracker-preview\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1398,1401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1398,1401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2017,2020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2017,2020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2166,2169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2166,2169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatDate' is assigned a value but never used.","line":182,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":182,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6596,6599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6596,6599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":249,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":249,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":281,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8254,8257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8254,8257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Progress } from '@/components/ui/progress'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport {\n  BarChart3,\n  QrCode,\n  Shield,\n  Users,\n  Package,\n  TrendingUp,\n  AlertTriangle,\n  Search,\n  Plus,\n  Scan,\n  Download,\n  Eye,\n  Edit,\n  Trash2,\n  Bell,\n  Settings,\n  MapPin,\n  DollarSign,\n  Activity,\n  CheckCircle,\n  Clock,\n  XCircle,\n  ArrowLeft,\n  Smartphone,\n  Laptop,\n  Printer,\n  Camera,\n} from 'lucide-react'\nimport Link from 'next/link'\nimport { useToast } from '@/hooks/use-toast'\nimport {\n  Dialog,\n  DialogContent,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog'\nimport { useRouter } from 'next/navigation'\n\nexport default function AssetTrackerPreview() {\n  const [activeTab, setActiveTab] = useState('dashboard')\n  const [searchTerm, setSearchTerm] = useState('')\n  const [selectedAsset, setSelectedAsset] = useState<string | null>(null)\n  const [deleteDialog, setDeleteDialog] = useState<{ open: boolean; asset: any | null }>({\n    open: false,\n    asset: null,\n  })\n  const { toast } = useToast()\n  const router = useRouter()\n\n  // Add state for bulk selection and dialogs\n  const [bulkSelected, setBulkSelected] = useState<string[]>([])\n  const [bulkUpdateDialog, setBulkUpdateDialog] = useState(false)\n  const [bulkUpdateStatus, setBulkUpdateStatus] = useState('')\n  const [bulkUpdateCategory, setBulkUpdateCategory] = useState('')\n  const [bulkUpdateLocation, setBulkUpdateLocation] = useState('')\n  const [bulkDeleteDialog, setBulkDeleteDialog] = useState(false)\n  const [undoBulkUpdateData, setUndoBulkUpdateData] = useState<any[]>([])\n  const [undoBulkUpdateIds, setUndoBulkUpdateIds] = useState<string[]>([])\n  const [undoBulkDeleteData, setUndoBulkDeleteData] = useState<any[]>([])\n  const [undoBulkDeleteIds, setUndoBulkDeleteIds] = useState<string[]>([])\n\n  // Mock data for preview\n  const mockUser = {\n    email: 'demo@assettracker.com',\n    full_name: 'Demo User',\n    role: 'admin',\n    avatar_url: null,\n  }\n\n  const mockAssets = [\n    {\n      id: '1',\n      asset_id: 'AT-001',\n      name: 'MacBook Pro 16\"',\n      category: 'it-equipment',\n      status: 'active',\n      location: 'Office A - Desk 12',\n      value: 2499.99,\n      assignee: { full_name: 'John Doe' },\n      created_at: '2024-01-15T10:00:00Z',\n      qr_code: 'generated',\n    },\n    {\n      id: '2',\n      asset_id: 'AT-002',\n      name: 'iPhone 14 Pro',\n      category: 'mobile-device',\n      status: 'active',\n      location: 'Office B - Mobile Pool',\n      value: 999.99,\n      assignee: { full_name: 'Jane Smith' },\n      created_at: '2024-01-20T14:30:00Z',\n      qr_code: 'generated',\n    },\n    {\n      id: '3',\n      asset_id: 'AT-003',\n      name: 'Dell Monitor 27\"',\n      category: 'it-equipment',\n      status: 'maintenance',\n      location: 'IT Storage',\n      value: 299.99,\n      assignee: null,\n      created_at: '2024-01-10T09:15:00Z',\n      qr_code: 'generated',\n    },\n    {\n      id: '4',\n      asset_id: 'AT-004',\n      name: 'Office Chair',\n      category: 'furniture',\n      status: 'active',\n      location: 'Office A - Desk 5',\n      value: 199.99,\n      assignee: { full_name: 'Mike Johnson' },\n      created_at: '2024-01-25T11:45:00Z',\n      qr_code: null,\n    },\n    {\n      id: '5',\n      asset_id: 'AT-005',\n      name: 'Canon Printer',\n      category: 'office-equipment',\n      status: 'retired',\n      location: 'Storage Room',\n      value: 149.99,\n      assignee: null,\n      created_at: '2024-01-05T16:20:00Z',\n      qr_code: 'generated',\n    },\n  ]\n\n  // Calculate analytics\n  const analytics = {\n    totalAssets: mockAssets.length,\n    activeAssets: mockAssets.filter(asset => asset.status === 'active').length,\n    maintenanceAssets: mockAssets.filter(asset => asset.status === 'maintenance').length,\n    retiredAssets: mockAssets.filter(asset => asset.status === 'retired').length,\n    totalValue: mockAssets.reduce((sum, asset) => sum + asset.value, 0),\n    utilizationRate: Math.round(\n      (mockAssets.filter(asset => asset.status === 'active').length / mockAssets.length) * 100\n    ),\n    maintenanceAlerts: mockAssets.filter(asset => asset.status === 'maintenance').length,\n    qrCoverage: Math.round(\n      (mockAssets.filter(asset => asset.qr_code).length / mockAssets.length) * 100\n    ),\n  }\n\n  const filteredAssets = mockAssets.filter(\n    asset =>\n      asset.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.asset_id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.category.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(value)\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString()\n  }\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'default'\n      case 'maintenance':\n        return 'destructive'\n      case 'retired':\n        return 'secondary'\n      default:\n        return 'outline'\n    }\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'active':\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />\n      case 'maintenance':\n        return <Clock className=\"h-4 w-4 text-orange-600\" />\n      case 'retired':\n        return <XCircle className=\"h-4 w-4 text-gray-600\" />\n      default:\n        return <Activity className=\"h-4 w-4 text-blue-600\" />\n    }\n  }\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'it-equipment':\n        return <Laptop className=\"h-4 w-4\" />\n      case 'mobile-device':\n        return <Smartphone className=\"h-4 w-4\" />\n      case 'office-equipment':\n        return <Printer className=\"h-4 w-4\" />\n      case 'furniture':\n        return <Package className=\"h-4 w-4\" />\n      default:\n        return <Package className=\"h-4 w-4\" />\n    }\n  }\n\n  const UserAvatar = () => (\n    <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white font-semibold text-sm\">\n      DU\n    </div>\n  )\n\n  const handleDelete = async (asset: any) => {\n    setDeleteDialog({ open: false, asset: null })\n    try {\n      const res = await fetch(`/api/assets/${asset.id}`, { method: 'DELETE' })\n      const data = await res.json()\n      if (!res.ok) {\n        toast({\n          title: 'Delete Failed',\n          description: data.error || 'Failed to delete asset',\n          variant: 'destructive',\n        })\n      } else {\n        toast({ title: 'Asset Deleted', description: `${asset.name} has been deleted.` })\n        // Remove from local state if using mock data\n        // setAssets((prev) => prev.filter((a) => a.id !== asset.id));\n      }\n    } catch (e) {\n      toast({\n        title: 'Delete Failed',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  // Bulk select handler\n  const handleBulkSelect = (assetId: string) => {\n    setBulkSelected(prev =>\n      prev.includes(assetId) ? prev.filter(id => id !== assetId) : [...prev, assetId]\n    )\n  }\n  const handleBulkSelectAll = () => {\n    if (bulkSelected.length === filteredAssets.length) setBulkSelected([])\n    else setBulkSelected(filteredAssets.map(a => a.id))\n  }\n  // Bulk update handler\n  const handleBulkUpdate = async () => {\n    try {\n      // Fetch previous asset data for undo\n      const res = await fetch('/api/assets/bulk-fetch', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ assetIds: bulkSelected }),\n      })\n      const prevData = await res.json()\n      setUndoBulkUpdateData(prevData.assets || [])\n      setUndoBulkUpdateIds(bulkSelected)\n      // Prepare update fields\n      const updateFields: any = {}\n      if (bulkUpdateStatus) updateFields.status = bulkUpdateStatus\n      if (bulkUpdateCategory) updateFields.category = bulkUpdateCategory\n      if (bulkUpdateLocation) updateFields.location = bulkUpdateLocation\n      // Update assets (mock: just show toast)\n      toast({\n        title: 'Assets updated',\n        description:\n          `${bulkSelected.length} assets updated` +\n          (Object.keys(updateFields).length ? ` (${Object.keys(updateFields).join(', ')})` : ''),\n        action: (\n          <Button variant=\"outline\" onClick={handleUndoBulkUpdate}>\n            Undo\n          </Button>\n        ),\n      })\n      setBulkUpdateDialog(false)\n      setBulkSelected([])\n      setBulkUpdateStatus('')\n      setBulkUpdateCategory('')\n      setBulkUpdateLocation('')\n      // In real app: refetch assets\n    } catch {\n      toast({ title: 'Error', description: 'Failed to update assets', variant: 'destructive' })\n    }\n  }\n  // Undo bulk update handler\n  const handleUndoBulkUpdate = async () => {\n    try {\n      await fetch('/api/assets/bulk-restore', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ assets: undoBulkUpdateData }),\n      })\n      toast({\n        title: 'Undo successful',\n        description: `${undoBulkUpdateIds.length} assets restored`,\n      })\n      setUndoBulkUpdateData([])\n      setUndoBulkUpdateIds([])\n      // In real app: refetch assets\n    } catch {\n      toast({ title: 'Error', description: 'Failed to undo update', variant: 'destructive' })\n    }\n  }\n  // Bulk delete handler\n  const handleBulkDelete = async () => {\n    try {\n      // Fetch previous asset data for undo\n      const res = await fetch('/api/assets/bulk-fetch', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ assetIds: bulkSelected }),\n      })\n      const prevData = await res.json()\n      setUndoBulkDeleteData(prevData.assets || [])\n      setUndoBulkDeleteIds(bulkSelected)\n      // Delete assets (mock: just show toast)\n      toast({\n        title: 'Assets deleted',\n        description: `${bulkSelected.length} assets deleted`,\n        action: (\n          <Button variant=\"outline\" onClick={handleUndoBulkDelete}>\n            Undo\n          </Button>\n        ),\n      })\n      setBulkDeleteDialog(false)\n      setBulkSelected([])\n      // In real app: refetch assets\n    } catch {\n      toast({ title: 'Error', description: 'Failed to delete assets', variant: 'destructive' })\n    }\n  }\n  // Undo bulk delete handler\n  const handleUndoBulkDelete = async () => {\n    try {\n      await fetch('/api/assets/bulk-restore', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ assets: undoBulkDeleteData }),\n      })\n      toast({\n        title: 'Undo successful',\n        description: `${undoBulkDeleteIds.length} assets restored`,\n      })\n      setUndoBulkDeleteData([])\n      setUndoBulkDeleteIds([])\n      // In real app: refetch assets\n    } catch {\n      toast({ title: 'Error', description: 'Failed to undo delete', variant: 'destructive' })\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200 px-6 py-4 sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button asChild variant=\"outline\" size=\"sm\">\n              <Link href=\"/login\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Login\n              </Link>\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <Package className=\"h-8 w-8 text-blue-600\" />\n              <h1 className=\"text-2xl font-bold text-gray-900\">AssetTracker Pro</h1>\n              <Badge variant=\"secondary\" className=\"ml-2\">\n                Preview Mode\n              </Badge>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Bell className=\"h-4 w-4 mr-2\" />\n              Notifications\n              <Badge\n                variant=\"destructive\"\n                className=\"ml-2 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\"\n              >\n                3\n              </Badge>\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Settings\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Download Code\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <UserAvatar />\n              <span className=\"text-sm font-medium\">{mockUser.full_name}</span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <aside className=\"w-64 bg-white border-r border-gray-200 min-h-screen sticky top-16\">\n          <nav className=\"p-4 space-y-2\">\n            <Button\n              variant={activeTab === 'dashboard' ? 'default' : 'ghost'}\n              className=\"w-full justify-start\"\n              onClick={() => setActiveTab('dashboard')}\n            >\n              <BarChart3 className=\"h-4 w-4 mr-2\" />\n              Dashboard\n            </Button>\n            <Button\n              variant={activeTab === 'assets' ? 'default' : 'ghost'}\n              className=\"w-full justify-start\"\n              onClick={() => setActiveTab('assets')}\n            >\n              <Package className=\"h-4 w-4 mr-2\" />\n              Asset Management\n            </Button>\n            <Button\n              variant={activeTab === 'qr' ? 'default' : 'ghost'}\n              className=\"w-full justify-start\"\n              onClick={() => setActiveTab('qr')}\n            >\n              <QrCode className=\"h-4 w-4 mr-2\" />\n              QR Code Tools\n            </Button>\n            <Button\n              variant={activeTab === 'team' ? 'default' : 'ghost'}\n              className=\"w-full justify-start\"\n              onClick={() => setActiveTab('team')}\n            >\n              <Users className=\"h-4 w-4 mr-2\" />\n              Team Collaboration\n            </Button>\n            <Button\n              variant={activeTab === 'security' ? 'default' : 'ghost'}\n              className=\"w-full justify-start\"\n              onClick={() => setActiveTab('security')}\n            >\n              <Shield className=\"h-4 w-4 mr-2\" />\n              Security\n            </Button>\n          </nav>\n\n          {/* Quick Stats in Sidebar */}\n          <div className=\"p-4 border-t\">\n            <h3 className=\"text-sm font-medium text-gray-700 mb-3\">Quick Stats</h3>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-600\">Total Assets</span>\n                <span className=\"font-semibold\">{analytics.totalAssets}</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-600\">Active</span>\n                <span className=\"font-semibold text-green-600\">{analytics.activeAssets}</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-600\">QR Coverage</span>\n                <span className=\"font-semibold text-blue-600\">{analytics.qrCoverage}%</span>\n              </div>\n            </div>\n          </div>\n        </aside>\n\n        {/* Main Content */}\n        <main className=\"flex-1 p-6 overflow-auto\">\n          {activeTab === 'dashboard' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h2 className=\"text-3xl font-bold text-gray-900\">Dashboard</h2>\n                  <p className=\"text-gray-600\">Welcome back, {mockUser.full_name}!</p>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\">\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Export Report\n                  </Button>\n                  <Button>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Asset\n                  </Button>\n                </div>\n              </div>\n\n              {/* Analytics Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <Card className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n                    <Package className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{analytics.totalAssets}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      <span className=\"text-green-600\">+2 this week</span>\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Value</CardTitle>\n                    <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{formatCurrency(analytics.totalValue)}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      <span className=\"text-blue-600\">Portfolio value</span>\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Utilization Rate</CardTitle>\n                    <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{analytics.utilizationRate}%</div>\n                    <Progress value={analytics.utilizationRate} className=\"mt-2\" />\n                  </CardContent>\n                </Card>\n\n                <Card className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">QR Coverage</CardTitle>\n                    <QrCode className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{analytics.qrCoverage}%</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {mockAssets.filter(a => a.qr_code).length} of {analytics.totalAssets} assets\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Charts and Recent Activity */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Asset Status Distribution</CardTitle>\n                    <CardDescription>Current status of all assets</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                        <span>Active</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-semibold\">{analytics.activeAssets}</span>\n                        <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                          <div\n                            className=\"bg-green-500 h-2 rounded-full\"\n                            style={{\n                              width: `${(analytics.activeAssets / analytics.totalAssets) * 100}%`,\n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Clock className=\"h-4 w-4 text-orange-500\" />\n                        <span>Maintenance</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-semibold\">{analytics.maintenanceAssets}</span>\n                        <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                          <div\n                            className=\"bg-orange-500 h-2 rounded-full\"\n                            style={{\n                              width: `${(analytics.maintenanceAssets / analytics.totalAssets) * 100}%`,\n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <XCircle className=\"h-4 w-4 text-gray-500\" />\n                        <span>Retired</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-semibold\">{analytics.retiredAssets}</span>\n                        <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                          <div\n                            className=\"bg-gray-500 h-2 rounded-full\"\n                            style={{\n                              width: `${(analytics.retiredAssets / analytics.totalAssets) * 100}%`,\n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Recent Activity</CardTitle>\n                    <CardDescription>Latest asset updates and actions</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">New asset added</p>\n                          <p className=\"text-xs text-gray-500\">\n                            Office Chair (AT-004) • 2 hours ago\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\"></div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">QR code generated</p>\n                          <p className=\"text-xs text-gray-500\">\n                            iPhone 14 Pro (AT-002) • 4 hours ago\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"w-2 h-2 bg-orange-500 rounded-full mt-2\"></div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">Maintenance scheduled</p>\n                          <p className=\"text-xs text-gray-500\">Dell Monitor (AT-003) • 1 day ago</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-2\"></div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">Asset assigned</p>\n                          <p className=\"text-xs text-gray-500\">\n                            MacBook Pro to John Doe • 2 days ago\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Alerts and Notifications */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <Card className=\"border-orange-200 bg-orange-50\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center text-orange-800\">\n                      <AlertTriangle className=\"h-5 w-5 mr-2\" />\n                      Maintenance Alerts\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-orange-700 mb-3\">\n                      {analytics.maintenanceAssets} asset\n                      {analytics.maintenanceAssets !== 1 ? 's' : ''} require\n                      {analytics.maintenanceAssets === 1 ? 's' : ''} attention\n                    </p>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"border-orange-300 text-orange-700\"\n                    >\n                      View Details\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-blue-200 bg-blue-50\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center text-blue-800\">\n                      <QrCode className=\"h-5 w-5 mr-2\" />\n                      QR Code Status\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-blue-700 mb-3\">\n                      {mockAssets.filter(a => !a.qr_code).length} asset\n                      {mockAssets.filter(a => !a.qr_code).length !== 1 ? 's' : ''} missing QR codes\n                    </p>\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-blue-300 text-blue-700\">\n                      Generate QR Codes\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-green-200 bg-green-50\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center text-green-800\">\n                      <CheckCircle className=\"h-5 w-5 mr-2\" />\n                      System Health\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-green-700 mb-3\">All systems operational</p>\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-green-300 text-green-700\">\n                      View Report\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'assets' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-3xl font-bold text-gray-900\">Asset Management</h2>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add New Asset\n                </Button>\n              </div>\n\n              {/* Search and Filters */}\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"relative flex-1 max-w-md\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search assets...\"\n                    value={searchTerm}\n                    onChange={e => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n                <Button variant=\"outline\">Filter by Category</Button>\n                <Button variant=\"outline\">Filter by Status</Button>\n                <Button variant=\"outline\">\n                  <Scan className=\"h-4 w-4 mr-2\" />\n                  Scan QR\n                </Button>\n              </div>\n\n              {/* Assets Grid/Table Toggle */}\n              <Tabs defaultValue=\"table\" className=\"w-full\">\n                <TabsList>\n                  <TabsTrigger value=\"table\">Table View</TabsTrigger>\n                  <TabsTrigger value=\"grid\">Grid View</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"table\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>All Assets ({filteredAssets.length})</CardTitle>\n                      <CardDescription>Manage and track all your assets</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      {bulkSelected.length > 0 && (\n                        <div className=\"flex gap-2 mb-2\">\n                          <Button variant=\"secondary\" onClick={() => setBulkUpdateDialog(true)}>\n                            Update Selected ({bulkSelected.length})\n                          </Button>\n                          <Button variant=\"destructive\" onClick={() => setBulkDeleteDialog(true)}>\n                            Delete Selected ({bulkSelected.length})\n                          </Button>\n                        </div>\n                      )}\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>\n                              <input\n                                type=\"checkbox\"\n                                checked={\n                                  bulkSelected.length === filteredAssets.length &&\n                                  filteredAssets.length > 0\n                                }\n                                onChange={handleBulkSelectAll}\n                              />\n                            </TableHead>\n                            <TableHead>Asset</TableHead>\n                            <TableHead>Category</TableHead>\n                            <TableHead>Status</TableHead>\n                            <TableHead>Location</TableHead>\n                            <TableHead>Assignee</TableHead>\n                            <TableHead>Value</TableHead>\n                            <TableHead>QR Code</TableHead>\n                            <TableHead>Actions</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {filteredAssets.map(asset => (\n                            <TableRow key={asset.id} className=\"hover:bg-gray-50\">\n                              <TableCell>\n                                <input\n                                  type=\"checkbox\"\n                                  checked={bulkSelected.includes(asset.id)}\n                                  onChange={() => handleBulkSelect(asset.id)}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex items-center space-x-3\">\n                                  <div className=\"w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center\">\n                                    {getCategoryIcon(asset.category)}\n                                  </div>\n                                  <div>\n                                    <p className=\"font-medium\">{asset.name}</p>\n                                    <p className=\"text-sm text-gray-500\">{asset.asset_id}</p>\n                                  </div>\n                                </div>\n                              </TableCell>\n                              <TableCell className=\"capitalize\">\n                                {asset.category.replace('-', ' ')}\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex items-center space-x-2\">\n                                  {getStatusIcon(asset.status)}\n                                  <Badge\n                                    variant={getStatusVariant(asset.status)}\n                                    className=\"capitalize\"\n                                  >\n                                    {asset.status}\n                                  </Badge>\n                                </div>\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex items-center space-x-1\">\n                                  <MapPin className=\"h-3 w-3 text-gray-400\" />\n                                  <span className=\"text-sm\">{asset.location}</span>\n                                </div>\n                              </TableCell>\n                              <TableCell>{asset.assignee?.full_name || 'Unassigned'}</TableCell>\n                              <TableCell className=\"font-medium\">\n                                {formatCurrency(asset.value)}\n                              </TableCell>\n                              <TableCell>\n                                {asset.qr_code ? (\n                                  <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                                    Generated\n                                  </Badge>\n                                ) : (\n                                  <Badge variant=\"outline\">Missing</Badge>\n                                )}\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex space-x-1\">\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => router.push(`/asset/${asset.id}`)}\n                                    title=\"Preview\"\n                                  >\n                                    <Eye className=\"h-4 w-4\" />\n                                  </Button>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => router.push(`/asset/${asset.id}/edit`)}\n                                    title=\"Edit\"\n                                  >\n                                    <Edit className=\"h-4 w-4\" />\n                                  </Button>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => setDeleteDialog({ open: true, asset })}\n                                    title=\"Delete\"\n                                  >\n                                    <Trash2 className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                  {/* Bulk Update Dialog */}\n                  <Dialog open={bulkUpdateDialog} onOpenChange={setBulkUpdateDialog}>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Update Selected Assets</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"flex flex-col gap-2\">\n                        <Input\n                          placeholder=\"Status\"\n                          value={bulkUpdateStatus}\n                          onChange={e => setBulkUpdateStatus(e.target.value)}\n                          className=\"mb-2\"\n                        />\n                        <Input\n                          placeholder=\"Category\"\n                          value={bulkUpdateCategory}\n                          onChange={e => setBulkUpdateCategory(e.target.value)}\n                          className=\"mb-2\"\n                        />\n                        <Input\n                          placeholder=\"Location\"\n                          value={bulkUpdateLocation}\n                          onChange={e => setBulkUpdateLocation(e.target.value)}\n                          className=\"mb-2\"\n                        />\n                      </div>\n                      <DialogFooter>\n                        <Button onClick={handleBulkUpdate}>Update All</Button>\n                      </DialogFooter>\n                    </DialogContent>\n                  </Dialog>\n                  {/* Bulk Delete Dialog */}\n                  <Dialog open={bulkDeleteDialog} onOpenChange={setBulkDeleteDialog}>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Delete Selected Assets</DialogTitle>\n                      </DialogHeader>\n                      <div>\n                        Are you sure you want to delete <b>{bulkSelected.length}</b> assets?\n                      </div>\n                      <DialogFooter>\n                        <Button variant=\"destructive\" onClick={handleBulkDelete}>\n                          Delete All\n                        </Button>\n                      </DialogFooter>\n                    </DialogContent>\n                  </Dialog>\n                </TabsContent>\n\n                <TabsContent value=\"grid\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {filteredAssets.map(asset => (\n                      <Card\n                        key={asset.id}\n                        className=\"hover:shadow-lg transition-shadow cursor-pointer\"\n                      >\n                        <CardHeader className=\"pb-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center\">\n                                {getCategoryIcon(asset.category)}\n                              </div>\n                              <div>\n                                <CardTitle className=\"text-lg\">{asset.name}</CardTitle>\n                                <p className=\"text-sm text-gray-500\">{asset.asset_id}</p>\n                              </div>\n                            </div>\n                            <Badge variant={getStatusVariant(asset.status)} className=\"capitalize\">\n                              {asset.status}\n                            </Badge>\n                          </div>\n                        </CardHeader>\n                        <CardContent className=\"space-y-3\">\n                          <div className=\"flex items-center space-x-2 text-sm\">\n                            <MapPin className=\"h-4 w-4 text-gray-400\" />\n                            <span>{asset.location}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-600\">Value:</span>\n                            <span className=\"font-semibold\">{formatCurrency(asset.value)}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-600\">Assignee:</span>\n                            <span className=\"text-sm\">\n                              {asset.assignee?.full_name || 'Unassigned'}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-600\">QR Code:</span>\n                            {asset.qr_code ? (\n                              <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                                Generated\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"outline\">Missing</Badge>\n                            )}\n                          </div>\n                          <div className=\"flex space-x-2 pt-2\">\n                            <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                              <Eye className=\"h-4 w-4 mr-1\" />\n                              View\n                            </Button>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <QrCode className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </div>\n          )}\n\n          {activeTab === 'qr' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-3xl font-bold text-gray-900\">QR Code Tools</h2>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\">\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Export QR Report\n                  </Button>\n                  <Button>\n                    <QrCode className=\"h-4 w-4 mr-2\" />\n                    Generate Bulk QR\n                  </Button>\n                </div>\n              </div>\n\n              {/* QR Statistics */}\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center\">\n                      <QrCode className=\"h-8 w-8 text-blue-600\" />\n                      <div className=\"ml-4\">\n                        <p className=\"text-sm font-medium text-gray-600\">Total QR Codes</p>\n                        <p className=\"text-2xl font-bold\">\n                          {mockAssets.filter(a => a.qr_code).length}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center\">\n                      <Package className=\"h-8 w-8 text-green-600\" />\n                      <div className=\"ml-4\">\n                        <p className=\"text-sm font-medium text-gray-600\">Coverage Rate</p>\n                        <p className=\"text-2xl font-bold\">{analytics.qrCoverage}%</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center\">\n                      <AlertTriangle className=\"h-8 w-8 text-orange-600\" />\n                      <div className=\"ml-4\">\n                        <p className=\"text-sm font-medium text-gray-600\">Missing QR</p>\n                        <p className=\"text-2xl font-bold\">\n                          {mockAssets.filter(a => !a.qr_code).length}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"flex items-center\">\n                      <Scan className=\"h-8 w-8 text-purple-600\" />\n                      <div className=\"ml-4\">\n                        <p className=\"text-sm font-medium text-gray-600\">Scans Today</p>\n                        <p className=\"text-2xl font-bold\">47</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* QR Tools */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <QrCode className=\"h-5 w-5 mr-2\" />\n                      QR Code Generator\n                    </CardTitle>\n                    <CardDescription>Generate QR codes for individual assets</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Select Asset</label>\n                      <select className=\"w-full p-2 border rounded-md\">\n                        <option value=\"\">Choose an asset...</option>\n                        {mockAssets.map(asset => (\n                          <option key={asset.id} value={asset.id}>\n                            {asset.name} - {asset.asset_id}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button className=\"flex-1\">\n                        <QrCode className=\"h-4 w-4 mr-2\" />\n                        Generate QR Code\n                      </Button>\n                      <Button variant=\"outline\">\n                        <Download className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    <div className=\"p-4 border-2 border-dashed border-gray-300 rounded-lg text-center\">\n                      <QrCode className=\"h-16 w-16 text-gray-400 mx-auto mb-2\" />\n                      <p className=\"text-sm text-gray-500\">QR code preview will appear here</p>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Scan className=\"h-5 w-5 mr-2\" />\n                      QR Code Scanner\n                    </CardTitle>\n                    <CardDescription>Scan QR codes to access asset information</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex space-x-2\">\n                      <Button variant=\"outline\" className=\"flex-1\">\n                        <Camera className=\"h-4 w-4 mr-2\" />\n                        Use Camera\n                      </Button>\n                      <Button variant=\"outline\" className=\"flex-1\">\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Upload Image\n                      </Button>\n                    </div>\n                    <div className=\"p-8 border-2 border-dashed border-gray-300 rounded-lg text-center\">\n                      <Scan className=\"h-16 w-16 text-gray-400 mx-auto mb-2\" />\n                      <p className=\"text-sm text-gray-500\">Camera preview would appear here</p>\n                    </div>\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                      <p className=\"text-sm text-green-800\">\n                        <strong>Demo:</strong> Scan functionality works with real camera access when\n                        deployed\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Bulk Operations */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Bulk QR Operations</CardTitle>\n                  <CardDescription>Generate QR codes for multiple assets at once</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium\">Assets without QR codes:</h4>\n                      {mockAssets\n                        .filter(asset => !asset.qr_code)\n                        .map(asset => (\n                          <div key={asset.id} className=\"flex items-center space-x-2\">\n                            <input type=\"checkbox\" className=\"rounded\" />\n                            <span className=\"text-sm\">\n                              {asset.name} ({asset.asset_id})\n                            </span>\n                          </div>\n                        ))}\n                    </div>\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium\">Bulk Actions:</h4>\n                      <div className=\"space-y-2\">\n                        <Button className=\"w-full\">\n                          <QrCode className=\"h-4 w-4 mr-2\" />\n                          Generate Selected QR Codes\n                        </Button>\n                        <Button variant=\"outline\" className=\"w-full\">\n                          <Download className=\"h-4 w-4 mr-2\" />\n                          Download All as ZIP\n                        </Button>\n                        <Button variant=\"outline\" className=\"w-full\">\n                          <Package className=\"h-4 w-4 mr-2\" />\n                          Print QR Labels\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {activeTab === 'team' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-3xl font-bold text-gray-900\">Team Collaboration</h2>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Invite Team Member\n                </Button>\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <Card className=\"lg:col-span-2\">\n                  <CardHeader>\n                    <CardTitle>Team Members</CardTitle>\n                    <CardDescription>Manage team access and permissions</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <UserAvatar />\n                          <div>\n                            <p className=\"font-medium\">{mockUser.full_name}</p>\n                            <p className=\"text-sm text-gray-500\">{mockUser.email}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"default\">Active</Badge>\n                          <Badge variant=\"outline\" className=\"capitalize\">\n                            {mockUser.role}\n                          </Badge>\n                        </div>\n                      </div>\n\n                      {/* Mock team members */}\n                      <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 bg-green-600 rounded-full flex items-center justify-center text-white font-semibold\">\n                            JD\n                          </div>\n                          <div>\n                            <p className=\"font-medium\">John Doe</p>\n                            <p className=\"text-sm text-gray-500\">john.doe@company.com</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"default\">Active</Badge>\n                          <Badge variant=\"outline\">User</Badge>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 bg-purple-600 rounded-full flex items-center justify-center text-white font-semibold\">\n                            JS\n                          </div>\n                          <div>\n                            <p className=\"font-medium\">Jane Smith</p>\n                            <p className=\"text-sm text-gray-500\">jane.smith@company.com</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"default\">Active</Badge>\n                          <Badge variant=\"outline\">Manager</Badge>\n                        </div>\n                      </div>\n\n                      <div className=\"text-center py-8 border-2 border-dashed border-gray-300 rounded-lg\">\n                        <Users className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                          Invite more team members\n                        </h3>\n                        <p className=\"text-gray-500 mb-4\">\n                          Collaborate with your team on asset management\n                        </p>\n                        <Button>\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Send Invitation\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Team Activity</CardTitle>\n                    <CardDescription>Recent team actions</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\"></div>\n                        <div>\n                          <p className=\"text-sm\">John Doe added new asset</p>\n                          <p className=\"text-xs text-gray-500\">MacBook Pro • 2 hours ago</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                        <div>\n                          <p className=\"text-sm\">Jane Smith generated QR code</p>\n                          <p className=\"text-xs text-gray-500\">iPhone 14 Pro • 4 hours ago</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"w-2 h-2 bg-orange-500 rounded-full mt-2\"></div>\n                        <div>\n                          <p className=\"text-sm\">You updated asset status</p>\n                          <p className=\"text-xs text-gray-500\">Dell Monitor • 1 day ago</p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'security' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-3xl font-bold text-gray-900\">Security Settings</h2>\n                <Button variant=\"outline\">\n                  <Shield className=\"h-4 w-4 mr-2\" />\n                  Security Report\n                </Button>\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Shield className=\"h-5 w-5 mr-2\" />\n                      Authentication & Access\n                    </CardTitle>\n                    <CardDescription>\n                      Manage authentication methods and access control\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span>Email Authentication</span>\n                        <Badge variant=\"default\">Enabled</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span>GitHub OAuth</span>\n                        <Badge variant=\"default\">Enabled</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span>Google OAuth</span>\n                        <Badge variant=\"default\">Enabled</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span>Two-Factor Authentication</span>\n                        <Badge variant=\"outline\">Optional</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span>Session Timeout</span>\n                        <Badge variant=\"secondary\">24 hours</Badge>\n                      </div>\n                    </div>\n                    <Button className=\"w-full\">Configure Authentication</Button>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Data Protection</CardTitle>\n                    <CardDescription>Enterprise-grade security measures</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span>Data Encryption</span>\n                        <Badge variant=\"default\">AES-256</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span>Database Security</span>\n                        <Badge variant=\"default\">Row Level Security</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span>Backup Encryption</span>\n                        <Badge variant=\"default\">Enabled</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span>Audit Logging</span>\n                        <Badge variant=\"default\">Active</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span>GDPR Compliance</span>\n                        <Badge variant=\"default\">Compliant</Badge>\n                      </div>\n                    </div>\n                    <Button className=\"w-full\" variant=\"outline\">\n                      View Security Report\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"lg:col-span-2\">\n                  <CardHeader>\n                    <CardTitle>Security Audit Log</CardTitle>\n                    <CardDescription>Recent security events and activities</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between p-3 border rounded\">\n                        <div className=\"flex items-center space-x-3\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                          <div>\n                            <p className=\"font-medium\">Successful login</p>\n                            <p className=\"text-sm text-gray-500\">{mockUser.email}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant=\"default\">Success</Badge>\n                          <p className=\"text-xs text-gray-500 mt-1\">Just now</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 border rounded\">\n                        <div className=\"flex items-center space-x-3\">\n                          <CheckCircle className=\"h-4 w-4 text-blue-500\" />\n                          <div>\n                            <p className=\"font-medium\">Asset access via QR</p>\n                            <p className=\"text-sm text-gray-500\">MacBook Pro (AT-001)</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant=\"secondary\">QR Scan</Badge>\n                          <p className=\"text-xs text-gray-500 mt-1\">2 hours ago</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between p-3 border rounded\">\n                        <div className=\"flex items-center space-x-3\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                          <div>\n                            <p className=\"font-medium\">Password change</p>\n                            <p className=\"text-sm text-gray-500\">john.doe@company.com</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant=\"default\">Security</Badge>\n                          <p className=\"text-xs text-gray-500 mt-1\">1 day ago</p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          )}\n        </main>\n      </div>\n\n      {/* Asset Detail Modal */}\n      {selectedAsset && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <Card className=\"w-full max-w-2xl max-h-[90vh] overflow-auto\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Asset Details</CardTitle>\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => setSelectedAsset(null)}>\n                  ×\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {(() => {\n                const asset = mockAssets.find(a => a.id === selectedAsset)\n                if (!asset) return null\n                return (\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Asset ID</label>\n                        <p className=\"text-lg font-semibold\">{asset.asset_id}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Name</label>\n                        <p className=\"text-lg\">{asset.name}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Category</label>\n                        <p className=\"text-lg capitalize\">{asset.category.replace('-', ' ')}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Status</label>\n                        <Badge variant={getStatusVariant(asset.status)} className=\"capitalize\">\n                          {asset.status}\n                        </Badge>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Location</label>\n                        <p className=\"text-lg\">{asset.location}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Value</label>\n                        <p className=\"text-lg font-semibold\">{formatCurrency(asset.value)}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2 pt-4\">\n                      <Button className=\"flex-1\">\n                        <Edit className=\"h-4 w-4 mr-2\" />\n                        Edit Asset\n                      </Button>\n                      <Button variant=\"outline\">\n                        <QrCode className=\"h-4 w-4 mr-2\" />\n                        Generate QR\n                      </Button>\n                      <Button variant=\"outline\">\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Export\n                      </Button>\n                    </div>\n                  </div>\n                )\n              })()}\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <Dialog\n        open={deleteDialog.open}\n        onOpenChange={open => setDeleteDialog({ open, asset: deleteDialog.asset })}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Asset</DialogTitle>\n          </DialogHeader>\n          <div>\n            Are you sure you want to delete <b>{deleteDialog.asset?.name}</b>?\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"destructive\"\n              onClick={() => deleteDialog.asset && handleDelete(deleteDialog.asset)}\n            >\n              Delete\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\asset\\[assetId]\\edit\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":74,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":119,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":15}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAsset'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [user, authLoading, assetId, fetchAsset]","fix":{"range":[1287,1315],"text":"[user, authLoading, assetId, fetchAsset]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useParams, useRouter } from 'next/navigation'\nimport { useAuth } from '@/components/auth/auth-provider'\nimport { Input } from '@/components/ui/input'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { useToast } from '@/hooks/use-toast'\nimport { Asset, getAsset } from '@/lib/asset-actions'\n\nexport default function EditAssetPage() {\n  const params = useParams()\n  const router = useRouter()\n  const { user, loading: authLoading } = useAuth()\n  const { toast } = useToast()\n  const assetId = params.assetId as string\n\n  const [asset, setAsset] = useState<Asset | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [form, setForm] = useState({\n    name: '',\n    description: '',\n    category: '',\n    status: 'active',\n    location: '',\n    purchase_value: '',\n    purchase_date: '',\n    manufacturer: '',\n    model: '',\n    serial_number: '',\n    warranty_expiry: '',\n    notes: '',\n  })\n\n  useEffect(() => {\n    if (!authLoading && user && assetId) {\n      fetchAsset()\n    }\n    // eslint-disable-next-line\n  }, [user, authLoading, assetId])\n\n  const fetchAsset = async () => {\n    setLoading(true)\n    setError(null)\n    try {\n      const result = await getAsset(assetId)\n      if (result.error) {\n        setError(result.error)\n        toast({\n          title: 'Error Loading Asset',\n          description: result.error,\n          variant: 'destructive',\n        })\n      } else {\n        setAsset(result.data)\n        setForm({\n          name: result.data.name || '',\n          description: result.data.description || '',\n          category: result.data.category || '',\n          status: result.data.status || 'active',\n          location: result.data.location || '',\n          purchase_value: result.data.purchase_value?.toString() || '',\n          purchase_date: result.data.purchase_date || '',\n          manufacturer: result.data.manufacturer || '',\n          model: result.data.model || '',\n          serial_number: result.data.serial_number || '',\n          warranty_expiry: result.data.warranty_expiry || '',\n          notes: result.data.notes || '',\n        })\n      }\n    } catch (e) {\n      setError('Failed to load asset')\n      toast({\n        title: 'Error Loading Asset',\n        description: 'An unexpected error occurred while loading the asset',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target\n    setForm(prev => ({ ...prev, [name]: value }))\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setSaving(true)\n    setError(null)\n    try {\n      const res = await fetch(`/api/assets/${assetId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...form,\n          purchase_value: form.purchase_value ? Number(form.purchase_value) : null,\n        }),\n      })\n      const data = await res.json()\n      if (!res.ok) {\n        setError(data.error || 'Failed to update asset')\n        toast({\n          title: 'Update Failed',\n          description: data.error || 'Failed to update asset',\n          variant: 'destructive',\n        })\n      } else {\n        toast({\n          title: 'Asset Updated',\n          description: 'The asset has been updated successfully.',\n        })\n        router.push(`/asset/${assetId}`)\n      }\n    } catch (e) {\n      setError('Failed to update asset')\n      toast({\n        title: 'Update Failed',\n        description: 'An unexpected error occurred while updating the asset',\n        variant: 'destructive',\n      })\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  if (loading) return <div className=\"p-8\">Loading...</div>\n  if (error) return <div className=\"p-8 text-red-600\">{error}</div>\n  if (!asset) return <div className=\"p-8\">Asset not found.</div>\n\n  return (\n    <div className=\"max-w-2xl mx-auto py-8\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Edit Asset</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"name\" className=\"block text-sm font-medium mb-1\">\n                Name\n              </label>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                placeholder=\"Asset Name\"\n                value={form.name}\n                onChange={handleChange}\n                required\n              />\n            </div>\n            <div>\n              <label htmlFor=\"description\" className=\"block text-sm font-medium mb-1\">\n                Description\n              </label>\n              <Input\n                id=\"description\"\n                name=\"description\"\n                placeholder=\"Description\"\n                value={form.description}\n                onChange={handleChange}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"category\" className=\"block text-sm font-medium mb-1\">\n                Category\n              </label>\n              <Input\n                id=\"category\"\n                name=\"category\"\n                placeholder=\"Category\"\n                value={form.category}\n                onChange={handleChange}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"status\" className=\"block text-sm font-medium mb-1\">\n                Status\n              </label>\n              <Input\n                id=\"status\"\n                name=\"status\"\n                placeholder=\"Status\"\n                value={form.status}\n                onChange={handleChange}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"location\" className=\"block text-sm font-medium mb-1\">\n                Location\n              </label>\n              <Input\n                id=\"location\"\n                name=\"location\"\n                placeholder=\"Location\"\n                value={form.location}\n                onChange={handleChange}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"purchase_value\" className=\"block text-sm font-medium mb-1\">\n                Purchase Value\n              </label>\n              <Input\n                id=\"purchase_value\"\n                name=\"purchase_value\"\n                placeholder=\"Purchase Value\"\n                value={form.purchase_value}\n                onChange={handleChange}\n                type=\"number\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"purchase_date\" className=\"block text-sm font-medium mb-1\">\n                Purchase Date\n              </label>\n              <Input\n                id=\"purchase_date\"\n                name=\"purchase_date\"\n                placeholder=\"YYYY-MM-DD\"\n                value={form.purchase_date}\n                onChange={handleChange}\n                type=\"date\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"manufacturer\" className=\"block text-sm font-medium mb-1\">\n                Manufacturer\n              </label>\n              <Input\n                id=\"manufacturer\"\n                name=\"manufacturer\"\n                placeholder=\"Manufacturer\"\n                value={form.manufacturer}\n                onChange={handleChange}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"model\" className=\"block text-sm font-medium mb-1\">\n                Model\n              </label>\n              <Input\n                id=\"model\"\n                name=\"model\"\n                placeholder=\"Model\"\n                value={form.model}\n                onChange={handleChange}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"serial_number\" className=\"block text-sm font-medium mb-1\">\n                Serial Number\n              </label>\n              <Input\n                id=\"serial_number\"\n                name=\"serial_number\"\n                placeholder=\"Serial Number\"\n                value={form.serial_number}\n                onChange={handleChange}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"warranty_expiry\" className=\"block text-sm font-medium mb-1\">\n                Warranty Expiry\n              </label>\n              <Input\n                id=\"warranty_expiry\"\n                name=\"warranty_expiry\"\n                placeholder=\"YYYY-MM-DD\"\n                value={form.warranty_expiry}\n                onChange={handleChange}\n                type=\"date\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"notes\" className=\"block text-sm font-medium mb-1\">\n                Notes\n              </label>\n              <Input\n                id=\"notes\"\n                name=\"notes\"\n                placeholder=\"Notes\"\n                value={form.notes}\n                onChange={handleChange}\n              />\n            </div>\n            <div className=\"flex justify-end\">\n              <Button type=\"submit\" disabled={saving}>\n                {saving ? 'Saving...' : 'Save Changes'}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\asset\\[assetId]\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDescription' is defined but never used.","line":9,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogTrigger' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1689,1692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1689,1692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1749,1752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1749,1752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1944,1947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1944,1947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2007,2010],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2007,2010],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2164,2167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2164,2167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2353,2356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2353,2356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchAsset', 'fetchCustomFields', 'fetchMaintenance', and 'fetchMaintenanceHistory'. Either include them or remove the dependency array.","line":88,"column":6,"nodeType":"ArrayExpression","endLine":88,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [user, authLoading, assetId, fetchAsset, fetchCustomFields, fetchMaintenance, fetchMaintenanceHistory]","fix":{"range":[2644,2672],"text":"[user, authLoading, assetId, fetchAsset, fetchCustomFields, fetchMaintenance, fetchMaintenanceHistory]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":123,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4327,4330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4327,4330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5333,5336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5333,5336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":244,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":244,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":711,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":711,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27652,27655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27652,27655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":725,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":725,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28398,28401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28398,28401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":741,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":741,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29196,29199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29196,29199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":747,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":747,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29470,29473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29470,29473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":770,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":770,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30507,30510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30507,30510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":788,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":788,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31308,31311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31308,31311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":795,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":795,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31616,31619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31616,31619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useParams, useRouter } from 'next/navigation'\nimport { useAuth } from '@/components/auth/auth-provider'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogTrigger,\n} from '@/components/ui/dialog'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { Calendar } from 'lucide-react'\nimport {\n  Package,\n  Loader2,\n  AlertTriangle,\n  Edit,\n  Trash2,\n  ArrowLeft,\n  QrCode,\n  MapPin,\n  DollarSign,\n  User,\n  Settings,\n  FileText,\n  Tag,\n  Building,\n  Hash,\n} from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\nimport { Asset, getAsset, deleteAsset } from '@/lib/asset-actions'\nimport Link from 'next/link'\nimport MaintenanceCalendar from '@/components/maintenance-calendar'\n\nexport default function AssetDetailPage() {\n  const params = useParams()\n  const router = useRouter()\n  const { user, loading: authLoading } = useAuth()\n  const [asset, setAsset] = useState<Asset | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [deleting, setDeleting] = useState(false)\n  const { toast } = useToast()\n  const [customFields, setCustomFields] = useState<any[]>([])\n  const [maintenance, setMaintenance] = useState<any[]>([])\n  const [maintenanceLoading, setMaintenanceLoading] = useState(true)\n  const [showMaintDialog, setShowMaintDialog] = useState(false)\n  const [editingMaint, setEditingMaint] = useState<any | null>(null)\n  const [maintForm, setMaintForm] = useState<any>({\n    type: 'inspection',\n    interval: 'monthly',\n    next_due: '',\n    notes: '',\n  })\n  const [maintenanceHistory, setMaintenanceHistory] = useState<any[]>([])\n  const [historyLoading, setHistoryLoading] = useState(true)\n  const [showHistoryDialog, setShowHistoryDialog] = useState(false)\n  const [historyForm, setHistoryForm] = useState<any>({\n    schedule_id: '',\n    performed_at: '',\n    notes: '',\n  })\n\n  const assetId = params.assetId as string\n\n  useEffect(() => {\n    if (!authLoading && user && assetId) {\n      fetchAsset()\n      fetchCustomFields()\n      fetchMaintenance()\n      fetchMaintenanceHistory()\n    }\n  }, [user, authLoading, assetId])\n\n  const fetchAsset = async () => {\n    try {\n      setError(null)\n      const result = await getAsset(assetId)\n\n      if (result.error) {\n        setError(result.error)\n        toast({\n          title: 'Error Loading Asset',\n          description: result.error,\n          variant: 'destructive',\n        })\n      } else {\n        setAsset(result.data)\n      }\n    } catch (error) {\n      console.error('Error fetching asset:', error)\n      setError('Failed to load asset')\n      toast({\n        title: 'Error Loading Asset',\n        description: 'An unexpected error occurred while loading the asset',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const fetchCustomFields = async () => {\n    try {\n      const res = await fetch(`/api/assets/${assetId}/custom-fields`)\n      const json = await res.json()\n      setCustomFields(json.data || [])\n    } catch (err) {\n      // ignore\n    }\n  }\n\n  const fetchMaintenance = async () => {\n    setMaintenanceLoading(true)\n    const res = await fetch(`/api/assets/${assetId}/maintenance`)\n    const json = await res.json()\n    setMaintenance(json.data || [])\n    setMaintenanceLoading(false)\n  }\n\n  const fetchMaintenanceHistory = async () => {\n    setHistoryLoading(true)\n    const res = await fetch(`/api/assets/${assetId}/maintenance/history`)\n    const json = await res.json()\n    setMaintenanceHistory(json.data || [])\n    setHistoryLoading(false)\n  }\n\n  const openAddMaint = () => {\n    setEditingMaint(null)\n    setMaintForm({ type: 'inspection', interval: 'monthly', next_due: '', notes: '' })\n    setShowMaintDialog(true)\n  }\n\n  const openEditMaint = (m: any) => {\n    setEditingMaint(m)\n    setMaintForm({ type: m.type, interval: m.interval, next_due: m.next_due, notes: m.notes })\n    setShowMaintDialog(true)\n  }\n\n  const handleSaveMaint = async () => {\n    let res\n    if (editingMaint) {\n      res = await fetch(`/api/assets/${assetId}/maintenance`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id: editingMaint.id, ...maintForm }),\n      })\n    } else {\n      res = await fetch(`/api/assets/${assetId}/maintenance`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(maintForm),\n      })\n    }\n    const json = await res.json()\n    if (json.error) {\n      toast({ title: 'Error', description: json.error, variant: 'destructive' })\n    } else {\n      setShowMaintDialog(false)\n      fetchMaintenance()\n      toast({ title: 'Saved', description: 'Maintenance schedule saved.' })\n    }\n  }\n\n  const handleDeleteMaint = async (m: any) => {\n    if (!window.confirm('Delete this maintenance schedule?')) return\n    const res = await fetch(`/api/assets/${assetId}/maintenance`, {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ id: m.id }),\n    })\n    const json = await res.json()\n    if (json.error) {\n      toast({ title: 'Error', description: json.error, variant: 'destructive' })\n    } else {\n      fetchMaintenance()\n      toast({ title: 'Deleted', description: 'Maintenance schedule deleted.' })\n    }\n  }\n\n  const openAddHistory = () => {\n    setHistoryForm({ schedule_id: maintenance[0]?.id || '', performed_at: '', notes: '' })\n    setShowHistoryDialog(true)\n  }\n\n  const handleSaveHistory = async () => {\n    const res = await fetch(`/api/assets/${assetId}/maintenance/history`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...historyForm, performed_by: user?.id }),\n    })\n    const json = await res.json()\n    if (json.error) {\n      toast({ title: 'Error', description: json.error, variant: 'destructive' })\n    } else {\n      setShowHistoryDialog(false)\n      fetchMaintenanceHistory()\n      toast({ title: 'Logged', description: 'Maintenance event logged.' })\n    }\n  }\n\n  const handleDelete = async () => {\n    if (!asset) return\n\n    if (\n      !confirm(`Are you sure you want to delete \"${asset.name}\"? This action cannot be undone.`)\n    ) {\n      return\n    }\n\n    setDeleting(true)\n    try {\n      const result = await deleteAsset(asset.id!)\n\n      if (result.error) {\n        toast({\n          title: 'Error Deleting Asset',\n          description: result.error,\n          variant: 'destructive',\n        })\n      } else {\n        toast({\n          title: 'Asset Deleted',\n          description: 'The asset has been successfully deleted.',\n        })\n        router.push('/assets')\n      }\n    } catch (error) {\n      toast({\n        title: 'Error Deleting Asset',\n        description: 'An unexpected error occurred while deleting the asset',\n        variant: 'destructive',\n      })\n    } finally {\n      setDeleting(false)\n    }\n  }\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      active: { color: 'bg-green-50 text-green-700 border-green-200', label: 'Active' },\n      maintenance: { color: 'bg-amber-50 text-amber-700 border-amber-200', label: 'Maintenance' },\n      retired: { color: 'bg-gray-50 text-gray-700 border-gray-200', label: 'Retired' },\n      lost: { color: 'bg-red-50 text-red-700 border-red-200', label: 'Lost' },\n      damaged: { color: 'bg-orange-50 text-orange-700 border-orange-200', label: 'Damaged' },\n    }\n\n    const config = statusConfig[status as keyof typeof statusConfig] || {\n      color: 'bg-blue-50 text-blue-700 border-blue-200',\n      label: status,\n    }\n\n    return (\n      <Badge variant=\"outline\" className={config.color}>\n        {config.label}\n      </Badge>\n    )\n  }\n\n  const formatCurrency = (value?: number | null) => {\n    if (!value) return 'N/A'\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value)\n  }\n\n  const formatDate = (dateString?: string | null) => {\n    if (!dateString) return 'N/A'\n    return new Date(dateString).toLocaleDateString()\n  }\n\n  if (authLoading || loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center\">\n              <Loader2 className=\"h-12 w-12 animate-spin text-blue-600 mx-auto mb-4\" />\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Loading Asset</h2>\n              <p className=\"text-gray-600\">Please wait while we fetch the asset details...</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <Card className=\"w-full max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <AlertTriangle className=\"h-5 w-5 mr-2 text-red-600\" />\n                Authentication Required\n              </CardTitle>\n              <CardDescription>Please log in to view asset details.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button asChild className=\"w-full\">\n                <Link href=\"/login\">Log In</Link>\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n\n  if (error || !asset) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <Card className=\"w-full max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <AlertTriangle className=\"h-5 w-5 mr-2 text-red-600\" />\n                Asset Not Found\n              </CardTitle>\n              <CardDescription>\n                {error || 'The requested asset could not be found.'}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button asChild className=\"w-full\">\n                <Link href=\"/assets\">Back to Assets</Link>\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Package className=\"h-8 w-8 text-blue-600\" />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">{asset.name}</h1>\n                <p className=\"text-sm text-gray-600\">Asset ID: {asset.asset_id}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button asChild variant=\"outline\" size=\"sm\">\n                <Link href=\"/assets\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back to Assets\n                </Link>\n              </Button>\n              <Button asChild size=\"sm\">\n                <Link href={`/asset/${asset.id}/edit`}>\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit\n                </Link>\n              </Button>\n              {asset.qr_code && (\n                <Button asChild size=\"sm\" variant=\"outline\">\n                  <Link href={`/qr-test?asset=${asset.id}`}>\n                    <QrCode className=\"h-4 w-4 mr-2\" />\n                    QR Code\n                  </Link>\n                </Button>\n              )}\n              <Button size=\"sm\" variant=\"destructive\" onClick={handleDelete} disabled={deleting}>\n                {deleting ? (\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                ) : (\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                )}\n                Delete\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Asset Overview */}\n          <div className=\"lg:col-span-2\">\n            <Tabs defaultValue=\"overview\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                <TabsTrigger value=\"details\">Details</TabsTrigger>\n                <TabsTrigger value=\"history\">History</TabsTrigger>\n                <TabsTrigger value=\"maintenance\">Maintenance</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"overview\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Package className=\"h-5 w-5 mr-2\" />\n                      Asset Information\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Asset ID</label>\n                        <p className=\"font-mono text-lg\">{asset.asset_id}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Status</label>\n                        <div className=\"mt-1\">{getStatusBadge(asset.status)}</div>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Category</label>\n                        <p className=\"text-lg\">{asset.category}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Location</label>\n                        <p className=\"text-lg flex items-center\">\n                          <MapPin className=\"h-4 w-4 mr-1 text-gray-400\" />\n                          {asset.location || 'Not specified'}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* --- Custom Fields Section --- */}\n                    {customFields.length > 0 && (\n                      <div className=\"pt-6 border-t\">\n                        <h3 className=\"font-semibold mb-2\">Custom Fields</h3>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          {customFields.map(cf => (\n                            <div key={cf.field_id} className=\"space-y-1\">\n                              <label className=\"text-sm font-medium text-gray-500\">\n                                {cf.asset_field_definitions?.label || cf.field_id}\n                              </label>\n                              <p className=\"text-lg\">\n                                {cf.value || <span className=\"text-gray-400\">Not specified</span>}\n                              </p>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                    {/* --- End Custom Fields Section --- */}\n\n                    {asset.description && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Description</label>\n                        <p className=\"text-lg mt-1\">{asset.description}</p>\n                      </div>\n                    )}\n\n                    {asset.tags && asset.tags.length > 0 && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Tags</label>\n                        <div className=\"flex flex-wrap gap-2 mt-1\">\n                          {asset.tags.map((tag, index) => (\n                            <Badge key={index} variant=\"secondary\">\n                              <Tag className=\"h-3 w-3 mr-1\" />\n                              {tag}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {asset.notes && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <FileText className=\"h-5 w-5 mr-2\" />\n                        Notes\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"whitespace-pre-wrap\">{asset.notes}</p>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"details\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Settings className=\"h-5 w-5 mr-2\" />\n                      Technical Details\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Manufacturer</label>\n                        <p className=\"text-lg flex items-center\">\n                          <Building className=\"h-4 w-4 mr-1 text-gray-400\" />\n                          {asset.manufacturer || 'Not specified'}\n                        </p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Model</label>\n                        <p className=\"text-lg\">{asset.model || 'Not specified'}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Serial Number</label>\n                        <p className=\"font-mono text-lg flex items-center\">\n                          <Hash className=\"h-4 w-4 mr-1 text-gray-400\" />\n                          {asset.serial_number || 'Not specified'}\n                        </p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Assigned To</label>\n                        <p className=\"text-lg flex items-center\">\n                          <User className=\"h-4 w-4 mr-1 text-gray-400\" />\n                          {asset.assigned_to || 'Not assigned'}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Calendar className=\"h-5 w-5 mr-2\" />\n                      Dates & Warranty\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Purchase Date</label>\n                        <p className=\"text-lg\">{formatDate(asset.purchase_date)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Warranty Expiry</label>\n                        <p className=\"text-lg\">{formatDate(asset.warranty_expiry)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Created</label>\n                        <p className=\"text-lg\">{formatDate(asset.created_at || undefined)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Last Updated</label>\n                        <p className=\"text-lg\">{formatDate(asset.updated_at || undefined)}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"history\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Asset History</CardTitle>\n                    <CardDescription>Track changes and activities for this asset</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <Calendar className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                      <p>Asset history tracking coming soon...</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"maintenance\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle>Maintenance Schedules</CardTitle>\n                    <Button onClick={openAddMaint} size=\"sm\">\n                      Add Schedule\n                    </Button>\n                  </CardHeader>\n                  <CardContent>\n                    {maintenanceLoading ? (\n                      <div className=\"flex items-center justify-center py-8\">\n                        <Loader2 className=\"animate-spin h-6 w-6 mr-2\" /> Loading...\n                      </div>\n                    ) : maintenance.length === 0 ? (\n                      <div className=\"text-center text-gray-500 py-8\">\n                        No maintenance schedules defined yet.\n                      </div>\n                    ) : (\n                      <table className=\"w-full text-sm border\">\n                        <thead>\n                          <tr className=\"bg-gray-50\">\n                            <th className=\"p-2 text-left\">Type</th>\n                            <th className=\"p-2 text-left\">Interval</th>\n                            <th className=\"p-2 text-left\">Next Due</th>\n                            <th className=\"p-2 text-left\">Notes</th>\n                            <th className=\"p-2 text-left\">Status</th>\n                            <th className=\"p-2 text-left\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {maintenance.map(m => (\n                            <tr key={m.id} className=\"border-t\">\n                              <td className=\"p-2 capitalize\">{m.type}</td>\n                              <td className=\"p-2\">{m.interval}</td>\n                              <td className=\"p-2\">{m.next_due}</td>\n                              <td className=\"p-2\">{m.notes}</td>\n                              <td className=\"p-2\">{m.status}</td>\n                              <td className=\"p-2\">\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"icon\"\n                                  className=\"mr-1\"\n                                  onClick={() => openEditMaint(m)}\n                                >\n                                  <Edit className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"destructive\"\n                                  size=\"icon\"\n                                  onClick={() => handleDeleteMaint(m)}\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    )}\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle>Maintenance History</CardTitle>\n                    <Button onClick={openAddHistory} size=\"sm\">\n                      Log Event\n                    </Button>\n                  </CardHeader>\n                  <CardContent>\n                    {historyLoading ? (\n                      <div className=\"flex items-center justify-center py-8\">\n                        <Loader2 className=\"animate-spin h-6 w-6 mr-2\" /> Loading...\n                      </div>\n                    ) : maintenanceHistory.length === 0 ? (\n                      <div className=\"text-center text-gray-500 py-8\">\n                        No maintenance events logged yet.\n                      </div>\n                    ) : (\n                      <table className=\"w-full text-sm border\">\n                        <thead>\n                          <tr className=\"bg-gray-50\">\n                            <th className=\"p-2 text-left\">Schedule</th>\n                            <th className=\"p-2 text-left\">Date</th>\n                            <th className=\"p-2 text-left\">Notes</th>\n                            <th className=\"p-2 text-left\">Performed By</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {maintenanceHistory.map(h => (\n                            <tr key={h.id} className=\"border-t\">\n                              <td className=\"p-2\">\n                                {maintenance.find(m => m.id === h.schedule_id)?.type || '-'}\n                              </td>\n                              <td className=\"p-2\">{h.performed_at}</td>\n                              <td className=\"p-2\">{h.notes}</td>\n                              <td className=\"p-2\">\n                                {h.performed_by?.full_name || h.performed_by?.email || '-'}\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    )}\n                  </CardContent>\n                </Card>\n\n                <MaintenanceCalendar\n                  assetId={assetId}\n                  schedules={maintenance}\n                  history={maintenanceHistory}\n                />\n\n                <Dialog open={showMaintDialog} onOpenChange={setShowMaintDialog}>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>\n                        {editingMaint ? 'Edit Maintenance Schedule' : 'Add Maintenance Schedule'}\n                      </DialogTitle>\n                    </DialogHeader>\n                    <div className=\"space-y-4 py-2\">\n                      <Select\n                        value={maintForm.type}\n                        onValueChange={val => setMaintForm((f: any) => ({ ...f, type: val }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"inspection\">Inspection</SelectItem>\n                          <SelectItem value=\"service\">Service</SelectItem>\n                          <SelectItem value=\"calibration\">Calibration</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <Select\n                        value={maintForm.interval}\n                        onValueChange={val => setMaintForm((f: any) => ({ ...f, interval: val }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"monthly\">Monthly</SelectItem>\n                          <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                          <SelectItem value=\"yearly\">Yearly</SelectItem>\n                          <SelectItem value=\"one-time\">One-time</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <Input\n                        type=\"date\"\n                        value={maintForm.next_due}\n                        onChange={e =>\n                          setMaintForm((f: any) => ({ ...f, next_due: e.target.value }))\n                        }\n                      />\n                      <Input\n                        placeholder=\"Notes\"\n                        value={maintForm.notes}\n                        onChange={e => setMaintForm((f: any) => ({ ...f, notes: e.target.value }))}\n                      />\n                    </div>\n                    <DialogFooter>\n                      <Button onClick={handleSaveMaint}>\n                        {editingMaint ? 'Save Changes' : 'Add Schedule'}\n                      </Button>\n                      <Button variant=\"outline\" onClick={() => setShowMaintDialog(false)}>\n                        Cancel\n                      </Button>\n                    </DialogFooter>\n                  </DialogContent>\n                </Dialog>\n\n                <Dialog open={showHistoryDialog} onOpenChange={setShowHistoryDialog}>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Log Maintenance Event</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"space-y-4 py-2\">\n                      <Select\n                        value={historyForm.schedule_id}\n                        onValueChange={val =>\n                          setHistoryForm((f: any) => ({ ...f, schedule_id: val }))\n                        }\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select schedule\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {maintenance.map(m => (\n                            <SelectItem key={m.id} value={m.id}>\n                              {m.type} ({m.interval})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <Input\n                        type=\"date\"\n                        value={historyForm.performed_at}\n                        onChange={e =>\n                          setHistoryForm((f: any) => ({ ...f, performed_at: e.target.value }))\n                        }\n                      />\n                      <Input\n                        placeholder=\"Notes\"\n                        value={historyForm.notes}\n                        onChange={e =>\n                          setHistoryForm((f: any) => ({ ...f, notes: e.target.value }))\n                        }\n                      />\n                    </div>\n                    <DialogFooter>\n                      <Button onClick={handleSaveHistory}>Log Event</Button>\n                      <Button variant=\"outline\" onClick={() => setShowHistoryDialog(false)}>\n                        Cancel\n                      </Button>\n                    </DialogFooter>\n                  </DialogContent>\n                </Dialog>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Financial Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <DollarSign className=\"h-5 w-5 mr-2\" />\n                  Financial Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Purchase Value</label>\n                    <p className=\"text-2xl font-bold text-green-600\">\n                      {formatCurrency(asset.purchase_value)}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button asChild className=\"w-full\" size=\"sm\">\n                  <Link href={`/asset/${asset.id}/edit`}>\n                    <Edit className=\"h-4 w-4 mr-2\" />\n                    Edit Asset\n                  </Link>\n                </Button>\n                {asset.qr_code && (\n                  <Button asChild className=\"w-full\" size=\"sm\" variant=\"outline\">\n                    <Link href={`/qr-test?asset=${asset.id}`}>\n                      <QrCode className=\"h-4 w-4 mr-2\" />\n                      View QR Code\n                    </Link>\n                  </Button>\n                )}\n                <Button\n                  className=\"w-full\"\n                  size=\"sm\"\n                  variant=\"destructive\"\n                  onClick={handleDelete}\n                  disabled={deleting}\n                >\n                  {deleting ? (\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  ) : (\n                    <Trash2 className=\"h-4 w-4 mr-2\" />\n                  )}\n                  Delete Asset\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Asset Metadata */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Asset Metadata</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-500\">Created:</span>\n                  <span>{formatDate(asset.created_at || undefined)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-500\">Updated:</span>\n                  <span>{formatDate(asset.updated_at || undefined)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-500\">Asset ID:</span>\n                  <span className=\"font-mono\">{asset.asset_id}</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\asset\\geofence-management\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1123,1126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1123,1126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1179,1182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1179,1182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUserRole'. Either include it or remove the dependency array.","line":39,"column":6,"nodeType":"ArrayExpression","endLine":39,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUserRole, user]","fix":{"range":[1493,1499],"text":"[fetchUserRole, user]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":48,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":69,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":130,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":19},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/login/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":149,"column":15,"nodeType":"JSXOpeningElement","endLine":149,"endColumn":32},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/dashboard/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":180,"column":17,"nodeType":"JSXOpeningElement","endLine":180,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useEffect, useState } from 'react'\nimport dynamic from 'next/dynamic'\nimport { Card, CardHeader, CardTitle, CardContent, CardDescription } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { useAuth } from '@/components/auth/auth-provider'\nimport { useToast } from '@/components/ui/use-toast'\nimport { MapPin, Plus, Trash2, Edit, Eye, Shield, AlertTriangle } from 'lucide-react'\nimport { createClient } from '@/lib/supabase/client'\nimport GeofenceRuleManager from '@/components/geofence-rule-manager'\n\ninterface Geofence {\n  id: string\n  name: string\n  polygon: { coordinates: [number, number][][] }\n  description?: string\n  created_at?: string\n}\n\nconst GeofenceMapEditor = dynamic(() => import('@/components/geofence-map-editor'), { ssr: false })\n\nexport default function GeofenceManagementPage() {\n  const { user } = useAuth()\n  const { toast } = useToast()\n  const [userRole, setUserRole] = useState('user')\n  const [assets, setAssets] = useState<any[]>([])\n  const [geofences, setGeofences] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [selectedGeofence, setSelectedGeofence] = useState<Geofence | null>(null)\n  const [showMap, setShowMap] = useState(false)\n\n  useEffect(() => {\n    if (!user) return\n    fetchUserRole()\n  }, [user])\n\n  useEffect(() => {\n    setShowMap(true)\n  }, [])\n\n  const fetchUserRole = async () => {\n    try {\n      const supabase = createClient()\n      const { data: profile, error } = await supabase\n        .from('profiles')\n        .select('role')\n        .eq('id', user?.id)\n        .single()\n      setUserRole(profile?.role || 'user')\n    } catch (error) {\n      console.error('Error fetching user role:', error)\n    }\n  }\n\n  const fetchGeofences = async () => {\n    setLoading(true)\n    setError(null)\n    try {\n      const res = await fetch('/api/geofence/zones')\n      if (!res.ok) {\n        throw new Error('Failed to fetch geofences')\n      }\n      const data = await res.json()\n      setGeofences(data.zones || [])\n    } catch (err) {\n      setError('Failed to load geofences')\n      toast({\n        title: 'Error',\n        description: 'Failed to load geofence zones',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true)\n      try {\n        const assetsRes = await fetch('/api/assets?fields=id,asset_id,name')\n        const geofencesRes = await fetch('/api/geofence/zones')\n        const assetsData = await assetsRes.json()\n        const geofencesData = await geofencesRes.json()\n        setAssets(assetsData.assets || [])\n        setGeofences(geofencesData.zones || [])\n      } finally {\n        setLoading(false)\n      }\n    }\n    fetchData()\n  }, [])\n\n  const handleGeofenceUpdate = async () => {\n    await fetchGeofences()\n    toast({\n      title: 'Success',\n      description: 'Geofence zones updated successfully',\n    })\n  }\n\n  const handleDeleteGeofence = async (geofenceId: string) => {\n    if (\n      typeof window !== 'undefined' &&\n      !window.confirm('Are you sure you want to delete this geofence zone?')\n    ) {\n      return\n    }\n\n    try {\n      const res = await fetch('/api/geofence/zones', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id: geofenceId }),\n      })\n\n      if (!res.ok) {\n        throw new Error('Failed to delete geofence')\n      }\n\n      await fetchGeofences()\n      toast({\n        title: 'Success',\n        description: 'Geofence zone deleted successfully',\n      })\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to delete geofence zone',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle>Authentication Required</CardTitle>\n            <CardDescription>Please log in to access geofence management.</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button asChild className=\"w-full\">\n              <a href=\"/login\">Go to Login</a>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  if (!['admin', 'manager'].includes(userRole)) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-red-600\">\n              <Shield className=\"h-5 w-5 mr-2\" />\n              Access Denied\n            </CardTitle>\n            <CardDescription>\n              You do not have permission to manage geofence zones. Only administrators and managers\n              can access this feature.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <Alert>\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Your current role: <Badge variant=\"outline\">{userRole}</Badge>\n                </AlertDescription>\n              </Alert>\n              <Button asChild className=\"w-full\">\n                <a href=\"/dashboard\">Return to Dashboard</a>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n                <MapPin className=\"h-8 w-8 text-blue-600 mr-3\" />\n                Geofence Management\n              </h1>\n              <p className=\"text-gray-600 mt-2\">\n                Create and manage geofence zones for asset location tracking and alerts\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                {userRole} Access\n              </Badge>\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <MapPin className=\"h-8 w-8 text-blue-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Zones</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{geofences.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <Eye className=\"h-8 w-8 text-green-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Active Zones</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{geofences.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-8 w-8 text-orange-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Alerts Today</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">0</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Map Editor */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <MapPin className=\"h-5 w-5 mr-2\" />\n                  Interactive Map Editor\n                </CardTitle>\n                <CardDescription>\n                  Draw, edit, and manage geofence zones on the interactive map\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {error && (\n                  <Alert className=\"mb-4\">\n                    <AlertTriangle className=\"h-4 w-4\" />\n                    <AlertDescription>{error}</AlertDescription>\n                  </Alert>\n                )}\n\n                {loading ? (\n                  <div className=\"h-96 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n                      <p className=\"text-gray-600\">Loading geofence zones...</p>\n                    </div>\n                  </div>\n                ) : (\n                  showMap && (\n                    <div key={JSON.stringify(geofences) + userRole}>\n                      <GeofenceMapEditor\n                        geofences={geofences}\n                        onChange={handleGeofenceUpdate}\n                        userRole={userRole}\n                      />\n                    </div>\n                  )\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Geofence List */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Geofence Zones</span>\n                  <Badge variant=\"outline\">{geofences.length}</Badge>\n                </CardTitle>\n                <CardDescription>Manage your geofence zones and their properties</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {geofences.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <MapPin className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600 mb-2\">No geofence zones created yet</p>\n                    <p className=\"text-sm text-gray-500\">\n                      Use the map editor to create your first geofence zone\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {geofences.map(geofence => (\n                      <div\n                        key={geofence.id}\n                        className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                          selectedGeofence?.id === geofence.id\n                            ? 'border-blue-500 bg-blue-50'\n                            : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'\n                        }`}\n                        onClick={() => setSelectedGeofence(geofence)}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium text-gray-900\">{geofence.name}</h4>\n                            {geofence.description && (\n                              <p className=\"text-sm text-gray-600 mt-1\">{geofence.description}</p>\n                            )}\n                            <div className=\"flex items-center space-x-2 mt-2\">\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {geofence.polygon.coordinates[0].length} points\n                              </Badge>\n                              {geofence.created_at && (\n                                <span className=\"text-xs text-gray-500\">\n                                  Created {new Date(geofence.created_at).toLocaleDateString()}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={e => {\n                              e.stopPropagation()\n                              handleDeleteGeofence(geofence.id)\n                            }}\n                            className=\"ml-2\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Instructions */}\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">How to Use</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm text-gray-600\">\n                  <div className=\"flex items-start space-x-2\">\n                    <Plus className=\"h-4 w-4 text-green-600 mt-0.5\" />\n                    <span>Click the polygon tool to draw a new geofence zone</span>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <Edit className=\"h-4 w-4 text-blue-600 mt-0.5\" />\n                    <span>Use the edit tool to modify existing zones</span>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <Trash2 className=\"h-4 w-4 text-red-600 mt-0.5\" />\n                    <span>Use the delete tool to remove zones</span>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <Eye className=\"h-4 w-4 text-purple-600 mt-0.5\" />\n                    <span>Click on zones to view details and manage them</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n        <GeofenceRuleManager assets={assets} geofences={geofences} />\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\assets\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\assets\\page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAssets'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [user, authLoading, fetchAssets]","fix":{"range":[1877,1896],"text":"[user, authLoading, fetchAssets]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useAuth } from '@/components/auth/auth-provider'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Package, Loader2, AlertTriangle, RefreshCw } from 'lucide-react'\nimport Link from 'next/link'\nimport { useToast } from '@/hooks/use-toast'\nimport AssetManagement from '@/components/asset-management'\nimport { Asset, getAssets } from '@/lib/asset-actions'\nimport BulkAssetImport from '@/components/BulkAssetImport'\n\nexport default function AssetsPage() {\n  const { user, loading: authLoading } = useAuth()\n  const [assets, setAssets] = useState<Asset[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [refreshing, setRefreshing] = useState(false)\n  const { toast } = useToast()\n\n  const fetchAssets = async () => {\n    try {\n      setError(null)\n      const result = await getAssets()\n\n      if (result.error) {\n        setError(result.error)\n        toast({\n          title: 'Error Loading Assets',\n          description: result.error,\n          variant: 'destructive',\n        })\n      } else {\n        setAssets(result.data || [])\n      }\n    } catch (error) {\n      console.error('Error fetching assets:', error)\n      setError('Failed to load assets')\n      toast({\n        title: 'Error Loading Assets',\n        description: 'An unexpected error occurred while loading assets',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleRefresh = async () => {\n    setRefreshing(true)\n    await fetchAssets()\n    setRefreshing(false)\n  }\n\n  useEffect(() => {\n    if (!authLoading && user) {\n      fetchAssets()\n    }\n  }, [user, authLoading])\n\n  if (authLoading || loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center\">\n              <Loader2 className=\"h-12 w-12 animate-spin text-blue-600 mx-auto mb-4\" />\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Loading Assets</h2>\n              <p className=\"text-gray-600\">Please wait while we fetch your asset inventory...</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <Card className=\"w-full max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <AlertTriangle className=\"h-5 w-5 mr-2 text-red-600\" />\n                Authentication Required\n              </CardTitle>\n              <CardDescription>Please log in to view and manage your assets.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button asChild className=\"w-full\">\n                <Link href=\"/login\">Log In</Link>\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Package className=\"h-8 w-8 text-blue-600\" />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Asset Management</h1>\n                <p className=\"text-sm text-gray-600\">Comprehensive asset inventory management</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={handleRefresh} disabled={refreshing}>\n                <RefreshCw className={`h-4 w-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />\n                Refresh\n              </Button>\n              <Button asChild>\n                <Link href=\"/add-asset\">\n                  <Package className=\"h-4 w-4 mr-2\" />\n                  Add Asset\n                </Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-6\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Error:</strong> {error}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Bulk Import UI */}\n        <BulkAssetImport />\n\n        {/* Asset Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{assets.length}</div>\n                <div className=\"text-sm text-gray-600\">Total Assets</div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {assets.filter(a => a.status === 'active').length}\n                </div>\n                <div className=\"text-sm text-gray-600\">Active Assets</div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-amber-600\">\n                  {assets.filter(a => a.status === 'maintenance').length}\n                </div>\n                <div className=\"text-sm text-gray-600\">In Maintenance</div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {new Intl.NumberFormat('en-US', {\n                    style: 'currency',\n                    currency: 'USD',\n                    minimumFractionDigits: 0,\n                    maximumFractionDigits: 0,\n                  }).format(assets.reduce((sum, asset) => sum + (asset.purchase_value || 0), 0))}\n                </div>\n                <div className=\"text-sm text-gray-600\">Total Value</div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Asset Management Component */}\n        <AssetManagement assets={assets} loading={loading} onRefresh={handleRefresh} />\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\auth-setup\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\auth\\auth-code-error\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\auth\\auth-code-error\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\auth\\blocked\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\auth\\callback\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextResponse' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\nimport { NextResponse } from 'next/server'\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request: Request) {\n  const requestUrl = new URL(request.url)\n  const code = requestUrl.searchParams.get('code')\n  const error = requestUrl.searchParams.get('error')\n  const error_description = requestUrl.searchParams.get('error_description')\n  const provider = requestUrl.searchParams.get('provider')\n\n  console.log('Auth callback received:', { code: !!code, error, provider })\n\n  // if \"next\" is in param, use it as the redirect URL\n  const next = requestUrl.searchParams.get('next') || '/dashboard'\n\n  // Handle error cases\n  if (error) {\n    console.error('Auth callback error:', error, error_description)\n    return redirect('/auth/auth-code-error')\n  }\n\n  // Check if we have Supabase configuration\n  const hasSupabaseConfig =\n    process.env.NEXT_PUBLIC_SUPABASE_URL && process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\n  if (!hasSupabaseConfig) {\n    console.log('No Supabase configuration found, redirecting to demo')\n    return redirect('/demo')\n  }\n\n  if (code) {\n    const cookieStore = cookies()\n    const supabase = await createClient()\n\n    console.log('Exchanging code for session...')\n    const { data, error: exchangeError } = await supabase.auth.exchangeCodeForSession(code)\n\n    if (exchangeError) {\n      console.error('Code exchange error:', exchangeError)\n      return redirect('/auth/auth-code-error')\n    }\n\n    console.log('Session created successfully, user:', data.user?.id)\n\n    if (data.user) {\n      // Get user data\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      if (!user) {\n        console.error('No user found after code exchange')\n        return redirect('/auth/auth-code-error')\n      }\n\n      // Get full name from user metadata\n      const fullName = user.user_metadata?.full_name || user.user_metadata?.name || null\n      const avatarUrl = user.user_metadata?.avatar_url || null\n\n      // Get organization name from metadata or cookie\n      let orgName = user.user_metadata?.org_name\n      if (!orgName) {\n        // Try to get from cookie for GitHub signups\n        const signupOrgName = cookieStore.get('signup_org_name')\n        if (signupOrgName) {\n          orgName = decodeURIComponent(signupOrgName.value)\n          // Clear the cookie\n          cookieStore.delete('signup_org_name')\n        }\n      }\n\n      // Create profile if it doesn't exist\n      const { data: existingProfile } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', user.id)\n        .single()\n\n      if (!existingProfile) {\n        const { error: insertError } = await supabase.from('profiles').insert({\n          id: user.id,\n          full_name: fullName,\n          avatar_url: avatarUrl,\n          role: 'admin', // First user is admin\n          email: user.email,\n        })\n\n        if (insertError) {\n          console.error('Profile creation error:', insertError)\n        } else {\n          console.log('Profile created successfully')\n\n          // Create default tenant for the user\n          const { data: tenant, error: tenantError } = await supabase\n            .from('tenants')\n            .insert({\n              name: orgName || `${fullName}'s Organization`,\n              plan: 'free',\n              status: 'active',\n              max_users: 5,\n              max_assets: 100,\n              features: {\n                qrCodes: true,\n                analytics: false,\n                api: false,\n                customBranding: false,\n                multipleLocations: false,\n                advancedReports: false,\n              },\n            })\n            .select()\n            .single()\n\n          if (tenantError) {\n            console.error('Tenant creation error:', tenantError)\n          } else if (tenant) {\n            // Update profile with tenant info and make user the owner\n            const { error: updateError } = await supabase\n              .from('profiles')\n              .update({\n                tenant_id: tenant.id,\n                role: 'owner',\n              })\n              .eq('id', user.id)\n\n            if (updateError) {\n              console.error('Profile update error:', updateError)\n            }\n          }\n        }\n      }\n\n      // Successful authentication - redirect to dashboard\n      console.log('Redirecting to dashboard after successful authentication')\n      return redirect(next)\n    }\n  }\n\n  // No code provided - redirect to login\n  console.log('No auth code provided, redirecting to login')\n  return redirect('/login')\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\auth\\debug\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\auth\\fix-github\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\auth\\github-setup\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\auth\\oauth-status\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\auth\\resend\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\auth\\reset-password\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\auth\\reset-password\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2213,2216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2213,2216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport type React from 'react'\n\nimport { useState, useEffect } from 'react'\nimport { useRouter, useSearchParams } from 'next/navigation'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { createClient } from '@/lib/supabase/client'\nimport Link from 'next/link'\n\nexport default function ResetPasswordPage() {\n  const [password, setPassword] = useState('')\n  const [confirmPassword, setConfirmPassword] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [message, setMessage] = useState('')\n  const [error, setError] = useState('')\n  const [mounted, setMounted] = useState(false)\n\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const accessToken = searchParams.get('access_token')\n  const refreshToken = searchParams.get('refresh_token')\n\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  const handleResetPassword = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!mounted) return\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match')\n      return\n    }\n\n    if (password.length < 6) {\n      setError('Password must be at least 6 characters long')\n      return\n    }\n\n    setLoading(true)\n    setError('')\n    setMessage('')\n\n    try {\n      const supabase = createClient()\n\n      if (accessToken && refreshToken) {\n        // Set the session first\n        const { error: sessionError } = await supabase.auth.setSession({\n          access_token: accessToken,\n          refresh_token: refreshToken,\n        })\n\n        if (sessionError) {\n          throw sessionError\n        }\n      }\n\n      // Update the password\n      const { error: updateError } = await supabase.auth.updateUser({\n        password: password,\n      })\n\n      if (updateError) {\n        throw updateError\n      }\n\n      setMessage('Password updated successfully! Redirecting to login...')\n\n      setTimeout(() => {\n        router.push('/login')\n      }, 2000)\n    } catch (error: any) {\n      console.error('Password reset error:', error)\n      setError(error.message || 'An error occurred while resetting your password')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (!mounted) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Reset Password</CardTitle>\n          <CardDescription className=\"text-center\">Enter your new password below</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert className=\"mb-4 border-red-200 bg-red-50\">\n              <AlertDescription className=\"text-red-800\">{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {message && (\n            <Alert className=\"mb-4 border-green-200 bg-green-50\">\n              <AlertDescription className=\"text-green-800\">{message}</AlertDescription>\n            </Alert>\n          )}\n\n          <form onSubmit={handleResetPassword} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">New Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n                required\n                minLength={6}\n                placeholder=\"Enter your new password\"\n                disabled={loading}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n              <Input\n                id=\"confirmPassword\"\n                type=\"password\"\n                value={confirmPassword}\n                onChange={e => setConfirmPassword(e.target.value)}\n                required\n                minLength={6}\n                placeholder=\"Confirm your new password\"\n                disabled={loading}\n              />\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={loading || !password || !confirmPassword}\n            >\n              {loading ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Updating Password...\n                </>\n              ) : (\n                'Update Password'\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <Link href=\"/login\" className=\"text-sm text-blue-600 hover:text-blue-500\">\n              Back to Login\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\auth\\sso-login\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\dashboard\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\dashboard\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1150,1153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1150,1153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkProfile'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [user, loading, router, mounted, checkProfile]","fix":{"range":[1556,1588],"text":"[user, loading, router, mounted, checkProfile]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { useAuth } from '@/components/auth/auth-provider'\nimport { createClient } from '@/lib/supabase/client'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport Link from 'next/link'\nimport dynamic from 'next/dynamic'\n\n// Force dynamic rendering and disable SSR completely\nexport const runtime = 'edge'\n\n// Dynamically import the dashboard component with no SSR\nconst DashboardContent = dynamic(() => import('@/components/dashboard-content'), {\n  ssr: false,\n  loading: () => (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n        <p className=\"text-gray-600\">Loading dashboard...</p>\n      </div>\n    </div>\n  ),\n})\n\nexport default function DashboardPage() {\n  const { user, loading } = useAuth()\n  const router = useRouter()\n  const [profile, setProfile] = useState<any>(null)\n  const [profileLoading, setProfileLoading] = useState(true)\n  const [mounted, setMounted] = useState(false)\n\n  // Ensure component is mounted before accessing browser APIs\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  useEffect(() => {\n    if (!mounted) return\n\n    if (!loading && !user) {\n      router.push('/login')\n      return\n    }\n\n    if (user) {\n      checkProfile()\n    }\n  }, [user, loading, router, mounted])\n\n  const checkProfile = async () => {\n    try {\n      const supabase = createClient()\n      const { data: profileData, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', user?.id)\n        .single()\n\n      if (error && error.code === 'PGRST116') {\n        // No profile found, redirect to profile setup\n        router.push('/profile-setup')\n        return\n      }\n\n      if (error) {\n        console.error('Error fetching profile:', error)\n        return\n      }\n\n      setProfile(profileData)\n    } catch (error) {\n      console.error('Error checking profile:', error)\n    } finally {\n      setProfileLoading(false)\n    }\n  }\n\n  // Don't render anything until mounted\n  if (!mounted) {\n    return null\n  }\n\n  if (loading || profileLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading dashboard...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!user) {\n    return null // Will redirect to login\n  }\n\n  if (!profile) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle>Profile Setup Required</CardTitle>\n            <CardDescription>Please complete your profile to access the dashboard.</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button asChild className=\"w-full\">\n              <Link href=\"/profile-setup\">Complete Profile Setup</Link>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return <DashboardContent />\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\debug-supabase\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\debug-urls\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\demo\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\demo\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\docs\\api\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SwaggerUIType' is defined but never used.","line":4,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[686,689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[686,689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":217,"column":28,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":217,"endColumn":29,"suggestions":[{"messageId":"removeEscape","fix":{"range":[6119,6120],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[6119,6119],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":229,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6509,6512],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6509,6512],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":241,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":241,"endColumn":19},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":711,"column":30,"nodeType":"TemplateElement","messageId":"unnecessaryEscape","endLine":711,"endColumn":31,"suggestions":[{"messageId":"removeEscape","fix":{"range":[25638,25639],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[25638,25638],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport dynamic from 'next/dynamic'\nimport type SwaggerUIType from 'swagger-ui-react'\nimport { useEffect, useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport {\n  Code,\n  Key,\n  Globe,\n  Shield,\n  Copy,\n  CheckCircle,\n  AlertTriangle,\n  ExternalLink,\n  Zap,\n} from 'lucide-react'\n\nconst SwaggerUI = dynamic(() => import('swagger-ui-react'), { ssr: false }) as any\n\nconst apiEndpoints = [\n  {\n    method: 'GET',\n    endpoint: '/api/assets',\n    description: 'Retrieve all assets',\n    auth: 'Required',\n    parameters: [\n      { name: 'page', type: 'number', description: 'Page number for pagination' },\n      { name: 'limit', type: 'number', description: 'Number of items per page' },\n      { name: 'category', type: 'string', description: 'Filter by asset category' },\n      { name: 'status', type: 'string', description: 'Filter by asset status' },\n    ],\n  },\n  {\n    method: 'POST',\n    endpoint: '/api/assets',\n    description: 'Create a new asset',\n    auth: 'Required',\n    parameters: [\n      { name: 'name', type: 'string', description: 'Asset name (required)' },\n      { name: 'category', type: 'string', description: 'Asset category (required)' },\n      { name: 'description', type: 'string', description: 'Asset description' },\n      { name: 'location', type: 'string', description: 'Asset location' },\n      { name: 'value', type: 'number', description: 'Asset value' },\n    ],\n  },\n  {\n    method: 'GET',\n    endpoint: '/api/assets/{id}',\n    description: 'Retrieve a specific asset',\n    auth: 'Required',\n    parameters: [{ name: 'id', type: 'string', description: 'Asset ID (required)' }],\n  },\n  {\n    method: 'PUT',\n    endpoint: '/api/assets/{id}',\n    description: 'Update an existing asset',\n    auth: 'Required',\n    parameters: [\n      { name: 'id', type: 'string', description: 'Asset ID (required)' },\n      { name: 'name', type: 'string', description: 'Asset name' },\n      { name: 'category', type: 'string', description: 'Asset category' },\n      { name: 'description', type: 'string', description: 'Asset description' },\n      { name: 'location', type: 'string', description: 'Asset location' },\n      { name: 'status', type: 'string', description: 'Asset status' },\n    ],\n  },\n  {\n    method: 'DELETE',\n    endpoint: '/api/assets/{id}',\n    description: 'Delete an asset',\n    auth: 'Required',\n    parameters: [{ name: 'id', type: 'string', description: 'Asset ID (required)' }],\n  },\n  {\n    method: 'POST',\n    endpoint: '/api/assets/{id}/qr',\n    description: 'Generate QR code for an asset',\n    auth: 'Required',\n    parameters: [\n      { name: 'id', type: 'string', description: 'Asset ID (required)' },\n      { name: 'size', type: 'number', description: 'QR code size in pixels' },\n    ],\n  },\n  {\n    method: 'GET',\n    endpoint: '/api/analytics/metrics',\n    description: 'Get real-time analytics metrics',\n    auth: 'Required',\n    parameters: [\n      { name: 'period', type: 'string', description: 'Time period (day, week, month)' },\n      { name: 'category', type: 'string', description: 'Filter by category' },\n    ],\n  },\n]\n\nconst codeExamples = {\n  javascript: {\n    auth: `// Authentication\nconst response = await fetch('/api/auth/login', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    email: 'user@example.com',\n    password: 'your-password'\n  })\n});\n\nconst { token } = await response.json();`,\n\n    getAssets: `// Get all assets\nconst response = await fetch('/api/assets', {\n  headers: {\n    'Authorization': \\`Bearer \\${token}\\`,\n    'Content-Type': 'application/json'\n  }\n});\n\nconst assets = await response.json();`,\n\n    createAsset: `// Create a new asset\nconst response = await fetch('/api/assets', {\n  method: 'POST',\n  headers: {\n    'Authorization': \\`Bearer \\${token}\\`,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: 'MacBook Pro 16\"',\n    category: 'it-equipment',\n    description: 'Company laptop for development',\n    location: 'Office A',\n    value: 2500\n  })\n});\n\nconst newAsset = await response.json();`,\n\n    generateQR: `// Generate QR code\nconst response = await fetch(\\`/api/assets/\\${assetId}/qr\\`, {\n  method: 'POST',\n  headers: {\n    'Authorization': \\`Bearer \\${token}\\`,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    size: 256\n  })\n});\n\nconst { qrCode } = await response.json();`,\n  },\n\n  python: {\n    auth: `# Authentication\nimport requests\n\nresponse = requests.post('https://your-domain.com/api/auth/login', {\n    'email': 'user@example.com',\n    'password': 'your-password'\n})\n\ntoken = response.json()['token']`,\n\n    getAssets: `# Get all assets\nheaders = {\n    'Authorization': f'Bearer {token}',\n    'Content-Type': 'application/json'\n}\n\nresponse = requests.get('https://your-domain.com/api/assets', headers=headers)\nassets = response.json()`,\n\n    createAsset: `# Create a new asset\ndata = {\n    'name': 'MacBook Pro 16\"',\n    'category': 'it-equipment',\n    'description': 'Company laptop for development',\n    'location': 'Office A',\n    'value': 2500\n}\n\nresponse = requests.post(\n    'https://your-domain.com/api/assets',\n    headers=headers,\n    json=data\n)\n\nnew_asset = response.json()`,\n  },\n\n  curl: {\n    auth: `# Authentication\ncurl -X POST https://your-domain.com/api/auth/login \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\n    \"email\": \"user@example.com\",\n    \"password\": \"your-password\"\n  }'`,\n\n    getAssets: `# Get all assets\ncurl -X GET https://your-domain.com/api/assets \\\\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\\\n  -H \"Content-Type: application/json\"`,\n\n    createAsset: `# Create a new asset\ncurl -X POST https://your-domain.com/api/assets \\\\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\n    \"name\": \"MacBook Pro 16\\\"\",\n    \"category\": \"it-equipment\",\n    \"description\": \"Company laptop for development\",\n    \"location\": \"Office A\",\n    \"value\": 2500\n  }'`,\n  },\n}\n\nexport default function APIDocumentationPage() {\n  const [selectedLanguage, setSelectedLanguage] = useState('javascript')\n  const [copiedCode, setCopiedCode] = useState<string | null>(null)\n  const [openApiSpec, setOpenApiSpec] = useState<any>(null)\n  const [loadingSpec, setLoadingSpec] = useState(false)\n  const [specError, setSpecError] = useState<string | null>(null)\n\n  useEffect(() => {\n    async function fetchSpec() {\n      setLoadingSpec(true)\n      setSpecError(null)\n      try {\n        const res = await fetch('/api/external/docs')\n        const data = await res.json()\n        setOpenApiSpec(data)\n      } catch (err) {\n        setSpecError('Failed to load OpenAPI spec')\n      } finally {\n        setLoadingSpec(false)\n      }\n    }\n    fetchSpec()\n  }, [])\n\n  const copyToClipboard = (code: string, id: string) => {\n    navigator.clipboard.writeText(code)\n    setCopiedCode(id)\n    setTimeout(() => setCopiedCode(null), 2000)\n  }\n\n  const getMethodColor = (method: string) => {\n    switch (method) {\n      case 'GET':\n        return 'bg-green-100 text-green-800'\n      case 'POST':\n        return 'bg-blue-100 text-blue-800'\n      case 'PUT':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'DELETE':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4 flex items-center\">\n            <Code className=\"h-10 w-10 mr-4 text-blue-600\" />\n            API Documentation\n          </h1>\n          <p className=\"text-xl text-gray-600\">\n            Complete reference for integrating with the Asset Management System API\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-6\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"authentication\">Authentication</TabsTrigger>\n            <TabsTrigger value=\"endpoints\">Endpoints</TabsTrigger>\n            <TabsTrigger value=\"examples\">Examples</TabsTrigger>\n            <TabsTrigger value=\"webhooks\">Webhooks</TabsTrigger>\n            <TabsTrigger value=\"openapi\">OpenAPI</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>API Overview</CardTitle>\n                  <CardDescription>\n                    RESTful API for managing assets, QR codes, and analytics\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"p-4 border rounded-lg text-center\">\n                      <Globe className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\n                      <h4 className=\"font-semibold\">RESTful Design</h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Standard HTTP methods and status codes\n                      </p>\n                    </div>\n                    <div className=\"p-4 border rounded-lg text-center\">\n                      <Shield className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                      <h4 className=\"font-semibold\">Secure Authentication</h4>\n                      <p className=\"text-sm text-gray-600\">\n                        JWT-based authentication with role-based access\n                      </p>\n                    </div>\n                    <div className=\"p-4 border rounded-lg text-center\">\n                      <Zap className=\"h-8 w-8 text-yellow-600 mx-auto mb-2\" />\n                      <h4 className=\"font-semibold\">Real-time Updates</h4>\n                      <p className=\"text-sm text-gray-600\">\n                        WebSocket support for live data synchronization\n                      </p>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">Base URL</h4>\n                    <div className=\"bg-gray-100 p-3 rounded-lg font-mono text-sm\">\n                      https://your-domain.com/api/v1\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">Response Format</h4>\n                    <p className=\"text-gray-600 mb-3\">\n                      All API responses are returned in JSON format with consistent structure:\n                    </p>\n                    <div className=\"bg-gray-900 text-gray-100 p-4 rounded-lg\">\n                      <pre className=\"text-sm\">\n                        {`{\n  \"success\": true,\n  \"data\": {\n    // Response data\n  },\n  \"message\": \"Operation completed successfully\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\"\n}`}\n                      </pre>\n                    </div>\n                  </div>\n\n                  <Alert>\n                    <Key className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      <strong>API Key Required:</strong> All endpoints require authentication except\n                      for public asset viewing.\n                    </AlertDescription>\n                  </Alert>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Rate Limiting</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <p className=\"text-gray-600\">\n                      To ensure fair usage and system stability, the API implements rate limiting:\n                    </p>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"p-4 border rounded-lg\">\n                        <h5 className=\"font-medium mb-2\">Standard Tier</h5>\n                        <ul className=\"text-sm text-gray-600 space-y-1\">\n                          <li>• 1,000 requests per hour</li>\n                          <li>• 100 requests per minute</li>\n                          <li>• Burst limit: 20 requests per second</li>\n                        </ul>\n                      </div>\n                      <div className=\"p-4 border rounded-lg\">\n                        <h5 className=\"font-medium mb-2\">Premium Tier</h5>\n                        <ul className=\"text-sm text-gray-600 space-y-1\">\n                          <li>• 10,000 requests per hour</li>\n                          <li>• 500 requests per minute</li>\n                          <li>• Burst limit: 50 requests per second</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"authentication\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Authentication Methods</CardTitle>\n                  <CardDescription>Secure your API requests with JWT tokens</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">JWT Token Authentication</h4>\n                    <p className=\"text-gray-600 mb-4\">\n                      The API uses JSON Web Tokens (JWT) for authentication. Include the token in\n                      the Authorization header:\n                    </p>\n                    <div className=\"bg-gray-900 text-gray-100 p-4 rounded-lg\">\n                      <pre className=\"text-sm\">{`Authorization: Bearer YOUR_JWT_TOKEN`}</pre>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">Obtaining a Token</h4>\n                    <p className=\"text-gray-600 mb-3\">\n                      Send a POST request to the login endpoint with your credentials:\n                    </p>\n                    <div className=\"bg-gray-900 text-gray-100 p-4 rounded-lg\">\n                      <pre className=\"text-sm\">\n                        {`POST /api/auth/login\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"your-password\"\n}\n\nResponse:\n{\n  \"success\": true,\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"expires_in\": 3600,\n    \"user\": {\n      \"id\": \"user-id\",\n      \"email\": \"user@example.com\",\n      \"role\": \"admin\"\n    }\n  }\n}`}\n                      </pre>\n                    </div>\n                  </div>\n\n                  <Alert>\n                    <AlertTriangle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      <strong>Token Expiry:</strong> Tokens expire after 1 hour. Implement token\n                      refresh logic in your application.\n                    </AlertDescription>\n                  </Alert>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">Token Refresh</h4>\n                    <div className=\"bg-gray-900 text-gray-100 p-4 rounded-lg\">\n                      <pre className=\"text-sm\">\n                        {`POST /api/auth/refresh\nAuthorization: Bearer YOUR_CURRENT_TOKEN\n\nResponse:\n{\n  \"success\": true,\n  \"data\": {\n    \"token\": \"new_jwt_token_here\",\n    \"expires_in\": 3600\n  }\n}`}\n                      </pre>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>API Key Authentication</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <p className=\"text-gray-600\">\n                      For server-to-server integrations, you can use API keys:\n                    </p>\n                    <div className=\"bg-gray-900 text-gray-100 p-4 rounded-lg\">\n                      <pre className=\"text-sm\">{`X-API-Key: your-api-key-here`}</pre>\n                    </div>\n                    <Alert>\n                      <Key className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        API keys can be generated in your account settings and should be kept\n                        secure.\n                      </AlertDescription>\n                    </Alert>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"endpoints\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>API Endpoints</CardTitle>\n                  <CardDescription>\n                    Complete list of available endpoints and their parameters\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    {apiEndpoints.map((endpoint, index) => (\n                      <div key={index} className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Badge className={getMethodColor(endpoint.method)}>\n                              {endpoint.method}\n                            </Badge>\n                            <code className=\"text-sm font-mono bg-gray-100 px-2 py-1 rounded\">\n                              {endpoint.endpoint}\n                            </code>\n                          </div>\n                          <Badge variant=\"outline\">{endpoint.auth}</Badge>\n                        </div>\n\n                        <p className=\"text-gray-600 mb-4\">{endpoint.description}</p>\n\n                        <div>\n                          <h5 className=\"font-medium mb-2\">Parameters</h5>\n                          <div className=\"space-y-2\">\n                            {endpoint.parameters.map((param, paramIndex) => (\n                              <div\n                                key={paramIndex}\n                                className=\"flex items-center justify-between text-sm\"\n                              >\n                                <div className=\"flex items-center space-x-2\">\n                                  <code className=\"bg-gray-100 px-2 py-1 rounded\">\n                                    {param.name}\n                                  </code>\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {param.type}\n                                  </Badge>\n                                </div>\n                                <span className=\"text-gray-600\">{param.description}</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"examples\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Code Examples</CardTitle>\n                  <CardDescription>\n                    Implementation examples in different programming languages\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"mb-4\">\n                    <div className=\"flex space-x-2\">\n                      {Object.keys(codeExamples).map(lang => (\n                        <Button\n                          key={lang}\n                          variant={selectedLanguage === lang ? 'default' : 'outline'}\n                          size=\"sm\"\n                          onClick={() => setSelectedLanguage(lang)}\n                        >\n                          {lang.charAt(0).toUpperCase() + lang.slice(1)}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-6\">\n                    {Object.entries(\n                      codeExamples[selectedLanguage as keyof typeof codeExamples]\n                    ).map(([key, code]) => (\n                      <div key={key}>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-medium capitalize\">\n                            {key.replace(/([A-Z])/g, ' $1').trim()}\n                          </h4>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => copyToClipboard(code, key)}\n                          >\n                            {copiedCode === key ? (\n                              <CheckCircle className=\"h-4 w-4\" />\n                            ) : (\n                              <Copy className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                        <div className=\"bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto\">\n                          <pre className=\"text-sm\">\n                            <code>{code}</code>\n                          </pre>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Error Handling</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <p className=\"text-gray-600\">\n                      The API returns standard HTTP status codes and detailed error messages:\n                    </p>\n                    <div className=\"bg-gray-900 text-gray-100 p-4 rounded-lg\">\n                      <pre className=\"text-sm\">\n                        {`// Error Response Format\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Asset name is required\",\n    \"details\": {\n      \"field\": \"name\",\n      \"value\": null\n    }\n  },\n  \"timestamp\": \"2024-01-15T10:30:00Z\"\n}\n\n// Common Status Codes\n200 - Success\n201 - Created\n400 - Bad Request\n401 - Unauthorized\n403 - Forbidden\n404 - Not Found\n429 - Too Many Requests\n500 - Internal Server Error`}\n                      </pre>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"webhooks\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Webhooks</CardTitle>\n                  <CardDescription>Real-time notifications for asset events</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">Available Events</h4>\n                    <div className=\"space-y-3\">\n                      {[\n                        {\n                          event: 'asset.created',\n                          description: 'Triggered when a new asset is created',\n                        },\n                        {\n                          event: 'asset.updated',\n                          description: 'Triggered when an asset is modified',\n                        },\n                        {\n                          event: 'asset.deleted',\n                          description: 'Triggered when an asset is deleted',\n                        },\n                        {\n                          event: 'qr.generated',\n                          description: 'Triggered when a QR code is generated',\n                        },\n                        { event: 'qr.scanned', description: 'Triggered when a QR code is scanned' },\n                        { event: 'user.login', description: 'Triggered when a user logs in' },\n                      ].map((webhook, index) => (\n                        <div key={index} className=\"p-3 border rounded-lg\">\n                          <div className=\"flex items-center justify-between\">\n                            <code className=\"text-sm font-mono bg-gray-100 px-2 py-1 rounded\">\n                              {webhook.event}\n                            </code>\n                            <span className=\"text-sm text-gray-600\">{webhook.description}</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">Webhook Payload</h4>\n                    <div className=\"bg-gray-900 text-gray-100 p-4 rounded-lg\">\n                      <pre className=\"text-sm\">\n                        {`{\n  \"event\": \"asset.created\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"data\": {\n    \"asset\": {\n      \"id\": \"asset-123\",\n      \"name\": \"MacBook Pro 16\\\"\",\n      \"category\": \"it-equipment\",\n      \"created_by\": \"user-456\",\n      \"created_at\": \"2024-01-15T10:30:00Z\"\n    }\n  },\n  \"webhook_id\": \"webhook-789\"\n}`}\n                      </pre>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-3\">Webhook Configuration</h4>\n                    <p className=\"text-gray-600 mb-3\">\n                      Configure webhooks in your account settings or via the API:\n                    </p>\n                    <div className=\"bg-gray-900 text-gray-100 p-4 rounded-lg\">\n                      <pre className=\"text-sm\">\n                        {`POST /api/webhooks\nAuthorization: Bearer YOUR_TOKEN\n\n{\n  \"url\": \"https://your-app.com/webhooks/assets\",\n  \"events\": [\"asset.created\", \"asset.updated\"],\n  \"secret\": \"your-webhook-secret\"\n}`}\n                      </pre>\n                    </div>\n                  </div>\n\n                  <Alert>\n                    <Shield className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      <strong>Security:</strong> Webhook payloads are signed with HMAC-SHA256.\n                      Verify signatures to ensure authenticity.\n                    </AlertDescription>\n                  </Alert>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"openapi\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>OpenAPI / Swagger Reference</CardTitle>\n                  <CardDescription>\n                    Interactive API reference generated from the OpenAPI spec\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"mb-4\">\n                    <Button\n                      asChild\n                      variant=\"outline\"\n                      size=\"sm\"\n                      disabled={loadingSpec || !openApiSpec}\n                    >\n                      <a href=\"/api/external/docs\" download=\"openapi.json\">\n                        Download OpenAPI JSON\n                      </a>\n                    </Button>\n                  </div>\n                  {loadingSpec && <div>Loading OpenAPI spec...</div>}\n                  {specError && <div className=\"text-red-600\">{specError}</div>}\n                  {openApiSpec && (\n                    <div className=\"bg-white rounded shadow p-2\">\n                      <SwaggerUI spec={openApiSpec} />\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* SDK and Tools */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>SDKs and Tools</CardTitle>\n            <CardDescription>\n              Official SDKs and tools to accelerate your integration\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"p-4 border rounded-lg\">\n                <h4 className=\"font-semibold mb-2\">JavaScript SDK</h4>\n                <p className=\"text-sm text-gray-600 mb-3\">\n                  Official JavaScript/TypeScript SDK for web and Node.js applications\n                </p>\n                <Button variant=\"outline\" size=\"sm\">\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\n                  View on GitHub\n                </Button>\n              </div>\n              <div className=\"p-4 border rounded-lg\">\n                <h4 className=\"font-semibold mb-2\">Python SDK</h4>\n                <p className=\"text-sm text-gray-600 mb-3\">\n                  Python library for easy integration with your Python applications\n                </p>\n                <Button variant=\"outline\" size=\"sm\">\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\n                  View on PyPI\n                </Button>\n              </div>\n              <div className=\"p-4 border rounded-lg\">\n                <h4 className=\"font-semibold mb-2\">Postman Collection</h4>\n                <p className=\"text-sm text-gray-600 mb-3\">\n                  Complete Postman collection for testing and exploring the API\n                </p>\n                <Button variant=\"outline\" size=\"sm\">\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\n                  Import Collection\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\docs\\faq\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\docs\\faq\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\docs\\getting-started\\page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":327,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11373,11765],"text":"\n                      Asset management is the systematic approach to tracking, maintaining, and\n                      optimizing your organization&apos;s physical and digital assets throughout their\n                      lifecycle. Our comprehensive system provides you with powerful tools to\n                      streamline operations, reduce costs, and improve efficiency.\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11373,11765],"text":"\n                      Asset management is the systematic approach to tracking, maintaining, and\n                      optimizing your organization&lsquo;s physical and digital assets throughout their\n                      lifecycle. Our comprehensive system provides you with powerful tools to\n                      streamline operations, reduce costs, and improve efficiency.\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11373,11765],"text":"\n                      Asset management is the systematic approach to tracking, maintaining, and\n                      optimizing your organization&#39;s physical and digital assets throughout their\n                      lifecycle. Our comprehensive system provides you with powerful tools to\n                      streamline operations, reduce costs, and improve efficiency.\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11373,11765],"text":"\n                      Asset management is the systematic approach to tracking, maintaining, and\n                      optimizing your organization&rsquo;s physical and digital assets throughout their\n                      lifecycle. Our comprehensive system provides you with powerful tools to\n                      streamline operations, reduce costs, and improve efficiency.\n                    "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":505,"column":69,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[20766,20966],"text":"\n                        Set your timezone, notification preferences, default asset categories, and\n                        security settings to match your organization&apos;s needs.\n                      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[20766,20966],"text":"\n                        Set your timezone, notification preferences, default asset categories, and\n                        security settings to match your organization&lsquo;s needs.\n                      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[20766,20966],"text":"\n                        Set your timezone, notification preferences, default asset categories, and\n                        security settings to match your organization&#39;s needs.\n                      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[20766,20966],"text":"\n                        Set your timezone, notification preferences, default asset categories, and\n                        security settings to match your organization&rsquo;s needs.\n                      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":885,"column":78,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[39928,39934],"text":"✅ Do&apos;s"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[39928,39934],"text":"✅ Do&lsquo;s"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[39928,39934],"text":"✅ Do&#39;s"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[39928,39934],"text":"✅ Do&rsquo;s"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":920,"column":77,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[41850,41858],"text":"❌ Don&apos;ts"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[41850,41858],"text":"❌ Don&lsquo;ts"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[41850,41858],"text":"❌ Don&#39;ts"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[41850,41858],"text":"❌ Don&rsquo;ts"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":1477,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[70695,70837],"text":"\n                Now that you understand the basics, here&apos;s what to do next to maximize your system's\n                potential\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[70695,70837],"text":"\n                Now that you understand the basics, here&lsquo;s what to do next to maximize your system's\n                potential\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[70695,70837],"text":"\n                Now that you understand the basics, here&#39;s what to do next to maximize your system's\n                potential\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[70695,70837],"text":"\n                Now that you understand the basics, here&rsquo;s what to do next to maximize your system's\n                potential\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":1477,"column":99,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[70695,70837],"text":"\n                Now that you understand the basics, here's what to do next to maximize your system&apos;s\n                potential\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[70695,70837],"text":"\n                Now that you understand the basics, here's what to do next to maximize your system&lsquo;s\n                potential\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[70695,70837],"text":"\n                Now that you understand the basics, here's what to do next to maximize your system&#39;s\n                potential\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[70695,70837],"text":"\n                Now that you understand the basics, here's what to do next to maximize your system&rsquo;s\n                potential\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport { motion } from 'framer-motion'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Progress } from '@/components/ui/progress'\nimport {\n  CheckCircle,\n  ArrowRight,\n  Play,\n  Users,\n  Settings,\n  Package,\n  QrCode,\n  BarChart3,\n  Shield,\n  Lightbulb,\n  AlertTriangle,\n  Clock,\n  Target,\n  Zap,\n  Video,\n  Download,\n  Rocket,\n  Globe,\n  Smartphone,\n  Monitor,\n  Wifi,\n} from 'lucide-react'\n\nconst quickStartSteps = [\n  {\n    id: 1,\n    title: 'Complete Profile Setup',\n    description: 'Set up your account with organization details',\n    time: '2 minutes',\n    completed: false,\n  },\n  {\n    id: 2,\n    title: 'Add Your First Asset',\n    description: 'Create your first asset entry in the system',\n    time: '3 minutes',\n    completed: false,\n  },\n  {\n    id: 3,\n    title: 'Generate QR Code',\n    description: 'Create a QR code for easy asset tracking',\n    time: '1 minute',\n    completed: false,\n  },\n  {\n    id: 4,\n    title: 'Scan QR Code',\n    description: 'Test the scanning functionality',\n    time: '1 minute',\n    completed: false,\n  },\n  {\n    id: 5,\n    title: 'View Dashboard Analytics',\n    description: 'Explore your asset management dashboard',\n    time: '2 minutes',\n    completed: false,\n  },\n]\n\nconst systemFeatures = [\n  {\n    icon: Package,\n    title: 'Asset Management',\n    description:\n      'Create, organize, and track all your physical and digital assets with detailed information and lifecycle management.',\n    color: 'text-blue-600',\n    bgColor: 'bg-blue-50',\n  },\n  {\n    icon: QrCode,\n    title: 'QR Code System',\n    description:\n      'Generate unique QR codes for instant asset identification, bulk operations, and mobile scanning capabilities.',\n    color: 'text-purple-600',\n    bgColor: 'bg-purple-50',\n  },\n  {\n    icon: BarChart3,\n    title: 'Real-time Analytics',\n    description:\n      'Monitor performance with live dashboards, custom reports, and comprehensive data visualization tools.',\n    color: 'text-orange-600',\n    bgColor: 'bg-orange-50',\n  },\n  {\n    icon: Users,\n    title: 'Team Collaboration',\n    description:\n      'Work together with role-based access, permission controls, activity tracking, and team workflows.',\n    color: 'text-indigo-600',\n    bgColor: 'bg-indigo-50',\n  },\n  {\n    icon: Shield,\n    title: 'Security & Compliance',\n    description:\n      'Enterprise-grade security with audit logs, compliance reporting, and data protection features.',\n    color: 'text-green-600',\n    bgColor: 'bg-green-50',\n  },\n  {\n    icon: Globe,\n    title: 'Cloud-Based Platform',\n    description:\n      'Access your assets from anywhere with our secure, scalable cloud infrastructure and offline capabilities.',\n    color: 'text-cyan-600',\n    bgColor: 'bg-cyan-50',\n  },\n]\n\nconst benefits = [\n  {\n    icon: Zap,\n    title: 'Improved Efficiency',\n    description:\n      'Reduce time spent searching for assets and streamline operations with automated workflows and smart notifications.',\n    stats: '75% faster asset location',\n  },\n  {\n    icon: Shield,\n    title: 'Better Security',\n    description:\n      'Track asset movement, prevent loss or theft with real-time alerts, and maintain comprehensive audit trails.',\n    stats: '90% reduction in asset loss',\n  },\n  {\n    icon: BarChart3,\n    title: 'Data-Driven Decisions',\n    description:\n      'Make informed decisions with comprehensive analytics, predictive insights, and customizable reporting.',\n    stats: '3x better asset utilization',\n  },\n]\n\nexport default function GettingStartedPage() {\n  const [completedSteps, setCompletedSteps] = useState<number[]>([])\n  const [activeTab, setActiveTab] = useState('overview')\n\n  const toggleStep = (stepId: number) => {\n    setCompletedSteps(prev =>\n      prev.includes(stepId) ? prev.filter(id => id !== stepId) : [...prev, stepId]\n    )\n  }\n\n  const progress = (completedSteps.length / quickStartSteps.length) * 100\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50\">\n      {/* Header */}\n      <motion.div\n        className=\"bg-white/80 backdrop-blur-sm border-b border-slate-200/60\"\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n      >\n        <div className=\"max-w-5xl mx-auto px-4 py-12\">\n          <motion.div\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n            className=\"flex items-center justify-center mb-6\"\n          >\n            <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 p-3 rounded-2xl shadow-lg\">\n              <Play className=\"h-8 w-8 text-white\" />\n            </div>\n          </motion.div>\n\n          <motion.h1\n            className=\"text-5xl font-bold bg-gradient-to-r from-slate-900 via-green-900 to-emerald-900 bg-clip-text text-transparent mb-6 text-center\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.3 }}\n          >\n            Getting Started Guide\n          </motion.h1>\n\n          <motion.p\n            className=\"text-xl text-slate-600 text-center max-w-3xl mx-auto leading-relaxed\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.4 }}\n          >\n            Welcome to your Asset Management System! This comprehensive guide will help you get up\n            and running quickly and efficiently with all the tools you need to manage your assets\n            professionally.\n          </motion.p>\n        </div>\n      </motion.div>\n\n      <div className=\"max-w-5xl mx-auto px-4 py-8\">\n        {/* Progress Tracker */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.5 }}\n        >\n          <Card className=\"mb-8 border-green-200 bg-gradient-to-r from-green-50 to-emerald-50 shadow-lg\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"text-green-800 text-2xl flex items-center\">\n                    <Rocket className=\"h-6 w-6 mr-2\" />\n                    Quick Start Progress\n                  </CardTitle>\n                  <CardDescription className=\"text-green-700 text-lg\">\n                    Complete these steps to get your system ready for use\n                  </CardDescription>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-3xl font-bold text-green-800\">{Math.round(progress)}%</div>\n                  <div className=\"text-sm text-green-600\">Complete</div>\n                </div>\n              </div>\n              <Progress value={progress} className=\"mt-4\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {quickStartSteps.map((step, index) => (\n                  <motion.div\n                    key={step.id}\n                    className={`flex items-center space-x-4 p-4 rounded-lg border transition-all duration-200 cursor-pointer ${\n                      completedSteps.includes(step.id)\n                        ? 'bg-green-100 border-green-300'\n                        : 'bg-white border-green-200 hover:bg-green-50'\n                    }`}\n                    onClick={() => toggleStep(step.id)}\n                    whileHover={{ scale: 1.01 }}\n                    whileTap={{ scale: 0.99 }}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                  >\n                    <div\n                      className={`rounded-full w-8 h-8 flex items-center justify-center font-bold text-sm ${\n                        completedSteps.includes(step.id)\n                          ? 'bg-green-600 text-white'\n                          : 'bg-green-200 text-green-800'\n                      }`}\n                    >\n                      {completedSteps.includes(step.id) ? (\n                        <CheckCircle className=\"h-5 w-5\" />\n                      ) : (\n                        step.id\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"font-semibold text-slate-900\">{step.title}</div>\n                      <div className=\"text-sm text-slate-600\">{step.description}</div>\n                    </div>\n                    <div className=\"text-xs text-green-600 font-medium\">{step.time}</div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5 bg-white shadow-sm\">\n            <TabsTrigger\n              value=\"overview\"\n              className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white\"\n            >\n              Overview\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"setup\"\n              className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white\"\n            >\n              Setup\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"first-asset\"\n              className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white\"\n            >\n              First Asset\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"qr-codes\"\n              className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white\"\n            >\n              QR Codes\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"dashboard\"\n              className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white\"\n            >\n              Dashboard\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\">\n            <motion.div\n              className=\"space-y-8\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5 }}\n            >\n              {/* System Overview */}\n              <Card className=\"shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-slate-900 text-2xl\">System Overview</CardTitle>\n                  <CardDescription className=\"text-slate-600 text-lg\">\n                    Understanding the core components of your asset management system\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-8\">\n                  <div>\n                    <h3 className=\"text-xl font-semibold mb-4 text-slate-900\">\n                      What is Asset Management?\n                    </h3>\n                    <p className=\"text-slate-600 mb-6 leading-relaxed text-lg\">\n                      Asset management is the systematic approach to tracking, maintaining, and\n                      optimizing your organization's physical and digital assets throughout their\n                      lifecycle. Our comprehensive system provides you with powerful tools to\n                      streamline operations, reduce costs, and improve efficiency.\n                    </p>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-4\">\n                        <h4 className=\"font-semibold text-slate-900\">Core Capabilities:</h4>\n                        <ul className=\"space-y-3 text-slate-600\">\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-5 w-5 text-green-600 mr-3\" />\n                            Track asset location, status, and condition in real-time\n                          </li>\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-5 w-5 text-green-600 mr-3\" />\n                            Generate and scan QR codes for instant identification\n                          </li>\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-5 w-5 text-green-600 mr-3\" />\n                            Monitor asset utilization and performance metrics\n                          </li>\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-5 w-5 text-green-600 mr-3\" />\n                            Generate comprehensive reports and analytics\n                          </li>\n                        </ul>\n                      </div>\n                      <div className=\"space-y-4\">\n                        <h4 className=\"font-semibold text-slate-900\">Advanced Features:</h4>\n                        <ul className=\"space-y-3 text-slate-600\">\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-5 w-5 text-green-600 mr-3\" />\n                            Automated maintenance scheduling and alerts\n                          </li>\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-5 w-5 text-green-600 mr-3\" />\n                            Depreciation tracking and financial reporting\n                          </li>\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-5 w-5 text-green-600 mr-3\" />\n                            Multi-location support with GPS integration\n                          </li>\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-5 w-5 text-green-600 mr-3\" />\n                            API integration with existing business systems\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Feature Cards */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {systemFeatures.map((feature, index) => (\n                      <motion.div\n                        key={index}\n                        className={`p-6 border rounded-xl ${feature.bgColor} border-opacity-50 hover:shadow-lg transition-all duration-200`}\n                        whileHover={{ scale: 1.02, y: -4 }}\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.1 }}\n                      >\n                        <feature.icon className={`h-10 w-10 ${feature.color} mb-4`} />\n                        <h4 className=\"font-semibold text-slate-900 mb-2\">{feature.title}</h4>\n                        <p className=\"text-sm text-slate-600 leading-relaxed\">\n                          {feature.description}\n                        </p>\n                      </motion.div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Key Benefits */}\n              <Card className=\"shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-slate-900 text-2xl\">Key Benefits</CardTitle>\n                  <CardDescription className=\"text-slate-600\">\n                    Discover how our asset management system transforms your operations\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                    {benefits.map((benefit, index) => (\n                      <motion.div\n                        key={index}\n                        className=\"text-center\"\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.2 }}\n                      >\n                        <div className=\"bg-gradient-to-br from-blue-100 to-purple-100 w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                          <benefit.icon className=\"h-10 w-10 text-blue-600\" />\n                        </div>\n                        <h4 className=\"font-semibold mb-3 text-slate-900 text-lg\">\n                          {benefit.title}\n                        </h4>\n                        <p className=\"text-slate-600 mb-3 leading-relaxed\">{benefit.description}</p>\n                        <Badge\n                          variant=\"outline\"\n                          className=\"bg-green-50 text-green-700 border-green-300\"\n                        >\n                          {benefit.stats}\n                        </Badge>\n                      </motion.div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </TabsContent>\n\n          <TabsContent value=\"setup\">\n            <motion.div\n              className=\"space-y-6\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5 }}\n            >\n              <Card className=\"shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-slate-900 text-2xl\">Initial Setup</CardTitle>\n                  <CardDescription className=\"text-slate-600 text-lg\">\n                    Configure your account and system preferences for optimal performance\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-8\">\n                  <Alert className=\"border-blue-200 bg-blue-50\">\n                    <Lightbulb className=\"h-4 w-4 text-blue-600\" />\n                    <AlertDescription className=\"text-blue-800\">\n                      <strong>Pro Tip:</strong> Complete your profile setup first to ensure all\n                      features work correctly and to personalize your experience.\n                    </AlertDescription>\n                  </Alert>\n\n                  <div className=\"space-y-6\">\n                    <motion.div\n                      className=\"border-l-4 border-blue-500 pl-6 py-4 bg-blue-50 rounded-r-lg\"\n                      whileHover={{ x: 4 }}\n                    >\n                      <h4 className=\"font-semibold text-blue-900 text-lg mb-2\">\n                        Step 1: Complete Your Profile\n                      </h4>\n                      <p className=\"text-blue-800 mb-4 leading-relaxed\">\n                        Add your name, organization details, contact information, and preferences.\n                        This helps personalize your experience and enables team collaboration\n                        features.\n                      </p>\n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"text-sm text-blue-700\">\n                          <strong>Required Information:</strong>\n                        </div>\n                        <ul className=\"text-sm text-blue-700 space-y-1 ml-4\">\n                          <li>• Full name and job title</li>\n                          <li>• Organization name and industry</li>\n                          <li>• Contact email and phone number</li>\n                          <li>• Timezone and language preferences</li>\n                        </ul>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"border-blue-300 text-blue-700 hover:bg-blue-100\"\n                      >\n                        <Settings className=\"h-4 w-4 mr-2\" />\n                        Go to Profile Settings\n                      </Button>\n                    </motion.div>\n\n                    <motion.div\n                      className=\"border-l-4 border-green-500 pl-6 py-4 bg-green-50 rounded-r-lg\"\n                      whileHover={{ x: 4 }}\n                    >\n                      <h4 className=\"font-semibold text-green-900 text-lg mb-2\">\n                        Step 2: Configure System Preferences\n                      </h4>\n                      <p className=\"text-green-800 mb-4 leading-relaxed\">\n                        Set your timezone, notification preferences, default asset categories, and\n                        security settings to match your organization's needs.\n                      </p>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                        <div>\n                          <div className=\"text-sm font-medium text-green-800\">\n                            General Settings:\n                          </div>\n                          <ul className=\"text-sm text-green-700 space-y-1 mt-1\">\n                            <li>• Timezone configuration</li>\n                            <li>• Date and time formats</li>\n                            <li>• Default currency</li>\n                            <li>• Language preferences</li>\n                          </ul>\n                        </div>\n                        <div>\n                          <div className=\"text-sm font-medium text-green-800\">Notifications:</div>\n                          <ul className=\"text-sm text-green-700 space-y-1 mt-1\">\n                            <li>• Email notification settings</li>\n                            <li>• Mobile push notifications</li>\n                            <li>• Alert thresholds</li>\n                            <li>• Report delivery schedules</li>\n                          </ul>\n                        </div>\n                      </div>\n                    </motion.div>\n\n                    <motion.div\n                      className=\"border-l-4 border-purple-500 pl-6 py-4 bg-purple-50 rounded-r-lg\"\n                      whileHover={{ x: 4 }}\n                    >\n                      <h4 className=\"font-semibold text-purple-900 text-lg mb-2\">\n                        Step 3: Invite Team Members (Optional)\n                      </h4>\n                      <p className=\"text-purple-800 mb-4 leading-relaxed\">\n                        Add team members and assign appropriate roles and permissions. Set up\n                        departments and access levels for better organization.\n                      </p>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                        <div className=\"text-center p-3 bg-white rounded-lg\">\n                          <div className=\"font-medium text-purple-900\">Admin</div>\n                          <div className=\"text-xs text-purple-700\">Full access</div>\n                        </div>\n                        <div className=\"text-center p-3 bg-white rounded-lg\">\n                          <div className=\"font-medium text-purple-900\">Manager</div>\n                          <div className=\"text-xs text-purple-700\">Department access</div>\n                        </div>\n                        <div className=\"text-center p-3 bg-white rounded-lg\">\n                          <div className=\"font-medium text-purple-900\">User</div>\n                          <div className=\"text-xs text-purple-700\">View & scan only</div>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"border-purple-300 text-purple-700 hover:bg-purple-100\"\n                      >\n                        <Users className=\"h-4 w-4 mr-2\" />\n                        Manage Team\n                      </Button>\n                    </motion.div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-slate-900\">System Requirements</CardTitle>\n                  <CardDescription className=\"text-slate-600\">\n                    Ensure your devices and browsers are compatible for the best experience\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                    <div>\n                      <div className=\"flex items-center mb-4\">\n                        <Monitor className=\"h-6 w-6 text-blue-600 mr-2\" />\n                        <h4 className=\"font-semibold text-slate-900\">Desktop Browsers</h4>\n                      </div>\n                      <ul className=\"space-y-2 text-sm text-slate-600\">\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                          Chrome 90+ (Recommended)\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                          Firefox 88+\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                          Safari 14+\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                          Edge 90+\n                        </li>\n                      </ul>\n                    </div>\n                    <div>\n                      <div className=\"flex items-center mb-4\">\n                        <Smartphone className=\"h-6 w-6 text-purple-600 mr-2\" />\n                        <h4 className=\"font-semibold text-slate-900\">Mobile Support</h4>\n                      </div>\n                      <ul className=\"space-y-2 text-sm text-slate-600\">\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                          iOS 14+ (Safari)\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                          Android 8+ (Chrome)\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                          Camera access for QR scanning\n                        </li>\n                        <li className=\"flex items-center\">\n                          <Wifi className=\"h-4 w-4 text-blue-600 mr-2\" />\n                          Internet connection required\n                        </li>\n                      </ul>\n                    </div>\n                    <div>\n                      <div className=\"flex items-center mb-4\">\n                        <Target className=\"h-6 w-6 text-orange-600 mr-2\" />\n                        <h4 className=\"font-semibold text-slate-900\">Recommended Specs</h4>\n                      </div>\n                      <ul className=\"space-y-2 text-sm text-slate-600\">\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                          4GB RAM minimum\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                          Stable internet connection\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                          Modern processor (2015+)\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                          1920x1080 display or higher\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </TabsContent>\n\n          {/* Continue with other tabs... */}\n          <TabsContent value=\"first-asset\">\n            <motion.div\n              className=\"space-y-6\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5 }}\n            >\n              {/* First Asset Content */}\n              <Card className=\"shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-slate-900 text-2xl\">\n                    Creating Your First Asset\n                  </CardTitle>\n                  <CardDescription className=\"text-slate-600 text-lg\">\n                    Learn how to add and configure your first asset in the system with best\n                    practices\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-8\">\n                  <Alert className=\"border-green-200 bg-green-50\">\n                    <Package className=\"h-4 w-4 text-green-600\" />\n                    <AlertDescription className=\"text-green-800\">\n                      <strong>Getting Started:</strong> Start with a simple asset like a laptop,\n                      office chair, or piece of equipment to get familiar with the process.\n                    </AlertDescription>\n                  </Alert>\n\n                  <div className=\"space-y-8\">\n                    {[\n                      {\n                        step: 1,\n                        title: 'Navigate to Add Asset',\n                        description:\n                          'Access the asset creation form from your dashboard or navigation menu.',\n                        details:\n                          \"Click the prominent 'Add Asset' button in your dashboard, or use the main navigation menu to access the asset creation form. The form is designed to be intuitive and guide you through each step.\",\n                        color: 'blue',\n                      },\n                      {\n                        step: 2,\n                        title: 'Fill in Asset Details',\n                        description: 'Provide essential and optional information about your asset.',\n                        details:\n                          'Complete the required fields and add any additional information that will help you track and manage the asset effectively.',\n                        color: 'green',\n                      },\n                      {\n                        step: 3,\n                        title: 'Save and Generate QR Code',\n                        description:\n                          'Complete the asset creation and optionally generate a QR code.',\n                        details:\n                          \"After saving, you can immediately generate a QR code for easy tracking and access the asset's detailed information page.\",\n                        color: 'purple',\n                      },\n                    ].map((step, index) => (\n                      <motion.div\n                        key={step.step}\n                        className=\"flex items-start space-x-6\"\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{ delay: index * 0.2 }}\n                      >\n                        <div\n                          className={`bg-${step.color}-100 text-${step.color}-600 rounded-full w-12 h-12 flex items-center justify-center font-semibold text-lg flex-shrink-0`}\n                        >\n                          {step.step}\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-semibold text-slate-900 text-lg mb-2\">\n                            {step.title}\n                          </h4>\n                          <p className=\"text-slate-600 mb-3 leading-relaxed\">{step.description}</p>\n                          <p className=\"text-sm text-slate-500 leading-relaxed\">{step.details}</p>\n                          {step.step === 1 && (\n                            <Button variant=\"outline\" size=\"sm\" className=\"mt-3\">\n                              <Package className=\"h-4 w-4 mr-2\" />\n                              Add New Asset\n                            </Button>\n                          )}\n                        </div>\n                      </motion.div>\n                    ))}\n                  </div>\n\n                  {/* Asset Information Grid */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                    <div className=\"space-y-4\">\n                      <h5 className=\"font-semibold text-slate-900 text-lg\">Required Information</h5>\n                      <div className=\"space-y-3\">\n                        {[\n                          {\n                            field: 'Asset Name',\n                            desc: 'Descriptive and unique identifier',\n                            example: 'MacBook Pro 16-inch #001',\n                          },\n                          {\n                            field: 'Category',\n                            desc: 'Choose from predefined categories',\n                            example: 'IT Equipment',\n                          },\n                          {\n                            field: 'Location',\n                            desc: 'Current physical location',\n                            example: 'Office A - Desk 12',\n                          },\n                          {\n                            field: 'Status',\n                            desc: 'Current operational status',\n                            example: 'Active, In Use',\n                          },\n                        ].map((item, index) => (\n                          <motion.div\n                            key={index}\n                            className=\"p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors\"\n                            whileHover={{ scale: 1.01 }}\n                          >\n                            <div className=\"font-medium text-slate-900\">{item.field}</div>\n                            <div className=\"text-sm text-slate-600 mt-1\">{item.desc}</div>\n                            <div className=\"text-xs text-blue-600 mt-2 font-medium\">\n                              Example: {item.example}\n                            </div>\n                          </motion.div>\n                        ))}\n                      </div>\n                    </div>\n                    <div className=\"space-y-4\">\n                      <h5 className=\"font-semibold text-slate-900 text-lg\">Optional Information</h5>\n                      <div className=\"space-y-3\">\n                        {[\n                          {\n                            field: 'Description',\n                            desc: 'Detailed asset information',\n                            example: 'Company laptop for development team',\n                          },\n                          {\n                            field: 'Purchase Value',\n                            desc: 'Original purchase price',\n                            example: '$2,500.00',\n                          },\n                          {\n                            field: 'Purchase Date',\n                            desc: 'Date of acquisition',\n                            example: '2024-01-15',\n                          },\n                          {\n                            field: 'Serial Number',\n                            desc: 'Manufacturer serial number',\n                            example: 'ABC123XYZ789',\n                          },\n                          {\n                            field: 'Warranty Info',\n                            desc: 'Warranty expiration date',\n                            example: '2027-01-15',\n                          },\n                          {\n                            field: 'Supplier',\n                            desc: 'Vendor or supplier name',\n                            example: 'Tech Solutions Inc.',\n                          },\n                        ].map((item, index) => (\n                          <motion.div\n                            key={index}\n                            className=\"p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors\"\n                            whileHover={{ scale: 1.01 }}\n                          >\n                            <div className=\"font-medium text-slate-900\">{item.field}</div>\n                            <div className=\"text-sm text-slate-600 mt-1\">{item.desc}</div>\n                            <div className=\"text-xs text-purple-600 mt-2 font-medium\">\n                              Example: {item.example}\n                            </div>\n                          </motion.div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Asset Categories */}\n                  <div className=\"bg-slate-50 p-6 rounded-xl\">\n                    <h5 className=\"font-semibold mb-4 text-slate-900 text-lg\">\n                      Available Asset Categories\n                    </h5>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                      {[\n                        'IT Equipment',\n                        'Furniture',\n                        'Vehicles',\n                        'Tools',\n                        'AV Equipment',\n                        'Office Supplies',\n                        'Machinery',\n                        'Medical Equipment',\n                        'Safety Equipment',\n                        'Software Licenses',\n                        'Real Estate',\n                        'Other',\n                      ].map((category, index) => (\n                        <motion.div\n                          key={index}\n                          whileHover={{ scale: 1.05 }}\n                          whileTap={{ scale: 0.95 }}\n                        >\n                          <Badge\n                            variant=\"outline\"\n                            className=\"w-full justify-center py-2 hover:bg-blue-50 hover:border-blue-300 cursor-pointer\"\n                          >\n                            {category}\n                          </Badge>\n                        </motion.div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Best Practices */}\n              <Card className=\"shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-slate-900\">\n                    Best Practices for Asset Creation\n                  </CardTitle>\n                  <CardDescription className=\"text-slate-600\">\n                    Follow these guidelines to maintain consistent and effective asset management\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                    <div className=\"space-y-6\">\n                      <h5 className=\"font-medium text-green-800 text-lg\">✅ Do's</h5>\n                      {[\n                        {\n                          title: 'Use Descriptive Names',\n                          desc: 'Include model, brand, or unique identifiers in asset names for easy identification',\n                        },\n                        {\n                          title: 'Consistent Categorization',\n                          desc: 'Use consistent categories to make searching and filtering easier across your organization',\n                        },\n                        {\n                          title: 'Include Serial Numbers',\n                          desc: 'Add serial numbers or unique identifiers in the description for warranty and support purposes',\n                        },\n                        {\n                          title: 'Regular Updates',\n                          desc: 'Keep asset information current by updating status, location, and condition regularly',\n                        },\n                      ].map((item, index) => (\n                        <motion.div\n                          key={index}\n                          className=\"flex items-start space-x-3\"\n                          initial={{ opacity: 0, x: -10 }}\n                          animate={{ opacity: 1, x: 0 }}\n                          transition={{ delay: index * 0.1 }}\n                        >\n                          <CheckCircle className=\"h-5 w-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                          <div>\n                            <h6 className=\"font-medium text-slate-900\">{item.title}</h6>\n                            <p className=\"text-sm text-slate-600 leading-relaxed\">{item.desc}</p>\n                          </div>\n                        </motion.div>\n                      ))}\n                    </div>\n                    <div className=\"space-y-6\">\n                      <h5 className=\"font-medium text-red-800 text-lg\">❌ Don'ts</h5>\n                      {[\n                        {\n                          title: 'Avoid Generic Names',\n                          desc: \"Don't use vague names like 'Laptop 1' - be specific about model and purpose\",\n                        },\n                        {\n                          title: 'Skip Important Details',\n                          desc: \"Don't leave critical fields empty - complete information helps with tracking and reporting\",\n                        },\n                        {\n                          title: 'Inconsistent Categories',\n                          desc: 'Avoid creating new categories unnecessarily - use existing ones for better organization',\n                        },\n                        {\n                          title: 'Forget Location Updates',\n                          desc: \"Don't forget to update asset locations when they're moved between departments or offices\",\n                        },\n                      ].map((item, index) => (\n                        <motion.div\n                          key={index}\n                          className=\"flex items-start space-x-3\"\n                          initial={{ opacity: 0, x: -10 }}\n                          animate={{ opacity: 1, x: 0 }}\n                          transition={{ delay: index * 0.1 }}\n                        >\n                          <AlertTriangle className=\"h-5 w-5 text-red-600 mt-0.5 flex-shrink-0\" />\n                          <div>\n                            <h6 className=\"font-medium text-slate-900\">{item.title}</h6>\n                            <p className=\"text-sm text-slate-600 leading-relaxed\">{item.desc}</p>\n                          </div>\n                        </motion.div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </TabsContent>\n\n          <TabsContent value=\"qr-codes\">\n            <motion.div\n              className=\"space-y-6\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5 }}\n            >\n              {/* QR Code System Overview */}\n              <Card className=\"shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-slate-900 text-2xl\">QR Code System</CardTitle>\n                  <CardDescription className=\"text-slate-600 text-lg\">\n                    Master QR code generation, scanning, and management for seamless asset tracking\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-8\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                    <div>\n                      <h4 className=\"font-semibold mb-4 flex items-center text-slate-900 text-lg\">\n                        <QrCode className=\"h-6 w-6 mr-2 text-purple-600\" />\n                        What are QR Codes?\n                      </h4>\n                      <p className=\"text-slate-600 mb-4 leading-relaxed\">\n                        QR (Quick Response) codes are two-dimensional barcodes that can store\n                        comprehensive information about your assets. When scanned with any\n                        smartphone or tablet, they instantly provide access to detailed asset\n                        information, location history, and management options.\n                      </p>\n                      <div className=\"space-y-3\">\n                        <h5 className=\"font-medium text-slate-900\">Key Benefits:</h5>\n                        <ul className=\"space-y-2 text-sm text-slate-600\">\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                            Instant asset identification and access\n                          </li>\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                            Works with any smartphone camera\n                          </li>\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                            Links directly to comprehensive asset information\n                          </li>\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                            Tracks scan history and location data\n                          </li>\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                            Enables quick status updates and maintenance logs\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n                    <div className=\"bg-gradient-to-br from-purple-50 to-blue-50 p-6 rounded-xl border border-purple-200\">\n                      <div className=\"w-40 h-40 bg-white border-2 border-dashed border-purple-300 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                        <QrCode className=\"h-20 w-20 text-purple-400\" />\n                      </div>\n                      <p className=\"text-center text-sm text-purple-700 font-medium\">\n                        Sample QR Code\n                      </p>\n                      <p className=\"text-center text-xs text-purple-600 mt-2\">\n                        Each asset gets a unique QR code linking to its detailed information page\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* QR Code Generation Process */}\n                  <div className=\"space-y-6\">\n                    <h4 className=\"font-semibold text-slate-900 text-lg\">\n                      How to Generate QR Codes\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                      <div className=\"space-y-4\">\n                        <h5 className=\"font-medium text-slate-900\">Individual QR Codes</h5>\n                        <div className=\"space-y-3\">\n                          {[\n                            'Navigate to your asset details page',\n                            \"Click the 'Generate QR Code' button\",\n                            'Choose size and format options (PNG, SVG, PDF)',\n                            'Download the QR code image',\n                            'Print and attach to the physical asset',\n                          ].map((step, index) => (\n                            <motion.div\n                              key={index}\n                              className=\"flex items-start space-x-3\"\n                              initial={{ opacity: 0, x: -10 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.1 }}\n                            >\n                              <div className=\"bg-purple-100 text-purple-600 rounded-full w-6 h-6 flex items-center justify-center font-semibold text-xs flex-shrink-0\">\n                                {index + 1}\n                              </div>\n                              <p className=\"text-sm text-slate-600\">{step}</p>\n                            </motion.div>\n                          ))}\n                        </div>\n                      </div>\n                      <div className=\"space-y-4\">\n                        <h5 className=\"font-medium text-slate-900\">Bulk QR Generation</h5>\n                        <div className=\"space-y-3\">\n                          {[\n                            'Go to QR Management page from the main menu',\n                            'Select multiple assets using checkboxes',\n                            \"Click 'Generate QR Codes' for bulk operation\",\n                            'Choose template and formatting options',\n                            'Download as ZIP file containing all codes',\n                          ].map((step, index) => (\n                            <motion.div\n                              key={index}\n                              className=\"flex items-start space-x-3\"\n                              initial={{ opacity: 0, x: -10 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.1 }}\n                            >\n                              <div className=\"bg-blue-100 text-blue-600 rounded-full w-6 h-6 flex items-center justify-center font-semibold text-xs flex-shrink-0\">\n                                {index + 1}\n                              </div>\n                              <p className=\"text-sm text-slate-600\">{step}</p>\n                            </motion.div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Alert className=\"border-purple-200 bg-purple-50\">\n                    <QrCode className=\"h-4 w-4 text-purple-600\" />\n                    <AlertDescription className=\"text-purple-800\">\n                      <strong>QR Code Formats:</strong> Available in PNG (web use), SVG\n                      (high-quality printing), and PDF (professional labels). SVG format is\n                      recommended for the best print quality and scalability.\n                    </AlertDescription>\n                  </Alert>\n                </CardContent>\n              </Card>\n\n              {/* QR Code Scanning */}\n              <Card className=\"shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-slate-900\">Scanning QR Codes</CardTitle>\n                  <CardDescription className=\"text-slate-600\">\n                    Learn how to scan QR codes effectively using various devices and methods\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      {[\n                        {\n                          icon: Smartphone,\n                          title: 'Built-in Scanner',\n                          description:\n                            \"Use the app's built-in QR scanner for best results and full feature access\",\n                          color: 'blue',\n                        },\n                        {\n                          icon: Monitor,\n                          title: 'Camera App',\n                          description:\n                            'Most smartphone cameras can scan QR codes directly without additional apps',\n                          color: 'green',\n                        },\n                        {\n                          icon: Download,\n                          title: 'Third-party Apps',\n                          description:\n                            'Compatible with popular QR scanner apps available on app stores',\n                          color: 'purple',\n                        },\n                      ].map((method, index) => (\n                        <motion.div\n                          key={index}\n                          className={`p-6 border rounded-xl bg-${method.color}-50 border-${method.color}-200 text-center hover:shadow-lg transition-all duration-200`}\n                          whileHover={{ scale: 1.02, y: -4 }}\n                          initial={{ opacity: 0, y: 20 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ delay: index * 0.1 }}\n                        >\n                          <div\n                            className={`bg-${method.color}-100 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-3`}\n                          >\n                            <method.icon className={`h-6 w-6 text-${method.color}-600`} />\n                          </div>\n                          <h5 className=\"font-medium text-slate-900 mb-2\">{method.title}</h5>\n                          <p className=\"text-sm text-slate-600 leading-relaxed\">\n                            {method.description}\n                          </p>\n                        </motion.div>\n                      ))}\n                    </div>\n\n                    <div className=\"bg-blue-50 p-6 rounded-xl border border-blue-200\">\n                      <h5 className=\"font-medium text-blue-900 mb-3 text-lg\">\n                        What Happens When You Scan?\n                      </h5>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <ul className=\"space-y-2 text-sm text-blue-800\">\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-4 w-4 text-blue-600 mr-2\" />\n                            Instant access to complete asset details\n                          </li>\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-4 w-4 text-blue-600 mr-2\" />\n                            Scan location and timestamp automatically recorded\n                          </li>\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-4 w-4 text-blue-600 mr-2\" />\n                            Option to update asset status and condition\n                          </li>\n                        </ul>\n                        <ul className=\"space-y-2 text-sm text-blue-800\">\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-4 w-4 text-blue-600 mr-2\" />\n                            Add maintenance notes and comments\n                          </li>\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-4 w-4 text-blue-600 mr-2\" />\n                            View complete scan and movement history\n                          </li>\n                          <li className=\"flex items-center\">\n                            <CheckCircle className=\"h-4 w-4 text-blue-600 mr-2\" />\n                            Access maintenance schedules and alerts\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </TabsContent>\n\n          <TabsContent value=\"dashboard\">\n            <motion.div\n              className=\"space-y-6\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5 }}\n            >\n              {/* Dashboard Overview */}\n              <Card className=\"shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-slate-900 text-2xl\">\n                    Understanding Your Dashboard\n                  </CardTitle>\n                  <CardDescription className=\"text-slate-600 text-lg\">\n                    Navigate and interpret your asset management dashboard for maximum efficiency\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-8\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                    <div>\n                      <h4 className=\"font-semibold mb-4 flex items-center text-slate-900 text-lg\">\n                        <BarChart3 className=\"h-6 w-6 mr-2 text-orange-600\" />\n                        Key Metrics Overview\n                      </h4>\n                      <div className=\"space-y-4\">\n                        {[\n                          {\n                            title: 'Total Assets',\n                            desc: 'Complete count of all assets in your system across all categories and locations',\n                            icon: Package,\n                          },\n                          {\n                            title: 'Active Assets',\n                            desc: 'Assets currently in use, available for deployment, or in active rotation',\n                            icon: CheckCircle,\n                          },\n                          {\n                            title: 'QR Code Coverage',\n                            desc: 'Percentage of assets with generated QR codes for tracking and identification',\n                            icon: QrCode,\n                          },\n                          {\n                            title: 'Recent Activity',\n                            desc: 'Latest asset movements, updates, scans, and system interactions',\n                            icon: Clock,\n                          },\n                        ].map((metric, index) => (\n                          <motion.div\n                            key={index}\n                            className=\"p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors\"\n                            whileHover={{ scale: 1.01 }}\n                            initial={{ opacity: 0, x: -10 }}\n                            animate={{ opacity: 1, x: 0 }}\n                            transition={{ delay: index * 0.1 }}\n                          >\n                            <div className=\"flex items-center mb-2\">\n                              <metric.icon className=\"h-5 w-5 text-orange-600 mr-2\" />\n                              <div className=\"font-medium text-slate-900\">{metric.title}</div>\n                            </div>\n                            <div className=\"text-xs text-slate-600 leading-relaxed\">\n                              {metric.desc}\n                            </div>\n                          </motion.div>\n                        ))}\n                      </div>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold mb-4 text-slate-900 text-lg\">Quick Actions</h4>\n                      <div className=\"space-y-3\">\n                        {[\n                          {\n                            icon: Package,\n                            label: 'Add New Asset',\n                            desc: 'Create a new asset entry',\n                            color: 'blue',\n                          },\n                          {\n                            icon: QrCode,\n                            label: 'Scan QR Code',\n                            desc: 'Scan asset QR codes',\n                            color: 'purple',\n                          },\n                          {\n                            icon: BarChart3,\n                            label: 'View Analytics',\n                            desc: 'Access detailed reports',\n                            color: 'orange',\n                          },\n                          {\n                            icon: Users,\n                            label: 'Manage Team',\n                            desc: 'User and permission management',\n                            color: 'indigo',\n                          },\n                          {\n                            icon: Download,\n                            label: 'Export Data',\n                            desc: 'Download reports and data',\n                            color: 'green',\n                          },\n                        ].map((action, index) => (\n                          <motion.div\n                            key={index}\n                            whileHover={{ scale: 1.02 }}\n                            whileTap={{ scale: 0.98 }}\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            transition={{ delay: index * 0.1 }}\n                          >\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"w-full justify-start h-auto p-4 hover:bg-slate-50\"\n                            >\n                              <action.icon className={`h-5 w-5 mr-3 text-${action.color}-600`} />\n                              <div className=\"text-left flex-1\">\n                                <div className=\"font-medium text-slate-900\">{action.label}</div>\n                                <div className=\"text-xs text-slate-600\">{action.desc}</div>\n                              </div>\n                              <ArrowRight className=\"h-4 w-4 text-slate-400\" />\n                            </Button>\n                          </motion.div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Dashboard Sections */}\n                  <div>\n                    <h4 className=\"font-semibold mb-6 text-slate-900 text-lg\">\n                      Dashboard Sections\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      {[\n                        {\n                          title: 'Asset Overview',\n                          description:\n                            'Summary cards showing key metrics, statistics, and performance indicators about your assets',\n                          features: [\n                            'Total asset count',\n                            'Category breakdown',\n                            'Status distribution',\n                            'Value summaries',\n                          ],\n                        },\n                        {\n                          title: 'Recent Activity',\n                          description:\n                            'Live feed of recent asset additions, updates, QR code scans, and system interactions',\n                          features: [\n                            'Asset movements',\n                            'Status changes',\n                            'QR code scans',\n                            'User activities',\n                          ],\n                        },\n                        {\n                          title: 'Analytics & Reports',\n                          description:\n                            'Interactive charts, graphs, and data visualizations for asset performance analysis',\n                          features: [\n                            'Usage trends',\n                            'Location analytics',\n                            'Performance metrics',\n                            'Custom reports',\n                          ],\n                        },\n                      ].map((section, index) => (\n                        <motion.div\n                          key={index}\n                          className=\"p-6 border border-slate-200 rounded-xl hover:shadow-lg transition-all duration-200\"\n                          whileHover={{ scale: 1.02, y: -4 }}\n                          initial={{ opacity: 0, y: 20 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ delay: index * 0.1 }}\n                        >\n                          <h5 className=\"font-semibold text-slate-900 mb-3\">{section.title}</h5>\n                          <p className=\"text-sm text-slate-600 mb-4 leading-relaxed\">\n                            {section.description}\n                          </p>\n                          <ul className=\"space-y-1\">\n                            {section.features.map((feature, featureIndex) => (\n                              <li\n                                key={featureIndex}\n                                className=\"text-xs text-slate-500 flex items-center\"\n                              >\n                                <CheckCircle className=\"h-3 w-3 text-green-600 mr-2\" />\n                                {feature}\n                              </li>\n                            ))}\n                          </ul>\n                        </motion.div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Real-time Analytics */}\n              <Card className=\"shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-slate-900\">Real-time Analytics</CardTitle>\n                  <CardDescription className=\"text-slate-600\">\n                    Understand how real-time data powers your asset management decisions\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <p className=\"text-slate-600 leading-relaxed\">\n                      Your dashboard provides real-time insights into your asset management\n                      operations, updating automatically as your team uses the system throughout the\n                      day.\n                    </p>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                      <div className=\"space-y-4\">\n                        <h5 className=\"font-medium text-slate-900 text-lg\">Live Metrics</h5>\n                        <ul className=\"space-y-3 text-slate-600\">\n                          <li className=\"flex items-center\">\n                            <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                            Asset creation and updates in real-time\n                          </li>\n                          <li className=\"flex items-center\">\n                            <div className=\"w-2 h-2 bg-blue-500 rounded-full mr-3\"></div>\n                            QR code scan frequency and patterns\n                          </li>\n                          <li className=\"flex items-center\">\n                            <div className=\"w-2 h-2 bg-purple-500 rounded-full mr-3\"></div>\n                            User activity levels and engagement\n                          </li>\n                          <li className=\"flex items-center\">\n                            <div className=\"w-2 h-2 bg-orange-500 rounded-full mr-3\"></div>\n                            System performance and response times\n                          </li>\n                        </ul>\n                      </div>\n                      <div className=\"space-y-4\">\n                        <h5 className=\"font-medium text-slate-900 text-lg\">Interactive Charts</h5>\n                        <ul className=\"space-y-3 text-slate-600\">\n                          <li className=\"flex items-center\">\n                            <BarChart3 className=\"h-4 w-4 text-blue-600 mr-3\" />\n                            Asset growth and acquisition trends over time\n                          </li>\n                          <li className=\"flex items-center\">\n                            <BarChart3 className=\"h-4 w-4 text-green-600 mr-3\" />\n                            Category distribution and utilization rates\n                          </li>\n                          <li className=\"flex items-center\">\n                            <BarChart3 className=\"h-4 w-4 text-purple-600 mr-3\" />\n                            Location-based analytics and heat maps\n                          </li>\n                          <li className=\"flex items-center\">\n                            <BarChart3 className=\"h-4 w-4 text-orange-600 mr-3\" />\n                            Usage patterns and maintenance schedules\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n\n                    <Alert className=\"border-blue-200 bg-blue-50\">\n                      <BarChart3 className=\"h-4 w-4 text-blue-600\" />\n                      <AlertDescription className=\"text-blue-800\">\n                        <strong>Real-time Updates:</strong> Analytics update automatically as you\n                        use the system. No need to refresh the page - data flows seamlessly to\n                        provide current insights!\n                      </AlertDescription>\n                    </Alert>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Next Steps */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.8 }}\n        >\n          <Card className=\"mt-8 shadow-lg bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200\">\n            <CardHeader>\n              <CardTitle className=\"text-slate-900 text-2xl\">Next Steps</CardTitle>\n              <CardDescription className=\"text-slate-600 text-lg\">\n                Now that you understand the basics, here's what to do next to maximize your system's\n                potential\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {[\n                  {\n                    title: 'Explore Advanced Features',\n                    desc: 'Learn about bulk operations, integrations, and automation',\n                    icon: Rocket,\n                    color: 'blue',\n                  },\n                  {\n                    title: 'Set Up Team Access',\n                    desc: 'Invite team members and configure permissions',\n                    icon: Users,\n                    color: 'green',\n                  },\n                  {\n                    title: 'Configure Notifications',\n                    desc: 'Set up alerts for important events and maintenance',\n                    icon: Settings,\n                    color: 'purple',\n                  },\n                  {\n                    title: 'View Video Tutorials',\n                    desc: 'Watch step-by-step video guides and best practices',\n                    icon: Video,\n                    color: 'orange',\n                  },\n                ].map((step, index) => (\n                  <motion.div\n                    key={index}\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                  >\n                    <Button\n                      variant=\"outline\"\n                      className=\"h-auto p-4 justify-start w-full hover:bg-white/80\"\n                    >\n                      <step.icon className={`h-5 w-5 mr-3 text-${step.color}-600`} />\n                      <div className=\"text-left flex-1\">\n                        <div className=\"font-semibold text-slate-900\">{step.title}</div>\n                        <div className=\"text-sm text-slate-600\">{step.desc}</div>\n                      </div>\n                      <ArrowRight className=\"h-4 w-4 text-slate-400\" />\n                    </Button>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\docs\\github-oauth-setup\\page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":279,"column":25,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10694,10722],"text":"Click &quot;Continue with GitHub\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10694,10722],"text":"Click &ldquo;Continue with GitHub\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10694,10722],"text":"Click &#34;Continue with GitHub\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10694,10722],"text":"Click &rdquo;Continue with GitHub\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":279,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10694,10722],"text":"Click \"Continue with GitHub&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10694,10722],"text":"Click \"Continue with GitHub&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10694,10722],"text":"Click \"Continue with GitHub&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10694,10722],"text":"Click \"Continue with GitHub&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":281,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10803,10844],"text":"Verify you&apos;re redirected to the dashboard"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10803,10844],"text":"Verify you&lsquo;re redirected to the dashboard"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10803,10844],"text":"Verify you&#39;re redirected to the dashboard"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10803,10844],"text":"Verify you&rsquo;re redirected to the dashboard"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Copy, ExternalLink, CheckCircle, Settings, Github } from 'lucide-react'\nimport Link from 'next/link'\n\nexport default function GitHubOAuthSetupPage() {\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text)\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-4 max-w-4xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-4\">GitHub OAuth Configuration</h1>\n        <p className=\"text-gray-600 text-lg\">\n          Complete setup guide for configuring GitHub OAuth authentication with Supabase\n        </p>\n      </div>\n\n      {/* Current Configuration */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            Current Configuration\n          </CardTitle>\n          <CardDescription>Your GitHub OAuth application credentials and settings</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Client ID</label>\n              <div className=\"flex items-center gap-2\">\n                <code className=\"bg-gray-100 px-2 py-1 rounded text-sm flex-1\">\n                  Ov23lipMb8831rUNvsJR\n                </code>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => copyToClipboard('Ov23lipMb8831rUNvsJR')}\n                >\n                  <Copy className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Client Secret</label>\n              <div className=\"flex items-center gap-2\">\n                <code className=\"bg-gray-100 px-2 py-1 rounded text-sm flex-1\">\n                  97c8805c06fa9b6589b8d33848a0835873fd2f98\n                </code>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => copyToClipboard('97c8805c06fa9b6589b8d33848a0835873fd2f98')}\n                >\n                  <Copy className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Production URL</label>\n            <div className=\"flex items-center gap-2\">\n              <code className=\"bg-gray-100 px-2 py-1 rounded text-sm flex-1\">\n                https://cloudeleavepro.vercel.app\n              </code>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => copyToClipboard('https://cloudeleavepro.vercel.app')}\n              >\n                <Copy className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Step-by-step Setup */}\n      <div className=\"space-y-6\">\n        <h2 className=\"text-2xl font-semibold\">Setup Instructions</h2>\n\n        {/* Step 1: Supabase Configuration */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\">1</Badge>\n              Configure Supabase Authentication\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <ol className=\"list-decimal list-inside space-y-3 text-sm\">\n              <li>\n                Go to your{' '}\n                <a\n                  href=\"https://supabase.com/dashboard\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-blue-600 hover:underline inline-flex items-center gap-1\"\n                >\n                  Supabase Dashboard <ExternalLink className=\"h-3 w-3\" />\n                </a>\n              </li>\n              <li>\n                Navigate to <strong>Authentication → Providers</strong>\n              </li>\n              <li>\n                Find <strong>GitHub</strong> in the list and click to configure\n              </li>\n              <li>Enable the GitHub provider</li>\n              <li>\n                Enter the Client ID:\n                <div className=\"mt-1 flex items-center gap-2\">\n                  <code className=\"bg-gray-100 px-2 py-1 rounded\">Ov23lipMb8831rUNvsJR</code>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => copyToClipboard('Ov23lipMb8831rUNvsJR')}\n                  >\n                    <Copy className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </li>\n              <li>\n                Enter the Client Secret:\n                <div className=\"mt-1 flex items-center gap-2\">\n                  <code className=\"bg-gray-100 px-2 py-1 rounded\">\n                    97c8805c06fa9b6589b8d33848a0835873fd2f98\n                  </code>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => copyToClipboard('97c8805c06fa9b6589b8d33848a0835873fd2f98')}\n                  >\n                    <Copy className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </li>\n              <li>\n                Set the Redirect URL to:\n                <div className=\"mt-1 flex items-center gap-2\">\n                  <code className=\"bg-gray-100 px-2 py-1 rounded\">\n                    https://cloudeleavepro.vercel.app/auth/callback\n                  </code>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() =>\n                      copyToClipboard('https://cloudeleavepro.vercel.app/auth/callback')\n                    }\n                  >\n                    <Copy className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </li>\n              <li>\n                Click <strong>Save</strong>\n              </li>\n            </ol>\n          </CardContent>\n        </Card>\n\n        {/* Step 2: GitHub OAuth App Configuration */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\">2</Badge>\n              Update GitHub OAuth App Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <ol className=\"list-decimal list-inside space-y-3 text-sm\">\n              <li>\n                Go to{' '}\n                <a\n                  href=\"https://github.com/settings/developers\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-blue-600 hover:underline inline-flex items-center gap-1\"\n                >\n                  GitHub Developer Settings <ExternalLink className=\"h-3 w-3\" />\n                </a>\n              </li>\n              <li>\n                Click on <strong>OAuth Apps</strong>\n              </li>\n              <li>Find your OAuth app or create a new one</li>\n              <li>\n                Set the <strong>Homepage URL</strong> to:\n                <div className=\"mt-1 flex items-center gap-2\">\n                  <code className=\"bg-gray-100 px-2 py-1 rounded\">\n                    https://cloudeleavepro.vercel.app\n                  </code>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => copyToClipboard('https://cloudeleavepro.vercel.app')}\n                  >\n                    <Copy className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </li>\n              <li>\n                Set the <strong>Authorization callback URL</strong> to:\n                <div className=\"mt-1 flex items-center gap-2\">\n                  <code className=\"bg-gray-100 px-2 py-1 rounded\">\n                    https://cloudeleavepro.vercel.app/auth/callback\n                  </code>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() =>\n                      copyToClipboard('https://cloudeleavepro.vercel.app/auth/callback')\n                    }\n                  >\n                    <Copy className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </li>\n              <li>\n                Click <strong>Update application</strong>\n              </li>\n            </ol>\n          </CardContent>\n        </Card>\n\n        {/* Step 3: Environment Variables */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\">3</Badge>\n              Verify Environment Variables\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-sm text-gray-600\">\n              Ensure these environment variables are set in your Vercel deployment:\n            </p>\n            <div className=\"space-y-3\">\n              <div>\n                <code className=\"bg-gray-100 px-2 py-1 rounded text-sm block\">\n                  NEXT_PUBLIC_SUPABASE_URL=your_supabase_url\n                </code>\n              </div>\n              <div>\n                <code className=\"bg-gray-100 px-2 py-1 rounded text-sm block\">\n                  NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\n                </code>\n              </div>\n              <div>\n                <code className=\"bg-gray-100 px-2 py-1 rounded text-sm block\">\n                  NEXT_PUBLIC_APP_URL=https://cloudeleavepro.vercel.app\n                </code>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Testing */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\">4</Badge>\n              Test the Configuration\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n              <li>Deploy your changes to Vercel</li>\n              <li>\n                Visit <code>https://cloudeleavepro.vercel.app/login</code>\n              </li>\n              <li>Click \"Continue with GitHub\"</li>\n              <li>Complete the GitHub authorization</li>\n              <li>Verify you're redirected to the dashboard</li>\n            </ol>\n\n            <Alert>\n              <CheckCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Success indicators:</strong>\n                <ul className=\"list-disc list-inside mt-2 space-y-1\">\n                  <li>GitHub OAuth popup opens without errors</li>\n                  <li>User is redirected to dashboard after authorization</li>\n                  <li>User profile is created in Supabase</li>\n                  <li>No console errors in browser</li>\n                </ul>\n              </AlertDescription>\n            </Alert>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Links */}\n      <Card className=\"mt-8\">\n        <CardHeader>\n          <CardTitle>Quick Links</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Button asChild variant=\"outline\">\n              <a href=\"https://supabase.com/dashboard\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\n                Supabase Dashboard\n              </a>\n            </Button>\n            <Button asChild variant=\"outline\">\n              <a\n                href=\"https://github.com/settings/developers\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <Github className=\"h-4 w-4 mr-2\" />\n                GitHub OAuth Apps\n              </a>\n            </Button>\n            <Button asChild variant=\"outline\">\n              <Link href=\"/login\">Test Login</Link>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\docs\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\docs\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":454,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":454,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":688,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":688,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27203,27206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27203,27206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":709,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":709,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27977,27980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27977,27980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport { motion } from 'framer-motion'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  BookOpen,\n  Search,\n  Users,\n  Code,\n  HelpCircle,\n  FileText,\n  Zap,\n  Package,\n  QrCode,\n  BarChart3,\n  Download,\n  ExternalLink,\n  ChevronRight,\n  Star,\n  Clock,\n  ArrowRight,\n  Sparkles,\n  Target,\n  Shield,\n} from 'lucide-react'\n\nconst documentationSections = [\n  {\n    id: 'getting-started',\n    title: 'Getting Started',\n    description: 'Quick start guide and basic setup to get you running in minutes',\n    icon: Zap,\n    color: 'text-emerald-600',\n    bgColor: 'bg-emerald-50',\n    borderColor: 'border-emerald-200',\n    hoverColor: 'hover:bg-emerald-100',\n    articles: [\n      { title: 'System Overview', time: '5 min read', difficulty: 'Beginner', completed: 0 },\n      { title: 'First Login & Setup', time: '3 min read', difficulty: 'Beginner', completed: 0 },\n      { title: 'Dashboard Navigation', time: '4 min read', difficulty: 'Beginner', completed: 0 },\n      {\n        title: 'Creating Your First Asset',\n        time: '6 min read',\n        difficulty: 'Beginner',\n        completed: 0,\n      },\n    ],\n  },\n  {\n    id: 'asset-management',\n    title: 'Asset Management',\n    description: 'Complete guide to managing your assets efficiently and effectively',\n    icon: Package,\n    color: 'text-blue-600',\n    bgColor: 'bg-blue-50',\n    borderColor: 'border-blue-200',\n    hoverColor: 'hover:bg-blue-100',\n    articles: [\n      { title: 'Adding New Assets', time: '8 min read', difficulty: 'Beginner', completed: 0 },\n      {\n        title: 'Asset Categories & Classification',\n        time: '10 min read',\n        difficulty: 'Intermediate',\n        completed: 0,\n      },\n      {\n        title: 'Asset Lifecycle Management',\n        time: '12 min read',\n        difficulty: 'Intermediate',\n        completed: 0,\n      },\n      { title: 'Bulk Asset Operations', time: '15 min read', difficulty: 'Advanced', completed: 0 },\n      {\n        title: 'Asset Maintenance Scheduling',\n        time: '10 min read',\n        difficulty: 'Intermediate',\n        completed: 0,\n      },\n      {\n        title: 'Asset Depreciation Tracking',\n        time: '8 min read',\n        difficulty: 'Advanced',\n        completed: 0,\n      },\n    ],\n  },\n  {\n    id: 'qr-codes',\n    title: 'QR Code System',\n    description: 'Master QR code generation, scanning, and management for seamless tracking',\n    icon: QrCode,\n    color: 'text-purple-600',\n    bgColor: 'bg-purple-50',\n    borderColor: 'border-purple-200',\n    hoverColor: 'hover:bg-purple-100',\n    articles: [\n      {\n        title: 'QR Code Basics & Benefits',\n        time: '5 min read',\n        difficulty: 'Beginner',\n        completed: 0,\n      },\n      { title: 'Generating QR Codes', time: '7 min read', difficulty: 'Beginner', completed: 0 },\n      { title: 'Scanning QR Codes', time: '6 min read', difficulty: 'Beginner', completed: 0 },\n      { title: 'Bulk QR Operations', time: '12 min read', difficulty: 'Advanced', completed: 0 },\n      {\n        title: 'Custom QR Code Templates',\n        time: '8 min read',\n        difficulty: 'Intermediate',\n        completed: 0,\n      },\n      { title: 'QR Code Analytics', time: '10 min read', difficulty: 'Intermediate', completed: 0 },\n    ],\n  },\n  {\n    id: 'analytics',\n    title: 'Analytics & Reporting',\n    description:\n      'Harness real-time analytics and comprehensive reporting for data-driven decisions',\n    icon: BarChart3,\n    color: 'text-orange-600',\n    bgColor: 'bg-orange-50',\n    borderColor: 'border-orange-200',\n    hoverColor: 'hover:bg-orange-100',\n    articles: [\n      {\n        title: 'Dashboard Analytics Overview',\n        time: '8 min read',\n        difficulty: 'Beginner',\n        completed: 0,\n      },\n      {\n        title: 'Real-time Monitoring Setup',\n        time: '10 min read',\n        difficulty: 'Intermediate',\n        completed: 0,\n      },\n      {\n        title: 'Custom Reports Creation',\n        time: '15 min read',\n        difficulty: 'Advanced',\n        completed: 0,\n      },\n      {\n        title: 'Data Export & Integration',\n        time: '6 min read',\n        difficulty: 'Intermediate',\n        completed: 0,\n      },\n      {\n        title: 'Performance Metrics & KPIs',\n        time: '12 min read',\n        difficulty: 'Advanced',\n        completed: 0,\n      },\n      {\n        title: 'Automated Report Scheduling',\n        time: '8 min read',\n        difficulty: 'Intermediate',\n        completed: 0,\n      },\n    ],\n  },\n  {\n    id: 'user-management',\n    title: 'User Management',\n    description: 'Manage user accounts, permissions, and team collaboration effectively',\n    icon: Users,\n    color: 'text-indigo-600',\n    bgColor: 'bg-indigo-50',\n    borderColor: 'border-indigo-200',\n    hoverColor: 'hover:bg-indigo-100',\n    articles: [\n      {\n        title: 'User Roles & Permissions',\n        time: '10 min read',\n        difficulty: 'Intermediate',\n        completed: 0,\n      },\n      {\n        title: 'Team Collaboration Features',\n        time: '8 min read',\n        difficulty: 'Beginner',\n        completed: 0,\n      },\n      {\n        title: 'Account Settings & Preferences',\n        time: '5 min read',\n        difficulty: 'Beginner',\n        completed: 0,\n      },\n      {\n        title: 'Security Best Practices',\n        time: '12 min read',\n        difficulty: 'Advanced',\n        completed: 0,\n      },\n      {\n        title: 'Multi-tenant Organization Setup',\n        time: '15 min read',\n        difficulty: 'Advanced',\n        completed: 0,\n      },\n      {\n        title: 'Audit Logs & Compliance',\n        time: '10 min read',\n        difficulty: 'Intermediate',\n        completed: 0,\n      },\n    ],\n  },\n  {\n    id: 'technical',\n    title: 'Technical Documentation',\n    description: 'API reference, integrations, and development guides for developers',\n    icon: Code,\n    color: 'text-red-600',\n    bgColor: 'bg-red-50',\n    borderColor: 'border-red-200',\n    hoverColor: 'hover:bg-red-100',\n    articles: [\n      {\n        title: 'API Reference & Authentication',\n        time: '20 min read',\n        difficulty: 'Advanced',\n        completed: 0,\n      },\n      {\n        title: 'Database Schema & Models',\n        time: '15 min read',\n        difficulty: 'Advanced',\n        completed: 0,\n      },\n      {\n        title: 'Third-party Integration Guide',\n        time: '25 min read',\n        difficulty: 'Advanced',\n        completed: 0,\n      },\n      {\n        title: 'Deployment & Infrastructure',\n        time: '30 min read',\n        difficulty: 'Expert',\n        completed: 0,\n      },\n      { title: 'Webhook Configuration', time: '12 min read', difficulty: 'Advanced', completed: 0 },\n      {\n        title: 'Custom Development Guide',\n        time: '35 min read',\n        difficulty: 'Expert',\n        completed: 0,\n      },\n    ],\n  },\n]\n\nconst popularArticles = [\n  { title: 'Creating Your First Asset', views: '2.1k', category: 'Getting Started', trend: '+12%' },\n  { title: 'QR Code Generation Guide', views: '1.8k', category: 'QR Codes', trend: '+8%' },\n  { title: 'Dashboard Analytics Overview', views: '1.5k', category: 'Analytics', trend: '+15%' },\n  { title: 'User Roles & Permissions', views: '1.2k', category: 'User Management', trend: '+5%' },\n  { title: 'API Authentication', views: '980', category: 'Technical', trend: '+22%' },\n]\n\nconst recentUpdates = [\n  { title: 'Real-time Analytics Documentation', date: '2 days ago', type: 'New', icon: Sparkles },\n  { title: 'QR Code Bulk Operations Guide', date: '1 week ago', type: 'Updated', icon: Target },\n  { title: 'API v2.0 Reference', date: '2 weeks ago', type: 'New', icon: Code },\n  { title: 'Security Best Practices', date: '3 weeks ago', type: 'Updated', icon: Shield },\n]\n\nconst containerVariants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.1,\n    },\n  },\n}\n\nconst itemVariants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nexport default function DocumentationPage() {\n  const [searchQuery, setSearchQuery] = useState('')\n  const [selectedSection, setSelectedSection] = useState<string | null>(null)\n\n  const filteredSections = documentationSections.filter(\n    section =>\n      section.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      section.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      section.articles.some(article =>\n        article.title.toLowerCase().includes(searchQuery.toLowerCase())\n      )\n  )\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50\">\n      {/* Header */}\n      <motion.div\n        className=\"bg-white/80 backdrop-blur-sm border-b border-slate-200/60\"\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 py-12\">\n          <div className=\"text-center\">\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"flex items-center justify-center mb-6\"\n            >\n              <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 p-3 rounded-2xl shadow-lg\">\n                <BookOpen className=\"h-8 w-8 text-white\" />\n              </div>\n            </motion.div>\n\n            <motion.h1\n              className=\"text-5xl font-bold bg-gradient-to-r from-slate-900 via-blue-900 to-purple-900 bg-clip-text text-transparent mb-6\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.3 }}\n            >\n              Asset Management Documentation\n            </motion.h1>\n\n            <motion.p\n              className=\"text-xl text-slate-600 mb-8 max-w-3xl mx-auto leading-relaxed\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.4 }}\n            >\n              Comprehensive guides, tutorials, and reference materials to help you master your asset\n              management system and unlock its full potential for your organization.\n            </motion.p>\n\n            {/* Search Bar */}\n            <motion.div\n              className=\"max-w-2xl mx-auto relative\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.5 }}\n            >\n              <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-slate-400 h-5 w-5\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search documentation...\"\n                value={searchQuery}\n                onChange={e => setSearchQuery(e.target.value)}\n                className=\"pl-12 pr-4 py-4 text-lg border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl shadow-sm\"\n              />\n            </motion.div>\n          </div>\n        </div>\n      </motion.div>\n\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-3\">\n            {!selectedSection ? (\n              <motion.div variants={containerVariants} initial=\"hidden\" animate=\"visible\">\n                {/* Quick Start Section */}\n                <motion.div variants={itemVariants}>\n                  <Card className=\"mb-8 border-emerald-200 bg-gradient-to-r from-emerald-50 to-green-50 shadow-lg\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center text-emerald-800 text-2xl\">\n                        <div className=\"bg-emerald-600 p-2 rounded-lg mr-3\">\n                          <Zap className=\"h-6 w-6 text-white\" />\n                        </div>\n                        Quick Start Guide\n                      </CardTitle>\n                      <CardDescription className=\"text-emerald-700 text-lg\">\n                        Get up and running with your asset management system in just a few minutes\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {[\n                          {\n                            step: '1',\n                            title: 'System Overview',\n                            desc: 'Learn the basics',\n                            time: '5 min',\n                          },\n                          {\n                            step: '2',\n                            title: 'Create First Asset',\n                            desc: 'Add your first item',\n                            time: '3 min',\n                          },\n                          {\n                            step: '3',\n                            title: 'Generate QR Code',\n                            desc: 'Create tracking codes',\n                            time: '4 min',\n                          },\n                          {\n                            step: '4',\n                            title: 'View Analytics',\n                            desc: 'Monitor your assets',\n                            time: '2 min',\n                          },\n                        ].map((item, index) => (\n                          <motion.div\n                            key={index}\n                            whileHover={{ scale: 1.02 }}\n                            whileTap={{ scale: 0.98 }}\n                          >\n                            <Button\n                              variant=\"outline\"\n                              className=\"justify-start h-auto p-4 border-emerald-300 hover:bg-emerald-100 hover:border-emerald-400 transition-all duration-200 w-full\"\n                            >\n                              <div className=\"flex items-center w-full\">\n                                <div className=\"bg-emerald-600 text-white rounded-full w-8 h-8 flex items-center justify-center font-semibold text-sm mr-3\">\n                                  {item.step}\n                                </div>\n                                <div className=\"text-left flex-1\">\n                                  <div className=\"font-semibold text-slate-900\">{item.title}</div>\n                                  <div className=\"text-sm text-slate-600\">{item.desc}</div>\n                                </div>\n                                <div className=\"text-xs text-emerald-600 font-medium mr-2\">\n                                  {item.time}\n                                </div>\n                                <ChevronRight className=\"h-4 w-4 text-emerald-600\" />\n                              </div>\n                            </Button>\n                          </motion.div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n\n                {/* Documentation Sections */}\n                <motion.div\n                  className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\"\n                  variants={containerVariants}\n                >\n                  {filteredSections.map((section, index) => {\n                    const IconComponent = section.icon\n                    return (\n                      <motion.div\n                        key={section.id}\n                        variants={itemVariants}\n                        whileHover={{ scale: 1.02, y: -4 }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        <Card\n                          className={`cursor-pointer transition-all duration-300 hover:shadow-xl ${section.borderColor} ${section.hoverColor} group`}\n                          onClick={() => setSelectedSection(section.id)}\n                        >\n                          <CardHeader>\n                            <CardTitle className=\"flex items-center\">\n                              <div\n                                className={`p-3 rounded-xl ${section.bgColor} mr-4 group-hover:scale-110 transition-transform duration-200`}\n                              >\n                                <IconComponent className={`h-6 w-6 ${section.color}`} />\n                              </div>\n                              <div>\n                                <div className=\"text-slate-900 group-hover:text-slate-700\">\n                                  {section.title}\n                                </div>\n                                <div className=\"text-sm text-slate-500 font-normal mt-1\">\n                                  {section.articles.length} articles\n                                </div>\n                              </div>\n                            </CardTitle>\n                            <CardDescription className=\"text-slate-600 leading-relaxed\">\n                              {section.description}\n                            </CardDescription>\n                          </CardHeader>\n                          <CardContent>\n                            <div className=\"space-y-3\">\n                              {section.articles.slice(0, 3).map((article, articleIndex) => (\n                                <div\n                                  key={articleIndex}\n                                  className=\"flex items-center justify-between text-sm\"\n                                >\n                                  <span className=\"text-slate-700 font-medium\">\n                                    {article.title}\n                                  </span>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Badge\n                                      variant=\"outline\"\n                                      className={`text-xs ${\n                                        article.difficulty === 'Beginner'\n                                          ? 'border-green-300 text-green-700'\n                                          : article.difficulty === 'Intermediate'\n                                            ? 'border-yellow-300 text-yellow-700'\n                                            : article.difficulty === 'Advanced'\n                                              ? 'border-orange-300 text-orange-700'\n                                              : 'border-red-300 text-red-700'\n                                      }`}\n                                    >\n                                      {article.difficulty}\n                                    </Badge>\n                                    <span className=\"text-slate-500 text-xs\">{article.time}</span>\n                                  </div>\n                                </div>\n                              ))}\n                              {section.articles.length > 3 && (\n                                <div\n                                  className={`text-sm font-medium ${section.color} flex items-center`}\n                                >\n                                  +{section.articles.length - 3} more articles\n                                  <ArrowRight className=\"h-3 w-3 ml-1\" />\n                                </div>\n                              )}\n                            </div>\n                          </CardContent>\n                        </Card>\n                      </motion.div>\n                    )\n                  })}\n                </motion.div>\n\n                {/* Popular Articles */}\n                <motion.div variants={itemVariants}>\n                  <Card className=\"mb-8 shadow-lg\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center text-slate-900\">\n                        <Star className=\"h-5 w-5 mr-2 text-yellow-500\" />\n                        Popular Articles\n                        <Badge variant=\"secondary\" className=\"ml-2\">\n                          Trending\n                        </Badge>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        {popularArticles.map((article, index) => (\n                          <motion.div\n                            key={index}\n                            className=\"flex items-center justify-between p-4 rounded-lg hover:bg-slate-50 cursor-pointer transition-colors duration-200 border border-transparent hover:border-slate-200\"\n                            whileHover={{ x: 4 }}\n                          >\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold text-sm\">\n                                {index + 1}\n                              </div>\n                              <div>\n                                <div className=\"font-medium text-slate-900\">{article.title}</div>\n                                <div className=\"text-sm text-slate-600\">{article.category}</div>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"text-right\">\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {article.views} views\n                                </Badge>\n                                <div className=\"text-xs text-green-600 font-medium mt-1\">\n                                  {article.trend}\n                                </div>\n                              </div>\n                              <ChevronRight className=\"h-4 w-4 text-slate-400\" />\n                            </div>\n                          </motion.div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              </motion.div>\n            ) : (\n              <DocumentationSection\n                section={documentationSections.find(s => s.id === selectedSection)!}\n                onBack={() => setSelectedSection(null)}\n              />\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <motion.div\n            className=\"space-y-6\"\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.6, delay: 0.3 }}\n          >\n            {/* Recent Updates */}\n            <Card className=\"shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-sm text-slate-900\">\n                  <Clock className=\"h-4 w-4 mr-2\" />\n                  Recent Updates\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {recentUpdates.map((update, index) => (\n                    <motion.div\n                      key={index}\n                      className=\"text-sm border-l-2 border-blue-200 pl-3\"\n                      initial={{ opacity: 0, x: -10 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                    >\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <update.icon className=\"h-3 w-3 text-blue-600\" />\n                        <div className=\"font-medium text-slate-900\">{update.title}</div>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-slate-600\">{update.date}</span>\n                        <Badge\n                          variant={update.type === 'New' ? 'default' : 'secondary'}\n                          className=\"text-xs\"\n                        >\n                          {update.type}\n                        </Badge>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Links */}\n            <Card className=\"shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-sm text-slate-900\">Quick Links</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {[\n                    { icon: Download, label: 'Download PDF Guide', color: 'text-blue-600' },\n                    { icon: ExternalLink, label: 'Video Tutorials', color: 'text-purple-600' },\n                    { icon: HelpCircle, label: 'Contact Support', color: 'text-green-600' },\n                    { icon: FileText, label: 'Release Notes', color: 'text-orange-600' },\n                  ].map((link, index) => (\n                    <motion.div key={index} whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"w-full justify-start hover:bg-slate-100\"\n                      >\n                        <link.icon className={`h-4 w-4 mr-2 ${link.color}`} />\n                        {link.label}\n                      </Button>\n                    </motion.div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Help & Support */}\n            <Card className=\"shadow-lg bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200\">\n              <CardHeader>\n                <CardTitle className=\"text-sm text-blue-900\">Need Help?</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm\">\n                  <div className=\"p-3 bg-white/60 rounded-lg\">\n                    <div className=\"font-medium text-blue-900\">Community Forum</div>\n                    <div className=\"text-blue-700\">Get help from other users</div>\n                  </div>\n                  <div className=\"p-3 bg-white/60 rounded-lg\">\n                    <div className=\"font-medium text-blue-900\">Email Support</div>\n                    <div className=\"text-blue-700\">support@assetmanager.com</div>\n                  </div>\n                  <div className=\"p-3 bg-white/60 rounded-lg\">\n                    <div className=\"font-medium text-blue-900\">Live Chat</div>\n                    <div className=\"text-blue-700\">Available 9 AM - 5 PM EST</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction DocumentationSection({ section, onBack }: { section: any; onBack: () => void }) {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n      <Button variant=\"ghost\" onClick={onBack} className=\"mb-6 hover:bg-slate-100\">\n        ← Back to Documentation\n      </Button>\n\n      <Card className=\"shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-slate-900\">\n            <section.icon className={`h-6 w-6 mr-3 ${section.color}`} />\n            {section.title}\n          </CardTitle>\n          <CardDescription className=\"text-slate-600\">{section.description}</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {section.articles.map((article: any, index: number) => (\n              <motion.div\n                key={index}\n                className=\"p-4 border border-slate-200 rounded-lg hover:bg-slate-50 cursor-pointer transition-colors duration-200\"\n                whileHover={{ scale: 1.01 }}\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.1 }}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-medium text-slate-900\">{article.title}</h3>\n                    <div className=\"flex items-center space-x-2 mt-2\">\n                      <Badge\n                        variant=\"outline\"\n                        className={`text-xs ${\n                          article.difficulty === 'Beginner'\n                            ? 'border-green-300 text-green-700'\n                            : article.difficulty === 'Intermediate'\n                              ? 'border-yellow-300 text-yellow-700'\n                              : article.difficulty === 'Advanced'\n                                ? 'border-orange-300 text-orange-700'\n                                : 'border-red-300 text-red-700'\n                        }`}\n                      >\n                        {article.difficulty}\n                      </Badge>\n                      <span className=\"text-sm text-slate-500\">{article.time}</span>\n                    </div>\n                  </div>\n                  <ChevronRight className=\"h-4 w-4 text-slate-400\" />\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\docs\\supabase-setup\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\docs\\user-guide\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\docs\\user-guide\\page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":113,"column":92,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4608,4749],"text":" Use consistent naming conventions like &quot;Brand -\n                          Model - Identifier\" for easier searching.\n                        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4608,4749],"text":" Use consistent naming conventions like &ldquo;Brand -\n                          Model - Identifier\" for easier searching.\n                        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4608,4749],"text":" Use consistent naming conventions like &#34;Brand -\n                          Model - Identifier\" for easier searching.\n                        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4608,4749],"text":" Use consistent naming conventions like &rdquo;Brand -\n                          Model - Identifier\" for easier searching.\n                        "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":114,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4608,4749],"text":" Use consistent naming conventions like \"Brand -\n                          Model - Identifier&quot; for easier searching.\n                        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4608,4749],"text":" Use consistent naming conventions like \"Brand -\n                          Model - Identifier&ldquo; for easier searching.\n                        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4608,4749],"text":" Use consistent naming conventions like \"Brand -\n                          Model - Identifier&#34; for easier searching.\n                        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4608,4749],"text":" Use consistent naming conventions like \"Brand -\n                          Model - Identifier&rdquo; for easier searching.\n                        "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":269,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12990,13024],"text":"2. Click &quot;Generate QR Code\" button"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12990,13024],"text":"2. Click &ldquo;Generate QR Code\" button"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12990,13024],"text":"2. Click &#34;Generate QR Code\" button"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12990,13024],"text":"2. Click &rdquo;Generate QR Code\" button"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":269,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12990,13024],"text":"2. Click \"Generate QR Code&quot; button"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12990,13024],"text":"2. Click \"Generate QR Code&ldquo; button"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12990,13024],"text":"2. Click \"Generate QR Code&#34; button"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12990,13024],"text":"2. Click \"Generate QR Code&rdquo; button"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":280,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13649,13677],"text":"3. Click &quot;Generate QR Codes\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13649,13677],"text":"3. Click &ldquo;Generate QR Codes\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13649,13677],"text":"3. Click &#34;Generate QR Codes\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13649,13677],"text":"3. Click &rdquo;Generate QR Codes\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":280,"column":60,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13649,13677],"text":"3. Click \"Generate QR Codes&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13649,13677],"text":"3. Click \"Generate QR Codes&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13649,13677],"text":"3. Click \"Generate QR Codes&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13649,13677],"text":"3. Click \"Generate QR Codes&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":339,"column":40,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16829,16935],"text":"\n                            Use the app&apos;s built-in QR scanner for best results\n                          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16829,16935],"text":"\n                            Use the app&lsquo;s built-in QR scanner for best results\n                          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16829,16935],"text":"\n                            Use the app&#39;s built-in QR scanner for best results\n                          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16829,16935],"text":"\n                            Use the app&rsquo;s built-in QR scanner for best results\n                          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":387,"column":75,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19345,19349],"text":"Do&apos;s"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19345,19349],"text":"Do&lsquo;s"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19345,19349],"text":"Do&#39;s"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19345,19349],"text":"Do&rsquo;s"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":408,"column":74,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[20587,20593],"text":"Don&apos;ts"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[20587,20593],"text":"Don&lsquo;ts"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[20587,20593],"text":"Don&#39;ts"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[20587,20593],"text":"Don&rsquo;ts"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":412,"column":32,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[20822,20928],"text":"\n                            Don&apos;t place codes on curved or reflective surfaces\n                          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[20822,20928],"text":"\n                            Don&lsquo;t place codes on curved or reflective surfaces\n                          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[20822,20928],"text":"\n                            Don&#39;t place codes on curved or reflective surfaces\n                          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[20822,20928],"text":"\n                            Don&rsquo;t place codes on curved or reflective surfaces\n                          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":420,"column":32,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[21331,21424],"text":"\n                            Don&apos;t make QR codes too small to scan\n                          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[21331,21424],"text":"\n                            Don&lsquo;t make QR codes too small to scan\n                          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[21331,21424],"text":"\n                            Don&#39;t make QR codes too small to scan\n                          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[21331,21424],"text":"\n                            Don&rsquo;t make QR codes too small to scan\n                          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":459,"column":63,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[23149,23194],"text":"• Use quotes for exact phrases: &quot;MacBook Pro\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[23149,23194],"text":"• Use quotes for exact phrases: &ldquo;MacBook Pro\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[23149,23194],"text":"• Use quotes for exact phrases: &#34;MacBook Pro\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[23149,23194],"text":"• Use quotes for exact phrases: &rdquo;MacBook Pro\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":459,"column":75,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[23149,23194],"text":"• Use quotes for exact phrases: \"MacBook Pro&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[23149,23194],"text":"• Use quotes for exact phrases: \"MacBook Pro&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[23149,23194],"text":"• Use quotes for exact phrases: \"MacBook Pro&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[23149,23194],"text":"• Use quotes for exact phrases: \"MacBook Pro&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":816,"column":64,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[41347,41450],"text":"\n                            Set up and manage your organization&apos;s locations\n                          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[41347,41450],"text":"\n                            Set up and manage your organization&lsquo;s locations\n                          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[41347,41450],"text":"\n                            Set up and manage your organization&#39;s locations\n                          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[41347,41450],"text":"\n                            Set up and manage your organization&rsquo;s locations\n                          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":881,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[44443,44557],"text":"\n                            Use consistent naming: &quot;Brand - Model - Location - Number\"\n                          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[44443,44557],"text":"\n                            Use consistent naming: &ldquo;Brand - Model - Location - Number\"\n                          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[44443,44557],"text":"\n                            Use consistent naming: &#34;Brand - Model - Location - Number\"\n                          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[44443,44557],"text":"\n                            Use consistent naming: &rdquo;Brand - Model - Location - Number\"\n                          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":881,"column":86,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[44443,44557],"text":"\n                            Use consistent naming: \"Brand - Model - Location - Number&quot;\n                          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[44443,44557],"text":"\n                            Use consistent naming: \"Brand - Model - Location - Number&ldquo;\n                          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[44443,44557],"text":"\n                            Use consistent naming: \"Brand - Model - Location - Number&#34;\n                          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[44443,44557],"text":"\n                            Use consistent naming: \"Brand - Model - Location - Number&rdquo;\n                          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":884,"column":38,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[44631,44727],"text":"\n                            Example: &quot;Dell - Laptop - OfficeA - 001\"\n                          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[44631,44727],"text":"\n                            Example: &ldquo;Dell - Laptop - OfficeA - 001\"\n                          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[44631,44727],"text":"\n                            Example: &#34;Dell - Laptop - OfficeA - 001\"\n                          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[44631,44727],"text":"\n                            Example: &rdquo;Dell - Laptop - OfficeA - 001\"\n                          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":884,"column":68,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[44631,44727],"text":"\n                            Example: \"Dell - Laptop - OfficeA - 001&quot;\n                          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[44631,44727],"text":"\n                            Example: \"Dell - Laptop - OfficeA - 001&ldquo;\n                          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[44631,44727],"text":"\n                            Example: \"Dell - Laptop - OfficeA - 001&#34;\n                          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[44631,44727],"text":"\n                            Example: \"Dell - Laptop - OfficeA - 001&rdquo;\n                          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":928,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[47172,47286],"text":"\n                            Place QR codes where they&apos;re easily visible and accessible\n                          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[47172,47286],"text":"\n                            Place QR codes where they&lsquo;re easily visible and accessible\n                          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[47172,47286],"text":"\n                            Place QR codes where they&#39;re easily visible and accessible\n                          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[47172,47286],"text":"\n                            Place QR codes where they&rsquo;re easily visible and accessible\n                          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":1012,"column":76,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[51545,51563],"text":"QR Code Won&apos;t Scan"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[51545,51563],"text":"QR Code Won&lsquo;t Scan"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[51545,51563],"text":"QR Code Won&#39;t Scan"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[51545,51563],"text":"QR Code Won&rsquo;t Scan"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":1017,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[51890,51917],"text":"• Ensure code isn&apos;t damaged"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[51890,51917],"text":"• Ensure code isn&lsquo;t damaged"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[51890,51917],"text":"• Ensure code isn&#39;t damaged"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[51890,51917],"text":"• Ensure code isn&rsquo;t damaged"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport {\n  Users,\n  Package,\n  QrCode,\n  BarChart3,\n  Settings,\n  Search,\n  Filter,\n  Download,\n  Upload,\n  Edit,\n  Eye,\n  Plus,\n  CheckCircle,\n  AlertTriangle,\n  Lightbulb,\n  Clock,\n  MapPin,\n  Tag,\n  DollarSign,\n  Shield,\n  ExternalLink,\n} from 'lucide-react'\n\nexport default function UserGuidePage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8 px-4\">\n      <div className=\"max-w-5xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4 flex items-center\">\n            <Users className=\"h-10 w-10 mr-4 text-blue-600\" />\n            User Guide\n          </h1>\n          <p className=\"text-xl text-gray-600\">\n            Complete guide to using your Asset Management System effectively\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"assets\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-6\">\n            <TabsTrigger value=\"assets\">Assets</TabsTrigger>\n            <TabsTrigger value=\"qr-codes\">QR Codes</TabsTrigger>\n            <TabsTrigger value=\"search\">Search & Filter</TabsTrigger>\n            <TabsTrigger value=\"reports\">Reports</TabsTrigger>\n            <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n            <TabsTrigger value=\"tips\">Tips & Tricks</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"assets\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Asset Management</CardTitle>\n                  <CardDescription>\n                    Learn how to create, edit, and manage your assets effectively\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-semibold mb-4 flex items-center\">\n                      <Plus className=\"h-5 w-5 mr-2 text-green-600\" />\n                      Creating New Assets\n                    </h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-3\">\n                          <h5 className=\"font-medium\">Required Information</h5>\n                          <ul className=\"space-y-2 text-sm text-gray-600\">\n                            <li className=\"flex items-center\">\n                              <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                              Asset name (descriptive and unique)\n                            </li>\n                            <li className=\"flex items-center\">\n                              <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                              Category selection\n                            </li>\n                            <li className=\"flex items-center\">\n                              <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                              Current location\n                            </li>\n                          </ul>\n                        </div>\n                        <div className=\"space-y-3\">\n                          <h5 className=\"font-medium\">Optional Information</h5>\n                          <ul className=\"space-y-2 text-sm text-gray-600\">\n                            <li className=\"flex items-center\">\n                              <Tag className=\"h-4 w-4 text-blue-600 mr-2\" />\n                              Detailed description\n                            </li>\n                            <li className=\"flex items-center\">\n                              <DollarSign className=\"h-4 w-4 text-blue-600 mr-2\" />\n                              Purchase value\n                            </li>\n                            <li className=\"flex items-center\">\n                              <Clock className=\"h-4 w-4 text-blue-600 mr-2\" />\n                              Purchase date\n                            </li>\n                          </ul>\n                        </div>\n                      </div>\n\n                      <Alert>\n                        <Lightbulb className=\"h-4 w-4\" />\n                        <AlertDescription>\n                          <strong>Pro Tip:</strong> Use consistent naming conventions like \"Brand -\n                          Model - Identifier\" for easier searching.\n                        </AlertDescription>\n                      </Alert>\n\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <h5 className=\"font-medium mb-2\">Asset Categories</h5>\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n                          <Badge variant=\"outline\">IT Equipment</Badge>\n                          <Badge variant=\"outline\">Furniture</Badge>\n                          <Badge variant=\"outline\">Vehicles</Badge>\n                          <Badge variant=\"outline\">Tools</Badge>\n                          <Badge variant=\"outline\">AV Equipment</Badge>\n                          <Badge variant=\"outline\">Office Supplies</Badge>\n                          <Badge variant=\"outline\">Machinery</Badge>\n                          <Badge variant=\"outline\">Other</Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-4 flex items-center\">\n                      <Edit className=\"h-5 w-5 mr-2 text-blue-600\" />\n                      Editing Assets\n                    </h4>\n                    <div className=\"space-y-4\">\n                      <p className=\"text-gray-600\">\n                        Keep your asset information up-to-date by regularly editing asset details:\n                      </p>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div className=\"p-4 border rounded-lg\">\n                          <MapPin className=\"h-6 w-6 text-orange-600 mb-2\" />\n                          <h5 className=\"font-medium\">Location Updates</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Update asset location when moved between offices or departments\n                          </p>\n                        </div>\n                        <div className=\"p-4 border rounded-lg\">\n                          <Settings className=\"h-6 w-6 text-purple-600 mb-2\" />\n                          <h5 className=\"font-medium\">Status Changes</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Mark assets as active, inactive, under maintenance, or retired\n                          </p>\n                        </div>\n                        <div className=\"p-4 border rounded-lg\">\n                          <Tag className=\"h-6 w-6 text-green-600 mb-2\" />\n                          <h5 className=\"font-medium\">Information Updates</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Add new details, update descriptions, or modify categories\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-4 flex items-center\">\n                      <Eye className=\"h-5 w-5 mr-2 text-indigo-600\" />\n                      Asset Status Management\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-3\">\n                        <h5 className=\"font-medium\">Available Statuses</h5>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between p-2 border rounded\">\n                            <Badge className=\"bg-green-100 text-green-800\">Active</Badge>\n                            <span className=\"text-sm text-gray-600\">In use and available</span>\n                          </div>\n                          <div className=\"flex items-center justify-between p-2 border rounded\">\n                            <Badge className=\"bg-yellow-100 text-yellow-800\">Maintenance</Badge>\n                            <span className=\"text-sm text-gray-600\">Under repair or service</span>\n                          </div>\n                          <div className=\"flex items-center justify-between p-2 border rounded\">\n                            <Badge className=\"bg-gray-100 text-gray-800\">Inactive</Badge>\n                            <span className=\"text-sm text-gray-600\">Not currently in use</span>\n                          </div>\n                          <div className=\"flex items-center justify-between p-2 border rounded\">\n                            <Badge className=\"bg-red-100 text-red-800\">Retired</Badge>\n                            <span className=\"text-sm text-gray-600\">End of lifecycle</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <h5 className=\"font-medium\">Best Practices</h5>\n                        <ul className=\"space-y-2 text-sm text-gray-600\">\n                          <li>• Update status immediately when changes occur</li>\n                          <li>• Use maintenance status for temporary unavailability</li>\n                          <li>• Retire assets that are no longer usable</li>\n                          <li>• Keep inactive assets for potential future use</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Bulk Operations</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <p className=\"text-gray-600\">\n                      Efficiently manage multiple assets at once using bulk operations:\n                    </p>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div className=\"p-4 border rounded-lg\">\n                        <Upload className=\"h-6 w-6 text-blue-600 mb-2\" />\n                        <h5 className=\"font-medium\">Bulk Import</h5>\n                        <p className=\"text-sm text-gray-600\">\n                          Import multiple assets from CSV files\n                        </p>\n                      </div>\n                      <div className=\"p-4 border rounded-lg\">\n                        <Edit className=\"h-6 w-6 text-green-600 mb-2\" />\n                        <h5 className=\"font-medium\">Bulk Edit</h5>\n                        <p className=\"text-sm text-gray-600\">\n                          Update multiple assets simultaneously\n                        </p>\n                      </div>\n                      <div className=\"p-4 border rounded-lg\">\n                        <QrCode className=\"h-6 w-6 text-purple-600 mb-2\" />\n                        <h5 className=\"font-medium\">Bulk QR Generation</h5>\n                        <p className=\"text-sm text-gray-600\">\n                          Generate QR codes for multiple assets\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"qr-codes\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>QR Code Management</CardTitle>\n                  <CardDescription>\n                    Complete guide to generating, printing, and scanning QR codes\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-semibold mb-4 flex items-center\">\n                      <QrCode className=\"h-5 w-5 mr-2 text-purple-600\" />\n                      Generating QR Codes\n                    </h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <h5 className=\"font-medium mb-3\">Individual QR Codes</h5>\n                          <ol className=\"space-y-2 text-sm text-gray-600\">\n                            <li>1. Navigate to the asset details page</li>\n                            <li>2. Click \"Generate QR Code\" button</li>\n                            <li>3. Choose size and format options</li>\n                            <li>4. Download the QR code image</li>\n                            <li>5. Print and attach to the asset</li>\n                          </ol>\n                        </div>\n                        <div>\n                          <h5 className=\"font-medium mb-3\">Bulk QR Generation</h5>\n                          <ol className=\"space-y-2 text-sm text-gray-600\">\n                            <li>1. Go to QR Management page</li>\n                            <li>2. Select multiple assets</li>\n                            <li>3. Click \"Generate QR Codes\"</li>\n                            <li>4. Download as ZIP file</li>\n                            <li>5. Print all codes at once</li>\n                          </ol>\n                        </div>\n                      </div>\n\n                      <Alert>\n                        <QrCode className=\"h-4 w-4\" />\n                        <AlertDescription>\n                          <strong>QR Code Formats:</strong> Available in PNG, SVG, and PDF formats.\n                          SVG is recommended for high-quality printing.\n                        </AlertDescription>\n                      </Alert>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-4\">QR Code Customization</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-3\">\n                        <h5 className=\"font-medium\">Size Options</h5>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between p-2 border rounded\">\n                            <span className=\"text-sm\">Small (128x128px)</span>\n                            <Badge variant=\"outline\">Labels</Badge>\n                          </div>\n                          <div className=\"flex items-center justify-between p-2 border rounded\">\n                            <span className=\"text-sm\">Medium (256x256px)</span>\n                            <Badge variant=\"outline\">Standard</Badge>\n                          </div>\n                          <div className=\"flex items-center justify-between p-2 border rounded\">\n                            <span className=\"text-sm\">Large (512x512px)</span>\n                            <Badge variant=\"outline\">Posters</Badge>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <h5 className=\"font-medium\">Print Templates</h5>\n                        <ul className=\"space-y-2 text-sm text-gray-600\">\n                          <li>• Asset labels with QR code and name</li>\n                          <li>• QR code only (minimal design)</li>\n                          <li>• Full asset information cards</li>\n                          <li>• Custom templates with logo</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-4\">Scanning QR Codes</h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div className=\"p-4 border rounded-lg text-center\">\n                          <div className=\"bg-blue-100 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-3\">\n                            <QrCode className=\"h-6 w-6 text-blue-600\" />\n                          </div>\n                          <h5 className=\"font-medium\">Built-in Scanner</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Use the app's built-in QR scanner for best results\n                          </p>\n                        </div>\n                        <div className=\"p-4 border rounded-lg text-center\">\n                          <div className=\"bg-green-100 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-3\">\n                            <Eye className=\"h-6 w-6 text-green-600\" />\n                          </div>\n                          <h5 className=\"font-medium\">Camera App</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Most smartphone cameras can scan QR codes directly\n                          </p>\n                        </div>\n                        <div className=\"p-4 border rounded-lg text-center\">\n                          <div className=\"bg-purple-100 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-3\">\n                            <Settings className=\"h-6 w-6 text-purple-600\" />\n                          </div>\n                          <h5 className=\"font-medium\">Third-party Apps</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Compatible with popular QR scanner apps\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"bg-blue-50 p-4 rounded-lg\">\n                        <h5 className=\"font-medium text-blue-900 mb-2\">\n                          What Happens When You Scan?\n                        </h5>\n                        <ul className=\"space-y-1 text-sm text-blue-800\">\n                          <li>• Instant access to asset details</li>\n                          <li>• Scan location and timestamp recorded</li>\n                          <li>• Option to update asset status</li>\n                          <li>• Add notes or comments</li>\n                          <li>• View scan history</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>QR Code Best Practices</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <h5 className=\"font-medium mb-3 text-green-800\">Do's</h5>\n                        <ul className=\"space-y-2 text-sm text-gray-600\">\n                          <li className=\"flex items-start\">\n                            <CheckCircle className=\"h-4 w-4 text-green-600 mr-2 mt-0.5\" />\n                            Place QR codes in easily accessible locations\n                          </li>\n                          <li className=\"flex items-start\">\n                            <CheckCircle className=\"h-4 w-4 text-green-600 mr-2 mt-0.5\" />\n                            Use protective lamination for outdoor assets\n                          </li>\n                          <li className=\"flex items-start\">\n                            <CheckCircle className=\"h-4 w-4 text-green-600 mr-2 mt-0.5\" />\n                            Ensure adequate lighting for scanning\n                          </li>\n                          <li className=\"flex items-start\">\n                            <CheckCircle className=\"h-4 w-4 text-green-600 mr-2 mt-0.5\" />\n                            Test QR codes after printing\n                          </li>\n                        </ul>\n                      </div>\n                      <div>\n                        <h5 className=\"font-medium mb-3 text-red-800\">Don'ts</h5>\n                        <ul className=\"space-y-2 text-sm text-gray-600\">\n                          <li className=\"flex items-start\">\n                            <AlertTriangle className=\"h-4 w-4 text-red-600 mr-2 mt-0.5\" />\n                            Don't place codes on curved or reflective surfaces\n                          </li>\n                          <li className=\"flex items-start\">\n                            <AlertTriangle className=\"h-4 w-4 text-red-600 mr-2 mt-0.5\" />\n                            Avoid areas prone to damage or wear\n                          </li>\n                          <li className=\"flex items-start\">\n                            <AlertTriangle className=\"h-4 w-4 text-red-600 mr-2 mt-0.5\" />\n                            Don't make QR codes too small to scan\n                          </li>\n                          <li className=\"flex items-start\">\n                            <AlertTriangle className=\"h-4 w-4 text-red-600 mr-2 mt-0.5\" />\n                            Avoid low-contrast color combinations\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"search\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Search and Filtering</CardTitle>\n                  <CardDescription>\n                    Master the search and filtering capabilities to find assets quickly\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-semibold mb-4 flex items-center\">\n                      <Search className=\"h-5 w-5 mr-2 text-blue-600\" />\n                      Basic Search\n                    </h4>\n                    <div className=\"space-y-4\">\n                      <p className=\"text-gray-600\">\n                        Use the search bar to quickly find assets by name, description, or ID:\n                      </p>\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <h5 className=\"font-medium mb-2\">Search Tips</h5>\n                        <ul className=\"space-y-1 text-sm text-gray-600\">\n                          <li>• Search is case-insensitive</li>\n                          <li>• Partial matches are supported</li>\n                          <li>• Use quotes for exact phrases: \"MacBook Pro\"</li>\n                          <li>• Search across all asset fields</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-4 flex items-center\">\n                      <Filter className=\"h-5 w-5 mr-2 text-purple-600\" />\n                      Advanced Filtering\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <h5 className=\"font-medium mb-3\">Available Filters</h5>\n                        <div className=\"space-y-3\">\n                          <div className=\"p-3 border rounded-lg\">\n                            <div className=\"font-medium text-sm\">Category</div>\n                            <div className=\"text-xs text-gray-600\">Filter by asset category</div>\n                          </div>\n                          <div className=\"p-3 border rounded-lg\">\n                            <div className=\"font-medium text-sm\">Status</div>\n                            <div className=\"text-xs text-gray-600\">\n                              Active, inactive, maintenance, retired\n                            </div>\n                          </div>\n                          <div className=\"p-3 border rounded-lg\">\n                            <div className=\"font-medium text-sm\">Location</div>\n                            <div className=\"text-xs text-gray-600\">Filter by current location</div>\n                          </div>\n                          <div className=\"p-3 border rounded-lg\">\n                            <div className=\"font-medium text-sm\">Date Range</div>\n                            <div className=\"text-xs text-gray-600\">Created or modified dates</div>\n                          </div>\n                        </div>\n                      </div>\n                      <div>\n                        <h5 className=\"font-medium mb-3\">Filter Combinations</h5>\n                        <div className=\"space-y-3\">\n                          <div className=\"p-3 bg-blue-50 rounded-lg\">\n                            <div className=\"font-medium text-sm text-blue-900\">Example 1</div>\n                            <div className=\"text-xs text-blue-700\">\n                              Category: IT Equipment + Status: Active\n                            </div>\n                          </div>\n                          <div className=\"p-3 bg-green-50 rounded-lg\">\n                            <div className=\"font-medium text-sm text-green-900\">Example 2</div>\n                            <div className=\"text-xs text-green-700\">\n                              Location: Office A + Date: Last 30 days\n                            </div>\n                          </div>\n                          <div className=\"p-3 bg-purple-50 rounded-lg\">\n                            <div className=\"font-medium text-sm text-purple-900\">Example 3</div>\n                            <div className=\"text-xs text-purple-700\">\n                              Status: Maintenance + Category: Vehicles\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-4\">Saved Searches</h4>\n                    <div className=\"space-y-4\">\n                      <p className=\"text-gray-600\">\n                        Save frequently used search and filter combinations for quick access:\n                      </p>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div className=\"p-4 border rounded-lg\">\n                          <h5 className=\"font-medium\">IT Equipment - Active</h5>\n                          <p className=\"text-sm text-gray-600\">All active IT equipment</p>\n                          <Badge variant=\"outline\" className=\"mt-2\">\n                            12 assets\n                          </Badge>\n                        </div>\n                        <div className=\"p-4 border rounded-lg\">\n                          <h5 className=\"font-medium\">Maintenance Required</h5>\n                          <p className=\"text-sm text-gray-600\">Assets needing maintenance</p>\n                          <Badge variant=\"outline\" className=\"mt-2\">\n                            3 assets\n                          </Badge>\n                        </div>\n                        <div className=\"p-4 border rounded-lg\">\n                          <h5 className=\"font-medium\">New This Month</h5>\n                          <p className=\"text-sm text-gray-600\">Recently added assets</p>\n                          <Badge variant=\"outline\" className=\"mt-2\">\n                            8 assets\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Sorting and Views</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <h5 className=\"font-medium mb-3\">Sorting Options</h5>\n                        <ul className=\"space-y-2 text-sm text-gray-600\">\n                          <li>• Name (A-Z or Z-A)</li>\n                          <li>• Date created (newest or oldest first)</li>\n                          <li>• Last modified</li>\n                          <li>• Category</li>\n                          <li>• Location</li>\n                          <li>• Value (high to low or low to high)</li>\n                        </ul>\n                      </div>\n                      <div>\n                        <h5 className=\"font-medium mb-3\">View Options</h5>\n                        <ul className=\"space-y-2 text-sm text-gray-600\">\n                          <li>• Grid view (cards with images)</li>\n                          <li>• List view (compact table format)</li>\n                          <li>• Detailed view (expanded information)</li>\n                          <li>• Map view (location-based)</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"reports\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Reports and Analytics</CardTitle>\n                  <CardDescription>\n                    Generate comprehensive reports and analyze your asset data\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-semibold mb-4 flex items-center\">\n                      <BarChart3 className=\"h-5 w-5 mr-2 text-orange-600\" />\n                      Available Reports\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"p-4 border rounded-lg\">\n                        <h5 className=\"font-medium\">Asset Inventory Report</h5>\n                        <p className=\"text-sm text-gray-600 mb-3\">\n                          Complete list of all assets with details\n                        </p>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"outline\">PDF</Badge>\n                          <Badge variant=\"outline\">Excel</Badge>\n                          <Badge variant=\"outline\">CSV</Badge>\n                        </div>\n                      </div>\n                      <div className=\"p-4 border rounded-lg\">\n                        <h5 className=\"font-medium\">Asset Utilization Report</h5>\n                        <p className=\"text-sm text-gray-600 mb-3\">\n                          Usage patterns and utilization metrics\n                        </p>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"outline\">PDF</Badge>\n                          <Badge variant=\"outline\">Excel</Badge>\n                        </div>\n                      </div>\n                      <div className=\"p-4 border rounded-lg\">\n                        <h5 className=\"font-medium\">QR Code Activity Report</h5>\n                        <p className=\"text-sm text-gray-600 mb-3\">\n                          QR code scan history and analytics\n                        </p>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"outline\">PDF</Badge>\n                          <Badge variant=\"outline\">Excel</Badge>\n                        </div>\n                      </div>\n                      <div className=\"p-4 border rounded-lg\">\n                        <h5 className=\"font-medium\">Asset Lifecycle Report</h5>\n                        <p className=\"text-sm text-gray-600 mb-3\">\n                          Asset age, depreciation, and lifecycle status\n                        </p>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"outline\">PDF</Badge>\n                          <Badge variant=\"outline\">Excel</Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-4\">Custom Reports</h4>\n                    <div className=\"space-y-4\">\n                      <p className=\"text-gray-600\">\n                        Create custom reports tailored to your specific needs:\n                      </p>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div className=\"p-4 border rounded-lg\">\n                          <Filter className=\"h-6 w-6 text-blue-600 mb-2\" />\n                          <h5 className=\"font-medium\">Filter Data</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Choose specific categories, locations, or date ranges\n                          </p>\n                        </div>\n                        <div className=\"p-4 border rounded-lg\">\n                          <Settings className=\"h-6 w-6 text-green-600 mb-2\" />\n                          <h5 className=\"font-medium\">Select Fields</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Include only the data fields you need\n                          </p>\n                        </div>\n                        <div className=\"p-4 border rounded-lg\">\n                          <Download className=\"h-6 w-6 text-purple-600 mb-2\" />\n                          <h5 className=\"font-medium\">Export Format</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Choose from PDF, Excel, CSV, or JSON formats\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-4\">Scheduled Reports</h4>\n                    <div className=\"space-y-4\">\n                      <p className=\"text-gray-600\">\n                        Set up automatic report generation and delivery:\n                      </p>\n                      <div className=\"bg-blue-50 p-4 rounded-lg\">\n                        <h5 className=\"font-medium text-blue-900 mb-2\">Schedule Options</h5>\n                        <ul className=\"space-y-1 text-sm text-blue-800\">\n                          <li>• Daily reports (sent every morning)</li>\n                          <li>• Weekly summaries (sent every Monday)</li>\n                          <li>• Monthly comprehensive reports</li>\n                          <li>• Quarterly business reviews</li>\n                          <li>• Custom intervals</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Real-time Analytics Dashboard</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <p className=\"text-gray-600\">\n                      Monitor your assets in real-time with interactive dashboards:\n                    </p>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-3\">\n                        <h5 className=\"font-medium\">Key Metrics</h5>\n                        <ul className=\"space-y-2 text-sm text-gray-600\">\n                          <li>• Total asset count</li>\n                          <li>• Asset utilization rates</li>\n                          <li>• QR code scan frequency</li>\n                          <li>• Asset status distribution</li>\n                          <li>• Location-based analytics</li>\n                        </ul>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <h5 className=\"font-medium\">Interactive Charts</h5>\n                        <ul className=\"space-y-2 text-sm text-gray-600\">\n                          <li>• Asset growth over time</li>\n                          <li>• Category distribution pie charts</li>\n                          <li>• Location heat maps</li>\n                          <li>• Usage trend lines</li>\n                          <li>• Maintenance schedules</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"settings\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>System Settings</CardTitle>\n                  <CardDescription>\n                    Configure your system preferences and account settings\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-semibold mb-4 flex items-center\">\n                      <Settings className=\"h-5 w-5 mr-2 text-gray-600\" />\n                      Account Settings\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-4\">\n                        <div className=\"p-4 border rounded-lg\">\n                          <h5 className=\"font-medium\">Profile Information</h5>\n                          <p className=\"text-sm text-gray-600 mb-3\">\n                            Update your name, email, and contact details\n                          </p>\n                          <Button variant=\"outline\" size=\"sm\">\n                            Edit Profile\n                          </Button>\n                        </div>\n                        <div className=\"p-4 border rounded-lg\">\n                          <h5 className=\"font-medium\">Password & Security</h5>\n                          <p className=\"text-sm text-gray-600 mb-3\">\n                            Change password and enable two-factor authentication\n                          </p>\n                          <Button variant=\"outline\" size=\"sm\">\n                            Security Settings\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"space-y-4\">\n                        <div className=\"p-4 border rounded-lg\">\n                          <h5 className=\"font-medium\">Notifications</h5>\n                          <p className=\"text-sm text-gray-600 mb-3\">\n                            Configure email and in-app notification preferences\n                          </p>\n                          <Button variant=\"outline\" size=\"sm\">\n                            Notification Settings\n                          </Button>\n                        </div>\n                        <div className=\"p-4 border rounded-lg\">\n                          <h5 className=\"font-medium\">API Access</h5>\n                          <p className=\"text-sm text-gray-600 mb-3\">\n                            Generate and manage API keys for integrations\n                          </p>\n                          <Button variant=\"outline\" size=\"sm\">\n                            API Keys\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-4\">System Preferences</h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"p-4 border rounded-lg\">\n                          <h5 className=\"font-medium\">Default Categories</h5>\n                          <p className=\"text-sm text-gray-600 mb-3\">\n                            Customize asset categories for your organization\n                          </p>\n                          <div className=\"space-y-2\">\n                            <Badge variant=\"outline\">IT Equipment</Badge>\n                            <Badge variant=\"outline\">Furniture</Badge>\n                            <Badge variant=\"outline\">Vehicles</Badge>\n                          </div>\n                        </div>\n                        <div className=\"p-4 border rounded-lg\">\n                          <h5 className=\"font-medium\">Location Management</h5>\n                          <p className=\"text-sm text-gray-600 mb-3\">\n                            Set up and manage your organization's locations\n                          </p>\n                          <div className=\"space-y-2\">\n                            <Badge variant=\"outline\">Office A</Badge>\n                            <Badge variant=\"outline\">Warehouse</Badge>\n                            <Badge variant=\"outline\">Remote</Badge>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-4\">Team Management</h4>\n                    <div className=\"space-y-4\">\n                      <p className=\"text-gray-600\">\n                        Manage team members and their access permissions:\n                      </p>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div className=\"p-4 border rounded-lg\">\n                          <h5 className=\"font-medium\">Admin</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Full system access and management capabilities\n                          </p>\n                        </div>\n                        <div className=\"p-4 border rounded-lg\">\n                          <h5 className=\"font-medium\">Manager</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Asset management and team oversight\n                          </p>\n                        </div>\n                        <div className=\"p-4 border rounded-lg\">\n                          <h5 className=\"font-medium\">User</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Basic asset viewing and QR scanning\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"tips\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Tips and Best Practices</CardTitle>\n                  <CardDescription>\n                    Expert tips to maximize your asset management efficiency\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <h4 className=\"font-semibold mb-4 flex items-center\">\n                      <Lightbulb className=\"h-5 w-5 mr-2 text-yellow-600\" />\n                      Asset Organization Tips\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-4\">\n                        <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n                          <h5 className=\"font-medium text-green-900\">Naming Conventions</h5>\n                          <p className=\"text-sm text-green-800 mt-1\">\n                            Use consistent naming: \"Brand - Model - Location - Number\"\n                          </p>\n                          <p className=\"text-xs text-green-700 mt-2\">\n                            Example: \"Dell - Laptop - OfficeA - 001\"\n                          </p>\n                        </div>\n                        <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                          <h5 className=\"font-medium text-blue-900\">Category Structure</h5>\n                          <p className=\"text-sm text-blue-800 mt-1\">\n                            Create hierarchical categories for better organization\n                          </p>\n                          <p className=\"text-xs text-blue-700 mt-2\">\n                            Example: IT Equipment → Laptops → Business Laptops\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"space-y-4\">\n                        <div className=\"p-4 bg-purple-50 border border-purple-200 rounded-lg\">\n                          <h5 className=\"font-medium text-purple-900\">Regular Updates</h5>\n                          <p className=\"text-sm text-purple-800 mt-1\">\n                            Schedule monthly reviews to update asset information\n                          </p>\n                          <p className=\"text-xs text-purple-700 mt-2\">\n                            Check locations, status, and condition regularly\n                          </p>\n                        </div>\n                        <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n                          <h5 className=\"font-medium text-orange-900\">Documentation</h5>\n                          <p className=\"text-sm text-orange-800 mt-1\">\n                            Include purchase receipts and warranty information\n                          </p>\n                          <p className=\"text-xs text-orange-700 mt-2\">\n                            Upload photos and documents for complete records\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-4\">QR Code Optimization</h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div className=\"p-4 border rounded-lg\">\n                          <CheckCircle className=\"h-6 w-6 text-green-600 mb-2\" />\n                          <h5 className=\"font-medium\">Placement Strategy</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Place QR codes where they're easily visible and accessible\n                          </p>\n                        </div>\n                        <div className=\"p-4 border rounded-lg\">\n                          <Eye className=\"h-6 w-6 text-blue-600 mb-2\" />\n                          <h5 className=\"font-medium\">Size Matters</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Use appropriate sizes - minimum 2cm x 2cm for reliable scanning\n                          </p>\n                        </div>\n                        <div className=\"p-4 border rounded-lg\">\n                          <Shield className=\"h-6 w-6 text-purple-600 mb-2\" />\n                          <h5 className=\"font-medium\">Protection</h5>\n                          <p className=\"text-sm text-gray-600\">\n                            Use lamination or protective covers for outdoor or high-wear assets\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-4\">Workflow Optimization</h4>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-3\">\n                          <h5 className=\"font-medium\">Daily Tasks</h5>\n                          <ul className=\"space-y-2 text-sm text-gray-600\">\n                            <li className=\"flex items-center\">\n                              <Clock className=\"h-4 w-4 text-blue-600 mr-2\" />\n                              Check dashboard for new alerts\n                            </li>\n                            <li className=\"flex items-center\">\n                              <QrCode className=\"h-4 w-4 text-purple-600 mr-2\" />\n                              Scan assets during routine checks\n                            </li>\n                            <li className=\"flex items-center\">\n                              <Edit className=\"h-4 w-4 text-green-600 mr-2\" />\n                              Update asset locations as needed\n                            </li>\n                          </ul>\n                        </div>\n                        <div className=\"space-y-3\">\n                          <h5 className=\"font-medium\">Weekly Tasks</h5>\n                          <ul className=\"space-y-2 text-sm text-gray-600\">\n                            <li className=\"flex items-center\">\n                              <BarChart3 className=\"h-4 w-4 text-orange-600 mr-2\" />\n                              Review analytics and reports\n                            </li>\n                            <li className=\"flex items-center\">\n                              <Package className=\"h-4 w-4 text-blue-600 mr-2\" />\n                              Audit high-value assets\n                            </li>\n                            <li className=\"flex items-center\">\n                              <Settings className=\"h-4 w-4 text-gray-600 mr-2\" />\n                              Update maintenance schedules\n                            </li>\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Alert>\n                    <Lightbulb className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      <strong>Pro Tip:</strong> Set up automated workflows and notifications to\n                      reduce manual tasks and ensure nothing falls through the cracks.\n                    </AlertDescription>\n                  </Alert>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Troubleshooting Common Issues</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <h5 className=\"font-medium mb-3\">QR Code Issues</h5>\n                        <div className=\"space-y-3\">\n                          <div className=\"p-3 border rounded-lg\">\n                            <h6 className=\"font-medium text-sm\">QR Code Won't Scan</h6>\n                            <ul className=\"text-xs text-gray-600 mt-1 space-y-1\">\n                              <li>• Check lighting conditions</li>\n                              <li>• Clean the QR code surface</li>\n                              <li>• Try different scanning angles</li>\n                              <li>• Ensure code isn't damaged</li>\n                            </ul>\n                          </div>\n                          <div className=\"p-3 border rounded-lg\">\n                            <h6 className=\"font-medium text-sm\">Wrong Asset Information</h6>\n                            <ul className=\"text-xs text-gray-600 mt-1 space-y-1\">\n                              <li>• Verify QR code placement</li>\n                              <li>• Check for duplicate codes</li>\n                              <li>• Regenerate if necessary</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n                      <div>\n                        <h5 className=\"font-medium mb-3\">System Issues</h5>\n                        <div className=\"space-y-3\">\n                          <div className=\"p-3 border rounded-lg\">\n                            <h6 className=\"font-medium text-sm\">Slow Performance</h6>\n                            <ul className=\"text-xs text-gray-600 mt-1 space-y-1\">\n                              <li>• Clear browser cache</li>\n                              <li>• Check internet connection</li>\n                              <li>• Use supported browsers</li>\n                              <li>• Contact support if persistent</li>\n                            </ul>\n                          </div>\n                          <div className=\"p-3 border rounded-lg\">\n                            <h6 className=\"font-medium text-sm\">Data Not Syncing</h6>\n                            <ul className=\"text-xs text-gray-600 mt-1 space-y-1\">\n                              <li>• Refresh the page</li>\n                              <li>• Check network connectivity</li>\n                              <li>• Verify user permissions</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Help and Support */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>Need More Help?</CardTitle>\n            <CardDescription>Additional resources and support options</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Button variant=\"outline\" className=\"h-auto p-4 justify-start\">\n                <div className=\"text-left\">\n                  <div className=\"font-semibold\">Video Tutorials</div>\n                  <div className=\"text-sm text-gray-600\">Step-by-step video guides</div>\n                </div>\n                <ExternalLink className=\"h-4 w-4 ml-auto\" />\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 justify-start\">\n                <div className=\"text-left\">\n                  <div className=\"font-semibold\">Community Forum</div>\n                  <div className=\"text-sm text-gray-600\">Get help from other users</div>\n                </div>\n                <ExternalLink className=\"h-4 w-4 ml-auto\" />\n              </Button>\n              <Button variant=\"outline\" className=\"h-auto p-4 justify-start\">\n                <div className=\"text-left\">\n                  <div className=\"font-semibold\">Contact Support</div>\n                  <div className=\"text-sm text-gray-600\">Direct help from our team</div>\n                </div>\n                <ExternalLink className=\"h-4 w-4 ml-auto\" />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\features\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Building' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Wrench' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Menu' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExternalLink' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport {\n  Package,\n  QrCode,\n  BarChart3,\n  MapPin,\n  Users,\n  Settings,\n  Database,\n  FileText,\n  Download,\n  Upload,\n  Search,\n  Shield,\n  Globe,\n  Zap,\n  Layers,\n  History,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  DollarSign,\n  FileImage,\n  Navigation,\n  Building,\n  Wrench,\n  Eye,\n  Plus,\n  Grid3X3,\n  Menu,\n  X,\n  ArrowRight,\n  ExternalLink,\n  Star,\n  Sparkles,\n} from 'lucide-react'\nimport Link from 'next/link'\n\nexport default function FeaturesPage() {\n  const [activeTab, setActiveTab] = useState('overview')\n\n  const featureCategories = [\n    {\n      id: 'asset-management',\n      title: 'Asset Management',\n      icon: Package,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n      borderColor: 'border-blue-200',\n      description: 'Complete asset lifecycle management with advanced tracking capabilities',\n      features: [\n        {\n          name: 'Asset Dashboard',\n          description: 'Comprehensive view of all assets with filtering and search',\n          href: '/assets',\n          icon: Grid3X3,\n          status: 'active',\n          demo: 'View real-time asset data with advanced filtering',\n        },\n        {\n          name: 'Add New Asset',\n          description: 'Create detailed asset entries with custom fields',\n          href: '/add-asset',\n          icon: Plus,\n          status: 'active',\n          demo: 'Form with validation and file uploads',\n        },\n        {\n          name: 'Asset Search & Filter',\n          description: 'Advanced search with multiple criteria',\n          href: '/assets',\n          icon: Search,\n          status: 'active',\n          demo: 'Real-time search with filters',\n        },\n        {\n          name: 'Asset History',\n          description: 'Complete audit trail of asset changes',\n          href: '/assets',\n          icon: History,\n          status: 'active',\n          demo: 'Timeline of all asset modifications',\n        },\n        {\n          name: 'Asset Attachments',\n          description: 'File management for asset documentation',\n          href: '/assets',\n          icon: FileImage,\n          status: 'active',\n          demo: 'Upload and manage asset files',\n        },\n        {\n          name: 'Asset Depreciation',\n          description: 'Financial tracking and depreciation calculations',\n          href: '/assets',\n          icon: DollarSign,\n          status: 'active',\n          demo: 'Automated depreciation tracking',\n        },\n      ],\n    },\n    {\n      id: 'qr-system',\n      title: 'QR Code System',\n      icon: QrCode,\n      color: 'text-purple-600',\n      bgColor: 'bg-purple-50',\n      borderColor: 'border-purple-200',\n      description: 'Advanced QR code generation, scanning, and analytics',\n      features: [\n        {\n          name: 'QR Management',\n          description: 'Generate and manage QR codes for assets',\n          href: '/qr-management',\n          icon: QrCode,\n          status: 'active',\n          demo: 'Customizable QR code generation',\n        },\n        {\n          name: 'QR Scanner',\n          description: 'Camera-based QR code scanning',\n          href: '/qr-test',\n          icon: Eye,\n          status: 'active',\n          demo: 'Real-time camera scanning',\n        },\n        {\n          name: 'Bulk QR Operations',\n          description: 'Generate QR codes for multiple assets',\n          href: '/preview',\n          icon: Layers,\n          status: 'active',\n          demo: 'Batch QR code generation',\n        },\n        {\n          name: 'QR Analytics',\n          description: 'Track QR code usage and performance',\n          href: '/analytics',\n          icon: BarChart3,\n          status: 'active',\n          demo: 'Usage statistics and trends',\n        },\n      ],\n    },\n    {\n      id: 'geofencing',\n      title: 'Geofencing & Location',\n      icon: MapPin,\n      color: 'text-green-600',\n      bgColor: 'bg-green-50',\n      borderColor: 'border-green-200',\n      description: 'GPS tracking, geofencing, and location-based alerts',\n      features: [\n        {\n          name: 'Interactive Maps',\n          description: 'View assets on interactive maps with real-time data',\n          href: '/asset-tracker-preview',\n          icon: Globe,\n          status: 'active',\n          demo: 'Interactive asset mapping',\n        },\n        {\n          name: 'Geofence Management',\n          description: 'Create and manage geofence zones',\n          href: '/asset/geofence-management',\n          icon: Navigation,\n          status: 'active',\n          demo: 'Polygon-based zone creation',\n        },\n        {\n          name: 'Location History',\n          description: 'Track asset movement over time',\n          href: '/assets',\n          icon: History,\n          status: 'active',\n          demo: 'Historical location tracking',\n        },\n        {\n          name: 'Geofence Alerts',\n          description: 'Real-time zone entry/exit notifications',\n          href: '/assets',\n          icon: AlertTriangle,\n          status: 'active',\n          demo: 'Instant boundary alerts',\n        },\n      ],\n    },\n    {\n      id: 'analytics',\n      title: 'Analytics & Reporting',\n      icon: BarChart3,\n      color: 'text-orange-600',\n      bgColor: 'bg-orange-50',\n      borderColor: 'border-orange-200',\n      description: 'Comprehensive analytics, real-time dashboards, and reporting',\n      features: [\n        {\n          name: 'Analytics Dashboard',\n          description: 'Comprehensive analytics and insights',\n          href: '/analytics',\n          icon: BarChart3,\n          status: 'active',\n          demo: 'Interactive analytics dashboard',\n        },\n        {\n          name: 'Real-time Charts',\n          description: 'Live data visualization and monitoring',\n          href: '/analytics',\n          icon: Zap,\n          status: 'active',\n          demo: 'Live chart updates',\n        },\n        {\n          name: 'Activity Feed',\n          description: 'Real-time system activity monitoring',\n          href: '/dashboard',\n          icon: Clock,\n          status: 'active',\n          demo: 'Live activity stream',\n        },\n        {\n          name: 'Custom Reports',\n          description: 'Generate and export custom reports',\n          href: '/analytics',\n          icon: FileText,\n          status: 'active',\n          demo: 'Report generation tools',\n        },\n      ],\n    },\n    {\n      id: 'bulk-operations',\n      title: 'Bulk Operations',\n      icon: Layers,\n      color: 'text-indigo-600',\n      bgColor: 'bg-indigo-50',\n      borderColor: 'border-indigo-200',\n      description: 'Efficient bulk processing for large-scale operations',\n      features: [\n        {\n          name: 'Bulk Import',\n          description: 'Import assets from CSV/Excel files',\n          href: '/assets',\n          icon: Upload,\n          status: 'active',\n          demo: 'CSV import with validation',\n        },\n        {\n          name: 'Bulk Export',\n          description: 'Export assets to various formats',\n          href: '/assets',\n          icon: Download,\n          status: 'active',\n          demo: 'Multi-format export options',\n        },\n        {\n          name: 'Bulk QR Generation',\n          description: 'Generate QR codes for multiple assets',\n          href: '/preview',\n          icon: QrCode,\n          status: 'active',\n          demo: 'Batch QR code creation',\n        },\n        {\n          name: 'Bulk Assignment',\n          description: 'Assign multiple assets to users',\n          href: '/assets',\n          icon: Users,\n          status: 'active',\n          demo: 'Mass assignment tools',\n        },\n      ],\n    },\n    {\n      id: 'system-admin',\n      title: 'System Administration',\n      icon: Settings,\n      color: 'text-red-600',\n      bgColor: 'bg-red-50',\n      borderColor: 'border-red-200',\n      description: 'Advanced system administration and debugging tools',\n      features: [\n        {\n          name: 'Database Management',\n          description: 'Database tools and migration scripts',\n          href: '/debug-supabase',\n          icon: Database,\n          status: 'active',\n          demo: 'Database administration tools',\n        },\n        {\n          name: 'Auth Debug',\n          description: 'Authentication troubleshooting',\n          href: '/auth/debug',\n          icon: Shield,\n          status: 'active',\n          demo: 'Auth system diagnostics',\n        },\n        {\n          name: 'Supabase Status',\n          description: 'Check system status and connectivity',\n          href: '/supabase-test',\n          icon: CheckCircle,\n          status: 'active',\n          demo: 'System health monitoring',\n        },\n        {\n          name: 'Environment Debug',\n          description: 'Environment configuration tools',\n          href: '/debug-urls',\n          icon: Settings,\n          status: 'active',\n          demo: 'Configuration management',\n        },\n      ],\n    },\n  ]\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Sparkles className=\"h-8 w-8 text-blue-600 mr-3\" />\n            <h1 className=\"text-4xl font-bold text-gray-900\">AssetPro Features</h1>\n          </div>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Discover all the powerful features available in AssetPro. Each feature is fully\n            implemented and ready to use.\n          </p>\n        </div>\n\n        {/* Feature Categories */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-6\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"asset-management\">Assets</TabsTrigger>\n            <TabsTrigger value=\"qr-system\">QR Codes</TabsTrigger>\n            <TabsTrigger value=\"geofencing\">Geofencing</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n            <TabsTrigger value=\"bulk-operations\">Bulk Ops</TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Star className=\"h-5 w-5 mr-2 text-yellow-500\" />\n                  Feature Overview\n                </CardTitle>\n                <CardDescription>\n                  All features are fully implemented and production-ready\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {featureCategories.map(category => (\n                    <Card\n                      key={category.id}\n                      className={`${category.borderColor} ${category.bgColor}`}\n                    >\n                      <CardHeader>\n                        <CardTitle className={`flex items-center ${category.color}`}>\n                          <category.icon className=\"h-5 w-5 mr-2\" />\n                          {category.title}\n                        </CardTitle>\n                        <CardDescription>{category.description}</CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm font-medium\">Features</span>\n                            <Badge variant=\"default\">{category.features.length}</Badge>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm font-medium\">Status</span>\n                            <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                              Active\n                            </Badge>\n                          </div>\n                        </div>\n                        <Button\n                          asChild\n                          variant=\"outline\"\n                          className=\"w-full mt-4\"\n                          onClick={() => setActiveTab(category.id)}\n                        >\n                          <span>View Details</span>\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Individual Category Tabs */}\n          {featureCategories.map(category => (\n            <TabsContent key={category.id} value={category.id} className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className={`flex items-center ${category.color}`}>\n                    <category.icon className=\"h-6 w-6 mr-3\" />\n                    {category.title}\n                  </CardTitle>\n                  <CardDescription>{category.description}</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    {category.features.map((feature, index) => (\n                      <Card key={index} className=\"hover:shadow-md transition-shadow\">\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start space-x-4\">\n                            <feature.icon className=\"h-8 w-8 text-gray-600 mt-1\" />\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <h4 className=\"font-semibold text-gray-900\">{feature.name}</h4>\n                                <Badge\n                                  variant={feature.status === 'active' ? 'default' : 'secondary'}\n                                >\n                                  {feature.status}\n                                </Badge>\n                              </div>\n                              <p className=\"text-sm text-gray-600 mb-3\">{feature.description}</p>\n                              <div className=\"bg-gray-50 p-3 rounded-lg mb-4\">\n                                <p className=\"text-xs text-gray-600\">\n                                  <strong>Demo:</strong> {feature.demo}\n                                </p>\n                              </div>\n                              <Button asChild size=\"sm\" className=\"w-full\">\n                                <Link href={feature.href}>\n                                  Access Feature\n                                  <ArrowRight className=\"h-4 w-4 ml-2\" />\n                                </Link>\n                              </Button>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          ))}\n        </Tabs>\n\n        {/* Quick Access */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Zap className=\"h-5 w-5 mr-2\" />\n              Quick Access\n            </CardTitle>\n            <CardDescription>Direct links to main application areas</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Button asChild variant=\"outline\">\n                <Link href=\"/dashboard\">Dashboard</Link>\n              </Button>\n              <Button asChild variant=\"outline\">\n                <Link href=\"/assets\">Assets</Link>\n              </Button>\n              <Button asChild variant=\"outline\">\n                <Link href=\"/analytics\">Analytics</Link>\n              </Button>\n              <Button asChild variant=\"outline\">\n                <Link href=\"/docs\">Documentation</Link>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\global-error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\login\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":108,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":226,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7810,7845],"text":"\n            Don&apos;t have an account?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7810,7845],"text":"\n            Don&lsquo;t have an account?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7810,7845],"text":"\n            Don&#39;t have an account?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7810,7845],"text":"\n            Don&rsquo;t have an account?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport type React from 'react'\n\nimport { useState } from 'react'\nimport Link from 'next/link'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { AlertCircle, Github, Loader2 } from 'lucide-react'\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<string | null>(null)\n  const [loading, setLoading] = useState(false)\n  const [githubLoading, setGithubLoading] = useState(false)\n  const router = useRouter()\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(null)\n\n    try {\n      // Dynamically import to prevent SSR issues\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n\n      const { error, data } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })\n\n      if (error) {\n        setError(error.message)\n      } else {\n        if (data?.session) {\n          await fetch('/api/auth/set-session', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              access_token: data.session.access_token,\n              refresh_token: data.session.refresh_token,\n            }),\n          })\n        }\n        router.push('/dashboard')\n      }\n    } catch (err) {\n      console.error('Login error:', err)\n      setError('An unexpected error occurred. Please try again.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleGithubLogin = async () => {\n    setGithubLoading(true)\n    setError(null)\n\n    try {\n      // Dynamically import to prevent SSR issues\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'github',\n        options: {\n          redirectTo: `${window.location.origin}/auth/callback`,\n        },\n      })\n\n      if (error) {\n        setError(error.message)\n      }\n    } catch (err) {\n      console.error('GitHub login error:', err)\n      setError('An unexpected error occurred. Please try again.')\n    } finally {\n      setGithubLoading(false)\n    }\n  }\n\n  const handleGoogleLogin = async () => {\n    setGithubLoading(true)\n    setError(null)\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: `${window.location.origin}/auth/callback`,\n        },\n      })\n      if (error) setError(error.message)\n    } catch (err) {\n      setError('An unexpected error occurred. Please try again.')\n    } finally {\n      setGithubLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold\">Sign in</CardTitle>\n          <CardDescription>Enter your credentials to access your account</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"m@example.com\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Link\n                  href=\"/auth/reset-password\"\n                  className=\"text-sm text-blue-600 hover:text-blue-800\"\n                >\n                  Forgot password?\n                </Link>\n              </div>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n                required\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Please wait\n                </>\n              ) : (\n                'Sign In'\n              )}\n            </Button>\n          </form>\n\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <div className=\"w-full border-t border-gray-200\"></div>\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-white px-2 text-gray-500\">Or continue with</span>\n            </div>\n          </div>\n\n          <Button\n            variant=\"outline\"\n            type=\"button\"\n            className=\"w-full\"\n            onClick={handleGithubLogin}\n            disabled={githubLoading}\n          >\n            {githubLoading ? (\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            ) : (\n              <Github className=\"mr-2 h-4 w-4\" />\n            )}\n            GitHub\n          </Button>\n          <Button\n            variant=\"outline\"\n            type=\"button\"\n            className=\"w-full mt-2\"\n            onClick={handleGoogleLogin}\n            disabled={githubLoading}\n          >\n            <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n              <g>\n                <path\n                  fill=\"#4285F4\"\n                  d=\"M21.805 10.023h-9.765v3.977h5.617c-.242 1.242-1.484 3.648-5.617 3.648-3.375 0-6.125-2.789-6.125-6.25s2.75-6.25 6.125-6.25c1.922 0 3.211.773 3.953 1.477l2.703-2.633c-1.711-1.594-3.922-2.57-6.656-2.57-5.523 0-10 4.477-10 10s4.477 10 10 10c5.75 0 9.547-4.031 9.547-9.719 0-.656-.07-1.156-.156-1.602z\"\n                />\n                <path\n                  fill=\"#34A853\"\n                  d=\"M3.545 7.545l3.273 2.402c.891-1.242 2.273-2.047 3.887-2.047.992 0 1.922.344 2.641.914l3.164-3.086c-1.422-1.32-3.242-2.128-5.305-2.128-3.242 0-5.977 2.203-6.953 5.219z\"\n                />\n                <path\n                  fill=\"#FBBC05\"\n                  d=\"M12.705 21.455c2.484 0 4.57-.82 6.094-2.234l-2.812-2.305c-.773.547-1.758.867-3.281.867-2.523 0-4.664-1.703-5.43-4.008l-3.273 2.531c1.406 2.953 4.484 5.149 8.702 5.149z\"\n                />\n                <path\n                  fill=\"#EA4335\"\n                  d=\"M21.805 10.023h-9.765v3.977h5.617c-.242 1.242-1.484 3.648-5.617 3.648-3.375 0-6.125-2.789-6.125-6.25s2.75-6.25 6.125-6.25c1.922 0 3.211.773 3.953 1.477l2.703-2.633c-1.711-1.594-3.922-2.57-6.656-2.57-5.523 0-10 4.477-10 10s4.477 10 10 10c5.75 0 9.547-4.031 9.547-9.719 0-.656-.07-1.156-.156-1.602z\"\n                />\n              </g>\n            </svg>\n            Google\n          </Button>\n        </CardContent>\n        <CardFooter>\n          <div className=\"text-sm text-gray-500 text-center w-full\">\n            Don't have an account?{' '}\n            <Link href=\"/signup\" className=\"text-blue-600 hover:text-blue-800 font-medium\">\n              Sign up\n            </Link>\n          </div>\n        </CardFooter>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\logout\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Shield' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Smartphone' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Cloud' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":27,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":29,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setUser' is assigned a value but never used.","line":29,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useAuth' is assigned a value but never used.","line":41,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":24},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/login/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":81,"column":15,"nodeType":"JSXOpeningElement","endLine":84,"endColumn":16},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/login/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":113,"column":15,"nodeType":"JSXOpeningElement","endLine":113,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Package,\n  QrCode,\n  Users,\n  Shield,\n  BarChart3,\n  Smartphone,\n  Cloud,\n  Zap,\n  ArrowRight,\n  CheckCircle,\n  ExternalLink,\n  MapPin,\n  Layers,\n  Settings,\n} from 'lucide-react'\nimport Link from 'next/link'\n\nexport default function HomePage() {\n  const router = useRouter()\n  const [mounted, setMounted] = useState(false)\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  useEffect(() => {\n    if (!mounted) return\n\n    const checkAuth = async () => {\n      try {\n        const { useAuth } = await import('@/components/auth/auth-provider')\n        // We'll handle auth checking in a safer way\n        setLoading(false)\n      } catch (error) {\n        console.error('Auth check error:', error)\n        setLoading(false)\n      }\n    }\n\n    checkAuth()\n  }, [mounted])\n\n  if (!mounted || loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading AssetTracker Pro...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n      {/* Header */}\n      <header className=\"bg-white/80 backdrop-blur-sm border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Package className=\"h-8 w-8 text-blue-600\" />\n              <h1 className=\"text-2xl font-bold text-gray-900\">AssetTracker Pro</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/docs\" className=\"text-blue-600 hover:text-blue-800 font-medium\">\n                Documentation\n              </Link>\n              <Link href=\"/qr-management\" className=\"text-blue-600 hover:text-blue-800\">\n                QR Features\n              </Link>\n              <a\n                href=\"/login\"\n                className=\"px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700\"\n              >\n                Sign In\n              </a>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <Badge variant=\"secondary\" className=\"mb-4\">\n            🚀 Professional Asset Management System\n          </Badge>\n          <h1 className=\"text-5xl md:text-6xl font-bold text-gray-900 mb-6\">\n            Professional Asset\n            <span className=\"text-blue-600\"> Management</span>\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-8 max-w-3xl mx-auto\">\n            Streamline your asset tracking with QR codes, real-time monitoring, and powerful\n            analytics. Built for businesses that demand excellence.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button size=\"lg\" asChild className=\"text-lg px-8 py-3\">\n              <Link href=\"/signup\">\n                Get Started <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Link>\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" asChild className=\"text-lg px-8 py-3\">\n              <a href=\"/login\">\n                Sign In <ExternalLink className=\"ml-2 h-5 w-5\" />\n              </a>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <Badge variant=\"secondary\" className=\"mb-4\">\n              ✨ Complete Feature Set\n            </Badge>\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">\n              Everything You Need for Asset Management\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              AssetPro comes with a complete suite of features for professional asset tracking, from\n              QR codes to geofencing and real-time analytics.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n            {[\n              {\n                icon: Package,\n                title: 'Asset Management',\n                description:\n                  'Complete lifecycle management with advanced tracking, search, and filtering capabilities.',\n                color: 'text-blue-600',\n                bgColor: 'bg-blue-50',\n                features: [\n                  'Asset CRUD Operations',\n                  'Advanced Search',\n                  'Asset History',\n                  'File Attachments',\n                  'Depreciation Tracking',\n                ],\n              },\n              {\n                icon: QrCode,\n                title: 'QR Code System',\n                description:\n                  'Generate, scan, and manage QR codes with bulk operations and analytics.',\n                color: 'text-purple-600',\n                bgColor: 'bg-purple-50',\n                features: [\n                  'QR Generation',\n                  'Camera Scanning',\n                  'Bulk Operations',\n                  'Usage Analytics',\n                ],\n              },\n              {\n                icon: MapPin,\n                title: 'Geofencing & Location',\n                description:\n                  'GPS tracking, geofence zones, and location-based alerts and monitoring.',\n                color: 'text-green-600',\n                bgColor: 'bg-green-50',\n                features: [\n                  'Interactive Maps',\n                  'Geofence Zones',\n                  'Location History',\n                  'Real-time Alerts',\n                ],\n              },\n              {\n                icon: BarChart3,\n                title: 'Analytics & Reporting',\n                description:\n                  'Comprehensive analytics, real-time dashboards, and custom reporting tools.',\n                color: 'text-orange-600',\n                bgColor: 'bg-orange-50',\n                features: [\n                  'Real-time Charts',\n                  'Activity Feeds',\n                  'Custom Reports',\n                  'Performance Metrics',\n                ],\n              },\n              {\n                icon: Layers,\n                title: 'Bulk Operations',\n                description: 'Efficient bulk processing for import, export, and mass operations.',\n                color: 'text-indigo-600',\n                bgColor: 'bg-indigo-50',\n                features: [\n                  'CSV Import/Export',\n                  'Bulk QR Generation',\n                  'Mass Assignment',\n                  'Data Validation',\n                ],\n              },\n              {\n                icon: Settings,\n                title: 'System Administration',\n                description: 'Advanced administration tools, debugging, and system monitoring.',\n                color: 'text-red-600',\n                bgColor: 'bg-red-50',\n                features: [\n                  'Database Management',\n                  'Auth Debug',\n                  'System Status',\n                  'Environment Tools',\n                ],\n              },\n            ].map((feature, index) => (\n              <Card\n                key={index}\n                className={`${feature.bgColor} border-0 hover:shadow-lg transition-shadow`}\n              >\n                <CardHeader>\n                  <feature.icon className={`h-12 w-12 ${feature.color} mb-4`} />\n                  <CardTitle className=\"text-xl\">{feature.title}</CardTitle>\n                  <CardDescription className=\"text-base\">{feature.description}</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    {feature.features.map((item, itemIndex) => (\n                      <li key={itemIndex} className=\"flex items-center text-sm text-gray-700\">\n                        <CheckCircle className=\"h-4 w-4 text-green-600 mr-2\" />\n                        {item}\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center\">\n            <Button asChild size=\"lg\" className=\"text-lg px-8 py-3\">\n              <Link href=\"/features\">\n                View All Features <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Link>\n            </Button>\n            <p className=\"text-sm text-gray-500 mt-4\">\n              All features are fully implemented and production-ready\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            Ready to Transform Your Asset Management?\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            Join organizations using AssetTracker Pro to streamline their operations.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button size=\"lg\" asChild className=\"text-lg px-8 py-3\">\n              <Link href=\"/signup\">\n                <Zap className=\"mr-2 h-5 w-5\" />\n                Start Free Trial\n              </Link>\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" asChild className=\"text-lg px-8 py-3\">\n              <Link href=\"/docs\">\n                <QrCode className=\"mr-2 h-5 w-5\" />\n                View Documentation\n              </Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <Package className=\"h-8 w-8 text-blue-400\" />\n            <h3 className=\"text-2xl font-bold\">AssetTracker Pro</h3>\n          </div>\n          <p className=\"text-gray-400 mb-6\">Professional asset management for modern teams</p>\n          <div className=\"flex justify-center space-x-6 text-sm\">\n            <Link href=\"/docs\" className=\"text-gray-400 hover:text-white\">\n              Documentation\n            </Link>\n            <Link href=\"/qr-management\" className=\"text-gray-400 hover:text-white\">\n              Features\n            </Link>\n            <Link href=\"/login\" className=\"text-gray-400 hover:text-white\">\n              Sign In\n            </Link>\n          </div>\n        </div>\n      </footer>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\preview-dashboard\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\preview-dashboard\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[980,983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[980,983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3882,3885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3882,3885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":160,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4135,4138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4135,4138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":175,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport { Progress } from '@/components/ui/progress'\nimport {\n  QrCode,\n  Shield,\n  Users,\n  Package,\n  TrendingUp,\n  AlertTriangle,\n  Search,\n  Plus,\n  Scan,\n  Download,\n  Eye,\n  Edit,\n  Bell,\n  Settings,\n  MapPin,\n  DollarSign,\n  CheckCircle,\n  Clock,\n  Smartphone,\n  Laptop,\n  Printer,\n  Trash2,\n} from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\nimport {\n  Dialog,\n  DialogContent,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog'\nimport { useRouter } from 'next/navigation'\n\nexport default function PreviewDashboard() {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [deleteDialog, setDeleteDialog] = useState<{ open: boolean; asset: any | null }>({\n    open: false,\n    asset: null,\n  })\n  const { toast } = useToast()\n  const router = useRouter()\n\n  // Mock data for preview\n  const mockAssets = [\n    {\n      id: '1',\n      asset_id: 'AT-001',\n      name: 'MacBook Pro 16\"',\n      category: 'it-equipment',\n      status: 'active',\n      location: 'Office A - Desk 12',\n      value: 2499.99,\n      assignee: { full_name: 'John Doe' },\n      created_at: '2024-01-15T10:00:00Z',\n      qr_code: 'generated',\n    },\n    {\n      id: '2',\n      asset_id: 'AT-002',\n      name: 'iPhone 14 Pro',\n      category: 'mobile-device',\n      status: 'active',\n      location: 'Office B - Mobile Pool',\n      value: 999.99,\n      assignee: { full_name: 'Jane Smith' },\n      created_at: '2024-01-20T14:30:00Z',\n      qr_code: 'generated',\n    },\n    {\n      id: '3',\n      asset_id: 'AT-003',\n      name: 'Dell Monitor 27\"',\n      category: 'it-equipment',\n      status: 'maintenance',\n      location: 'IT Storage',\n      value: 299.99,\n      assignee: null,\n      created_at: '2024-01-10T09:15:00Z',\n      qr_code: 'generated',\n    },\n    {\n      id: '4',\n      asset_id: 'AT-004',\n      name: 'Office Chair',\n      category: 'furniture',\n      status: 'active',\n      location: 'Office A - Desk 5',\n      value: 199.99,\n      assignee: { full_name: 'Mike Johnson' },\n      created_at: '2024-01-25T11:45:00Z',\n      qr_code: null,\n    },\n  ]\n\n  // Calculate analytics\n  const analytics = {\n    totalAssets: mockAssets.length,\n    activeAssets: mockAssets.filter(asset => asset.status === 'active').length,\n    maintenanceAssets: mockAssets.filter(asset => asset.status === 'maintenance').length,\n    totalValue: mockAssets.reduce((sum, asset) => sum + asset.value, 0),\n    utilizationRate: Math.round(\n      (mockAssets.filter(asset => asset.status === 'active').length / mockAssets.length) * 100\n    ),\n    qrCoverage: Math.round(\n      (mockAssets.filter(asset => asset.qr_code).length / mockAssets.length) * 100\n    ),\n  }\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(value)\n  }\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'default'\n      case 'maintenance':\n        return 'destructive'\n      case 'retired':\n        return 'secondary'\n      default:\n        return 'outline'\n    }\n  }\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'it-equipment':\n        return <Laptop className=\"h-4 w-4\" />\n      case 'mobile-device':\n        return <Smartphone className=\"h-4 w-4\" />\n      case 'office-equipment':\n        return <Printer className=\"h-4 w-4\" />\n      case 'furniture':\n        return <Package className=\"h-4 w-4\" />\n      default:\n        return <Package className=\"h-4 w-4\" />\n    }\n  }\n\n  const [assets, setAssets] = useState<any[]>(mockAssets)\n  const filteredAssets = assets.filter(\n    asset =>\n      asset.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.asset_id.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  const handleDelete = async (asset: any) => {\n    setDeleteDialog({ open: false, asset: null })\n    try {\n      const res = await fetch(`/api/assets/${asset.id}`, { method: 'DELETE' })\n      const data = await res.json()\n      if (!res.ok) {\n        toast({\n          title: 'Delete Failed',\n          description: data.error || 'Failed to delete asset',\n          variant: 'destructive',\n        })\n      } else {\n        toast({ title: 'Asset Deleted', description: `${asset.name} has been deleted.` })\n        setAssets(prev => prev.filter(a => a.id !== asset.id))\n      }\n    } catch (e) {\n      toast({\n        title: 'Delete Failed',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200 px-6 py-4 sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Package className=\"h-8 w-8 text-blue-600\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">AssetTracker Pro</h1>\n            <Badge variant=\"secondary\" className=\"ml-2\">\n              Live Preview\n            </Badge>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Bell className=\"h-4 w-4 mr-2\" />\n              Notifications\n              <Badge\n                variant=\"destructive\"\n                className=\"ml-2 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\"\n              >\n                3\n              </Badge>\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Settings\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Download Code\n            </Button>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white font-semibold text-sm\">\n                DU\n              </div>\n              <span className=\"text-sm font-medium\">Demo User</span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Welcome Section */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-gray-900\">Dashboard</h2>\n            <p className=\"text-gray-600\">Welcome to AssetTracker Pro!</p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button variant=\"outline\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Report\n            </Button>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Asset\n            </Button>\n          </div>\n        </div>\n\n        {/* Analytics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n              <Package className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{analytics.totalAssets}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                <span className=\"text-green-600\">+2 this week</span>\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Value</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{formatCurrency(analytics.totalValue)}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                <span className=\"text-blue-600\">Portfolio value</span>\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Utilization Rate</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{analytics.utilizationRate}%</div>\n              <Progress value={analytics.utilizationRate} className=\"mt-2\" />\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">QR Coverage</CardTitle>\n              <QrCode className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{analytics.qrCoverage}%</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {mockAssets.filter(a => a.qr_code).length} of {analytics.totalAssets} assets\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Asset Management Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-xl font-semibold\">Asset Management</h3>\n            <Button variant=\"outline\">\n              <Scan className=\"h-4 w-4 mr-2\" />\n              Scan QR Code\n            </Button>\n          </div>\n\n          {/* Search */}\n          <div className=\"relative max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder=\"Search assets...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Assets Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n            {filteredAssets.map(asset => (\n              <Card key={asset.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center\">\n                        {getCategoryIcon(asset.category)}\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-sm\">{asset.name}</CardTitle>\n                        <p className=\"text-xs text-gray-500\">{asset.asset_id}</p>\n                      </div>\n                    </div>\n                    <Badge variant={getStatusVariant(asset.status)} className=\"capitalize text-xs\">\n                      {asset.status}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2 text-xs\">\n                    <MapPin className=\"h-3 w-3 text-gray-400\" />\n                    <span className=\"truncate\">{asset.location}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className=\"text-gray-600\">Value:</span>\n                    <span className=\"font-semibold\">{formatCurrency(asset.value)}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className=\"text-gray-600\">Assignee:</span>\n                    <span className=\"truncate\">{asset.assignee?.full_name || 'Unassigned'}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className=\"text-gray-600\">QR Code:</span>\n                    {asset.qr_code ? (\n                      <Badge variant=\"default\" className=\"bg-green-100 text-green-800 text-xs\">\n                        Generated\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        Missing\n                      </Badge>\n                    )}\n                  </div>\n                  <div className=\"flex space-x-1 pt-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"flex-1 text-xs\"\n                      onClick={() => router.push(`/asset/${asset.id}`)}\n                    >\n                      <Eye className=\"h-3 w-3 mr-1\" />\n                      View\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"text-xs\"\n                      onClick={() => router.push(`/asset/${asset.id}/edit`)}\n                    >\n                      <Edit className=\"h-3 w-3\" />\n                    </Button>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      className=\"text-xs\"\n                      onClick={() => setDeleteDialog({ open: true, asset })}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card className=\"border-blue-200 bg-blue-50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-blue-800\">\n                <QrCode className=\"h-5 w-5 mr-2\" />\n                QR Code Tools\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-blue-700 mb-3\">\n                Generate and manage QR codes for your assets\n              </p>\n              <Button size=\"sm\" variant=\"outline\" className=\"border-blue-300 text-blue-700\">\n                Open QR Tools\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-green-200 bg-green-50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-green-800\">\n                <Users className=\"h-5 w-5 mr-2\" />\n                Team Collaboration\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-green-700 mb-3\">Manage team access and permissions</p>\n              <Button size=\"sm\" variant=\"outline\" className=\"border-green-300 text-green-700\">\n                Manage Team\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-purple-200 bg-purple-50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-purple-800\">\n                <Shield className=\"h-5 w-5 mr-2\" />\n                Security & Reports\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-purple-700 mb-3\">\n                View security settings and generate reports\n              </p>\n              <Button size=\"sm\" variant=\"outline\" className=\"border-purple-300 text-purple-700\">\n                View Security\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Status Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle>System Status</CardTitle>\n            <CardDescription>Current system health and alerts</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"flex items-center space-x-3\">\n                <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                <div>\n                  <p className=\"font-medium\">System Operational</p>\n                  <p className=\"text-sm text-gray-500\">All services running normally</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Clock className=\"h-5 w-5 text-orange-500\" />\n                <div>\n                  <p className=\"font-medium\">{analytics.maintenanceAssets} Assets in Maintenance</p>\n                  <p className=\"text-sm text-gray-500\">Scheduled maintenance in progress</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <AlertTriangle className=\"h-5 w-5 text-blue-500\" />\n                <div>\n                  <p className=\"font-medium\">\n                    {mockAssets.filter(a => !a.qr_code).length} Missing QR Codes\n                  </p>\n                  <p className=\"text-sm text-gray-500\">Assets without QR codes</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      <Dialog\n        open={deleteDialog.open}\n        onOpenChange={open => setDeleteDialog({ open, asset: deleteDialog.asset })}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Asset</DialogTitle>\n          </DialogHeader>\n          <div>\n            Are you sure you want to delete <b>{deleteDialog.asset?.name}</b>?\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"destructive\"\n              onClick={() => deleteDialog.asset && handleDelete(deleteDialog.asset)}\n            >\n              Delete\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\preview\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\privacy\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\profile-setup\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":29,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'supabase.auth'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [router, supabase.auth]","fix":{"range":[953,961],"text":"[router, supabase.auth]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport ProfileSetup from '@/components/profile-setup'\nimport { createClient } from '@/lib/supabase/client'\nimport { Card, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Loader2 } from 'lucide-react'\n\nexport default function ProfileSetupPage() {\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const router = useRouter()\n  const supabase = createClient()\n\n  useEffect(() => {\n    async function checkAuth() {\n      try {\n        const {\n          data: { user },\n        } = await supabase.auth.getUser()\n\n        if (!user) {\n          router.push('/login')\n          return\n        }\n\n        setUser(user)\n      } catch (error) {\n        console.log('Auth check failed, continuing in demo mode')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    checkAuth()\n  }, [router])\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Loader2 className=\"h-5 w-5 mr-2 animate-spin\" />\n              Loading...\n            </CardTitle>\n            <CardDescription>Checking authentication status</CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12 px-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Profile Setup</h1>\n          <p className=\"text-gray-600\">Complete your profile to start managing assets</p>\n        </div>\n        <ProfileSetup />\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\qr-management\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1037,1040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1037,1040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used.","line":31,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2906,2909],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2906,2909],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'assetId' is defined but never used.","line":166,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":166,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'qrCode' is defined but never used.","line":166,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":166,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'results' is defined but never used.","line":170,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4811,4814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4811,4814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Badge } from '@/components/ui/badge'\nimport { Progress } from '@/components/ui/progress'\nimport {\n  QrCode,\n  Scan,\n  Download,\n  Upload,\n  Package,\n  BarChart3,\n  Settings,\n  Printer,\n  AlertCircle,\n} from 'lucide-react'\nimport QRGenerator from '@/components/qr-generator'\nimport QRScanner from '@/components/qr-scanner'\nimport BulkQROperations from '@/components/bulk-qr-operations'\nimport { createClient } from '@/lib/supabase/client'\nimport { Switch } from '@/components/ui/switch'\nimport QRImageUpload from '@/components/qr-image-upload'\nimport { toast } from '@/components/ui/use-toast'\nimport QRTemplateDesigner from '@/components/qr-template-designer'\n\nexport default function QRManagementPage() {\n  const [assets, setAssets] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [activeTab, setActiveTab] = useState('overview')\n  const [qrStats, setQrStats] = useState({\n    totalAssets: 0,\n    assetsWithQR: 0,\n    qrCoverage: 0,\n    recentScans: 0,\n  })\n  const [settings, setSettings] = useState({\n    autoGenerate: false,\n    includeDetails: true,\n    trackAnalytics: true,\n    mobileNotifications: false,\n    defaultSize: '300',\n    errorCorrection: 'M',\n    defaultFormat: 'png',\n  })\n\n  // Fetch assets from Supabase\n  const fetchAssets = async () => {\n    setLoading(true)\n    try {\n      const supabase = createClient()\n      const { data, error } = await supabase\n        .from('assets')\n        .select('id, asset_id, name, category, status, qr_code')\n        .order('created_at', { ascending: false })\n      if (error) {\n        console.error('Failed to fetch assets:', error)\n        setAssets([])\n      } else {\n        setAssets(data || [])\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchAssets()\n  }, [])\n\n  useEffect(() => {\n    // Calculate QR statistics\n    const totalAssets = assets.length\n    const assetsWithQR = assets.filter(asset => asset.qr_code).length\n    const qrCoverage = totalAssets > 0 ? Math.round((assetsWithQR / totalAssets) * 100) : 0\n\n    setQrStats({\n      totalAssets,\n      assetsWithQR,\n      qrCoverage,\n      recentScans: 12, // Mock data\n    })\n  }, [assets])\n\n  // Load settings from localStorage on mount\n  useEffect(() => {\n    const savedSettings = localStorage.getItem('qrSettings')\n    if (savedSettings) {\n      setSettings(JSON.parse(savedSettings))\n    }\n  }, [])\n\n  // Save settings to localStorage when they change\n  useEffect(() => {\n    localStorage.setItem('qrSettings', JSON.stringify(settings))\n  }, [settings])\n\n  const handleSettingChange = (key: keyof typeof settings, value: any) => {\n    setSettings(prev => ({ ...prev, [key]: value }))\n\n    // Apply settings immediately\n    if (key === 'autoGenerate') {\n      // Update auto-generate setting in Supabase\n      updateAutoGenerateSettings(value)\n    }\n  }\n\n  const updateAutoGenerateSettings = async (enabled: boolean) => {\n    try {\n      const supabase = createClient()\n      const { error } = await supabase.from('settings').upsert({\n        key: 'qr_auto_generate',\n        value: enabled,\n        updated_at: new Date().toISOString(),\n      })\n\n      if (error) throw error\n\n      toast({\n        title: 'Settings Updated',\n        description: `Auto-generate QR codes ${enabled ? 'enabled' : 'disabled'}`,\n      })\n    } catch (error) {\n      console.error('Failed to update settings:', error)\n      toast({\n        title: 'Settings Update Failed',\n        description: 'Failed to save auto-generate settings',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  const handleQRImageUploaded = async (assetId: string, imageUrl: string) => {\n    try {\n      const supabase = createClient()\n      const { error } = await supabase\n        .from('assets')\n        .update({\n          qr_code: imageUrl,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('asset_id', assetId)\n\n      if (error) throw error\n\n      toast({\n        title: 'QR Code Updated',\n        description: 'Asset QR code has been updated successfully',\n      })\n\n      // Refresh assets list\n      fetchAssets()\n    } catch (error) {\n      console.error('Failed to update asset:', error)\n      toast({\n        title: 'Update Failed',\n        description: 'Failed to update asset QR code',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  // Re-fetch assets after QR code generation\n  const handleQRGenerated = async (assetId: string, qrCode: string) => {\n    await fetchAssets()\n  }\n\n  const handleBulkQRGenerated = async (results: any[]) => {\n    await fetchAssets()\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8 px-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">QR Code Management</h1>\n          <p className=\"text-gray-600\">Generate, scan, and manage QR codes for your assets</p>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <Package className=\"h-8 w-8 text-blue-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Assets</p>\n                  <p className=\"text-2xl font-bold\">{qrStats.totalAssets}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <QrCode className=\"h-8 w-8 text-green-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">QR Codes</p>\n                  <p className=\"text-2xl font-bold\">{qrStats.assetsWithQR}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <BarChart3 className=\"h-8 w-8 text-purple-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Coverage</p>\n                  <p className=\"text-2xl font-bold\">{qrStats.qrCoverage}%</p>\n                </div>\n              </div>\n              <Progress value={qrStats.qrCoverage} className=\"mt-2\" />\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <Scan className=\"h-8 w-8 text-orange-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Recent Scans</p>\n                  <p className=\"text-2xl font-bold\">{qrStats.recentScans}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"generate\">Generate</TabsTrigger>\n            <TabsTrigger value=\"scan\">Scan</TabsTrigger>\n            <TabsTrigger value=\"bulk\">Bulk Operations</TabsTrigger>\n            <TabsTrigger value=\"templates\">Templates</TabsTrigger>\n            <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>QR Code Status</CardTitle>\n                  <CardDescription>Current QR code coverage across your assets</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span>Assets with QR codes</span>\n                      <Badge variant=\"default\">{qrStats.assetsWithQR}</Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>Assets without QR codes</span>\n                      <Badge variant=\"secondary\">\n                        {qrStats.totalAssets - qrStats.assetsWithQR}\n                      </Badge>\n                    </div>\n                    <div className=\"pt-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Coverage Progress</span>\n                        <span className=\"text-sm text-gray-600\">{qrStats.qrCoverage}%</span>\n                      </div>\n                      <Progress value={qrStats.qrCoverage} />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Quick Actions</CardTitle>\n                  <CardDescription>Common QR code operations</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Button className=\"w-full justify-start\" onClick={() => setActiveTab('generate')}>\n                    <QrCode className=\"h-4 w-4 mr-2\" />\n                    Generate QR Code\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full justify-start\"\n                    onClick={() => setActiveTab('scan')}\n                  >\n                    <Scan className=\"h-4 w-4 mr-2\" />\n                    Scan QR Code\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full justify-start\"\n                    onClick={() => setActiveTab('bulk')}\n                  >\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Bulk Operations\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Printer className=\"h-4 w-4 mr-2\" />\n                    Print QR Labels\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Export QR Report\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent QR Activity</CardTitle>\n                <CardDescription>Latest QR code generations and scans</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">QR code generated for AST-001</p>\n                      <p className=\"text-xs text-gray-500\">2 minutes ago</p>\n                    </div>\n                    <Badge variant=\"outline\">Generated</Badge>\n                  </div>\n                  <div className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">Asset AST-002 scanned</p>\n                      <p className=\"text-xs text-gray-500\">15 minutes ago</p>\n                    </div>\n                    <Badge variant=\"outline\">Scanned</Badge>\n                  </div>\n                  <div className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">Bulk QR generation completed</p>\n                      <p className=\"text-xs text-gray-500\">1 hour ago</p>\n                    </div>\n                    <Badge variant=\"outline\">Bulk</Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"generate\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <QRGenerator assets={assets} onQRGenerated={handleQRGenerated} settings={settings} />\n              <QRImageUpload onUploadComplete={handleQRImageUploaded} />\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"scan\">\n            <QRScanner\n              onScanSuccess={data => {\n                console.log('QR scan successful:', data)\n                // Handle successful scan - could navigate to asset page\n              }}\n              onScanError={error => {\n                console.error('QR scan error:', error)\n                // Handle scan error\n              }}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"bulk\">\n            <BulkQROperations assets={assets} onBulkGenerated={handleBulkQRGenerated} />\n          </TabsContent>\n\n          <TabsContent value=\"templates\">\n            <QRTemplateDesigner />\n          </TabsContent>\n\n          <TabsContent value=\"settings\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Settings className=\"h-5 w-5 mr-2\" />\n                    QR Code Settings\n                  </CardTitle>\n                  <CardDescription>Configure default QR code generation settings</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Default Size</label>\n                    <select\n                      className=\"w-full px-3 py-2 border rounded-md\"\n                      value={settings.defaultSize}\n                      onChange={e => handleSettingChange('defaultSize', e.target.value)}\n                    >\n                      <option value=\"200\">200x200 px</option>\n                      <option value=\"300\">300x300 px</option>\n                      <option value=\"400\">400x400 px</option>\n                    </select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Error Correction Level</label>\n                    <select\n                      className=\"w-full px-3 py-2 border rounded-md\"\n                      value={settings.errorCorrection}\n                      onChange={e => handleSettingChange('errorCorrection', e.target.value)}\n                    >\n                      <option value=\"L\">Low (7%)</option>\n                      <option value=\"M\">Medium (15%)</option>\n                      <option value=\"Q\">Quartile (25%)</option>\n                      <option value=\"H\">High (30%)</option>\n                    </select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Default Format</label>\n                    <select\n                      className=\"w-full px-3 py-2 border rounded-md\"\n                      value={settings.defaultFormat}\n                      onChange={e => handleSettingChange('defaultFormat', e.target.value)}\n                    >\n                      <option value=\"png\">PNG</option>\n                      <option value=\"svg\">SVG</option>\n                      <option value=\"pdf\">PDF</option>\n                    </select>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Integration Settings</CardTitle>\n                  <CardDescription>Configure QR code integrations and features</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Auto-generate QR codes</p>\n                      <p className=\"text-sm text-gray-600\">\n                        Automatically create QR codes for new assets\n                      </p>\n                    </div>\n                    <Switch\n                      checked={settings.autoGenerate}\n                      onCheckedChange={checked => handleSettingChange('autoGenerate', checked)}\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Include asset details</p>\n                      <p className=\"text-sm text-gray-600\">Embed asset information in QR codes</p>\n                    </div>\n                    <Switch\n                      checked={settings.includeDetails}\n                      onCheckedChange={checked => handleSettingChange('includeDetails', checked)}\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Track scan analytics</p>\n                      <p className=\"text-sm text-gray-600\">Monitor QR code usage and scans</p>\n                    </div>\n                    <Switch\n                      checked={settings.trackAnalytics}\n                      onCheckedChange={checked => handleSettingChange('trackAnalytics', checked)}\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Mobile notifications</p>\n                      <p className=\"text-sm text-gray-600\">Send alerts for QR code scans</p>\n                    </div>\n                    <Switch\n                      checked={settings.mobileNotifications}\n                      onCheckedChange={checked =>\n                        handleSettingChange('mobileNotifications', checked)\n                      }\n                    />\n                  </div>\n\n                  <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n                    <div className=\"flex items-start space-x-2\">\n                      <AlertCircle className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                      <div>\n                        <p className=\"text-sm font-medium text-blue-800\">\n                          Settings are automatically saved\n                        </p>\n                        <p className=\"text-sm text-blue-600\">\n                          Your preferences will be applied to all new QR code operations\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\qr-test\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[521,524],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[521,524],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { QrCode, TestTube, CheckCircle, AlertTriangle } from 'lucide-react'\nimport QRGenerator from '@/components/qr-generator'\nimport QRScanner from '@/components/qr-scanner'\n\nexport default function QRTestPage() {\n  const [testResults, setTestResults] = useState<any[]>([])\n\n  const mockAssets = [\n    {\n      id: '1',\n      asset_id: 'TEST-001',\n      name: 'Test MacBook Pro',\n      category: 'it-equipment',\n    },\n    {\n      id: '2',\n      asset_id: 'TEST-002',\n      name: 'Test Office Chair',\n      category: 'furniture',\n    },\n  ]\n\n  const runQRTests = async () => {\n    const tests = [\n      {\n        name: 'QR Code Generation',\n        test: async () => {\n          // Test QR generation\n          return { success: true, message: 'QR generation working' }\n        },\n      },\n      {\n        name: 'QR Code Parsing',\n        test: async () => {\n          // Test QR parsing\n          return { success: true, message: 'QR parsing working' }\n        },\n      },\n      {\n        name: 'Asset Lookup',\n        test: async () => {\n          // Test asset lookup\n          return { success: true, message: 'Asset lookup working' }\n        },\n      },\n    ]\n\n    const results = []\n    for (const test of tests) {\n      try {\n        const result = await test.test()\n        results.push({ ...test, ...result })\n      } catch (error) {\n        results.push({\n          ...test,\n          success: false,\n          message: `Test failed: ${error}`,\n        })\n      }\n    }\n\n    setTestResults(results)\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">QR Code System Testing</h1>\n          <p className=\"text-gray-600\">Test and validate QR code functionality</p>\n        </div>\n\n        {/* Test Controls */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <TestTube className=\"h-5 w-5 mr-2\" />\n              System Tests\n            </CardTitle>\n            <CardDescription>Run automated tests to verify QR code functionality</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-4\">\n              <Button onClick={runQRTests}>\n                <TestTube className=\"h-4 w-4 mr-2\" />\n                Run All Tests\n              </Button>\n\n              {testResults.length > 0 && (\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-gray-600\">\n                    {testResults.filter(r => r.success).length} / {testResults.length} tests passed\n                  </span>\n                </div>\n              )}\n            </div>\n\n            {testResults.length > 0 && (\n              <div className=\"mt-4 space-y-2\">\n                {testResults.map((result, index) => (\n                  <Alert\n                    key={index}\n                    className={\n                      result.success ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'\n                    }\n                  >\n                    {result.success ? (\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                    ) : (\n                      <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                    )}\n                    <AlertDescription\n                      className={result.success ? 'text-green-800' : 'text-red-800'}\n                    >\n                      <strong>{result.name}:</strong> {result.message}\n                    </AlertDescription>\n                  </Alert>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Live Testing */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* QR Generator Testing */}\n          <div>\n            <h2 className=\"text-xl font-semibold mb-4\">QR Code Generator</h2>\n            <QRGenerator assets={mockAssets} />\n          </div>\n\n          {/* QR Scanner Testing */}\n          <div>\n            <h2 className=\"text-xl font-semibold mb-4\">QR Code Scanner</h2>\n            <QRScanner\n              onScanSuccess={data => {\n                console.log('Test scan successful:', data)\n                alert(`QR Scan Success: Found asset ${data.asset?.name}`)\n              }}\n              onScanError={error => {\n                console.error('Test scan error:', error)\n                alert(`QR Scan Error: ${error}`)\n              }}\n            />\n          </div>\n        </div>\n\n        {/* Feature Documentation */}\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle>QR Code Features</CardTitle>\n            <CardDescription>Complete QR code functionality for asset management</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium flex items-center\">\n                  <QrCode className=\"h-4 w-4 mr-2\" />\n                  Generation\n                </h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>• Individual QR code generation</li>\n                  <li>• Bulk QR code creation</li>\n                  <li>• Customizable size and colors</li>\n                  <li>• Multiple export formats</li>\n                </ul>\n              </div>\n\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium flex items-center\">\n                  <QrCode className=\"h-4 w-4 mr-2\" />\n                  Scanning\n                </h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>• Camera-based scanning</li>\n                  <li>• Image upload scanning</li>\n                  <li>• Real-time asset lookup</li>\n                  <li>• Cross-platform compatibility</li>\n                </ul>\n              </div>\n\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium flex items-center\">\n                  <QrCode className=\"h-4 w-4 mr-2\" />\n                  Integration\n                </h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>• Asset detail pages</li>\n                  <li>• Automatic database updates</li>\n                  <li>• Audit trail logging</li>\n                  <li>• Mobile-friendly interface</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\sentry-example-page\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\settings\\api-keys\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'res' is assigned a value but never used.","line":60,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\nimport { useEffect, useState } from 'react'\n\ninterface ApiKey {\n  id: string\n  name: string\n  created_at: string\n  revoked: boolean\n  user_id: string\n  user_email?: string\n}\n\nexport default function ApiKeysPage() {\n  const [apiKeys, setApiKeys] = useState<ApiKey[]>([])\n  const [newKeyName, setNewKeyName] = useState('')\n  const [creating, setCreating] = useState(false)\n  const [newKey, setNewKey] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [editingKeyId, setEditingKeyId] = useState<string | null>(null)\n  const [editingKeyName, setEditingKeyName] = useState('')\n  const [renaming, setRenaming] = useState(false)\n\n  async function fetchKeys() {\n    const res = await fetch('/api/settings/api-keys')\n    const data = await res.json()\n    setApiKeys(data.keys || [])\n  }\n\n  useEffect(() => {\n    fetchKeys()\n  }, [])\n\n  async function handleCreate() {\n    setCreating(true)\n    setError(null)\n    setNewKey(null)\n    const res = await fetch('/api/settings/api-keys', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ name: newKeyName }),\n    })\n    const data = await res.json()\n    setCreating(false)\n    if (data.apiKey) {\n      setNewKey(data.apiKey)\n      fetchKeys()\n    } else {\n      setError(data.error || 'Failed to create API key')\n    }\n  }\n\n  async function handleRevoke(id: string) {\n    await fetch(`/api/settings/api-keys/${id}`, { method: 'DELETE' })\n    fetchKeys()\n  }\n\n  async function handleRename(id: string) {\n    setRenaming(true)\n    setError(null)\n    const res = await fetch(`/api/settings/api-keys/${id}`, {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ name: editingKeyName }),\n    })\n    setRenaming(false)\n    setEditingKeyId(null)\n    setEditingKeyName('')\n    fetchKeys()\n  }\n\n  return (\n    <div className=\"max-w-2xl mx-auto py-8\">\n      <h1 className=\"text-2xl font-bold mb-4\">API Keys</h1>\n      <div className=\"mb-6\">\n        <input\n          className=\"border px-2 py-1 mr-2\"\n          placeholder=\"Key name (e.g. CI/CD, Zapier)\"\n          value={newKeyName}\n          onChange={e => setNewKeyName(e.target.value)}\n        />\n        <button\n          className=\"bg-blue-600 text-white px-4 py-1 rounded disabled:opacity-50\"\n          onClick={handleCreate}\n          disabled={creating || !newKeyName}\n        >\n          {creating ? 'Creating...' : 'Create API Key'}\n        </button>\n        {error && <div className=\"text-red-600 mt-2\">{error}</div>}\n        {newKey && (\n          <div className=\"mt-4 p-3 bg-green-100 border border-green-400 rounded\">\n            <strong>API Key (copy now, only shown once):</strong>\n            <div className=\"font-mono break-all text-sm mt-2\">{newKey}</div>\n          </div>\n        )}\n      </div>\n      <table className=\"w-full border\">\n        <thead>\n          <tr className=\"bg-gray-100\">\n            <th className=\"p-2 text-left\">Name</th>\n            <th className=\"p-2 text-left\">Created</th>\n            <th className=\"p-2 text-left\">Status</th>\n            <th className=\"p-2 text-left\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {apiKeys.map(key => (\n            <tr key={key.id} className={key.revoked ? 'opacity-50' : ''}>\n              <td className=\"p-2\">{key.name}</td>\n              <td className=\"p-2\">{new Date(key.created_at).toLocaleString()}</td>\n              <td className=\"p-2\">{key.revoked ? 'Revoked' : 'Active'}</td>\n              <td className=\"p-2\">\n                {!key.revoked && (\n                  <>\n                    <button\n                      className=\"text-red-600 underline mr-2\"\n                      onClick={() => handleRevoke(key.id)}\n                    >\n                      Revoke\n                    </button>\n                    {editingKeyId === key.id ? (\n                      <>\n                        <input\n                          className=\"border px-1 py-0.5 mr-1 text-sm\"\n                          value={editingKeyName}\n                          onChange={e => setEditingKeyName(e.target.value)}\n                          disabled={renaming}\n                        />\n                        <button\n                          className=\"text-blue-600 underline mr-1\"\n                          onClick={() => handleRename(key.id)}\n                          disabled={renaming || !editingKeyName.trim()}\n                        >\n                          Save\n                        </button>\n                        <button\n                          className=\"text-gray-600 underline\"\n                          onClick={() => {\n                            setEditingKeyId(null)\n                            setEditingKeyName('')\n                          }}\n                          disabled={renaming}\n                        >\n                          Cancel\n                        </button>\n                      </>\n                    ) : (\n                      <button\n                        className=\"text-blue-600 underline\"\n                        onClick={() => {\n                          setEditingKeyId(key.id)\n                          setEditingKeyName(key.name)\n                        }}\n                      >\n                        Edit\n                      </button>\n                    )}\n                  </>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\settings\\audit-logs\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[309,312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[309,312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":24,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":63},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1133,1136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1133,1136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1245,1248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1245,1248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":52,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":63}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLogs'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [fetchLogs, page]","fix":{"range":[1091,1097],"text":"[fetchLogs, page]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\nimport { useEffect, useState } from 'react'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\n\nexport default function AuditLogsPage() {\n  const [logs, setLogs] = useState<any[]>([])\n  const [total, setTotal] = useState(0)\n  const [loading, setLoading] = useState(true)\n  const [filters, setFilters] = useState({\n    user_id: '',\n    entity: '',\n    action: '',\n    date_from: '',\n    date_to: '',\n  })\n  const [page, setPage] = useState(1)\n  const pageSize = 50\n\n  const fetchLogs = async () => {\n    setLoading(true)\n    const params = new URLSearchParams({\n      ...Object.fromEntries(Object.entries(filters).filter(([_, v]) => v)),\n      page: String(page),\n      page_size: String(pageSize),\n    })\n    const res = await fetch(`/api/audit-logs?${params}`)\n    const data = await res.json()\n    setLogs(data.logs || [])\n    setTotal(data.total || 0)\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    fetchLogs()\n    // eslint-disable-next-line\n  }, [page])\n\n  const handleFilterChange = (e: any) => {\n    setFilters({ ...filters, [e.target.name]: e.target.value })\n  }\n\n  const handleFilterSubmit = (e: any) => {\n    e.preventDefault()\n    setPage(1)\n    fetchLogs()\n  }\n\n  const exportCSV = () => {\n    const params = new URLSearchParams({\n      ...Object.fromEntries(Object.entries(filters).filter(([_, v]) => v)),\n    })\n    window.open(`/api/audit-logs/export?${params}`, '_blank')\n  }\n\n  return (\n    <div className=\"max-w-5xl mx-auto py-8 space-y-8\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Audit Logs</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleFilterSubmit} className=\"flex flex-wrap gap-4 mb-4\">\n            <Input\n              name=\"user_id\"\n              value={filters.user_id}\n              onChange={handleFilterChange}\n              placeholder=\"User ID\"\n              className=\"w-40\"\n            />\n            <Input\n              name=\"entity\"\n              value={filters.entity}\n              onChange={handleFilterChange}\n              placeholder=\"Entity\"\n              className=\"w-32\"\n            />\n            <Input\n              name=\"action\"\n              value={filters.action}\n              onChange={handleFilterChange}\n              placeholder=\"Action\"\n              className=\"w-32\"\n            />\n            <Input\n              name=\"date_from\"\n              value={filters.date_from}\n              onChange={handleFilterChange}\n              type=\"date\"\n              className=\"w-36\"\n            />\n            <Input\n              name=\"date_to\"\n              value={filters.date_to}\n              onChange={handleFilterChange}\n              type=\"date\"\n              className=\"w-36\"\n            />\n            <Button type=\"submit\">Filter</Button>\n            <Button type=\"button\" variant=\"outline\" onClick={exportCSV}>\n              Export CSV\n            </Button>\n          </form>\n          {loading ? (\n            <div>Loading...</div>\n          ) : logs.length === 0 ? (\n            <div>No audit logs found.</div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-sm border\">\n                <thead>\n                  <tr>\n                    <th className=\"p-2 border\">Date</th>\n                    <th className=\"p-2 border\">User</th>\n                    <th className=\"p-2 border\">Action</th>\n                    <th className=\"p-2 border\">Entity</th>\n                    <th className=\"p-2 border\">Entity ID</th>\n                    <th className=\"p-2 border\">Details</th>\n                    <th className=\"p-2 border\">IP</th>\n                    <th className=\"p-2 border\">User Agent</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {logs.map(log => (\n                    <tr key={log.id}>\n                      <td className=\"p-2 border\">{log.created_at}</td>\n                      <td className=\"p-2 border\">{log.user_id}</td>\n                      <td className=\"p-2 border\">{log.action}</td>\n                      <td className=\"p-2 border\">{log.entity}</td>\n                      <td className=\"p-2 border\">{log.entity_id}</td>\n                      <td className=\"p-2 border\">\n                        <pre className=\"whitespace-pre-wrap break-all\">\n                          {JSON.stringify(log.details, null, 2)}\n                        </pre>\n                      </td>\n                      <td className=\"p-2 border\">{log.ip_address || ''}</td>\n                      <td className=\"p-2 border\">{log.user_agent || ''}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              <div className=\"flex justify-between items-center mt-4\">\n                <Button disabled={page === 1} onClick={() => setPage(p => Math.max(1, p - 1))}>\n                  Previous\n                </Button>\n                <span>\n                  Page {page} / {Math.ceil(total / pageSize) || 1}\n                </span>\n                <Button disabled={page * pageSize >= total} onClick={() => setPage(p => p + 1)}>\n                  Next\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\settings\\billing\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2119,2122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2119,2122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadBillingInfo'. Either include it or remove the dependency array.","line":110,"column":6,"nodeType":"ArrayExpression","endLine":110,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadBillingInfo, user]","fix":{"range":[2233,2239],"text":"[loadBillingInfo, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":471,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":471,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15454,15457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15454,15457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Progress } from '@/components/ui/progress'\nimport { createClient } from '@/lib/supabase/client'\nimport { useAuth } from '@/components/auth/auth-provider'\nimport { createCheckoutSession, cancelSubscription } from '@/lib/billing/stripe'\nimport { Tenant } from '@/lib/rbac/types'\nimport {\n  CreditCard,\n  Package,\n  Check,\n  X,\n  AlertTriangle,\n  Building2,\n  Users,\n  QrCode,\n  BarChart3,\n  Code2,\n  Paintbrush,\n  MapPin,\n  FileText,\n  Loader2,\n} from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\n\ninterface PlanFeature {\n  name: string\n  free: boolean\n  basic: boolean\n  pro: boolean\n  enterprise: boolean\n  icon: React.ElementType\n}\n\nconst planFeatures: PlanFeature[] = [\n  {\n    name: 'QR Code Generation',\n    free: true,\n    basic: true,\n    pro: true,\n    enterprise: true,\n    icon: QrCode,\n  },\n  {\n    name: 'Analytics',\n    free: false,\n    basic: true,\n    pro: true,\n    enterprise: true,\n    icon: BarChart3,\n  },\n  {\n    name: 'API Access',\n    free: false,\n    basic: false,\n    pro: true,\n    enterprise: true,\n    icon: Code2,\n  },\n  {\n    name: 'Custom Branding',\n    free: false,\n    basic: false,\n    pro: true,\n    enterprise: true,\n    icon: Paintbrush,\n  },\n  {\n    name: 'Multiple Locations',\n    free: false,\n    basic: false,\n    pro: true,\n    enterprise: true,\n    icon: MapPin,\n  },\n  {\n    name: 'Advanced Reports',\n    free: false,\n    basic: false,\n    pro: false,\n    enterprise: true,\n    icon: FileText,\n  },\n]\n\nconst planPrices = {\n  free: 0,\n  basic: 29,\n  pro: 99,\n  enterprise: 299,\n}\n\nexport default function BillingPage() {\n  const { user } = useAuth()\n  const [loading, setLoading] = useState(true)\n  const [upgrading, setUpgrading] = useState(false)\n  const [cancelling, setCancelling] = useState(false)\n  const [tenant, setTenant] = useState<Tenant | null>(null)\n  const [billing, setBilling] = useState<any>(null)\n  const { toast } = useToast()\n\n  useEffect(() => {\n    if (user) {\n      loadBillingInfo()\n    }\n  }, [user])\n\n  const loadBillingInfo = async () => {\n    try {\n      const supabase = createClient()\n\n      // Get tenant info\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('tenant_id')\n        .eq('id', user?.id)\n        .single()\n\n      if (!profile?.tenant_id) return\n\n      // Get tenant and billing details\n      const [tenantResult, billingResult] = await Promise.all([\n        supabase.from('tenants').select('*').eq('id', profile.tenant_id).single(),\n        supabase.from('billing').select('*').eq('tenant_id', profile.tenant_id).single(),\n      ])\n\n      if (tenantResult.data) setTenant(tenantResult.data as Tenant)\n      if (billingResult.data) setBilling(billingResult.data)\n    } catch (error) {\n      console.error('Error loading billing info:', error)\n      toast({\n        title: 'Error',\n        description: 'Failed to load billing information',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleUpgrade = async (plan: string) => {\n    if (!tenant || !billing) return\n\n    try {\n      setUpgrading(true)\n      const checkoutUrl = await createCheckoutSession(billing.stripe_customer_id, plan, tenant.id)\n\n      if (checkoutUrl) {\n        window.location.href = checkoutUrl\n      } else {\n        throw new Error('Failed to create checkout session')\n      }\n    } catch (error) {\n      console.error('Error upgrading plan:', error)\n      toast({\n        title: 'Error',\n        description: 'Failed to start upgrade process',\n        variant: 'destructive',\n      })\n    } finally {\n      setUpgrading(false)\n    }\n  }\n\n  const handleCancel = async () => {\n    if (!tenant || !billing?.stripe_subscription_id) return\n\n    try {\n      setCancelling(true)\n      await cancelSubscription(billing.stripe_subscription_id)\n\n      toast({\n        title: 'Subscription Cancelled',\n        description: 'Your subscription will end at the end of the current billing period',\n      })\n\n      await loadBillingInfo()\n    } catch (error) {\n      console.error('Error cancelling subscription:', error)\n      toast({\n        title: 'Error',\n        description: 'Failed to cancel subscription',\n        variant: 'destructive',\n      })\n    } finally {\n      setCancelling(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-blue-500\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"max-w-6xl mx-auto space-y-8\">\n        {/* Current Plan Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Package className=\"h-6 w-6 mr-2\" />\n              Current Plan\n            </CardTitle>\n            <CardDescription>Your current subscription and usage</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div>\n                <h3 className=\"font-medium text-lg mb-2\">\n                  {tenant?.plan\n                    ? tenant.plan.charAt(0).toUpperCase() + tenant.plan.slice(1)\n                    : 'Free'}{' '}\n                  Plan\n                </h3>\n                <p className=\"text-3xl font-bold\">\n                  ${planPrices[tenant?.plan as keyof typeof planPrices]}/mo\n                </p>\n                {billing?.cancel_at_period_end && (\n                  <Badge variant=\"destructive\" className=\"mt-2\">\n                    Cancels at period end\n                  </Badge>\n                )}\n              </div>\n\n              <div>\n                <h3 className=\"font-medium mb-2\">Users</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>{billing?.active_users || 0} active users</span>\n                    <span>{tenant?.maxUsers} max</span>\n                  </div>\n                  <Progress\n                    value={((billing?.active_users || 0) / (tenant?.maxUsers || 1)) * 100}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-medium mb-2\">Assets</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>{billing?.total_assets || 0} assets</span>\n                    <span>{tenant?.maxAssets} max</span>\n                  </div>\n                  <Progress\n                    value={((billing?.total_assets || 0) / (tenant?.maxAssets || 1)) * 100}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {tenant?.plan !== 'enterprise' && (\n              <div className=\"mt-6 flex items-center justify-end space-x-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={handleCancel}\n                  disabled={cancelling || tenant?.plan === 'free'}\n                >\n                  {cancelling ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Cancelling...\n                    </>\n                  ) : (\n                    'Cancel Subscription'\n                  )}\n                </Button>\n                <Button onClick={() => handleUpgrade('pro')} disabled={upgrading}>\n                  {upgrading ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Upgrading...\n                    </>\n                  ) : (\n                    'Upgrade Plan'\n                  )}\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Plan Comparison */}\n        <div className=\"grid md:grid-cols-4 gap-6\">\n          {/* Free Plan */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Free</CardTitle>\n              <CardDescription>For small teams just getting started</CardDescription>\n              <p className=\"text-3xl font-bold mt-2\">$0/mo</p>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-4\">\n                <li className=\"flex items-start\">\n                  <Building2 className=\"h-5 w-5 mr-2 text-gray-400\" />\n                  <span>1 Location</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <Users className=\"h-5 w-5 mr-2 text-gray-400\" />\n                  <span>Up to 5 users</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <Package className=\"h-5 w-5 mr-2 text-gray-400\" />\n                  <span>100 assets</span>\n                </li>\n                {planFeatures.map((feature, index) => (\n                  <li key={index} className=\"flex items-start\">\n                    {feature.free ? (\n                      <Check className=\"h-5 w-5 mr-2 text-green-500\" />\n                    ) : (\n                      <X className=\"h-5 w-5 mr-2 text-red-500\" />\n                    )}\n                    <span>{feature.name}</span>\n                  </li>\n                ))}\n              </ul>\n              <Button className=\"w-full mt-6\" variant=\"outline\" disabled={tenant?.plan === 'free'}>\n                Current Plan\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Basic Plan */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Basic</CardTitle>\n              <CardDescription>For growing businesses</CardDescription>\n              <p className=\"text-3xl font-bold mt-2\">$29/mo</p>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-4\">\n                <li className=\"flex items-start\">\n                  <Building2 className=\"h-5 w-5 mr-2 text-gray-400\" />\n                  <span>3 Locations</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <Users className=\"h-5 w-5 mr-2 text-gray-400\" />\n                  <span>Up to 10 users</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <Package className=\"h-5 w-5 mr-2 text-gray-400\" />\n                  <span>500 assets</span>\n                </li>\n                {planFeatures.map((feature, index) => (\n                  <li key={index} className=\"flex items-start\">\n                    {feature.basic ? (\n                      <Check className=\"h-5 w-5 mr-2 text-green-500\" />\n                    ) : (\n                      <X className=\"h-5 w-5 mr-2 text-red-500\" />\n                    )}\n                    <span>{feature.name}</span>\n                  </li>\n                ))}\n              </ul>\n              <Button\n                className=\"w-full mt-6\"\n                onClick={() => handleUpgrade('basic')}\n                disabled={tenant?.plan === 'basic' || upgrading}\n              >\n                {tenant?.plan === 'basic' ? 'Current Plan' : 'Upgrade to Basic'}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Pro Plan */}\n          <Card className=\"border-blue-200 bg-blue-50\">\n            <CardHeader>\n              <Badge className=\"w-fit mb-2\">Most Popular</Badge>\n              <CardTitle>Pro</CardTitle>\n              <CardDescription>For professional teams</CardDescription>\n              <p className=\"text-3xl font-bold mt-2\">$99/mo</p>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-4\">\n                <li className=\"flex items-start\">\n                  <Building2 className=\"h-5 w-5 mr-2 text-gray-400\" />\n                  <span>Unlimited Locations</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <Users className=\"h-5 w-5 mr-2 text-gray-400\" />\n                  <span>Up to 50 users</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <Package className=\"h-5 w-5 mr-2 text-gray-400\" />\n                  <span>5,000 assets</span>\n                </li>\n                {planFeatures.map((feature, index) => (\n                  <li key={index} className=\"flex items-start\">\n                    {feature.pro ? (\n                      <Check className=\"h-5 w-5 mr-2 text-green-500\" />\n                    ) : (\n                      <X className=\"h-5 w-5 mr-2 text-red-500\" />\n                    )}\n                    <span>{feature.name}</span>\n                  </li>\n                ))}\n              </ul>\n              <Button\n                className=\"w-full mt-6\"\n                onClick={() => handleUpgrade('pro')}\n                disabled={tenant?.plan === 'pro' || upgrading}\n              >\n                {tenant?.plan === 'pro' ? 'Current Plan' : 'Upgrade to Pro'}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Enterprise Plan */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Enterprise</CardTitle>\n              <CardDescription>For large organizations</CardDescription>\n              <p className=\"text-3xl font-bold mt-2\">$299/mo</p>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-4\">\n                <li className=\"flex items-start\">\n                  <Building2 className=\"h-5 w-5 mr-2 text-gray-400\" />\n                  <span>Unlimited Locations</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <Users className=\"h-5 w-5 mr-2 text-gray-400\" />\n                  <span>Unlimited users</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <Package className=\"h-5 w-5 mr-2 text-gray-400\" />\n                  <span>Unlimited assets</span>\n                </li>\n                {planFeatures.map((feature, index) => (\n                  <li key={index} className=\"flex items-start\">\n                    {feature.enterprise ? (\n                      <Check className=\"h-5 w-5 mr-2 text-green-500\" />\n                    ) : (\n                      <X className=\"h-5 w-5 mr-2 text-red-500\" />\n                    )}\n                    <span>{feature.name}</span>\n                  </li>\n                ))}\n              </ul>\n              <Button\n                className=\"w-full mt-6\"\n                onClick={() => handleUpgrade('enterprise')}\n                disabled={tenant?.plan === 'enterprise' || upgrading}\n              >\n                {tenant?.plan === 'enterprise' ? 'Current Plan' : 'Contact Sales'}\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Billing History */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <CreditCard className=\"h-6 w-6 mr-2\" />\n              Billing History\n            </CardTitle>\n            <CardDescription>Recent invoices and payments</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {billing?.billing_history?.length > 0 ? (\n              <div className=\"divide-y\">\n                {billing.billing_history.map((item: any) => (\n                  <div key={item.id} className=\"py-4 flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">\n                        {new Date(item.created_at).toLocaleDateString()}\n                      </p>\n                      <p className=\"text-sm text-gray-500\">Invoice #{item.invoice_id}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium\">${item.amount}</p>\n                      <Badge variant={item.status === 'paid' ? 'default' : 'destructive'}>\n                        {item.status}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-6 text-gray-500\">No billing history available</div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Need Help */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <AlertTriangle className=\"h-6 w-6 mr-2\" />\n              Need Help?\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex items-center justify-between\">\n            <p className=\"text-gray-600\">\n              Contact our support team for any billing related questions\n            </p>\n            <Button variant=\"outline\">Contact Support</Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\settings\\categories\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[569,572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[569,572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[722,725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[722,725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[775,778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[775,778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1323,1326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1323,1326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2206,2209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2206,2209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2784,2787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2784,2787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2824,2827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2824,2827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2918,2921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2918,2921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3024,3027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3024,3027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3081,3084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3081,3084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5593,5596],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5593,5596],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog'\nimport { Loader2, Plus, Edit, Trash2, ChevronRight, ChevronDown } from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\n\nexport default function CategoriesPage() {\n  const [categories, setCategories] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [showDialog, setShowDialog] = useState(false)\n  const [editing, setEditing] = useState<any | null>(null)\n  const [form, setForm] = useState<any>({ name: '', parent_id: '' })\n  const [expanded, setExpanded] = useState<{ [id: string]: boolean }>({})\n  const { toast } = useToast()\n\n  const fetchCategories = async () => {\n    setLoading(true)\n    const res = await fetch('/api/categories')\n    const json = await res.json()\n    setCategories(json.data || [])\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    fetchCategories()\n  }, [])\n\n  const openAdd = (parent_id = '') => {\n    setEditing(null)\n    setForm({ name: '', parent_id })\n    setShowDialog(true)\n  }\n\n  const openEdit = (cat: any) => {\n    setEditing(cat)\n    setForm({ name: cat.name, parent_id: cat.parent_id || '' })\n    setShowDialog(true)\n  }\n\n  const handleSave = async () => {\n    let res\n    if (editing) {\n      res = await fetch('/api/categories', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id: editing.id, ...form }),\n      })\n    } else {\n      res = await fetch('/api/categories', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(form),\n      })\n    }\n    const json = await res.json()\n    if (json.error) {\n      toast({ title: 'Error', description: json.error, variant: 'destructive' })\n    } else {\n      setShowDialog(false)\n      fetchCategories()\n      toast({ title: 'Saved', description: 'Category saved.' })\n    }\n  }\n\n  const handleDelete = async (cat: any) => {\n    if (!window.confirm('Delete this category and all its subcategories?')) return\n    const res = await fetch('/api/categories', {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ id: cat.id }),\n    })\n    const json = await res.json()\n    if (json.error) {\n      toast({ title: 'Error', description: json.error, variant: 'destructive' })\n    } else {\n      fetchCategories()\n      toast({ title: 'Deleted', description: 'Category deleted.' })\n    }\n  }\n\n  // Helper to build tree\n  const buildTree = (list: any[], parentId: string | null = null): any[] =>\n    list\n      .filter(c => (c.parent_id || '') === (parentId || ''))\n      .map((c: any) => ({\n        ...c,\n        children: buildTree(list, c.id),\n      }))\n\n  const renderTree = (nodes: any[], level = 0): JSX.Element[] =>\n    nodes.map((node: any) => (\n      <div key={node.id} style={{ marginLeft: level * 24 }} className=\"flex items-center py-1\">\n        {node.children.length > 0 ? (\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setExpanded(e => ({ ...e, [node.id]: !e[node.id] }))}\n          >\n            {expanded[node.id] ? (\n              <ChevronDown className=\"h-4 w-4\" />\n            ) : (\n              <ChevronRight className=\"h-4 w-4\" />\n            )}\n          </Button>\n        ) : (\n          <span style={{ width: 32 }} />\n        )}\n        <span className=\"font-medium mr-2\">{node.name}</span>\n        <Button variant=\"outline\" size=\"icon\" className=\"mr-1\" onClick={() => openEdit(node)}>\n          <Edit className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          variant=\"destructive\"\n          size=\"icon\"\n          className=\"mr-1\"\n          onClick={() => handleDelete(node)}\n        >\n          <Trash2 className=\"h-4 w-4\" />\n        </Button>\n        <Button variant=\"outline\" size=\"icon\" onClick={() => openAdd(node.id)}>\n          <Plus className=\"h-4 w-4\" />\n        </Button>\n        {expanded[node.id] && node.children.length > 0 && (\n          <div className=\"w-full\">{renderTree(node.children, level + 1)}</div>\n        )}\n      </div>\n    ))\n\n  return (\n    <div className=\"max-w-3xl mx-auto py-8\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Asset Categories</CardTitle>\n          <Button onClick={() => openAdd()} size=\"sm\">\n            <Plus className=\"h-4 w-4 mr-1\" /> Add Category\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <Loader2 className=\"animate-spin h-6 w-6 mr-2\" /> Loading...\n            </div>\n          ) : categories.length === 0 ? (\n            <div className=\"text-center text-gray-500 py-8\">No categories defined yet.</div>\n          ) : (\n            <div>{renderTree(buildTree(categories))}</div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{editing ? 'Edit Category' : 'Add Category'}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-2\">\n            <Input\n              placeholder=\"Category Name\"\n              value={form.name}\n              onChange={e => setForm((f: any) => ({ ...f, name: e.target.value }))}\n            />\n          </div>\n          <DialogFooter>\n            <Button onClick={handleSave}>{editing ? 'Save Changes' : 'Add Category'}</Button>\n            <Button variant=\"outline\" onClick={() => setShowDialog(false)}>\n              Cancel\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\settings\\custom-fields\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogTrigger' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[892,895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[892,895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1045,1048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1045,1048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1098,1101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1098,1101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1694,1697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1694,1697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2221,2224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2221,2224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3342,3345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3342,3345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6981,6984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6981,6984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":219,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7180,7183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7180,7183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":223,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7338,7341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7338,7341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":240,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7947,7950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7947,7950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8219,8222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8219,8222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8560,8563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8560,8563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogTrigger,\n} from '@/components/ui/dialog'\nimport { Loader2, Plus, Edit, Trash2 } from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\n\nconst FIELD_TYPES = [\n  { value: 'text', label: 'Text' },\n  { value: 'number', label: 'Number' },\n  { value: 'date', label: 'Date' },\n  { value: 'dropdown', label: 'Dropdown' },\n  { value: 'relation', label: 'Relation' },\n]\n\nexport default function CustomFieldsPage() {\n  const [fields, setFields] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [showDialog, setShowDialog] = useState(false)\n  const [editing, setEditing] = useState<any | null>(null)\n  const [form, setForm] = useState<any>({\n    name: '',\n    label: '',\n    type: 'text',\n    options: '',\n    required: false,\n    validation: '',\n  })\n  const { toast } = useToast()\n\n  const fetchFields = async () => {\n    setLoading(true)\n    const res = await fetch('/api/custom-fields')\n    const json = await res.json()\n    setFields(json.data || [])\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    fetchFields()\n  }, [])\n\n  const openAdd = () => {\n    setEditing(null)\n    setForm({ name: '', label: '', type: 'text', options: '', required: false, validation: '' })\n    setShowDialog(true)\n  }\n\n  const openEdit = (field: any) => {\n    setEditing(field)\n    setForm({\n      name: field.name,\n      label: field.label,\n      type: field.type,\n      options: field.options\n        ? Array.isArray(field.options)\n          ? field.options.join(',')\n          : typeof field.options === 'string'\n            ? field.options\n            : ''\n        : '',\n      required: field.required,\n      validation: field.validation ? JSON.stringify(field.validation) : '',\n    })\n    setShowDialog(true)\n  }\n\n  const handleSave = async () => {\n    const payload: any = {\n      name: form.name,\n      label: form.label,\n      type: form.type,\n      options:\n        form.type === 'dropdown'\n          ? form.options\n              .split(',')\n              .map((o: string) => o.trim())\n              .filter(Boolean)\n          : null,\n      required: !!form.required,\n      validation: form.validation ? JSON.parse(form.validation) : null,\n    }\n    let res\n    if (editing) {\n      res = await fetch('/api/custom-fields', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id: editing.id, ...payload }),\n      })\n    } else {\n      res = await fetch('/api/custom-fields', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      })\n    }\n    const json = await res.json()\n    if (json.error) {\n      toast({ title: 'Error', description: json.error, variant: 'destructive' })\n    } else {\n      setShowDialog(false)\n      fetchFields()\n      toast({ title: 'Saved', description: 'Custom field saved.' })\n    }\n  }\n\n  const handleDelete = async (field: any) => {\n    if (!window.confirm('Delete this custom field?')) return\n    const res = await fetch('/api/custom-fields', {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ id: field.id }),\n    })\n    const json = await res.json()\n    if (json.error) {\n      toast({ title: 'Error', description: json.error, variant: 'destructive' })\n    } else {\n      fetchFields()\n      toast({ title: 'Deleted', description: 'Custom field deleted.' })\n    }\n  }\n\n  return (\n    <div className=\"max-w-3xl mx-auto py-8\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Custom Asset Fields</CardTitle>\n          <Button onClick={openAdd} size=\"sm\">\n            <Plus className=\"h-4 w-4 mr-1\" /> Add Field\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <Loader2 className=\"animate-spin h-6 w-6 mr-2\" /> Loading...\n            </div>\n          ) : fields.length === 0 ? (\n            <div className=\"text-center text-gray-500 py-8\">No custom fields defined yet.</div>\n          ) : (\n            <table className=\"w-full text-sm border\">\n              <thead>\n                <tr className=\"bg-gray-50\">\n                  <th className=\"p-2 text-left\">Label</th>\n                  <th className=\"p-2 text-left\">Name</th>\n                  <th className=\"p-2 text-left\">Type</th>\n                  <th className=\"p-2 text-left\">Required</th>\n                  <th className=\"p-2 text-left\">Options</th>\n                  <th className=\"p-2 text-left\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {fields.map(field => (\n                  <tr key={field.id} className=\"border-t\">\n                    <td className=\"p-2\">{field.label}</td>\n                    <td className=\"p-2\">{field.name}</td>\n                    <td className=\"p-2 capitalize\">{field.type}</td>\n                    <td className=\"p-2\">{field.required ? 'Yes' : 'No'}</td>\n                    <td className=\"p-2\">\n                      {field.type === 'dropdown' && field.options\n                        ? Array.isArray(field.options)\n                          ? field.options.join(', ')\n                          : typeof field.options === 'string'\n                            ? field.options\n                            : ''\n                        : '-'}\n                    </td>\n                    <td className=\"p-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        className=\"mr-1\"\n                        onClick={() => openEdit(field)}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"destructive\" size=\"icon\" onClick={() => handleDelete(field)}>\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </CardContent>\n      </Card>\n\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{editing ? 'Edit Custom Field' : 'Add Custom Field'}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-2\">\n            <Input\n              placeholder=\"Field Label\"\n              value={form.label}\n              onChange={e => setForm((f: any) => ({ ...f, label: e.target.value }))}\n            />\n            <Input\n              placeholder=\"Field Name (unique)\"\n              value={form.name}\n              onChange={e => setForm((f: any) => ({ ...f, name: e.target.value }))}\n            />\n            <Select\n              value={form.type}\n              onValueChange={val => setForm((f: any) => ({ ...f, type: val }))}\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {FIELD_TYPES.map(ft => (\n                  <SelectItem key={ft.value} value={ft.value}>\n                    {ft.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.type === 'dropdown' && (\n              <Input\n                placeholder=\"Options (comma separated)\"\n                value={form.options}\n                onChange={e => setForm((f: any) => ({ ...f, options: e.target.value }))}\n              />\n            )}\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                checked={form.required}\n                onChange={e => setForm((f: any) => ({ ...f, required: e.target.checked }))}\n                id=\"required\"\n              />\n              <label htmlFor=\"required\">Required</label>\n            </div>\n            <Input\n              placeholder='Validation (JSON, e.g. {\"min\":1,\"max\":10})'\n              value={form.validation}\n              onChange={e => setForm((f: any) => ({ ...f, validation: e.target.value }))}\n            />\n          </div>\n          <DialogFooter>\n            <Button onClick={handleSave}>{editing ? 'Save Changes' : 'Add Field'}</Button>\n            <Button variant=\"outline\" onClick={() => setShowDialog(false)}>\n              Cancel\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\settings\\layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":8,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\nimport { Card } from '@/components/ui/card'\nimport { cn } from '@/lib/utils'\nimport { Building2, CreditCard, Users, Settings, Shield, Bell, Key } from 'lucide-react'\n\ninterface SettingsLink {\n  href: string\n  label: string\n  icon: React.ElementType\n  description: string\n}\n\nconst settingsLinks: SettingsLink[] = [\n  {\n    href: '/settings/tenant',\n    label: 'Organization',\n    icon: Building2,\n    description: 'Manage your organization settings',\n  },\n  {\n    href: '/settings/billing',\n    label: 'Billing',\n    icon: CreditCard,\n    description: 'Manage your subscription and billing',\n  },\n  {\n    href: '/settings/team',\n    label: 'Team',\n    icon: Users,\n    description: 'Manage team members and roles',\n  },\n  {\n    href: '/settings/security',\n    label: 'Security',\n    icon: Shield,\n    description: 'Security settings and authentication',\n  },\n  {\n    href: '/settings/notifications',\n    label: 'Notifications',\n    icon: Bell,\n    description: 'Configure notification preferences',\n  },\n  {\n    href: '/settings/api',\n    label: 'API',\n    icon: Key,\n    description: 'API keys and integration settings',\n  },\n]\n\nexport default function SettingsLayout({ children }: { children: React.ReactNode }) {\n  const pathname = usePathname()\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"flex flex-col md:flex-row gap-8\">\n        {/* Sidebar Navigation */}\n        <aside className=\"md:w-64 flex-shrink-0\">\n          <nav className=\"space-y-2\">\n            {settingsLinks.map(link => {\n              const Icon = link.icon\n              const isActive = pathname === link.href\n\n              return (\n                <Link\n                  key={link.href}\n                  href={link.href}\n                  className={cn(\n                    'flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors',\n                    isActive ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-100'\n                  )}\n                >\n                  <Icon className=\"h-5 w-5\" />\n                  <div>\n                    <div className=\"font-medium\">{link.label}</div>\n                    <p className=\"text-sm text-gray-500 hidden md:block\">{link.description}</p>\n                  </div>\n                </Link>\n              )\n            })}\n          </nav>\n        </aside>\n\n        {/* Main Content */}\n        <main className=\"flex-1\">{children}</main>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\settings\\lifecycle-rules\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[943,946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[943,946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1096,1099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1096,1099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1149,1152],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1149,1152],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1846,1849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1846,1849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2909,2912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2909,2912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6561,6564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6561,6564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7078,7081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7078,7081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7647,7650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7647,7650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7887,7890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7887,7890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8055,8058],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8055,8058],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8641,8644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8641,8644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog'\nimport { Loader2, Plus, Edit, Trash2 } from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\n\nconst RULE_TYPES = [\n  { value: 'retire', label: 'Retire' },\n  { value: 'archive', label: 'Archive' },\n  { value: 'depreciate', label: 'Depreciate' },\n]\nconst TRIGGER_FIELDS = [\n  { value: 'purchase_date', label: 'Purchase Date' },\n  { value: 'warranty_expiry', label: 'Warranty Expiry' },\n]\n\nexport default function LifecycleRulesPage() {\n  const [rules, setRules] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [showDialog, setShowDialog] = useState(false)\n  const [editing, setEditing] = useState<any | null>(null)\n  const [form, setForm] = useState<any>({\n    asset_id: '',\n    type: 'retire',\n    trigger_field: 'purchase_date',\n    interval: '',\n    trigger_date: '',\n    status: 'active',\n  })\n  const { toast } = useToast()\n\n  const fetchRules = async () => {\n    setLoading(true)\n    const res = await fetch('/api/lifecycle-rules')\n    const json = await res.json()\n    setRules(json.data || [])\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    fetchRules()\n  }, [])\n\n  const openAdd = () => {\n    setEditing(null)\n    setForm({\n      asset_id: '',\n      type: 'retire',\n      trigger_field: 'purchase_date',\n      interval: '',\n      trigger_date: '',\n      status: 'active',\n    })\n    setShowDialog(true)\n  }\n\n  const openEdit = (rule: any) => {\n    setEditing(rule)\n    setForm({\n      asset_id: rule.asset_id || '',\n      type: rule.type,\n      trigger_field: rule.trigger_field,\n      interval: rule.interval || '',\n      trigger_date: rule.trigger_date || '',\n      status: rule.status,\n    })\n    setShowDialog(true)\n  }\n\n  const handleSave = async () => {\n    let res\n    if (editing) {\n      res = await fetch('/api/lifecycle-rules', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id: editing.id, ...form }),\n      })\n    } else {\n      res = await fetch('/api/lifecycle-rules', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(form),\n      })\n    }\n    const json = await res.json()\n    if (json.error) {\n      toast({ title: 'Error', description: json.error, variant: 'destructive' })\n    } else {\n      setShowDialog(false)\n      fetchRules()\n      toast({ title: 'Saved', description: 'Lifecycle rule saved.' })\n    }\n  }\n\n  const handleDelete = async (rule: any) => {\n    if (!window.confirm('Delete this lifecycle rule?')) return\n    const res = await fetch('/api/lifecycle-rules', {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ id: rule.id }),\n    })\n    const json = await res.json()\n    if (json.error) {\n      toast({ title: 'Error', description: json.error, variant: 'destructive' })\n    } else {\n      fetchRules()\n      toast({ title: 'Deleted', description: 'Lifecycle rule deleted.' })\n    }\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto py-8\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Asset Lifecycle Rules</CardTitle>\n          <Button onClick={openAdd} size=\"sm\">\n            <Plus className=\"h-4 w-4 mr-1\" /> Add Rule\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <Loader2 className=\"animate-spin h-6 w-6 mr-2\" /> Loading...\n            </div>\n          ) : rules.length === 0 ? (\n            <div className=\"text-center text-gray-500 py-8\">No lifecycle rules defined yet.</div>\n          ) : (\n            <table className=\"w-full text-sm border\">\n              <thead>\n                <tr className=\"bg-gray-50\">\n                  <th className=\"p-2 text-left\">Type</th>\n                  <th className=\"p-2 text-left\">Trigger Field</th>\n                  <th className=\"p-2 text-left\">Interval</th>\n                  <th className=\"p-2 text-left\">Trigger Date</th>\n                  <th className=\"p-2 text-left\">Status</th>\n                  <th className=\"p-2 text-left\">Asset</th>\n                  <th className=\"p-2 text-left\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {rules.map(rule => (\n                  <tr key={rule.id} className=\"border-t\">\n                    <td className=\"p-2 capitalize\">{rule.type}</td>\n                    <td className=\"p-2\">{rule.trigger_field}</td>\n                    <td className=\"p-2\">{rule.interval}</td>\n                    <td className=\"p-2\">{rule.trigger_date}</td>\n                    <td className=\"p-2\">{rule.status}</td>\n                    <td className=\"p-2\">\n                      {rule.asset_name ||\n                        (rule.asset_id ? (\n                          rule.asset_id\n                        ) : (\n                          <span className=\"text-gray-400\">Global</span>\n                        ))}\n                    </td>\n                    <td className=\"p-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        className=\"mr-1\"\n                        onClick={() => openEdit(rule)}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"destructive\" size=\"icon\" onClick={() => handleDelete(rule)}>\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </CardContent>\n      </Card>\n\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{editing ? 'Edit Lifecycle Rule' : 'Add Lifecycle Rule'}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-2\">\n            <Select\n              value={form.type}\n              onValueChange={val => setForm((f: any) => ({ ...f, type: val }))}\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {RULE_TYPES.map(rt => (\n                  <SelectItem key={rt.value} value={rt.value}>\n                    {rt.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Select\n              value={form.trigger_field}\n              onValueChange={val => setForm((f: any) => ({ ...f, trigger_field: val }))}\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {TRIGGER_FIELDS.map(tf => (\n                  <SelectItem key={tf.value} value={tf.value}>\n                    {tf.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Input\n              placeholder=\"Interval (e.g. 5 years)\"\n              value={form.interval}\n              onChange={e => setForm((f: any) => ({ ...f, interval: e.target.value }))}\n            />\n            <Input\n              type=\"date\"\n              placeholder=\"Trigger Date (optional)\"\n              value={form.trigger_date}\n              onChange={e => setForm((f: any) => ({ ...f, trigger_date: e.target.value }))}\n            />\n            <Select\n              value={form.status}\n              onValueChange={val => setForm((f: any) => ({ ...f, status: val }))}\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"inactive\">Inactive</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n              </SelectContent>\n            </Select>\n            <Input\n              placeholder=\"Asset ID (leave blank for global rule)\"\n              value={form.asset_id}\n              onChange={e => setForm((f: any) => ({ ...f, asset_id: e.target.value }))}\n            />\n          </div>\n          <DialogFooter>\n            <Button onClick={handleSave}>{editing ? 'Save Changes' : 'Add Rule'}</Button>\n            <Button variant=\"outline\" onClick={() => setShowDialog(false)}>\n              Cancel\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\settings\\profile\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\settings\\security\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentPassword' is assigned a value but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":32,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\nimport { useState } from 'react'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { useAuth } from '@/components/auth/auth-provider'\n\nexport default function SecuritySettingsPage() {\n  const { user, signOut } = useAuth()\n  const [currentPassword, setCurrentPassword] = useState('')\n  const [newPassword, setNewPassword] = useState('')\n  const [confirmPassword, setConfirmPassword] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [success, setSuccess] = useState('')\n  const [error, setError] = useState('')\n\n  const handlePasswordChange = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setSuccess('')\n    setError('')\n    if (newPassword !== confirmPassword) {\n      setError('New passwords do not match.')\n      return\n    }\n    setLoading(true)\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      const { error } = await supabase.auth.updateUser({ password: newPassword })\n      if (error) setError(error.message)\n      else setSuccess('Password updated successfully.')\n    } catch (err) {\n      setError('Failed to update password.')\n    } finally {\n      setLoading(false)\n      setCurrentPassword('')\n      setNewPassword('')\n      setConfirmPassword('')\n    }\n  }\n\n  const handleSignOutAll = async () => {\n    setLoading(true)\n    try {\n      await signOut()\n      window.location.href = '/login'\n    } catch {\n      setError('Failed to sign out.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"max-w-2xl mx-auto py-8 px-4 space-y-8\">\n      <h1 className=\"text-2xl font-bold mb-4\">Security Settings</h1>\n\n      {/* Password Change */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Change Password</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handlePasswordChange} className=\"space-y-4\">\n            <Input\n              type=\"password\"\n              placeholder=\"New password\"\n              value={newPassword}\n              onChange={e => setNewPassword(e.target.value)}\n              required\n            />\n            <Input\n              type=\"password\"\n              placeholder=\"Confirm new password\"\n              value={confirmPassword}\n              onChange={e => setConfirmPassword(e.target.value)}\n              required\n            />\n            <Button type=\"submit\" disabled={loading} className=\"w-full\">\n              {loading ? 'Updating...' : 'Change Password'}\n            </Button>\n            {success && <div className=\"text-green-600 text-sm mt-2\">{success}</div>}\n            {error && <div className=\"text-red-600 text-sm mt-2\">{error}</div>}\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* 2FA Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Two-Factor Authentication (2FA)</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-gray-600\">2FA setup and management coming soon.</div>\n        </CardContent>\n      </Card>\n\n      {/* Active Sessions/Devices */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Active Sessions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"mb-4\">\n            <div className=\"text-sm text-gray-700\">Current session:</div>\n            <div className=\"text-xs text-gray-500\">User ID: {user?.id}</div>\n            <div className=\"text-xs text-gray-500\">Email: {user?.email}</div>\n          </div>\n          <Button variant=\"outline\" onClick={handleSignOutAll} disabled={loading}>\n            Sign out of all devices\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\settings\\team\\analytics\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[225,228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[225,228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[275,278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[275,278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\nimport { useEffect, useState } from 'react'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\n\nexport default function TeamAnalyticsPage() {\n  const [summary, setSummary] = useState<any>(null)\n  const [assets, setAssets] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const teamId = 'YOUR_TEAM_ID' // TODO: Replace with actual team ID from context or route\n\n  useEffect(() => {\n    async function fetchAnalytics() {\n      setLoading(true)\n      const [summaryRes, assetsRes] = await Promise.all([\n        fetch(`/api/teams/${teamId}/analytics/summary`).then(r => r.json()),\n        fetch(`/api/teams/${teamId}/analytics/assets`).then(r => r.json()),\n      ])\n      setSummary(summaryRes)\n      setAssets(assetsRes)\n      setLoading(false)\n    }\n    fetchAnalytics()\n  }, [teamId])\n\n  if (loading) return <div>Loading team analytics...</div>\n\n  return (\n    <div className=\"max-w-4xl mx-auto py-8 space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Team Analytics Summary</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {summary ? (\n            <ul className=\"space-y-2\">\n              <li>Total Assets: {summary.totalAssets}</li>\n              <li>Active Assets: {summary.activeAssets}</li>\n              <li>Total Users: {summary.totalUsers}</li>\n              <li>\n                Asset Status Breakdown:{' '}\n                <pre>{JSON.stringify(summary.assetStatusBreakdown, null, 2)}</pre>\n              </li>\n              <li>\n                Recent Activity: <pre>{JSON.stringify(summary.recentActivity, null, 2)}</pre>\n              </li>\n            </ul>\n          ) : (\n            <div>No summary data.</div>\n          )}\n        </CardContent>\n      </Card>\n      <Card>\n        <CardHeader>\n          <CardTitle>Asset Analytics</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {assets ? (\n            <ul className=\"space-y-2\">\n              <li>\n                By Category: <pre>{JSON.stringify(assets.byCategory, null, 2)}</pre>\n              </li>\n              <li>Total Value: {assets.totalValue}</li>\n              <li>Average Value: {assets.avgValue}</li>\n              <li>\n                Assets Added Per Month: <pre>{JSON.stringify(assets.byMonth, null, 2)}</pre>\n              </li>\n            </ul>\n          ) : (\n            <div>No asset analytics data.</div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\settings\\team\\integrations\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[502,505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[502,505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1168,1171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1168,1171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1274,1277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1274,1277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1870,1873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1870,1873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2231,2234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2231,2234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\nimport { useEffect, useState } from 'react'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\n\nconst INTEGRATION_TYPES = [\n  { value: 'slack', label: 'Slack' },\n  { value: 'teams', label: 'Microsoft Teams' },\n  { value: 'custom', label: 'Custom Webhook' },\n]\n\nexport default function IntegrationManagementPage() {\n  const [integrations, setIntegrations] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [form, setForm] = useState({ type: 'slack', webhook_url: '' })\n  const [editingId, setEditingId] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [testMsg, setTestMsg] = useState('')\n  const [testStatus, setTestStatus] = useState<string | null>(null)\n\n  const fetchIntegrations = async () => {\n    setLoading(true)\n    const res = await fetch('/api/integrations')\n    const data = await res.json()\n    setIntegrations(data.integrations || [])\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    fetchIntegrations()\n  }, [])\n\n  const handleChange = (e: any) => {\n    setForm({ ...form, [e.target.name]: e.target.value })\n  }\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault()\n    setError(null)\n    const method = editingId ? 'PATCH' : 'POST'\n    const url = editingId ? `/api/integrations/${editingId}` : '/api/integrations'\n    const res = await fetch(url, {\n      method,\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(form),\n    })\n    if (!res.ok) {\n      const data = await res.json()\n      setError(data.error || 'Failed to save integration')\n      return\n    }\n    setForm({ type: 'slack', webhook_url: '' })\n    setEditingId(null)\n    fetchIntegrations()\n  }\n\n  const handleEdit = (integration: any) => {\n    setForm({ type: integration.type, webhook_url: integration.webhook_url })\n    setEditingId(integration.id)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('Delete this integration?')) return\n    await fetch(`/api/integrations/${id}`, { method: 'DELETE' })\n    fetchIntegrations()\n  }\n\n  const handleTest = async (integration: any) => {\n    setTestStatus('Sending...')\n    const res = await fetch(integration.webhook_url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text: testMsg || 'Test notification from AssetPro' }),\n    })\n    if (res.ok) setTestStatus('Success!')\n    else setTestStatus('Failed to send')\n    setTimeout(() => setTestStatus(null), 2000)\n  }\n\n  return (\n    <div className=\"max-w-3xl mx-auto py-8 space-y-8\">\n      <Card>\n        <CardHeader>\n          <CardTitle>{editingId ? 'Edit Integration' : 'Register New Integration'}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <label className=\"block mb-1 font-medium\">Integration Type</label>\n              <select\n                name=\"type\"\n                value={form.type}\n                onChange={handleChange}\n                className=\"border rounded px-2 py-1\"\n              >\n                {INTEGRATION_TYPES.map(opt => (\n                  <option key={opt.value} value={opt.value}>\n                    {opt.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block mb-1 font-medium\">Webhook URL</label>\n              <Input name=\"webhook_url\" value={form.webhook_url} onChange={handleChange} required />\n            </div>\n            {error && <div className=\"text-red-600\">{error}</div>}\n            <Button type=\"submit\">\n              {editingId ? 'Update Integration' : 'Register Integration'}\n            </Button>\n            {editingId && (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setEditingId(null)\n                  setForm({ type: 'slack', webhook_url: '' })\n                }}\n              >\n                Cancel\n              </Button>\n            )}\n          </form>\n        </CardContent>\n      </Card>\n      <Card>\n        <CardHeader>\n          <CardTitle>Registered Integrations</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div>Loading...</div>\n          ) : integrations.length === 0 ? (\n            <div>No integrations registered.</div>\n          ) : (\n            <table className=\"w-full text-sm border\">\n              <thead>\n                <tr>\n                  <th className=\"p-2 border\">Type</th>\n                  <th className=\"p-2 border\">Webhook URL</th>\n                  <th className=\"p-2 border\">Status</th>\n                  <th className=\"p-2 border\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {integrations.map(integration => (\n                  <tr key={integration.id}>\n                    <td className=\"p-2 border\">{integration.type}</td>\n                    <td className=\"p-2 border break-all\">{integration.webhook_url}</td>\n                    <td className=\"p-2 border\">{integration.status}</td>\n                    <td className=\"p-2 border space-x-2\">\n                      <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(integration)}>\n                        Edit\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        onClick={() => handleDelete(integration.id)}\n                      >\n                        Delete\n                      </Button>\n                      <Button size=\"sm\" variant=\"secondary\" onClick={() => handleTest(integration)}>\n                        Test\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n          <div className=\"mt-4\">\n            <label className=\"block mb-1 font-medium\">Test Message</label>\n            <Input\n              value={testMsg}\n              onChange={e => setTestMsg(e.target.value)}\n              placeholder=\"Enter a test message...\"\n            />\n            {testStatus && <div className=\"mt-2 text-sm text-blue-600\">{testStatus}</div>}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\settings\\team\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\settings\\team\\webhooks\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Select' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectContent' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectItem' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectTrigger' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectValue' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[514,517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[514,517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1114,1117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1114,1117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1439,1442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1439,1442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2011,2014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2011,2014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\nimport { useEffect, useState } from 'react'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\n\nconst EVENT_OPTIONS = ['asset.created', 'asset.updated', 'asset.deleted']\n\nexport default function WebhookManagementPage() {\n  const [webhooks, setWebhooks] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [form, setForm] = useState<{ url: string; events: string[]; secret: string }>({\n    url: '',\n    events: [],\n    secret: '',\n  })\n  const [editingId, setEditingId] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n\n  const fetchWebhooks = async () => {\n    setLoading(true)\n    const res = await fetch('/api/webhooks')\n    const data = await res.json()\n    setWebhooks(data.webhooks || [])\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    fetchWebhooks()\n  }, [])\n\n  const handleChange = (e: any) => {\n    setForm({ ...form, [e.target.name]: e.target.value })\n  }\n\n  const handleEventChange = (event: string) => {\n    setForm(f => ({\n      ...f,\n      events: f.events.includes(event)\n        ? f.events.filter((e: string) => e !== event)\n        : [...f.events, event],\n    }))\n  }\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault()\n    setError(null)\n    const method = editingId ? 'PATCH' : 'POST'\n    const url = editingId ? `/api/webhooks/${editingId}` : '/api/webhooks'\n    const res = await fetch(url, {\n      method,\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(form),\n    })\n    if (!res.ok) {\n      const data = await res.json()\n      setError(data.error || 'Failed to save webhook')\n      return\n    }\n    setForm({ url: '', events: [], secret: '' })\n    setEditingId(null)\n    fetchWebhooks()\n  }\n\n  const handleEdit = (wh: any) => {\n    setForm({ url: wh.url, events: wh.events, secret: wh.secret || '' })\n    setEditingId(wh.id)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('Delete this webhook?')) return\n    await fetch(`/api/webhooks/${id}`, { method: 'DELETE' })\n    fetchWebhooks()\n  }\n\n  return (\n    <div className=\"max-w-3xl mx-auto py-8 space-y-8\">\n      <Card>\n        <CardHeader>\n          <CardTitle>{editingId ? 'Edit Webhook' : 'Register New Webhook'}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <label className=\"block mb-1 font-medium\">Webhook URL</label>\n              <Input name=\"url\" value={form.url} onChange={handleChange} required />\n            </div>\n            <div>\n              <label className=\"block mb-1 font-medium\">Events</label>\n              <div className=\"flex gap-4\">\n                {EVENT_OPTIONS.map(event => (\n                  <label key={event} className=\"flex items-center gap-1\">\n                    <input\n                      type=\"checkbox\"\n                      checked={form.events.includes(event)}\n                      onChange={() => handleEventChange(event)}\n                    />\n                    {event}\n                  </label>\n                ))}\n              </div>\n            </div>\n            <div>\n              <label className=\"block mb-1 font-medium\">Secret (optional)</label>\n              <Input name=\"secret\" value={form.secret} onChange={handleChange} />\n            </div>\n            {error && <div className=\"text-red-600\">{error}</div>}\n            <Button type=\"submit\">{editingId ? 'Update Webhook' : 'Register Webhook'}</Button>\n            {editingId && (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setEditingId(null)\n                  setForm({ url: '', events: [], secret: '' })\n                }}\n              >\n                Cancel\n              </Button>\n            )}\n          </form>\n        </CardContent>\n      </Card>\n      <Card>\n        <CardHeader>\n          <CardTitle>Registered Webhooks</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div>Loading...</div>\n          ) : webhooks.length === 0 ? (\n            <div>No webhooks registered.</div>\n          ) : (\n            <table className=\"w-full text-sm border\">\n              <thead>\n                <tr>\n                  <th className=\"p-2 border\">URL</th>\n                  <th className=\"p-2 border\">Events</th>\n                  <th className=\"p-2 border\">Status</th>\n                  <th className=\"p-2 border\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {webhooks.map(wh => (\n                  <tr key={wh.id}>\n                    <td className=\"p-2 border break-all\">{wh.url}</td>\n                    <td className=\"p-2 border\">{wh.events.join(', ')}</td>\n                    <td className=\"p-2 border\">{wh.status}</td>\n                    <td className=\"p-2 border space-x-2\">\n                      <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(wh)}>\n                        Edit\n                      </Button>\n                      <Button size=\"sm\" variant=\"destructive\" onClick={() => handleDelete(wh.id)}>\n                        Delete\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\settings\\tenant\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Globe' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Mail' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Phone' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MapPin' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Briefcase' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Shield' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profile' is assigned a value but never used.","line":33,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1010,1013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1010,1013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTenantInfo'. Either include it or remove the dependency array.","line":65,"column":6,"nodeType":"ArrayExpression","endLine":65,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadTenantInfo, user]","fix":{"range":[1857,1863],"text":"[loadTenantInfo, user]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used.","line":146,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":146,"endColumn":17},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":276,"column":25,"nodeType":"JSXOpeningElement","endLine":280,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect, useRef } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { createClient } from '@/lib/supabase/client'\nimport { useAuth } from '@/components/auth/auth-provider'\nimport { Tenant } from '@/lib/rbac/types'\nimport {\n  Building2,\n  Users,\n  Settings,\n  Globe,\n  Mail,\n  Phone,\n  MapPin,\n  Briefcase,\n  Shield,\n  Loader2,\n  AlertTriangle,\n} from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\nimport { HexColorPicker } from 'react-colorful'\n\nexport default function TenantPage() {\n  const { user } = useAuth()\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [tenant, setTenant] = useState<Tenant | null>(null)\n  const [profile, setProfile] = useState<any>(null)\n  const [formData, setFormData] = useState({\n    name: '',\n    industry: '',\n    website: '',\n    contact_email: '',\n    contact_phone: '',\n    address: '',\n    city: '',\n    state: '',\n    country: '',\n    postal_code: '',\n    settings: {\n      allowMultipleLocations: false,\n      requireAssetPhotos: false,\n      enableGeofencing: false,\n      enableAnalytics: false,\n    },\n  })\n  const [branding, setBranding] = useState({\n    logoUrl: tenant?.branding_logo_url || '',\n    primaryColor: tenant?.branding_primary_color || '#2563eb',\n    secondaryColor: tenant?.branding_secondary_color || '#f1f5f9',\n    companyName: tenant?.branding_company_name || formData.name || '',\n  })\n  const fileInputRef = useRef<HTMLInputElement>(null)\n  const { toast } = useToast()\n\n  useEffect(() => {\n    if (user) {\n      loadTenantInfo()\n    }\n  }, [user])\n\n  const loadTenantInfo = async () => {\n    try {\n      const supabase = createClient()\n\n      // Get profile with tenant info\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('*, tenants(*)')\n        .eq('id', user?.id)\n        .single()\n\n      if (profile) {\n        setProfile(profile)\n        if (profile.tenants) {\n          setTenant(profile.tenants)\n          setFormData({\n            name: profile.tenants.name || '',\n            industry: profile.tenants.industry || '',\n            website: profile.tenants.website || '',\n            contact_email: profile.tenants.contact_email || '',\n            contact_phone: profile.tenants.contact_phone || '',\n            address: profile.tenants.address || '',\n            city: profile.tenants.city || '',\n            state: profile.tenants.state || '',\n            country: profile.tenants.country || '',\n            postal_code: profile.tenants.postal_code || '',\n            settings: profile.tenants.settings || {\n              allowMultipleLocations: false,\n              requireAssetPhotos: false,\n              enableGeofencing: false,\n              enableAnalytics: false,\n            },\n          })\n          setBranding({\n            logoUrl: profile.tenants.branding_logo_url || '',\n            primaryColor: profile.tenants.branding_primary_color || '#2563eb',\n            secondaryColor: profile.tenants.branding_secondary_color || '#f1f5f9',\n            companyName: profile.tenants.branding_company_name || profile.tenants.name || '',\n          })\n        }\n      }\n    } catch (error) {\n      console.error('Error loading tenant info:', error)\n      toast({\n        title: 'Error',\n        description: 'Failed to load tenant information',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target\n    setFormData(prev => ({\n      ...prev,\n      [name]: value,\n    }))\n  }\n\n  const handleSettingChange = (setting: string) => {\n    setFormData(prev => ({\n      ...prev,\n      settings: {\n        ...prev.settings,\n        [setting]: !prev.settings[setting as keyof typeof prev.settings],\n      },\n    }))\n  }\n\n  const handleBrandingChange = (field: string, value: string) => {\n    setBranding(prev => ({ ...prev, [field]: value }))\n  }\n\n  const handleLogoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (!file || !tenant) return\n    const supabase = createClient()\n    const { data, error } = await supabase.storage\n      .from('branding-logos')\n      .upload(`${tenant.id}/${file.name}`, file, { upsert: true })\n    if (error) {\n      toast({ title: 'Error', description: 'Logo upload failed', variant: 'destructive' })\n      return\n    }\n    const url = supabase.storage.from('branding-logos').getPublicUrl(`${tenant.id}/${file.name}`)\n      .data.publicUrl\n    setBranding(prev => ({ ...prev, logoUrl: url }))\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!tenant) return\n\n    try {\n      setSaving(true)\n      const supabase = createClient()\n      const { error } = await supabase\n        .from('tenants')\n        .update({\n          name: formData.name,\n          branding_logo_url: branding.logoUrl,\n          branding_primary_color: branding.primaryColor,\n          branding_secondary_color: branding.secondaryColor,\n          branding_company_name: branding.companyName,\n          metadata: {\n            industry: formData.industry,\n            website: formData.website,\n            contact_email: formData.contact_email,\n            contact_phone: formData.contact_phone,\n            address: formData.address,\n            city: formData.city,\n            state: formData.state,\n            country: formData.country,\n            postal_code: formData.postal_code,\n            settings: formData.settings,\n          },\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', tenant.id)\n\n      if (error) throw error\n\n      toast({\n        title: 'Success',\n        description: 'Tenant information updated successfully',\n      })\n\n      await loadTenantInfo()\n    } catch (error) {\n      console.error('Error updating tenant:', error)\n      toast({\n        title: 'Error',\n        description: 'Failed to update tenant information',\n        variant: 'destructive',\n      })\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-blue-500\" />\n      </div>\n    )\n  }\n\n  if (!tenant) {\n    return (\n      <div className=\"container mx-auto py-8 px-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-red-600\">\n              <AlertTriangle className=\"h-6 w-6 mr-2\" />\n              No Tenant Found\n            </CardTitle>\n            <CardDescription>You are not associated with any tenant organization</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-gray-600 mb-4\">\n              Please contact your administrator to get access to a tenant organization.\n            </p>\n            <Button variant=\"outline\">Contact Support</Button>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"max-w-4xl mx-auto space-y-8\">\n        {/* Tenant Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Building2 className=\"h-6 w-6 mr-2\" />\n              Tenant Organization\n            </CardTitle>\n            <CardDescription>Manage your organization settings and information</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4 mb-6\">\n              <div>\n                <Badge variant=\"outline\" className=\"mb-2\">\n                  Tenant ID\n                </Badge>\n                <p className=\"font-mono text-sm\">{tenant.id}</p>\n              </div>\n              <div>\n                <Badge variant=\"outline\" className=\"mb-2\">\n                  Plan\n                </Badge>\n                <p className=\"font-medium capitalize\">{tenant.plan}</p>\n              </div>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Branding Section */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Branding</h3>\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  <div>\n                    <Label htmlFor=\"branding_logo\">Logo</Label>\n                    <div className=\"flex items-center space-x-4\">\n                      {branding.logoUrl && (\n                        <img\n                          src={branding.logoUrl}\n                          alt=\"Logo Preview\"\n                          className=\"h-12 w-12 rounded bg-white border\"\n                        />\n                      )}\n                      <Button type=\"button\" onClick={() => fileInputRef.current?.click()}>\n                        Upload Logo\n                      </Button>\n                      <input\n                        ref={fileInputRef}\n                        id=\"branding_logo\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                        onChange={handleLogoUpload}\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"branding_company_name\">Company Name</Label>\n                    <Input\n                      id=\"branding_company_name\"\n                      name=\"branding_company_name\"\n                      value={branding.companyName}\n                      onChange={e => handleBrandingChange('companyName', e.target.value)}\n                      placeholder=\"Enter company name\"\n                    />\n                  </div>\n                  <div>\n                    <Label>Primary Color</Label>\n                    <HexColorPicker\n                      color={branding.primaryColor}\n                      onChange={color => handleBrandingChange('primaryColor', color)}\n                    />\n                    <Input\n                      className=\"mt-2\"\n                      value={branding.primaryColor}\n                      onChange={e => handleBrandingChange('primaryColor', e.target.value)}\n                    />\n                  </div>\n                  <div>\n                    <Label>Secondary Color</Label>\n                    <HexColorPicker\n                      color={branding.secondaryColor}\n                      onChange={color => handleBrandingChange('secondaryColor', color)}\n                    />\n                    <Input\n                      className=\"mt-2\"\n                      value={branding.secondaryColor}\n                      onChange={e => handleBrandingChange('secondaryColor', e.target.value)}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Basic Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Basic Information</h3>\n\n                <div className=\"grid gap-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Organization Name</Label>\n                    <Input\n                      id=\"name\"\n                      name=\"name\"\n                      value={formData.name}\n                      onChange={handleInputChange}\n                      placeholder=\"Enter organization name\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"industry\">Industry</Label>\n                    <Input\n                      id=\"industry\"\n                      name=\"industry\"\n                      value={formData.industry}\n                      onChange={handleInputChange}\n                      placeholder=\"Enter industry\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"website\">Website</Label>\n                    <Input\n                      id=\"website\"\n                      name=\"website\"\n                      value={formData.website}\n                      onChange={handleInputChange}\n                      placeholder=\"Enter website URL\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Contact Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Contact Information</h3>\n\n                <div className=\"grid gap-4\">\n                  <div>\n                    <Label htmlFor=\"contact_email\">Contact Email</Label>\n                    <Input\n                      id=\"contact_email\"\n                      name=\"contact_email\"\n                      value={formData.contact_email}\n                      onChange={handleInputChange}\n                      placeholder=\"Enter contact email\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"contact_phone\">Contact Phone</Label>\n                    <Input\n                      id=\"contact_phone\"\n                      name=\"contact_phone\"\n                      value={formData.contact_phone}\n                      onChange={handleInputChange}\n                      placeholder=\"Enter contact phone\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Address */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Address</h3>\n\n                <div className=\"grid gap-4\">\n                  <div>\n                    <Label htmlFor=\"address\">Street Address</Label>\n                    <Input\n                      id=\"address\"\n                      name=\"address\"\n                      value={formData.address}\n                      onChange={handleInputChange}\n                      placeholder=\"Enter street address\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"city\">City</Label>\n                      <Input\n                        id=\"city\"\n                        name=\"city\"\n                        value={formData.city}\n                        onChange={handleInputChange}\n                        placeholder=\"Enter city\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"state\">State/Province</Label>\n                      <Input\n                        id=\"state\"\n                        name=\"state\"\n                        value={formData.state}\n                        onChange={handleInputChange}\n                        placeholder=\"Enter state/province\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"country\">Country</Label>\n                      <Input\n                        id=\"country\"\n                        name=\"country\"\n                        value={formData.country}\n                        onChange={handleInputChange}\n                        placeholder=\"Enter country\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"postal_code\">Postal Code</Label>\n                      <Input\n                        id=\"postal_code\"\n                        name=\"postal_code\"\n                        value={formData.postal_code}\n                        onChange={handleInputChange}\n                        placeholder=\"Enter postal code\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Feature Settings */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Feature Settings</h3>\n\n                <div className=\"grid gap-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Multiple Locations</Label>\n                      <p className=\"text-sm text-gray-500\">\n                        Allow tracking assets across multiple locations\n                      </p>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant={formData.settings.allowMultipleLocations ? 'default' : 'outline'}\n                      onClick={() => handleSettingChange('allowMultipleLocations')}\n                    >\n                      {formData.settings.allowMultipleLocations ? 'Enabled' : 'Disabled'}\n                    </Button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Asset Photos</Label>\n                      <p className=\"text-sm text-gray-500\">Require photos for asset registration</p>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant={formData.settings.requireAssetPhotos ? 'default' : 'outline'}\n                      onClick={() => handleSettingChange('requireAssetPhotos')}\n                    >\n                      {formData.settings.requireAssetPhotos ? 'Required' : 'Optional'}\n                    </Button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Geofencing</Label>\n                      <p className=\"text-sm text-gray-500\">Enable geofencing features</p>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant={formData.settings.enableGeofencing ? 'default' : 'outline'}\n                      onClick={() => handleSettingChange('enableGeofencing')}\n                    >\n                      {formData.settings.enableGeofencing ? 'Enabled' : 'Disabled'}\n                    </Button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label>Analytics</Label>\n                      <p className=\"text-sm text-gray-500\">Enable advanced analytics</p>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant={formData.settings.enableAnalytics ? 'default' : 'outline'}\n                      onClick={() => handleSettingChange('enableAnalytics')}\n                    >\n                      {formData.settings.enableAnalytics ? 'Enabled' : 'Disabled'}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-4\">\n                <Button type=\"submit\" disabled={saving}>\n                  {saving ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Saving Changes...\n                    </>\n                  ) : (\n                    'Save Changes'\n                  )}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Danger Zone */}\n        <Card className=\"border-red-200\">\n          <CardHeader>\n            <CardTitle className=\"text-red-600 flex items-center\">\n              <AlertTriangle className=\"h-6 w-6 mr-2\" />\n              Danger Zone\n            </CardTitle>\n            <CardDescription>Irreversible and destructive actions</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium\">Delete Organization</h4>\n                  <p className=\"text-sm text-gray-500\">\n                    Permanently delete this organization and all its data\n                  </p>\n                </div>\n                <Button variant=\"destructive\">Delete Organization</Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\setup-auth\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\signup\\SignupClientPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\signup\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\supabase-test\\page.tsx","messages":[{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/docs/supabase-setup/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":42,"column":13,"nodeType":"JSXOpeningElement","endLine":42,"endColumn":97}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Metadata } from 'next'\nimport { SUPABASE_CONFIG } from '@/lib/supabase/config'\nimport { SupabaseConnectionTest } from '@/components/supabase-connection-test'\n\nexport const metadata: Metadata = {\n  title: 'Supabase Connection Test',\n  description: 'Verify your Supabase connection is working correctly',\n}\n\nexport default function SupabaseTestPage() {\n  return (\n    <div className=\"container mx-auto py-10\">\n      <h1 className=\"text-3xl font-bold mb-6\">Supabase Connection Test</h1>\n      <p className=\"text-muted-foreground mb-8\">\n        This page tests your connection to the Supabase project and verifies your API keys are\n        working correctly.\n      </p>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <SupabaseConnectionTest />\n\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-semibold\">Connection Details</h2>\n          <div className=\"space-y-2\">\n            <p className=\"font-medium\">Project ID</p>\n            <p className=\"text-sm text-muted-foreground\">{SUPABASE_CONFIG.projectId}</p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <p className=\"font-medium\">Project URL</p>\n            <p className=\"text-sm text-muted-foreground\">{SUPABASE_CONFIG.url}</p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <p className=\"font-medium\">Environment</p>\n            <p className=\"text-sm text-muted-foreground\">\n              {process.env.NODE_ENV === 'production' ? 'Production' : 'Development'}\n            </p>\n          </div>\n\n          <div className=\"mt-6\">\n            <a href=\"/docs/supabase-setup\" className=\"text-primary hover:underline font-medium\">\n              View Supabase Setup Guide →\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\app\\terms\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\BulkAssetImport.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1109,1112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1109,1112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1227,1230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1227,1230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1452,1455],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1452,1455],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2343,2346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2343,2346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2535,2538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2535,2538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":127,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":152,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'idx' is defined but never used.","line":208,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":208,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":300,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10941,10944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10941,10944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Progress } from '@/components/ui/progress'\nimport { Upload, FileText, FileSpreadsheet, CheckCircle, AlertTriangle, Eye } from 'lucide-react'\nimport Papa from 'papaparse'\nimport * as XLSX from 'xlsx'\n\nconst csvTemplate = [\n  'asset_id,name,category,location,value',\n  'AST-001,MacBook Pro 16\",it-equipment,Office A,2499.99',\n  'AST-002,Office Chair,furniture,Office B,299.99',\n  'AST-003,Projector,av-equipment,Conference Room,899.99',\n].join('\\n')\n\nconst excelTemplateUrl =\n  'https://github.com/your-org/assetpro-templates/raw/main/asset-template.xlsx' // Replace with your actual template location if needed\n\nconst REQUIRED_COLUMNS = ['asset_id', 'name']\n\nexport default function BulkAssetImport() {\n  const [uploading, setUploading] = useState(false)\n  const [progress, setProgress] = useState(0)\n  const [result, setResult] = useState<any>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [previewRows, setPreviewRows] = useState<any[]>([])\n  const [fileValid, setFileValid] = useState(false)\n  const [fileName, setFileName] = useState<string>('')\n  const fileInputRef = useRef<HTMLInputElement>(null)\n  const [importHistory, setImportHistory] = useState<any[]>([])\n  const [undoing, setUndoing] = useState(false)\n\n  // Fetch import history\n  useEffect(() => {\n    const fetchHistory = async () => {\n      const res = await fetch('/api/assets/import/history')\n      const data = await res.json()\n      if (data.success) setImportHistory(data.history)\n    }\n    fetchHistory()\n  }, [result, undoing])\n\n  const handleDownloadCSV = () => {\n    const blob = new Blob([csvTemplate], { type: 'text/csv' })\n    const url = URL.createObjectURL(blob)\n    const link = document.createElement('a')\n    link.href = url\n    link.download = 'asset-template.csv'\n    link.click()\n    URL.revokeObjectURL(url)\n  }\n\n  const handleDownloadExcel = () => {\n    window.open(excelTemplateUrl, '_blank')\n  }\n\n  const validateAndPreview = async (file: File) => {\n    setError(null)\n    setPreviewRows([])\n    setFileValid(false)\n    setFileName(file.name)\n    let rows: any[] = []\n    if (file.name.endsWith('.csv')) {\n      const text = await file.text()\n      const parsed = Papa.parse(text, { header: true, skipEmptyLines: true })\n      rows = parsed.data as any[]\n      if (parsed.errors.length > 0) {\n        setError('CSV parse error: ' + parsed.errors[0].message)\n        return\n      }\n    } else if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {\n      const arrayBuffer = await file.arrayBuffer()\n      const workbook = XLSX.read(arrayBuffer, { type: 'array' })\n      const sheetName = workbook.SheetNames[0]\n      const worksheet = workbook.Sheets[sheetName]\n      rows = XLSX.utils.sheet_to_json(worksheet)\n    } else {\n      setError('Unsupported file type')\n      return\n    }\n    if (!rows.length) {\n      setError('File is empty or has no valid rows.')\n      return\n    }\n    const columns = Object.keys(rows[0])\n    const missing = REQUIRED_COLUMNS.filter(col => !columns.includes(col))\n    if (missing.length > 0) {\n      setError(`Missing required columns: ${missing.join(', ')}`)\n      return\n    }\n    setPreviewRows(rows.slice(0, 5))\n    setFileValid(true)\n  }\n\n  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (!file) return\n    setResult(null)\n    setUploading(false)\n    setProgress(0)\n    await validateAndPreview(file)\n  }\n\n  const handleUpload = async () => {\n    if (!fileInputRef.current?.files?.[0]) return\n    setUploading(true)\n    setProgress(10)\n    setError(null)\n    try {\n      const formData = new FormData()\n      formData.append('file', fileInputRef.current.files[0])\n      setProgress(30)\n      const res = await fetch('/api/assets/import', {\n        method: 'POST',\n        body: formData,\n      })\n      setProgress(80)\n      const data = await res.json()\n      if (data.error) {\n        setError(data.error)\n        setResult(data)\n      } else {\n        setResult(data)\n      }\n      setProgress(100)\n    } catch (err) {\n      setError('Failed to import file')\n    } finally {\n      setUploading(false)\n      setTimeout(() => setProgress(0), 2000)\n      if (fileInputRef.current) fileInputRef.current.value = ''\n      setFileValid(false)\n      setPreviewRows([])\n      setFileName('')\n    }\n  }\n\n  const handleUndo = async () => {\n    setUndoing(true)\n    try {\n      const res = await fetch('/api/assets/import/undo', { method: 'POST' })\n      const data = await res.json()\n      if (data.success) {\n        setResult({ ...result, undoSuccess: true })\n        setImportHistory(prev =>\n          prev.map(h => (h.id === data.importId ? { ...h, undone: true } : h))\n        )\n      } else {\n        setError(data.error || 'Failed to undo import')\n      }\n    } catch (err) {\n      setError('Failed to undo import')\n    } finally {\n      setUndoing(false)\n    }\n  }\n\n  return (\n    <Card className=\"mb-8\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Upload className=\"h-5 w-5 mr-2\" />\n          Bulk Asset Import\n        </CardTitle>\n        <CardDescription>\n          Import assets from CSV or Excel files. Download a template to get started.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={handleDownloadCSV}>\n            <FileText className=\"h-4 w-4 mr-2\" />\n            Download CSV Template\n          </Button>\n          <Button variant=\"outline\" onClick={handleDownloadExcel}>\n            <FileSpreadsheet className=\"h-4 w-4 mr-2\" />\n            Download Excel Template\n          </Button>\n        </div>\n        {/* Undo Last Import */}\n        {importHistory.length > 0 && !importHistory[0].undone && (\n          <div className=\"mb-4\">\n            <Button onClick={handleUndo} disabled={undoing} variant=\"destructive\">\n              {undoing ? 'Undoing...' : 'Undo Last Import'}\n            </Button>\n            <span className=\"ml-2 text-xs text-gray-500\">\n              Last import: {importHistory[0].file_name} ({importHistory[0].success_count} imported,{' '}\n              {importHistory[0].error_count} errors)\n            </span>\n          </div>\n        )}\n        {/* Import History */}\n        {importHistory.length > 0 && (\n          <div className=\"mt-6\">\n            <CardTitle className=\"text-sm mb-2\">Import History</CardTitle>\n            <table className=\"text-xs w-full border\">\n              <thead>\n                <tr>\n                  <th className=\"px-2 py-1 border-b\">File</th>\n                  <th className=\"px-2 py-1 border-b\">Imported</th>\n                  <th className=\"px-2 py-1 border-b\">Errors</th>\n                  <th className=\"px-2 py-1 border-b\">Date</th>\n                  <th className=\"px-2 py-1 border-b\">Status</th>\n                </tr>\n              </thead>\n              <tbody>\n                {importHistory.map((h, idx) => (\n                  <tr key={h.id} className={h.undone ? 'text-gray-400' : ''}>\n                    <td className=\"px-2 py-1 border-b\">{h.file_name}</td>\n                    <td className=\"px-2 py-1 border-b\">{h.success_count}</td>\n                    <td className=\"px-2 py-1 border-b\">{h.error_count}</td>\n                    <td className=\"px-2 py-1 border-b\">\n                      {new Date(h.created_at).toLocaleString()}\n                    </td>\n                    <td className=\"px-2 py-1 border-b\">{h.undone ? 'Undone' : 'Imported'}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n        <form\n          className=\"flex flex-col sm:flex-row items-center gap-2\"\n          onSubmit={e => e.preventDefault()}\n        >\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\n            onChange={handleFileChange}\n            disabled={uploading}\n            className=\"max-w-xs\"\n          />\n          <Button\n            onClick={handleUpload}\n            disabled={uploading || !fileValid}\n            variant=\"outline\"\n            type=\"button\"\n          >\n            {uploading ? (\n              <Upload className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <Upload className=\"h-4 w-4\" />\n            )}\n            {uploading ? 'Uploading...' : 'Upload File'}\n          </Button>\n        </form>\n        {fileName && <div className=\"text-xs text-gray-500\">Selected file: {fileName}</div>}\n        {previewRows.length > 0 && (\n          <div className=\"bg-gray-50 p-2 rounded border\">\n            <div className=\"flex items-center mb-1\">\n              <Eye className=\"h-4 w-4 mr-1 text-blue-600\" />\n              <span className=\"font-semibold text-sm\">Preview (first 5 rows):</span>\n            </div>\n            <table className=\"text-xs w-full\">\n              <thead>\n                <tr>\n                  {Object.keys(previewRows[0]).map(col => (\n                    <th key={col} className=\"px-2 py-1 text-left border-b\">\n                      {col}\n                    </th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {previewRows.map((row, idx) => (\n                  <tr key={idx}>\n                    {Object.keys(previewRows[0]).map(col => (\n                      <td key={col} className=\"px-2 py-1 border-b\">\n                        {row[col]}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n        {progress > 0 && <Progress value={progress} className=\"w-full\" />}\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        {result && result.success && (\n          <Alert className=\"border-green-200 bg-green-50\">\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            <AlertDescription>\n              Imported {result.successCount} assets successfully.\n              {result.errorCount > 0 && <span> {result.errorCount} rows failed.</span>}\n            </AlertDescription>\n          </Alert>\n        )}\n        {result && result.errorRows && result.errorRows.length > 0 && (\n          <div className=\"mt-2\">\n            <CardTitle className=\"text-sm mb-2\">Import Errors</CardTitle>\n            <ul className=\"text-xs text-red-600 list-disc pl-5\">\n              {result.errorRows.map((row: any, idx: number) => (\n                <li key={idx}>\n                  {row.error} (Row: {JSON.stringify(row.row)})\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ClientLayoutShell.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'inter' is assigned a value but never used.","line":15,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":31,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\nimport { useEffect } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useRouter } from 'next/navigation'\nimport { Inter } from 'next/font/google'\nimport { ThemeProvider } from '@/components/theme-provider'\nimport { Toaster } from '@/components/ui/toaster'\nimport { AuthProvider } from '@/components/auth/auth-provider'\nimport ErrorBoundary from '@/components/error-boundary'\nimport { SessionSync } from '@/components/session-sync'\nimport { BrandingProvider, useBranding } from '@/components/branding-provider'\nimport HelpdeskWidget from '@/components/helpdesk-widget'\nimport '@/app/globals.css'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nfunction BrandingStyle() {\n  const branding = useBranding()\n  if (!branding) return null\n  return (\n    <style>{`\n      body {\n        --branding-primary: ${branding.primaryColor || '#2563eb'};\n        --branding-secondary: ${branding.secondaryColor || '#f1f5f9'};\n      }\n    `}</style>\n  )\n}\n\nfunction LanguageSwitcher() {\n  const router = useRouter()\n  const { i18n } = useTranslation()\n  const changeLanguage = (lng: string) => {\n    i18n.changeLanguage(lng)\n  }\n  return (\n    <select onChange={e => changeLanguage(e.target.value)} value={i18n.language} className=\"ml-2\">\n      <option value=\"en\">English</option>\n      <option value=\"fr\">Français</option>\n      <option value=\"pt\">Português</option>\n    </select>\n  )\n}\n\nexport default function ClientLayoutShell({ children }: { children: React.ReactNode }) {\n  useEffect(() => {\n    if (typeof window !== 'undefined' && 'serviceWorker' in navigator) {\n      navigator.serviceWorker.register('/service-worker.js')\n    }\n  }, [])\n  return (\n    <ErrorBoundary>\n      <ThemeProvider attribute=\"class\" defaultTheme=\"system\" enableSystem disableTransitionOnChange>\n        <AuthProvider>\n          <BrandingProvider>\n            <SessionSync />\n            <BrandingStyle />\n            <header className=\"flex items-center justify-end p-2\">\n              <LanguageSwitcher />\n            </header>\n            {children}\n            <Toaster />\n            <HelpdeskWidget />\n          </BrandingProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </ErrorBoundary>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\add-asset-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1869,1872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1869,1872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2013,2016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2013,2016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3332,3335],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3332,3335],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3383,3386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3383,3386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":131,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":19},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":189,"column":17,"nodeType":"BlockStatement","messageId":"unexpected","endLine":189,"endColumn":19,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[6262,6262],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":264,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":264,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport type React from 'react'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { useRouter } from 'next/navigation'\nimport { Package, Loader2, AlertTriangle, Settings, Save, ArrowLeft, Sparkles } from 'lucide-react'\nimport { addAsset, generateAssetId } from '@/lib/asset-actions'\nimport { useAuth } from '@/components/auth/auth-provider'\nimport { checkUserProfile } from '@/lib/profile-actions'\nimport { useToast } from '@/hooks/use-toast'\nimport Link from 'next/link'\n\nexport default function AddAssetForm() {\n  const { user } = useAuth()\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState(false)\n  const [profileStatus, setProfileStatus] = useState<'loading' | 'exists' | 'missing'>('loading')\n  const [generatingId, setGeneratingId] = useState(false)\n  const router = useRouter()\n  const { toast } = useToast()\n\n  const [formData, setFormData] = useState({\n    asset_id: '',\n    name: '',\n    description: '',\n    category: '',\n    status: 'active' as const,\n    location: '',\n    purchase_value: '',\n    purchase_date: '',\n    manufacturer: '',\n    model: '',\n    serial_number: '',\n    warranty_expiry: '',\n    assigned_to: '',\n    tags: '',\n    notes: '',\n  })\n\n  const [customFieldDefs, setCustomFieldDefs] = useState<any[]>([])\n  const [customFields, setCustomFields] = useState<{ [fieldId: string]: string }>({})\n  const [categories, setCategories] = useState<any[]>([])\n\n  useEffect(() => {\n    async function checkProfile() {\n      if (!user) return\n\n      try {\n        setProfileStatus('loading')\n        const result = await checkUserProfile()\n\n        if (result.error) {\n          console.error('Profile check error:', result.error)\n          setProfileStatus('exists')\n          return\n        }\n\n        if (result.exists) {\n          console.log('Profile exists:', result.profile)\n          setProfileStatus('exists')\n        } else {\n          console.log('Profile missing, user:', result.user)\n          setProfileStatus('missing')\n        }\n      } catch (err) {\n        console.error('Profile check failed:', err)\n        setProfileStatus('exists')\n      }\n    }\n\n    checkProfile()\n  }, [user])\n\n  useEffect(() => {\n    async function fetchCustomFields() {\n      const res = await fetch('/api/custom-fields')\n      const json = await res.json()\n      setCustomFieldDefs(json.data || [])\n    }\n    fetchCustomFields()\n  }, [])\n\n  useEffect(() => {\n    async function fetchCategories() {\n      const res = await fetch('/api/categories')\n      const json = await res.json()\n      setCategories(json.data || [])\n    }\n    fetchCategories()\n  }, [])\n\n  // Helper to build category options (flat with indentation for subcategories)\n  const buildCategoryOptions = (list: any[], parentId: string | null = null, level = 0): any[] =>\n    list\n      .filter(c => (c.parent_id || '') === (parentId || ''))\n      .flatMap(c => [{ ...c, indent: level }, ...buildCategoryOptions(list, c.id, level + 1)])\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n  }\n\n  const handleCustomFieldChange = (fieldId: string, value: string) => {\n    setCustomFields(prev => ({ ...prev, [fieldId]: value }))\n  }\n\n  const handleGenerateAssetId = async () => {\n    setGeneratingId(true)\n    try {\n      const newId = await generateAssetId(formData.category)\n      setFormData(prev => ({ ...prev, asset_id: newId }))\n      toast({\n        title: 'Asset ID Generated',\n        description: 'A unique asset ID has been generated for you.',\n      })\n    } catch (error) {\n      toast({\n        title: 'Error Generating ID',\n        description: 'Failed to generate asset ID. Please try again.',\n        variant: 'destructive',\n      })\n    } finally {\n      setGeneratingId(false)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    // Validate custom fields\n    for (const field of customFieldDefs) {\n      const value = customFields[field.id] ?? ''\n      if (field.required && !value) {\n        setError(`Custom field \"${field.label}\" is required.`)\n        setLoading(false)\n        return\n      }\n      if (field.validation) {\n        try {\n          const rules =\n            typeof field.validation === 'string' ? JSON.parse(field.validation) : field.validation\n          if (field.type === 'text' || field.type === 'dropdown') {\n            if (rules.min !== undefined && value.length < rules.min) {\n              setError(`Custom field \"${field.label}\" must be at least ${rules.min} characters.`)\n              setLoading(false)\n              return\n            }\n            if (rules.max !== undefined && value.length > rules.max) {\n              setError(`Custom field \"${field.label}\" must be at most ${rules.max} characters.`)\n              setLoading(false)\n              return\n            }\n          } else if (field.type === 'number') {\n            const num = Number(value)\n            if (isNaN(num)) {\n              setError(`Custom field \"${field.label}\" must be a number.`)\n              setLoading(false)\n              return\n            }\n            if (rules.min !== undefined && num < rules.min) {\n              setError(`Custom field \"${field.label}\" must be at least ${rules.min}.`)\n              setLoading(false)\n              return\n            }\n            if (rules.max !== undefined && num > rules.max) {\n              setError(`Custom field \"${field.label}\" must be at most ${rules.max}.`)\n              setLoading(false)\n              return\n            }\n          }\n          // Add more type-specific validation as needed\n        } catch {}\n      }\n    }\n\n    try {\n      const result = await addAsset({\n        asset_id: formData.asset_id,\n        name: formData.name,\n        description: formData.description || null,\n        category: formData.category,\n        status: formData.status,\n        location: formData.location || null,\n        purchase_value: formData.purchase_value ? Number.parseFloat(formData.purchase_value) : null,\n        purchase_date: formData.purchase_date || null,\n        manufacturer: formData.manufacturer || null,\n        model: formData.model || null,\n        serial_number: formData.serial_number || null,\n        warranty_expiry: formData.warranty_expiry || null,\n        assigned_to: formData.assigned_to || null,\n        tags: formData.tags ? formData.tags.split(',').map(tag => tag.trim()) : [],\n        notes: formData.notes || null,\n      })\n\n      if (result.error) {\n        setError(result.error)\n        toast({\n          title: 'Error Adding Asset',\n          description: result.error,\n          variant: 'destructive',\n        })\n      } else {\n        // Save custom field values\n        if (Object.keys(customFields).length > 0) {\n          await fetch(`/api/assets/${result.data.id}/custom-fields`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              values: Object.entries(customFields).map(([field_id, value]) => ({\n                field_id,\n                value,\n              })),\n            }),\n          })\n        }\n        setSuccess(true)\n        toast({\n          title: 'Asset Added Successfully',\n          description: 'Your asset has been added to the inventory.',\n        })\n\n        // Reset form\n        setFormData({\n          asset_id: '',\n          name: '',\n          description: '',\n          category: '',\n          status: 'active',\n          location: '',\n          purchase_value: '',\n          purchase_date: '',\n          manufacturer: '',\n          model: '',\n          serial_number: '',\n          warranty_expiry: '',\n          assigned_to: '',\n          tags: '',\n          notes: '',\n        })\n        setCustomFields({})\n\n        // Redirect to dashboard after a short delay\n        setTimeout(() => {\n          router.push('/assets')\n        }, 1500)\n      }\n    } catch (err) {\n      setError('An unexpected error occurred')\n      toast({\n        title: 'Error Adding Asset',\n        description: 'An unexpected error occurred while adding the asset.',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (profileStatus === 'loading') {\n    return (\n      <Card className=\"w-full max-w-2xl mx-auto\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Loader2 className=\"h-5 w-5 mr-2 animate-spin\" />\n            Setting up your profile...\n          </CardTitle>\n          <CardDescription>Please wait while we prepare the form</CardDescription>\n        </CardHeader>\n      </Card>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Profile Setup Component - only show if profile is missing */}\n      {profileStatus === 'missing' && (\n        <Card className=\"w-full max-w-2xl mx-auto border-orange-200 bg-orange-50\">\n          <CardHeader>\n            <CardTitle className=\"text-orange-800\">Profile Setup Required</CardTitle>\n            <CardDescription className=\"text-orange-700\">\n              Please complete your profile setup before adding assets.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button asChild>\n              <Link href=\"/profile-setup\">\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Complete Profile Setup\n              </Link>\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      <Card className=\"w-full max-w-4xl mx-auto\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center\">\n                <Package className=\"h-5 w-5 mr-2\" />\n                Add New Asset\n              </CardTitle>\n              <CardDescription>Enter comprehensive details for your new asset</CardDescription>\n            </div>\n            <Button asChild variant=\"outline\" size=\"sm\">\n              <Link href=\"/assets\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Assets\n              </Link>\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Error:</strong> {error}\n                {error.includes('foreign key constraint') && (\n                  <div className=\"mt-3 p-3 bg-red-50 rounded border border-red-200\">\n                    <p className=\"text-sm font-medium text-red-800 mb-2\">Profile Issue Detected</p>\n                    <p className=\"text-sm text-red-700 mb-3\">\n                      This error occurs when your user profile is missing from the database.\n                    </p>\n                    <div className=\"space-y-2\">\n                      <Button asChild size=\"sm\" variant=\"outline\">\n                        <Link href=\"/profile-setup\">\n                          <Settings className=\"h-4 w-4 mr-2\" />\n                          Go to Profile Setup\n                        </Link>\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {success && (\n            <Alert className=\"mb-4 border-green-200 bg-green-50\">\n              <AlertDescription className=\"text-green-800\">\n                ✅ Asset added successfully! Redirecting to assets page...\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <Tabs defaultValue=\"basic\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"basic\">Basic Information</TabsTrigger>\n                <TabsTrigger value=\"details\">Asset Details</TabsTrigger>\n                <TabsTrigger value=\"financial\">Financial & Assignment</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"basic\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"asset_id\">Asset ID *</Label>\n                    <div className=\"flex space-x-2\">\n                      <Input\n                        id=\"asset_id\"\n                        value={formData.asset_id}\n                        onChange={e => handleInputChange('asset_id', e.target.value)}\n                        placeholder=\"e.g., IT-123456-01\"\n                        required\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={handleGenerateAssetId}\n                        disabled={generatingId}\n                      >\n                        {generatingId ? (\n                          <Loader2 className=\"h-4 w-4 animate-spin\" />\n                        ) : (\n                          <Sparkles className=\"h-4 w-4\" />\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Asset Name *</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={e => handleInputChange('name', e.target.value)}\n                      placeholder=\"e.g., MacBook Pro 16-inch\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={e => handleInputChange('description', e.target.value)}\n                    placeholder=\"Detailed description of the asset...\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"category\">Category *</Label>\n                    <Select\n                      value={formData.category}\n                      onValueChange={value => handleInputChange('category', value)}\n                      required\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select category\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {buildCategoryOptions(categories).map(cat => (\n                          <SelectItem key={cat.id} value={cat.id}>\n                            {'\\u00A0'.repeat(cat.indent * 4)}\n                            {cat.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"status\">Status *</Label>\n                    <Select\n                      value={formData.status}\n                      onValueChange={value => handleInputChange('status', value)}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                        <SelectItem value=\"retired\">Retired</SelectItem>\n                        <SelectItem value=\"lost\">Lost</SelectItem>\n                        <SelectItem value=\"damaged\">Damaged</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"location\">Location</Label>\n                  <Input\n                    id=\"location\"\n                    value={formData.location}\n                    onChange={e => handleInputChange('location', e.target.value)}\n                    placeholder=\"e.g., Office A, Warehouse B, Conference Room\"\n                  />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"details\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"manufacturer\">Manufacturer</Label>\n                    <Input\n                      id=\"manufacturer\"\n                      value={formData.manufacturer}\n                      onChange={e => handleInputChange('manufacturer', e.target.value)}\n                      placeholder=\"e.g., Apple, Dell, HP\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"model\">Model</Label>\n                    <Input\n                      id=\"model\"\n                      value={formData.model}\n                      onChange={e => handleInputChange('model', e.target.value)}\n                      placeholder=\"e.g., MacBook Pro 16-inch, Latitude 5520\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"serial_number\">Serial Number</Label>\n                  <Input\n                    id=\"serial_number\"\n                    value={formData.serial_number}\n                    onChange={e => handleInputChange('serial_number', e.target.value)}\n                    placeholder=\"e.g., C02XYZ123456\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"purchase_date\">Purchase Date</Label>\n                    <Input\n                      id=\"purchase_date\"\n                      type=\"date\"\n                      value={formData.purchase_date}\n                      onChange={e => handleInputChange('purchase_date', e.target.value)}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"warranty_expiry\">Warranty Expiry</Label>\n                    <Input\n                      id=\"warranty_expiry\"\n                      type=\"date\"\n                      value={formData.warranty_expiry}\n                      onChange={e => handleInputChange('warranty_expiry', e.target.value)}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"tags\">Tags</Label>\n                  <Input\n                    id=\"tags\"\n                    value={formData.tags}\n                    onChange={e => handleInputChange('tags', e.target.value)}\n                    placeholder=\"e.g., laptop, development, high-value (comma separated)\"\n                  />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"financial\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"purchase_value\">Purchase Value</Label>\n                    <Input\n                      id=\"purchase_value\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      value={formData.purchase_value}\n                      onChange={e => handleInputChange('purchase_value', e.target.value)}\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"assigned_to\">Assigned To</Label>\n                    <Input\n                      id=\"assigned_to\"\n                      value={formData.assigned_to}\n                      onChange={e => handleInputChange('assigned_to', e.target.value)}\n                      placeholder=\"e.g., john.doe@company.com\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    value={formData.notes}\n                    onChange={e => handleInputChange('notes', e.target.value)}\n                    placeholder=\"Additional notes, maintenance history, or special instructions...\"\n                    rows={4}\n                  />\n                </div>\n                {/* --- Custom Fields Section --- */}\n                {customFieldDefs.length > 0 && (\n                  <div className=\"pt-6 border-t\">\n                    <h3 className=\"font-semibold mb-2\">Custom Fields</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {customFieldDefs.map(field => (\n                        <div key={field.id} className=\"space-y-2\">\n                          <Label htmlFor={`custom-${field.id}`}>\n                            {field.label}\n                            {field.required && ' *'}\n                          </Label>\n                          {field.type === 'text' && (\n                            <Input\n                              id={`custom-${field.id}`}\n                              value={customFields[field.id] || ''}\n                              onChange={e => handleCustomFieldChange(field.id, e.target.value)}\n                              required={field.required}\n                            />\n                          )}\n                          {field.type === 'number' && (\n                            <Input\n                              id={`custom-${field.id}`}\n                              type=\"number\"\n                              value={customFields[field.id] || ''}\n                              onChange={e => handleCustomFieldChange(field.id, e.target.value)}\n                              required={field.required}\n                            />\n                          )}\n                          {field.type === 'date' && (\n                            <Input\n                              id={`custom-${field.id}`}\n                              type=\"date\"\n                              value={customFields[field.id] || ''}\n                              onChange={e => handleCustomFieldChange(field.id, e.target.value)}\n                              required={field.required}\n                            />\n                          )}\n                          {field.type === 'dropdown' && Array.isArray(field.options) && (\n                            <Select\n                              value={customFields[field.id] || ''}\n                              onValueChange={val => handleCustomFieldChange(field.id, val)}\n                              required={field.required}\n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select option\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {field.options.map((opt: string) => (\n                                  <SelectItem key={opt} value={opt}>\n                                    {opt}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                {/* --- End Custom Fields Section --- */}\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"flex justify-end space-x-4 pt-6 border-t\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => router.push('/assets')}\n                disabled={loading}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={loading || profileStatus === 'missing'}>\n                {loading ? (\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                ) : (\n                  <Save className=\"h-4 w-4 mr-2\" />\n                )}\n                Add Asset\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\analytics-charts.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingDown' is defined but never used.","line":21,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4839,4842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4839,4842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":225,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6599,6602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6599,6602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  AreaChart,\n  Area,\n} from 'recharts'\nimport { TrendingUp, TrendingDown, Activity, Users, Package, DollarSign } from 'lucide-react'\n\ninterface AnalyticsChartsProps {\n  data: {\n    overview: {\n      totalAssets: number\n      activeAssets: number\n      assetsCreatedToday: number\n      assetsCreatedThisWeek: number\n      assetsCreatedThisMonth: number\n      totalValue: number\n      qrCoverage: number\n      lastUpdated: string\n    }\n    categories: Array<{ category: string; count: number; percentage: number }>\n    status: Array<{ status: string; count: number; percentage: number }>\n    locations: Array<{ location: string; count: number; percentage: number }>\n    timeSeries: Array<{ date: string; assets: number; scans: number; users: number }>\n    scanData: Array<{ hour: number; scans: number; timestamp: string }>\n  }\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D']\n\nexport function CategoryDistributionChart({\n  data,\n}: {\n  data: AnalyticsChartsProps['data']['categories']\n}) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Package className=\"h-5 w-5 mr-2\" />\n          Asset Categories\n        </CardTitle>\n        <CardDescription>Distribution of assets by category</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <PieChart>\n            <Pie\n              data={data}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              label={({ category, percentage }) => `${category} (${percentage}%)`}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"count\"\n            >\n              {data.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n              ))}\n            </Pie>\n            <Tooltip />\n          </PieChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport function StatusDistributionChart({\n  data,\n}: {\n  data: AnalyticsChartsProps['data']['status']\n}) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Activity className=\"h-5 w-5 mr-2\" />\n          Asset Status\n        </CardTitle>\n        <CardDescription>Distribution of assets by status</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={data}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"status\" />\n            <YAxis />\n            <Tooltip />\n            <Bar dataKey=\"count\" fill=\"#8884d8\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport function LocationDistributionChart({\n  data,\n}: {\n  data: AnalyticsChartsProps['data']['locations']\n}) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Package className=\"h-5 w-5 mr-2\" />\n          Asset Locations\n        </CardTitle>\n        <CardDescription>Distribution of assets by location</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={data} layout=\"horizontal\">\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis type=\"number\" />\n            <YAxis dataKey=\"location\" type=\"category\" width={100} />\n            <Tooltip />\n            <Bar dataKey=\"count\" fill=\"#82CA9D\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport function TimeSeriesChart({ data }: { data: AnalyticsChartsProps['data']['timeSeries'] }) {\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr)\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <TrendingUp className=\"h-5 w-5 mr-2\" />\n          Activity Over Time\n        </CardTitle>\n        <CardDescription>Asset creation and scanning activity over the past week</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <AreaChart data={data}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" tickFormatter={formatDate} />\n            <YAxis />\n            <Tooltip\n              labelFormatter={formatDate}\n              formatter={(value: any, name: string) => [\n                value,\n                name === 'assets'\n                  ? 'Assets Created'\n                  : name === 'scans'\n                    ? 'QR Scans'\n                    : 'Active Users',\n              ]}\n            />\n            <Area\n              type=\"monotone\"\n              dataKey=\"assets\"\n              stackId=\"1\"\n              stroke=\"#8884d8\"\n              fill=\"#8884d8\"\n              fillOpacity={0.6}\n            />\n            <Area\n              type=\"monotone\"\n              dataKey=\"scans\"\n              stackId=\"1\"\n              stroke=\"#82ca9d\"\n              fill=\"#82ca9d\"\n              fillOpacity={0.6}\n            />\n            <Area\n              type=\"monotone\"\n              dataKey=\"users\"\n              stackId=\"1\"\n              stroke=\"#ffc658\"\n              fill=\"#ffc658\"\n              fillOpacity={0.6}\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport function ScanActivityChart({ data }: { data: AnalyticsChartsProps['data']['scanData'] }) {\n  const formatHour = (hour: number) => {\n    return `${hour}:00`\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Activity className=\"h-5 w-5 mr-2\" />\n          QR Scan Activity (24h)\n        </CardTitle>\n        <CardDescription>QR code scanning activity by hour</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={data}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"hour\" tickFormatter={formatHour} />\n            <YAxis />\n            <Tooltip labelFormatter={formatHour} formatter={(value: any) => [value, 'Scans']} />\n            <Line\n              type=\"monotone\"\n              dataKey=\"scans\"\n              stroke=\"#8884d8\"\n              strokeWidth={2}\n              dot={{ fill: '#8884d8', strokeWidth: 2, r: 4 }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport function AnalyticsSummaryCards({\n  overview,\n}: {\n  overview: AnalyticsChartsProps['data']['overview']\n}) {\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value)\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center\">\n            <Package className=\"h-8 w-8 text-blue-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Total Assets</p>\n              <p className=\"text-2xl font-bold\">{overview.totalAssets}</p>\n            </div>\n          </div>\n          <div className=\"mt-2\">\n            <Badge variant=\"outline\">\n              <TrendingUp className=\"h-3 w-3 mr-1\" />+{overview.assetsCreatedThisWeek} this week\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center\">\n            <Activity className=\"h-8 w-8 text-green-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Active Assets</p>\n              <p className=\"text-2xl font-bold\">{overview.activeAssets}</p>\n            </div>\n          </div>\n          <div className=\"mt-2\">\n            <Badge variant=\"default\">\n              {overview.totalAssets > 0\n                ? Math.round((overview.activeAssets / overview.totalAssets) * 100)\n                : 0}\n              % active\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center\">\n            <DollarSign className=\"h-8 w-8 text-purple-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Total Value</p>\n              <p className=\"text-2xl font-bold\">{formatCurrency(overview.totalValue)}</p>\n            </div>\n          </div>\n          <div className=\"mt-2\">\n            <Badge variant=\"outline\">\n              <TrendingUp className=\"h-3 w-3 mr-1\" />\n              Average:{' '}\n              {formatCurrency(\n                overview.totalAssets > 0 ? overview.totalValue / overview.totalAssets : 0\n              )}\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center\">\n            <Users className=\"h-8 w-8 text-orange-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">QR Coverage</p>\n              <p className=\"text-2xl font-bold\">{overview.qrCoverage}%</p>\n            </div>\n          </div>\n          <div className=\"mt-2\">\n            <Badge variant={overview.qrCoverage >= 80 ? 'default' : 'secondary'}>\n              {overview.qrCoverage >= 80 ? 'Excellent' : 'Needs Improvement'}\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\analytics-reports.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileText' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingDown' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Filter' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart3' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":99,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":219,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":219,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":338,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":338,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":454,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":454,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport {\n  Download,\n  FileText,\n  TrendingUp,\n  TrendingDown,\n  Calendar,\n  Filter,\n  BarChart3,\n  DollarSign,\n  Package,\n  Users,\n  Activity,\n  CheckCircle,\n  AlertCircle,\n} from 'lucide-react'\nimport { useAnalyticsExport } from '@/hooks/use-analytics-export'\nimport { useToast } from '@/hooks/use-toast'\n\ninterface AnalyticsReportsProps {\n  data: {\n    overview: {\n      totalAssets: number\n      activeAssets: number\n      assetsCreatedToday: number\n      assetsCreatedThisWeek: number\n      assetsCreatedThisMonth: number\n      totalValue: number\n      qrCoverage: number\n      lastUpdated: string\n    }\n    categories: Array<{ category: string; count: number; percentage: number }>\n    status: Array<{ status: string; count: number; percentage: number }>\n    locations: Array<{ location: string; count: number; percentage: number }>\n    recentActivity: Array<{\n      id: string\n      name: string\n      created_at: string\n      updated_at: string\n      status: string\n    }>\n    userActivity: {\n      totalUsers: number\n      activeUsers: number\n      newUsersThisMonth: number\n    }\n  }\n}\n\nexport function AssetValueReport({ data }: AnalyticsReportsProps) {\n  const { exportOverview, exportCategories, exporting } = useAnalyticsExport()\n  const { toast } = useToast()\n  const [exportFormat, setExportFormat] = useState<'csv' | 'json'>('json')\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value)\n  }\n\n  const averageValue =\n    data.overview.totalAssets > 0 ? data.overview.totalValue / data.overview.totalAssets : 0\n\n  const handleExport = async (type: 'overview' | 'categories') => {\n    try {\n      const result =\n        type === 'overview'\n          ? await exportOverview(exportFormat)\n          : await exportCategories(exportFormat)\n\n      if (result.success) {\n        toast({\n          title: 'Export Successful',\n          description: `${type} data exported as ${exportFormat.toUpperCase()}`,\n        })\n      } else {\n        toast({\n          title: 'Export Failed',\n          description: result.error || 'Failed to export data',\n          variant: 'destructive',\n        })\n      }\n    } catch (error) {\n      toast({\n        title: 'Export Failed',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <DollarSign className=\"h-5 w-5 mr-2\" />\n            Asset Value Report\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <select\n              value={exportFormat}\n              onChange={e => setExportFormat(e.target.value as 'csv' | 'json')}\n              className=\"text-sm border rounded px-2 py-1\"\n            >\n              <option value=\"json\">JSON</option>\n              <option value=\"csv\">CSV</option>\n            </select>\n            <Button\n              onClick={() => handleExport('overview')}\n              disabled={exporting}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Overview\n            </Button>\n            <Button\n              onClick={() => handleExport('categories')}\n              disabled={exporting}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Categories\n            </Button>\n          </div>\n        </CardTitle>\n        <CardDescription>Comprehensive financial overview of your asset portfolio</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {formatCurrency(data.overview.totalValue)}\n            </div>\n            <div className=\"text-sm text-gray-600\">Total Portfolio Value</div>\n          </div>\n          <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-green-600\">{formatCurrency(averageValue)}</div>\n            <div className=\"text-sm text-gray-600\">Average Asset Value</div>\n          </div>\n          <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-purple-600\">{data.overview.totalAssets}</div>\n            <div className=\"text-sm text-gray-600\">Total Assets</div>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <h4 className=\"font-semibold\">Value Distribution by Category</h4>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Category</TableHead>\n                <TableHead>Count</TableHead>\n                <TableHead>Percentage</TableHead>\n                <TableHead>Estimated Value</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.categories.map(category => {\n                const estimatedValue = (category.percentage / 100) * data.overview.totalValue\n                return (\n                  <TableRow key={category.category}>\n                    <TableCell className=\"font-medium\">{category.category}</TableCell>\n                    <TableCell>{category.count}</TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">{category.percentage}%</Badge>\n                    </TableCell>\n                    <TableCell>{formatCurrency(estimatedValue)}</TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport function AssetStatusReport({ data }: AnalyticsReportsProps) {\n  const { exportStatus, exporting } = useAnalyticsExport()\n  const { toast } = useToast()\n  const [exportFormat, setExportFormat] = useState<'csv' | 'json'>('json')\n\n  const handleExport = async () => {\n    try {\n      const result = await exportStatus(exportFormat)\n\n      if (result.success) {\n        toast({\n          title: 'Export Successful',\n          description: `Status data exported as ${exportFormat.toUpperCase()}`,\n        })\n      } else {\n        toast({\n          title: 'Export Failed',\n          description: result.error || 'Failed to export data',\n          variant: 'destructive',\n        })\n      }\n    } catch (error) {\n      toast({\n        title: 'Export Failed',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <Activity className=\"h-5 w-5 mr-2\" />\n            Asset Status Report\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <select\n              value={exportFormat}\n              onChange={e => setExportFormat(e.target.value as 'csv' | 'json')}\n              className=\"text-sm border rounded px-2 py-1\"\n            >\n              <option value=\"json\">JSON</option>\n              <option value=\"csv\">CSV</option>\n            </select>\n            <Button onClick={handleExport} disabled={exporting} variant=\"outline\" size=\"sm\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Report\n            </Button>\n          </div>\n        </CardTitle>\n        <CardDescription>Detailed breakdown of asset status and health</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-green-600\">{data.overview.activeAssets}</div>\n            <div className=\"text-sm text-gray-600\">Active Assets</div>\n            <Badge variant=\"default\" className=\"mt-2\">\n              {data.overview.totalAssets > 0\n                ? Math.round((data.overview.activeAssets / data.overview.totalAssets) * 100)\n                : 0}\n              %\n            </Badge>\n          </div>\n          <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-orange-600\">\n              {data.overview.totalAssets - data.overview.activeAssets}\n            </div>\n            <div className=\"text-sm text-gray-600\">Inactive Assets</div>\n            <Badge variant=\"secondary\" className=\"mt-2\">\n              {data.overview.totalAssets > 0\n                ? Math.round(\n                    ((data.overview.totalAssets - data.overview.activeAssets) /\n                      data.overview.totalAssets) *\n                      100\n                  )\n                : 0}\n              %\n            </Badge>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <h4 className=\"font-semibold\">Status Breakdown</h4>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Status</TableHead>\n                <TableHead>Count</TableHead>\n                <TableHead>Percentage</TableHead>\n                <TableHead>Health</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.status.map(status => (\n                <TableRow key={status.status}>\n                  <TableCell className=\"font-medium\">{status.status}</TableCell>\n                  <TableCell>{status.count}</TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\">{status.percentage}%</Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={status.status === 'active' ? 'default' : 'secondary'}>\n                      {status.status === 'active' ? 'Healthy' : 'Needs Attention'}\n                    </Badge>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport function LocationReport({ data }: AnalyticsReportsProps) {\n  const { exportLocations, exporting } = useAnalyticsExport()\n  const { toast } = useToast()\n  const [exportFormat, setExportFormat] = useState<'csv' | 'json'>('json')\n\n  const handleExport = async () => {\n    try {\n      const result = await exportLocations(exportFormat)\n\n      if (result.success) {\n        toast({\n          title: 'Export Successful',\n          description: `Location data exported as ${exportFormat.toUpperCase()}`,\n        })\n      } else {\n        toast({\n          title: 'Export Failed',\n          description: result.error || 'Failed to export data',\n          variant: 'destructive',\n        })\n      }\n    } catch (error) {\n      toast({\n        title: 'Export Failed',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <Package className=\"h-5 w-5 mr-2\" />\n            Location Distribution Report\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <select\n              value={exportFormat}\n              onChange={e => setExportFormat(e.target.value as 'csv' | 'json')}\n              className=\"text-sm border rounded px-2 py-1\"\n            >\n              <option value=\"json\">JSON</option>\n              <option value=\"csv\">CSV</option>\n            </select>\n            <Button onClick={handleExport} disabled={exporting} variant=\"outline\" size=\"sm\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Report\n            </Button>\n          </div>\n        </CardTitle>\n        <CardDescription>Asset distribution across different locations</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"space-y-4\">\n          <h4 className=\"font-semibold\">Assets by Location</h4>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Location</TableHead>\n                <TableHead>Asset Count</TableHead>\n                <TableHead>Percentage</TableHead>\n                <TableHead>Density</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.locations.map(location => (\n                <TableRow key={location.location}>\n                  <TableCell className=\"font-medium\">{location.location}</TableCell>\n                  <TableCell>{location.count}</TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\">{location.percentage}%</Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={location.percentage > 20 ? 'default' : 'secondary'}>\n                      {location.percentage > 20\n                        ? 'High'\n                        : location.percentage > 10\n                          ? 'Medium'\n                          : 'Low'}\n                    </Badge>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-blue-600\">{data.locations.length}</div>\n            <div className=\"text-sm text-gray-600\">Total Locations</div>\n          </div>\n          <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {Math.max(...data.locations.map(l => l.count))}\n            </div>\n            <div className=\"text-sm text-gray-600\">Most Populated</div>\n          </div>\n          <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {Math.round(\n                data.locations.reduce((sum, l) => sum + l.count, 0) / data.locations.length\n              )}\n            </div>\n            <div className=\"text-sm text-gray-600\">Average per Location</div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport function UserActivityReport({ data }: AnalyticsReportsProps) {\n  const { exportUsers, exportActivity, exporting } = useAnalyticsExport()\n  const { toast } = useToast()\n  const [exportFormat, setExportFormat] = useState<'csv' | 'json'>('json')\n\n  const handleExport = async (type: 'users' | 'activity') => {\n    try {\n      const result =\n        type === 'users' ? await exportUsers(exportFormat) : await exportActivity(exportFormat)\n\n      if (result.success) {\n        toast({\n          title: 'Export Successful',\n          description: `${type} data exported as ${exportFormat.toUpperCase()}`,\n        })\n      } else {\n        toast({\n          title: 'Export Failed',\n          description: result.error || 'Failed to export data',\n          variant: 'destructive',\n        })\n      }\n    } catch (error) {\n      toast({\n        title: 'Export Failed',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <Users className=\"h-5 w-5 mr-2\" />\n            User Activity Report\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <select\n              value={exportFormat}\n              onChange={e => setExportFormat(e.target.value as 'csv' | 'json')}\n              className=\"text-sm border rounded px-2 py-1\"\n            >\n              <option value=\"json\">JSON</option>\n              <option value=\"csv\">CSV</option>\n            </select>\n            <Button\n              onClick={() => handleExport('users')}\n              disabled={exporting}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Users\n            </Button>\n            <Button\n              onClick={() => handleExport('activity')}\n              disabled={exporting}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Activity\n            </Button>\n          </div>\n        </CardTitle>\n        <CardDescription>User engagement and system usage analytics</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-blue-600\">{data.userActivity.totalUsers}</div>\n            <div className=\"text-sm text-gray-600\">Total Users</div>\n          </div>\n          <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-green-600\">{data.userActivity.activeUsers}</div>\n            <div className=\"text-sm text-gray-600\">Active Users</div>\n            <Badge variant=\"default\" className=\"mt-2\">\n              {data.userActivity.totalUsers > 0\n                ? Math.round((data.userActivity.activeUsers / data.userActivity.totalUsers) * 100)\n                : 0}\n              %\n            </Badge>\n          </div>\n          <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {data.userActivity.newUsersThisMonth}\n            </div>\n            <div className=\"text-sm text-gray-600\">New This Month</div>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <h4 className=\"font-semibold\">Recent Activity</h4>\n          <div className=\"max-h-64 overflow-y-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Asset</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Last Updated</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {data.recentActivity.slice(0, 10).map(activity => (\n                  <TableRow key={activity.id}>\n                    <TableCell className=\"font-medium\">{activity.name}</TableCell>\n                    <TableCell>\n                      <Badge variant={activity.status === 'active' ? 'default' : 'secondary'}>\n                        {activity.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{new Date(activity.updated_at).toLocaleDateString()}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\asset-attachments.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isOfficeDoc' is assigned a value but never used.","line":27,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":70,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":115,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":140,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":17},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":219,"column":21,"nodeType":"JSXOpeningElement","endLine":223,"endColumn":23},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":281,"column":15,"nodeType":"JSXOpeningElement","endLine":285,"endColumn":17}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAttachments'. Either include it or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [assetId, fetchAttachments]","fix":{"range":[2612,2621],"text":"[assetId, fetchAttachments]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Input } from '@/components/ui/input'\nimport { Trash, FileText, Loader2, Upload, Eye } from 'lucide-react'\nimport { Dialog, DialogContent } from '@/components/ui/dialog'\n\ninterface Attachment {\n  id: string\n  file_url: string\n  file_name: string\n  type: string\n  size: number\n  uploaded_by: string\n  uploaded_at: string\n  description?: string\n}\n\ninterface AssetAttachmentsProps {\n  assetId: string\n  userRole: string\n}\n\nconst isImage = (type: string) => type.startsWith('image/')\nconst isPdf = (type: string) => type === 'application/pdf'\nconst isOfficeDoc = (type: string) =>\n  [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  ].includes(type)\nconst allowedTypes = [\n  'image/jpeg',\n  'image/png',\n  'image/gif',\n  'image/webp',\n  'application/pdf',\n  'application/msword',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'application/vnd.ms-excel',\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n]\nconst MAX_SIZE = 10 * 1024 * 1024 // 10MB\n\nfunction formatSize(size: number) {\n  if (size > 1024 * 1024) return (size / (1024 * 1024)).toFixed(2) + ' MB'\n  return (size / 1024).toFixed(1) + ' KB'\n}\n\nexport default function AssetAttachments({ assetId, userRole }: AssetAttachmentsProps) {\n  const [attachments, setAttachments] = useState<Attachment[]>([])\n  const [loading, setLoading] = useState(false)\n  const [uploading, setUploading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [success, setSuccess] = useState<string | null>(null)\n  const [description, setDescription] = useState('')\n  const [preview, setPreview] = useState<Attachment | null>(null)\n  const fileInputRef = useRef<HTMLInputElement>(null)\n\n  const fetchAttachments = async () => {\n    setLoading(true)\n    setError(null)\n    try {\n      const res = await fetch(`/api/assets/${assetId}/attachments`)\n      const data = await res.json()\n      if (data.error) setError(data.error)\n      else setAttachments(data.attachments || [])\n    } catch (err) {\n      setError('Failed to load attachments')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchAttachments()\n    // eslint-disable-next-line\n  }, [assetId])\n\n  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (!file) return\n    setError(null)\n    setSuccess(null)\n    // Validate type\n    if (!allowedTypes.includes(file.type)) {\n      setError('File type not allowed. Only images, PDFs, and office docs are supported.')\n      if (fileInputRef.current) fileInputRef.current.value = ''\n      return\n    }\n    // Validate size\n    if (file.size > MAX_SIZE) {\n      setError('File is too large. Max size is 10MB.')\n      if (fileInputRef.current) fileInputRef.current.value = ''\n      return\n    }\n    setUploading(true)\n    try {\n      const formData = new FormData()\n      formData.append('file', file)\n      formData.append('description', description)\n      const res = await fetch(`/api/assets/${assetId}/attachments`, {\n        method: 'POST',\n        body: formData,\n      })\n      const data = await res.json()\n      if (data.error) setError(data.error)\n      else {\n        setSuccess('File uploaded successfully')\n        setDescription('')\n        fetchAttachments()\n      }\n    } catch (err) {\n      setError('Upload failed')\n    } finally {\n      setUploading(false)\n      if (fileInputRef.current) fileInputRef.current.value = ''\n    }\n  }\n\n  const handleDelete = async (id: string) => {\n    if (!window.confirm('Delete this attachment?')) return\n    setLoading(true)\n    setError(null)\n    setSuccess(null)\n    try {\n      const res = await fetch(`/api/assets/${assetId}/attachments`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id }),\n      })\n      const data = await res.json()\n      if (data.error) setError(data.error)\n      else {\n        setSuccess('Attachment deleted')\n        fetchAttachments()\n      }\n    } catch (err) {\n      setError('Delete failed')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Upload className=\"h-5 w-5 mr-2\" />\n          Attachments\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        {success && (\n          <Alert>\n            <AlertDescription>{success}</AlertDescription>\n          </Alert>\n        )}\n        <form\n          className=\"flex flex-col sm:flex-row items-center gap-2\"\n          onSubmit={e => e.preventDefault()}\n        >\n          <Input\n            ref={fileInputRef}\n            type=\"file\"\n            accept={allowedTypes.join(',')}\n            onChange={handleFileChange}\n            disabled={uploading}\n            className=\"max-w-xs\"\n          />\n          <Input\n            type=\"text\"\n            placeholder=\"Description (optional)\"\n            value={description}\n            onChange={e => setDescription(e.target.value)}\n            disabled={uploading}\n            className=\"max-w-xs\"\n          />\n          <Button\n            onClick={() => fileInputRef.current?.click()}\n            disabled={uploading}\n            variant=\"outline\"\n            type=\"button\"\n          >\n            {uploading ? (\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <Upload className=\"h-4 w-4\" />\n            )}\n            {uploading ? 'Uploading...' : 'Upload'}\n          </Button>\n        </form>\n        <div className=\"grid grid-cols-1 gap-4\">\n          {loading ? (\n            <div className=\"flex items-center gap-2 text-gray-500\">\n              <Loader2 className=\"h-4 w-4 animate-spin\" /> Loading attachments...\n            </div>\n          ) : attachments.length === 0 ? (\n            <div className=\"text-gray-500\">No attachments yet.</div>\n          ) : (\n            attachments.map(att => (\n              <div\n                key={att.id}\n                className=\"flex items-center gap-4 border rounded p-2 bg-gray-50 flex-wrap\"\n              >\n                {isImage(att.type) ? (\n                  <button\n                    type=\"button\"\n                    onClick={() => setPreview(att)}\n                    className=\"focus:outline-none\"\n                  >\n                    <img\n                      src={att.file_url}\n                      alt={att.file_name}\n                      className=\"w-16 h-16 object-cover rounded border\"\n                    />\n                  </button>\n                ) : isPdf(att.type) ? (\n                  <button\n                    type=\"button\"\n                    onClick={() => setPreview(att)}\n                    className=\"focus:outline-none\"\n                  >\n                    <FileText className=\"h-10 w-10 text-red-600\" />\n                  </button>\n                ) : (\n                  <a href={att.file_url} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <FileText className=\"h-10 w-10 text-gray-600\" />\n                  </a>\n                )}\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"font-medium truncate\">{att.file_name}</div>\n                  <div className=\"text-xs text-gray-500\">{formatSize(att.size)}</div>\n                  <div className=\"text-xs text-gray-400\">\n                    {new Date(att.uploaded_at).toLocaleString()}\n                  </div>\n                  {att.description && (\n                    <div className=\"text-xs text-gray-700 italic mt-1\">{att.description}</div>\n                  )}\n                </div>\n                <Button asChild variant=\"outline\" size=\"sm\">\n                  <a href={att.file_url} download target=\"_blank\" rel=\"noopener noreferrer\">\n                    Download\n                  </a>\n                </Button>\n                {['admin', 'manager'].includes(userRole) && (\n                  <Button\n                    variant=\"destructive\"\n                    size=\"icon\"\n                    onClick={() => handleDelete(att.id)}\n                    title=\"Delete\"\n                  >\n                    <Trash className=\"h-4 w-4\" />\n                  </Button>\n                )}\n                {(isImage(att.type) || isPdf(att.type)) && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => setPreview(att)}\n                    title=\"Preview\"\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            ))\n          )}\n        </div>\n        {/* Preview Modal */}\n        <Dialog open={!!preview} onOpenChange={() => setPreview(null)}>\n          <DialogContent className=\"max-w-lg w-full p-0 bg-white\">\n            {preview && isImage(preview.type) && (\n              <img\n                src={preview.file_url}\n                alt={preview.file_name}\n                className=\"w-full h-auto object-contain rounded\"\n              />\n            )}\n            {preview && isPdf(preview.type) && (\n              <iframe\n                src={preview.file_url}\n                title={preview.file_name}\n                className=\"w-full h-[70vh] rounded\"\n                frameBorder={0}\n              />\n            )}\n            {preview && !isImage(preview.type) && !isPdf(preview.type) && (\n              <div className=\"p-6 text-center\">No preview available for this file type.</div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </CardContent>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\asset-dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Trash2' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used.","line":28,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[935,938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[935,938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1683,1686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1683,1686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2723,2726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2723,2726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2838,2841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2838,2841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2952,2955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2952,2955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5531,5534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5531,5534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":204,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":204,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { createClient } from '@/lib/supabase/client'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Package,\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  Search,\n  Plus,\n  AlertTriangle,\n  Edit,\n  Trash2,\n} from 'lucide-react'\nimport Link from 'next/link'\nimport { Input } from '@/components/ui/input'\nimport { useToast } from '@/components/ui/use-toast'\nimport {\n  Dialog,\n  DialogContent,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog'\nimport AssetGeofenceEvents from './asset-geofence-events'\n\nexport default function AssetDashboard() {\n  const [assets, setAssets] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [stats, setStats] = useState({\n    total: 0,\n    active: 0,\n    maintenance: 0,\n    retired: 0,\n  })\n\n  const { toast } = useToast()\n  // Predictive Maintenance State\n  const [selectedAssetId, setSelectedAssetId] = useState<string>('')\n  const [prediction, setPrediction] = useState<null | {\n    will_fail_soon: boolean\n    probability: number\n  }>(null)\n  const [predicting, setPredicting] = useState(false)\n  const [anomalyResults, setAnomalyResults] = useState<null | number[]>(null)\n  const [anomalyLoading, setAnomalyLoading] = useState(false)\n  const [deleteDialog, setDeleteDialog] = useState<{ open: boolean; asset: any | null }>({\n    open: false,\n    asset: null,\n  })\n\n  useEffect(() => {\n    const fetchAssets = async () => {\n      try {\n        setError(null)\n        console.log('AssetDashboard: Fetching assets')\n\n        // Create client with explicit error handling\n        let supabase\n        try {\n          supabase = createClient()\n          console.log('AssetDashboard: Supabase client created successfully')\n        } catch (err) {\n          console.error('AssetDashboard: Error creating Supabase client:', err)\n          setError('Failed to initialize database connection')\n          setLoading(false)\n          return\n        }\n\n        // Fetch assets with error handling\n        try {\n          const { data, error } = await supabase\n            .from('assets')\n            .select('*')\n            .order('created_at', { ascending: false })\n            .limit(5)\n\n          if (error) throw error\n\n          setAssets(data || [])\n\n          // Calculate stats\n          if (data) {\n            const activeAssets = data.filter((asset: any) => asset.status === 'active').length\n            const maintenanceAssets = data.filter(\n              (asset: any) => asset.status === 'maintenance'\n            ).length\n            const retiredAssets = data.filter((asset: any) => asset.status === 'retired').length\n\n            setStats({\n              total: data.length,\n              active: activeAssets,\n              maintenance: maintenanceAssets,\n              retired: retiredAssets,\n            })\n          }\n        } catch (error) {\n          console.error('Error fetching assets:', error)\n          setError('Failed to load assets')\n        }\n      } catch (error) {\n        console.error('Error in fetchAssets:', error)\n        setError('An unexpected error occurred')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchAssets()\n  }, [])\n\n  // Helper to get asset features by id\n  const getAssetFeatures = (id: string) => {\n    const asset = assets.find(a => a.id === id)\n    if (!asset) return null\n    return {\n      usage_hours: asset.usage_hours || 0,\n      last_maintenance_days: asset.last_maintenance_days || 0,\n      failures: asset.failures || 0,\n      age_years: asset.age_years || 0,\n    }\n  }\n\n  const handlePredict = async () => {\n    if (!selectedAssetId) return\n    const features = getAssetFeatures(selectedAssetId)\n    if (!features) {\n      toast({\n        title: 'Asset data missing',\n        description: 'Cannot find features for selected asset.',\n        variant: 'destructive',\n      })\n      return\n    }\n    setPredicting(true)\n    setPrediction(null)\n    try {\n      const res = await fetch('/api/ml/predict-maintenance', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(features),\n      })\n      const data = await res.json()\n      setPrediction(data)\n    } catch (err) {\n      toast({ title: 'Prediction failed', description: String(err), variant: 'destructive' })\n    } finally {\n      setPredicting(false)\n    }\n  }\n\n  const handleAnomalyDetection = async () => {\n    setAnomalyLoading(true)\n    setAnomalyResults(null)\n    try {\n      const featuresList = assets.map(asset => [\n        asset.usage_hours || 0,\n        asset.last_maintenance_days || 0,\n        asset.failures || 0,\n        asset.age_years || 0,\n      ])\n      const res = await fetch('/api/ml/anomaly-insights', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ features_list: featuresList }),\n      })\n      const data = await res.json()\n      setAnomalyResults(data.anomalies)\n    } catch (err) {\n      toast({ title: 'Anomaly detection failed', description: String(err), variant: 'destructive' })\n    } finally {\n      setAnomalyLoading(false)\n    }\n  }\n\n  const handleDelete = async (asset: any) => {\n    setDeleteDialog({ open: false, asset: null })\n    try {\n      const res = await fetch(`/api/assets/${asset.id}`, { method: 'DELETE' })\n      const data = await res.json()\n      if (!res.ok) {\n        toast({\n          title: 'Delete Failed',\n          description: data.error || 'Failed to delete asset',\n          variant: 'destructive',\n        })\n      } else {\n        toast({ title: 'Asset Deleted', description: `${asset.name} has been deleted.` })\n        setAssets(prev => prev.filter(a => a.id !== asset.id))\n      }\n    } catch (e) {\n      toast({\n        title: 'Delete Failed',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'active':\n        return (\n          <Badge\n            variant=\"outline\"\n            className=\"bg-green-50 text-green-700 border-green-200 flex items-center gap-1\"\n          >\n            <CheckCircle className=\"h-3 w-3\" />\n            Active\n          </Badge>\n        )\n      case 'maintenance':\n        return (\n          <Badge\n            variant=\"outline\"\n            className=\"bg-amber-50 text-amber-700 border-amber-200 flex items-center gap-1\"\n          >\n            <Clock className=\"h-3 w-3\" />\n            Maintenance\n          </Badge>\n        )\n      case 'retired':\n        return (\n          <Badge\n            variant=\"outline\"\n            className=\"bg-gray-50 text-gray-700 border-gray-200 flex items-center gap-1\"\n          >\n            <AlertCircle className=\"h-3 w-3\" />\n            Retired\n          </Badge>\n        )\n      default:\n        return (\n          <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 border-blue-200\">\n            {status}\n          </Badge>\n        )\n    }\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-red-600\">Error</CardTitle>\n          <CardDescription>{error}</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Button onClick={() => window.location.reload()}>Retry</Button>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{loading ? '...' : stats.total}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{loading ? '...' : stats.active}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">In Maintenance</CardTitle>\n            <Clock className=\"h-4 w-4 text-amber-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{loading ? '...' : stats.maintenance}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Retired</CardTitle>\n            <AlertCircle className=\"h-4 w-4 text-gray-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{loading ? '...' : stats.retired}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Predictive Maintenance Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Predictive Maintenance (AI)</CardTitle>\n          <CardDescription>\n            Select an asset to predict if it will require maintenance soon, powered by AI/ML.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col md:flex-row md:items-end gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Asset</label>\n              <select\n                className=\"border rounded px-3 py-2 w-full\"\n                value={selectedAssetId}\n                onChange={e => {\n                  setSelectedAssetId(e.target.value)\n                  setPrediction(null)\n                }}\n              >\n                <option value=\"\">Select asset...</option>\n                {assets.map(asset => (\n                  <option key={asset.id} value={asset.id}>\n                    {asset.name} (ID: {asset.id})\n                  </option>\n                ))}\n              </select>\n            </div>\n            <Button\n              onClick={handlePredict}\n              disabled={!selectedAssetId || predicting}\n              className=\"mt-4 md:mt-0\"\n            >\n              {predicting ? 'Predicting...' : 'Predict Maintenance'}\n            </Button>\n          </div>\n          {prediction && (\n            <div className=\"mt-4\">\n              <div className=\"flex items-center gap-2\">\n                {prediction.will_fail_soon ? (\n                  <AlertCircle className=\"text-red-600\" />\n                ) : (\n                  <CheckCircle className=\"text-green-600\" />\n                )}\n                <span className=\"font-semibold\">\n                  {prediction.will_fail_soon\n                    ? 'Maintenance Needed Soon'\n                    : 'No Immediate Maintenance Needed'}\n                </span>\n                <span className=\"ml-2 text-sm text-gray-500\">\n                  (Confidence: {(prediction.probability * 100).toFixed(1)}%)\n                </span>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Anomaly Detection Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Anomaly Detection (AI)</CardTitle>\n          <CardDescription>\n            Run anomaly detection on your recent assets to flag unusual patterns.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Button onClick={handleAnomalyDetection} disabled={anomalyLoading || assets.length === 0}>\n            {anomalyLoading ? 'Detecting...' : 'Run Anomaly Detection'}\n          </Button>\n          {anomalyResults && (\n            <div className=\"mt-4\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Asset</TableHead>\n                    <TableHead>Status</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {assets.map((asset, idx) => (\n                    <TableRow key={asset.id}>\n                      <TableCell>\n                        <Link\n                          href={`/asset/${asset.id}`}\n                          className=\"hover:text-blue-600 hover:underline\"\n                        >\n                          {asset.name}\n                        </Link>\n                      </TableCell>\n                      <TableCell>\n                        {anomalyResults[idx] === -1 ? (\n                          <span className=\"flex items-center text-red-600\">\n                            <AlertTriangle className=\"h-4 w-4 mr-1\" /> Anomaly\n                          </span>\n                        ) : (\n                          <span className=\"flex items-center text-green-600\">\n                            <CheckCircle className=\"h-4 w-4 mr-1\" /> Normal\n                          </span>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Recent Assets */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <div>\n            <CardTitle>Recent Assets</CardTitle>\n            <CardDescription>Your most recently added assets</CardDescription>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" asChild>\n              <Link href=\"/assets\">\n                <Search className=\"h-4 w-4 mr-2\" />\n                View All\n              </Link>\n            </Button>\n            <Button size=\"sm\" asChild>\n              <Link href=\"/add-asset\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Asset\n              </Link>\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : assets.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Package className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n              <h3 className=\"text-lg font-medium text-gray-900\">No assets found</h3>\n              <p className=\"text-gray-500 mt-1\">Get started by adding your first asset.</p>\n              <Button className=\"mt-4\" asChild>\n                <Link href=\"/add-asset\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Asset\n                </Link>\n              </Button>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Category</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Location</TableHead>\n                    <TableHead className=\"text-right\">Value</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {assets.map(asset => (\n                    <TableRow key={asset.id}>\n                      <TableCell className=\"font-medium\">\n                        <Link\n                          href={`/asset/${asset.id}`}\n                          className=\"hover:text-blue-600 hover:underline\"\n                        >\n                          {asset.name}\n                        </Link>\n                        <Button asChild size=\"sm\" variant=\"outline\" className=\"ml-2\">\n                          <Link href={`/asset/${asset.id}/edit`}>\n                            <Edit className=\"h-3 w-3\" />\n                          </Link>\n                        </Button>\n                        {/* Geofence Events */}\n                        <div className=\"mt-2\">\n                          <AssetGeofenceEvents assetId={asset.id} />\n                        </div>\n                      </TableCell>\n                      <TableCell>{asset.category || 'Uncategorized'}</TableCell>\n                      <TableCell>{getStatusBadge(asset.status)}</TableCell>\n                      <TableCell>{asset.location || 'Unknown'}</TableCell>\n                      <TableCell className=\"text-right\">\n                        {asset.value ? `$${Number.parseFloat(asset.value).toFixed(2)}` : 'N/A'}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      <Dialog\n        open={deleteDialog.open}\n        onOpenChange={open => setDeleteDialog({ open, asset: deleteDialog.asset })}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Asset</DialogTitle>\n          </DialogHeader>\n          <div>\n            Are you sure you want to delete <b>{deleteDialog.asset?.name}</b>?\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"destructive\"\n              onClick={() => deleteDialog.asset && handleDelete(deleteDialog.asset)}\n            >\n              Delete\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\asset-geofence-events.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[275,278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[275,278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":12,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react'\nimport { createClient } from '@/lib/supabase/client'\nimport { AlertCircle, MapPin } from 'lucide-react'\n\nexport default function AssetGeofenceEvents({ assetId }: { assetId: string }) {\n  const [events, setEvents] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  useEffect(() => {\n    async function fetchEvents() {\n      setLoading(true)\n      const supabase = createClient()\n      const { data, error } = await supabase\n        .from('geofence_events')\n        .select('*, geofence:geofence_id(name)')\n        .eq('asset_id', assetId)\n        .order('timestamp', { ascending: false })\n      setEvents(data || [])\n      setLoading(false)\n    }\n    fetchEvents()\n  }, [assetId])\n  if (loading) return <div>Loading geofence events...</div>\n  if (!events.length) return <div>No geofence events for this asset.</div>\n  return (\n    <div className=\"space-y-2\">\n      {events.map(ev => (\n        <div key={ev.id} className=\"flex items-center gap-2 text-sm\">\n          <MapPin className=\"h-4 w-4 text-blue-600\" />\n          <span>\n            <b>{ev.event_type === 'entry' ? 'Entered' : 'Exited'}</b> zone{' '}\n            <b>{ev.geofence?.name || ev.geofence_id}</b> at{' '}\n            {new Date(ev.timestamp).toLocaleString()}\n          </span>\n        </div>\n      ))}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\asset-geofence-status.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[407,410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[407,410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { AlertTriangle, CheckCircle } from 'lucide-react'\n\nexport default function AssetGeofenceStatus({\n  lat,\n  lng,\n}: {\n  lat: number | null\n  lng: number | null\n}) {\n  const [status, setStatus] = useState<'inside' | 'outside' | 'unknown'>('unknown')\n  const [zones, setZones] = useState<any[]>([])\n  useEffect(() => {\n    if (lat && lng) {\n      fetch('/api/geofence/check', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ lat, lng }),\n      })\n        .then(res => res.json())\n        .then(data => {\n          if (data.matches && data.matches.length > 0) {\n            setStatus('inside')\n            setZones(data.matches)\n          } else {\n            setStatus('outside')\n            setZones([])\n          }\n        })\n    } else {\n      setStatus('unknown')\n      setZones([])\n    }\n  }, [lat, lng])\n  if (status === 'unknown') return null\n  return status === 'inside' ? (\n    <Alert className=\"border-green-200 bg-green-50\">\n      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n      <AlertDescription>\n        Asset is <strong>inside</strong> geofence zone{zones.length > 1 ? 's' : ''}:{' '}\n        {zones.map(z => z.name).join(', ')}\n      </AlertDescription>\n    </Alert>\n  ) : (\n    <Alert variant=\"destructive\">\n      <AlertTriangle className=\"h-4 w-4\" />\n      <AlertDescription>\n        Asset is <strong>outside</strong> all geofence zones!\n      </AlertDescription>\n    </Alert>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\asset-interactive-map.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'map'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [lat, lng, map]","fix":{"range":[652,662],"text":"[lat, lng, map]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'center' is assigned a value but never used.","line":57,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\nimport { MapContainer, TileLayer, Marker, Popup, Polygon, useMap } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\n\ninterface Geofence {\n  id: string\n  name: string\n  polygon: { coordinates: [number, number][][] }\n  description?: string\n}\n\ninterface AssetInteractiveMapProps {\n  assetLat: number | null\n  assetLng: number | null\n  geofences: Geofence[]\n  onMove?: (lat: number, lng: number) => void\n}\n\nfunction AssetMarker({\n  lat,\n  lng,\n  onMove,\n}: {\n  lat: number\n  lng: number\n  onMove?: (lat: number, lng: number) => void\n}) {\n  const map = useMap()\n  React.useEffect(() => {\n    map.setView([lat, lng], 16)\n  }, [lat, lng])\n  return (\n    <Marker\n      position={[lat, lng]}\n      eventHandlers={\n        onMove\n          ? {\n              dragend: (e: { target: { getLatLng: () => { lat: number; lng: number } } }) => {\n                const { lat, lng } = e.target.getLatLng()\n                onMove(lat, lng)\n              },\n            }\n          : undefined\n      }\n    >\n      <Popup>\n        Asset Location\n        <br />\n        {lat}, {lng}\n      </Popup>\n    </Marker>\n  )\n}\n\nfunction AssetInteractiveMap({ assetLat, assetLng, geofences, onMove }: AssetInteractiveMapProps) {\n  // Default to a world view if no asset location\n  const center: [number, number] = assetLat && assetLng ? [assetLat, assetLng] : [0, 0]\n  return (\n    <div style={{ height: 300, width: '100%' }}>\n      <MapContainer style={{ height: '100%', width: '100%' }}>\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n        {assetLat && assetLng && <AssetMarker lat={assetLat} lng={assetLng} onMove={onMove} />}\n        {geofences.map(zone => (\n          <Polygon\n            key={zone.id}\n            positions={zone.polygon.coordinates[0].map(([lng, lat]) => [lat, lng])}\n          >\n            <Popup>\n              <strong>{zone.name}</strong>\n              <br />\n              {zone.description}\n            </Popup>\n          </Polygon>\n        ))}\n      </MapContainer>\n    </div>\n  )\n}\n\nexport default AssetInteractiveMap\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\asset-location-history.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\asset-management.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Edit' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Eye' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QrCode' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'undoData' is assigned a value but never used.","line":81,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setUndoData' is assigned a value but never used.","line":81,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2163,2166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2163,2166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2282,2285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2282,2285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2389,2392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2389,2392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2468,2471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2468,2471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2651,2654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2651,2654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3914,3917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3914,3917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3965,3968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3965,3968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":209,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":209,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":236,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":236,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7448,7451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7448,7451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":256,"column":13,"nodeType":"BlockStatement","messageId":"unexpected","endLine":256,"endColumn":15,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[7735,7735],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":284,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":284,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8882,8885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8882,8885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":304,"column":13,"nodeType":"BlockStatement","messageId":"unexpected","endLine":304,"endColumn":15,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[9187,9187],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":336,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":336,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":540,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":540,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17249,17252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17249,17252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":806,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":806,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28311,28314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28311,28314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog'\nimport {\n  Package,\n  Search,\n  Plus,\n  Filter,\n  Edit,\n  Eye,\n  QrCode,\n  Loader2,\n  CheckCircle,\n  Settings,\n  Trash2,\n  Pencil,\n} from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\nimport { Asset } from '@/lib/asset-actions'\nimport Link from 'next/link'\nimport { ToastAction } from '@/components/ui/toast'\n\ninterface AssetManagementProps {\n  assets: Asset[]\n  loading?: boolean\n  onRefresh?: () => void\n}\n\nexport default function AssetManagement({\n  assets,\n  loading = false,\n  onRefresh,\n}: AssetManagementProps) {\n  const [selectedAssets, setSelectedAssets] = useState<string[]>([])\n  const [searchTerm, setSearchTerm] = useState('')\n  const [filters, setFilters] = useState({ status: 'all', category: 'all' })\n  const [showFilters, setShowFilters] = useState(false)\n  const [bulkOperation, setBulkOperation] = useState({\n    type: 'update_status' as const,\n    value: '',\n    open: false,\n  })\n  const [processing, setProcessing] = useState(false)\n  const [deleteDialog, setDeleteDialog] = useState<{ open: boolean; asset: Asset | null }>({\n    open: false,\n    asset: null,\n  })\n  const [bulkDeleteDialog, setBulkDeleteDialog] = useState(false)\n  const [bulkUpdateDialog, setBulkUpdateDialog] = useState(false)\n  const [bulkField, setBulkField] = useState<'status' | 'category' | 'location'>('status')\n  const [bulkValue, setBulkValue] = useState('')\n  const [undoData, setUndoData] = useState<{ asset_ids: string[]; prevValues: any[] } | null>(null)\n  const [undoBulkUpdate, setUndoBulkUpdate] = useState<{\n    asset_ids: string[]\n    prevValues: any[]\n    field: string\n  } | null>(null)\n  const [undoBulkDelete, setUndoBulkDelete] = useState<{ assets: any[] } | null>(null)\n  const [customFieldDefs, setCustomFieldDefs] = useState<any[]>([])\n  const [customFieldValues, setCustomFieldValues] = useState<{\n    [assetId: string]: { [fieldId: string]: string }\n  }>({})\n  const [categories, setCategories] = useState<any[]>([])\n  const { toast } = useToast()\n\n  useEffect(() => {\n    async function fetchCustomFields() {\n      const res = await fetch('/api/custom-fields')\n      const json = await res.json()\n      setCustomFieldDefs(json.data || [])\n    }\n    fetchCustomFields()\n  }, [])\n\n  useEffect(() => {\n    async function fetchCategories() {\n      const res = await fetch('/api/categories')\n      const json = await res.json()\n      setCategories(json.data || [])\n    }\n    fetchCategories()\n  }, [])\n\n  useEffect(() => {\n    async function fetchAllCustomFieldValues() {\n      if (!assets || assets.length === 0) return\n      const all: { [assetId: string]: { [fieldId: string]: string } } = {}\n      await Promise.all(\n        assets.map(async asset => {\n          const res = await fetch(`/api/assets/${asset.id}/custom-fields`)\n          const json = await res.json()\n          all[asset.id!] = {}\n          if (json.data) {\n            for (const cf of json.data) {\n              all[asset.id!][cf.field_id] = cf.value\n            }\n          }\n        })\n      )\n      setCustomFieldValues(all)\n    }\n    fetchAllCustomFieldValues()\n  }, [assets])\n\n  // Helper to build category options (flat with indentation for subcategories)\n  const buildCategoryOptions = (list: any[], parentId: string | null = null, level = 0): any[] =>\n    list\n      .filter(c => (c.parent_id || '') === (parentId || ''))\n      .flatMap(c => [{ ...c, indent: level }, ...buildCategoryOptions(list, c.id, level + 1)])\n\n  const filteredAssets = assets.filter(asset => {\n    const matchesSearch =\n      asset.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.category.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.location?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.asset_id.toLowerCase().includes(searchTerm.toLowerCase())\n\n    const matchesStatus = filters.status === 'all' || asset.status === filters.status\n    const matchesCategory = filters.category === 'all' || asset.category === filters.category\n\n    return matchesSearch && matchesStatus && matchesCategory\n  })\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedAssets(filteredAssets.map(asset => asset.id!))\n    } else {\n      setSelectedAssets([])\n    }\n  }\n\n  const handleSelectAsset = (assetId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedAssets(prev => [...prev, assetId])\n    } else {\n      setSelectedAssets(prev => prev.filter(id => id !== assetId))\n    }\n  }\n\n  const handleBulkOperation = async () => {\n    if (selectedAssets.length === 0) {\n      toast({\n        title: 'No Assets Selected',\n        description: 'Please select at least one asset to perform bulk operations.',\n        variant: 'destructive',\n      })\n      return\n    }\n\n    setProcessing(true)\n\n    try {\n      const response = await fetch('/api/assets/bulk', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          asset_ids: selectedAssets,\n          operation: bulkOperation.type,\n          value: bulkOperation.value,\n        }),\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        toast({\n          title: 'Bulk Update Successful',\n          description: `${result.updatedCount} assets updated successfully.`,\n        })\n        setSelectedAssets([])\n        onRefresh?.()\n      } else {\n        toast({\n          title: 'Bulk Update Failed',\n          description: result.error || 'Failed to update assets',\n          variant: 'destructive',\n        })\n      }\n    } catch (error) {\n      toast({\n        title: 'Operation Failed',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    } finally {\n      setProcessing(false)\n      setBulkOperation(prev => ({ ...prev, open: false, value: '' }))\n    }\n  }\n\n  const handleDelete = async (asset: Asset) => {\n    setDeleteDialog({ open: false, asset: null })\n    try {\n      const res = await fetch(`/api/assets/${asset.id}`, { method: 'DELETE' })\n      const data = await res.json()\n      if (!res.ok) {\n        toast({\n          title: 'Delete Failed',\n          description: data.error || 'Failed to delete asset',\n          variant: 'destructive',\n        })\n      } else {\n        toast({ title: 'Asset Deleted', description: `${asset.name} has been deleted.` })\n        onRefresh?.()\n      }\n    } catch (e) {\n      toast({\n        title: 'Delete Failed',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  const handleBulkDelete = async () => {\n    setBulkDeleteDialog(false)\n    // Fetch asset data for undo\n    let prevAssets: any[] = []\n    try {\n      const resPrev = await fetch('/api/assets/bulk-fetch', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ asset_ids: selectedAssets }),\n      })\n      prevAssets = await resPrev.json()\n    } catch {}\n    try {\n      const res = await fetch('/api/assets/bulk', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ asset_ids: selectedAssets }),\n      })\n      const data = await res.json()\n      if (!res.ok) {\n        toast({\n          title: 'Bulk Delete Failed',\n          description: data.error || 'Failed to delete assets',\n          variant: 'destructive',\n        })\n      } else {\n        setUndoBulkDelete({ assets: prevAssets })\n        toast({\n          title: 'Assets Deleted',\n          description: `${selectedAssets.length} assets deleted.`,\n          action: (\n            <ToastAction altText=\"Undo\" onClick={handleUndoBulkDelete}>\n              Undo\n            </ToastAction>\n          ),\n        })\n        setSelectedAssets([])\n        onRefresh?.()\n      }\n    } catch (e) {\n      toast({\n        title: 'Bulk Delete Failed',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  const handleBulkUpdate = async () => {\n    setBulkUpdateDialog(false)\n    // Fetch previous values for undo\n    let prevValues: any[] = []\n    try {\n      const resPrev = await fetch('/api/assets/bulk-fetch', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ asset_ids: selectedAssets, field: bulkField }),\n      })\n      prevValues = await resPrev.json()\n    } catch {}\n    try {\n      const res = await fetch('/api/assets/bulk', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          asset_ids: selectedAssets,\n          operation: `update_${bulkField}`,\n          value: bulkValue,\n        }),\n      })\n      const data = await res.json()\n      if (!res.ok) {\n        toast({\n          title: 'Bulk Update Failed',\n          description: data.error || 'Failed to update assets',\n          variant: 'destructive',\n        })\n      } else {\n        setUndoBulkUpdate({ asset_ids: selectedAssets, prevValues, field: bulkField })\n        toast({\n          title: 'Assets Updated',\n          description: `${selectedAssets.length} assets updated.`,\n          action: (\n            <ToastAction altText=\"Undo\" onClick={handleUndoBulkUpdate}>\n              Undo\n            </ToastAction>\n          ),\n        })\n        setSelectedAssets([])\n        onRefresh?.()\n      }\n    } catch (e) {\n      toast({\n        title: 'Bulk Update Failed',\n        description: 'An unexpected error occurred',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  const handleUndoBulkUpdate = async () => {\n    if (!undoBulkUpdate) return\n    try {\n      await fetch('/api/assets/bulk', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          asset_ids: undoBulkUpdate.asset_ids,\n          operation: `update_${undoBulkUpdate.field}`,\n          value: null, // Will be set per asset below\n          prevValues: undoBulkUpdate.prevValues,\n        }),\n      })\n      toast({ title: 'Undo Successful', description: 'Bulk update has been undone.' })\n      onRefresh?.()\n    } catch {\n      toast({\n        title: 'Undo Failed',\n        description: 'Could not undo bulk update.',\n        variant: 'destructive',\n      })\n    } finally {\n      setUndoBulkUpdate(null)\n    }\n  }\n\n  const handleUndoBulkDelete = async () => {\n    if (!undoBulkDelete) return\n    try {\n      await fetch('/api/assets/bulk-restore', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ assets: undoBulkDelete.assets }),\n      })\n      toast({ title: 'Undo Successful', description: 'Bulk delete has been undone.' })\n      onRefresh?.()\n    } catch {\n      toast({\n        title: 'Undo Failed',\n        description: 'Could not undo bulk delete.',\n        variant: 'destructive',\n      })\n    } finally {\n      setUndoBulkDelete(null)\n    }\n  }\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      active: { color: 'bg-green-50 text-green-700 border-green-200', label: 'Active' },\n      maintenance: { color: 'bg-amber-50 text-amber-700 border-amber-200', label: 'Maintenance' },\n      retired: { color: 'bg-gray-50 text-gray-700 border-gray-200', label: 'Retired' },\n      lost: { color: 'bg-red-50 text-red-700 border-red-200', label: 'Lost' },\n      damaged: { color: 'bg-orange-50 text-orange-700 border-orange-200', label: 'Damaged' },\n    }\n\n    const config = statusConfig[status as keyof typeof statusConfig] || {\n      color: 'bg-blue-50 text-blue-700 border-blue-200',\n      label: status,\n    }\n\n    return (\n      <Badge variant=\"outline\" className={config.color}>\n        {config.label}\n      </Badge>\n    )\n  }\n\n  const formatCurrency = (value?: number | null) => {\n    if (!value) return 'N/A'\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value)\n  }\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return 'N/A'\n    return new Date(dateString).toLocaleDateString()\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Asset Management</h2>\n          <p className=\"text-gray-600\">Manage your asset inventory with advanced features</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button asChild>\n            <Link href=\"/add-asset\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Asset\n            </Link>\n          </Button>\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Search className=\"h-5 w-5 mr-2\" />\n              Search & Filters\n            </div>\n            <Button variant=\"outline\" size=\"sm\" onClick={() => setShowFilters(!showFilters)}>\n              <Filter className=\"h-4 w-4 mr-2\" />\n              {showFilters ? 'Hide' : 'Show'} Filters\n            </Button>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"Search assets by name, description, category, location, or ID...\"\n                value={searchTerm}\n                onChange={e => setSearchTerm(e.target.value)}\n              />\n            </div>\n          </div>\n\n          {showFilters && (\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 pt-4 border-t\">\n              <div>\n                <label className=\"text-sm font-medium\">Status</label>\n                <Select\n                  value={filters.status}\n                  onValueChange={value => setFilters(prev => ({ ...prev, status: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Statuses</SelectItem>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                    <SelectItem value=\"retired\">Retired</SelectItem>\n                    <SelectItem value=\"lost\">Lost</SelectItem>\n                    <SelectItem value=\"damaged\">Damaged</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium\">Category</label>\n                <Select\n                  value={filters.category}\n                  onValueChange={value => setFilters(prev => ({ ...prev, category: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All Categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {buildCategoryOptions(categories).map(cat => (\n                      <SelectItem key={cat.id} value={cat.id}>\n                        {'\\u00A0'.repeat(cat.indent * 4)}\n                        {cat.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex items-end space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setFilters({ status: 'all', category: 'all' })}\n                  size=\"sm\"\n                >\n                  Clear Filters\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Bulk Operations */}\n      {selectedAssets.length > 0 && (\n        <Card className=\"border-blue-200 bg-blue-50\">\n          <CardHeader>\n            <CardTitle className=\"text-blue-800\">\n              Bulk Operations ({selectedAssets.length} assets selected)\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-4\">\n              <Select\n                value={bulkOperation.type}\n                onValueChange={(value: any) => setBulkOperation(prev => ({ ...prev, type: value }))}\n              >\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"update_status\">Update Status</SelectItem>\n                  <SelectItem value=\"update_location\">Update Location</SelectItem>\n                  <SelectItem value=\"update_category\">Update Category</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Input\n                placeholder={\n                  bulkOperation.type === 'update_status'\n                    ? 'Enter new status'\n                    : bulkOperation.type === 'update_location'\n                      ? 'Enter new location'\n                      : 'Enter new category'\n                }\n                value={bulkOperation.value}\n                onChange={e => setBulkOperation(prev => ({ ...prev, value: e.target.value }))}\n                className=\"w-64\"\n              />\n\n              <Dialog\n                open={bulkOperation.open}\n                onOpenChange={open => setBulkOperation(prev => ({ ...prev, open }))}\n              >\n                <DialogTrigger asChild>\n                  <Button disabled={processing || !bulkOperation.value}>\n                    {processing ? (\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    ) : (\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                    )}\n                    Update Selected\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Confirm Update</DialogTitle>\n                    <DialogDescription>\n                      Are you sure you want to update {selectedAssets.length} selected assets?\n                    </DialogDescription>\n                  </DialogHeader>\n                  <DialogFooter>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setBulkOperation(prev => ({ ...prev, open: false }))}\n                    >\n                      Cancel\n                    </Button>\n                    <Button onClick={handleBulkOperation} disabled={processing}>\n                      {processing ? (\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      ) : (\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                      )}\n                      Confirm\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n\n              <Button variant=\"outline\" onClick={() => setSelectedAssets([])} size=\"sm\">\n                Clear Selection\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {selectedAssets.length > 0 && (\n        <div className=\"flex items-center mb-2 space-x-2\">\n          <Button variant=\"destructive\" size=\"sm\" onClick={() => setBulkDeleteDialog(true)}>\n            <Trash2 className=\"h-4 w-4 mr-1\" /> Delete Selected ({selectedAssets.length})\n          </Button>\n          <Button variant=\"secondary\" size=\"sm\" onClick={() => setBulkUpdateDialog(true)}>\n            <Pencil className=\"h-4 w-4 mr-1\" /> Bulk Update\n          </Button>\n        </div>\n      )}\n\n      {/* Assets Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Package className=\"h-5 w-5 mr-2\" />\n              Assets ({filteredAssets.length})\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                checked={\n                  selectedAssets.length === filteredAssets.length && filteredAssets.length > 0\n                }\n                onCheckedChange={handleSelectAll}\n              />\n              <span className=\"text-sm text-gray-500\">Select All</span>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <Loader2 className=\"h-8 w-8 animate-spin text-blue-600\" />\n              <span className=\"ml-2\">Loading assets...</span>\n            </div>\n          ) : filteredAssets.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No assets found</h3>\n              <p className=\"text-gray-600 mb-4\">\n                {searchTerm || Object.keys(filters).length > 0\n                  ? 'Try adjusting your search or filters'\n                  : 'Get started by adding your first asset'}\n              </p>\n              {!searchTerm && Object.keys(filters).length === 0 && (\n                <Button asChild>\n                  <Link href=\"/add-asset\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Your First Asset\n                  </Link>\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-12\"></TableHead>\n                    <TableHead>Asset ID</TableHead>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Category</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Location</TableHead>\n                    <TableHead>Value</TableHead>\n                    {/* Custom Field Columns */}\n                    {customFieldDefs.slice(0, 2).map(field => (\n                      <TableHead key={field.id}>{field.label}</TableHead>\n                    ))}\n                    <TableHead>Created</TableHead>\n                    <TableHead className=\"w-32\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredAssets.map(asset => (\n                    <TableRow key={asset.id}>\n                      <TableCell>\n                        <Checkbox\n                          checked={selectedAssets.includes(asset.id!)}\n                          onCheckedChange={checked =>\n                            handleSelectAsset(asset.id!, checked as boolean)\n                          }\n                        />\n                      </TableCell>\n                      <TableCell className=\"font-mono text-sm\">{asset.asset_id}</TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{asset.name}</div>\n                          {asset.description && (\n                            <div className=\"text-sm text-gray-500 truncate max-w-xs\">\n                              {asset.description}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {categories.find(c => c.id === asset.category)?.name || asset.category}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{getStatusBadge(asset.status)}</TableCell>\n                      <TableCell>{asset.location}</TableCell>\n                      <TableCell>{formatCurrency(asset.purchase_value)}</TableCell>\n                      {/* Custom Field Values */}\n                      {customFieldDefs.slice(0, 2).map(field => (\n                        <TableCell key={field.id}>\n                          {customFieldValues[asset.id!] &&\n                          customFieldValues[asset.id!][field.id] ? (\n                            customFieldValues[asset.id!][field.id]\n                          ) : (\n                            <span className=\"text-gray-400\">-</span>\n                          )}\n                        </TableCell>\n                      ))}\n                      <TableCell>{formatDate(asset.created_at)}</TableCell>\n                      <TableCell>\n                        <Button asChild size=\"sm\" variant=\"outline\">\n                          <Link href={`/asset/${asset.id}`}>View</Link>\n                        </Button>\n                        <Button asChild size=\"sm\" variant=\"outline\" className=\"ml-2\">\n                          <Link href={`/asset/${asset.id}/edit`}>Edit</Link>\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          className=\"ml-2\"\n                          onClick={() => handleDelete(asset)}\n                        >\n                          Delete\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog\n        open={deleteDialog.open}\n        onOpenChange={open => setDeleteDialog({ open, asset: deleteDialog.asset })}\n      >\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Asset</DialogTitle>\n          </DialogHeader>\n          <div>\n            Are you sure you want to delete <b>{deleteDialog.asset?.name}</b>?\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"destructive\"\n              onClick={() => deleteDialog.asset && handleDelete(deleteDialog.asset)}\n            >\n              Delete\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Bulk Delete Confirmation Dialog */}\n      <Dialog open={bulkDeleteDialog} onOpenChange={setBulkDeleteDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Selected Assets</DialogTitle>\n          </DialogHeader>\n          <div>\n            Are you sure you want to delete <b>{selectedAssets.length}</b> selected assets? This\n            action cannot be undone.\n          </div>\n          <DialogFooter>\n            <Button variant=\"destructive\" onClick={handleBulkDelete}>\n              Delete\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={bulkUpdateDialog} onOpenChange={setBulkUpdateDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Bulk Update Assets</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Field to Update</label>\n              <select\n                className=\"w-full border rounded p-2\"\n                value={bulkField}\n                onChange={e => setBulkField(e.target.value as any)}\n              >\n                <option value=\"status\">Status</option>\n                <option value=\"category\">Category</option>\n                <option value=\"location\">Location</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">New Value</label>\n              <input\n                className=\"w-full border rounded p-2\"\n                value={bulkValue}\n                onChange={e => setBulkValue(e.target.value)}\n                placeholder={`Enter new ${bulkField}`}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button onClick={handleBulkUpdate}>Update</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\asset-reverse-geocode.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\auth-debug.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[664,667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[664,667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[681,684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[681,684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { createClient } from '@/lib/supabase/client'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Badge } from '@/components/ui/badge'\nimport { CheckCircle, XCircle, AlertTriangle, RefreshCw, ExternalLink } from 'lucide-react'\n\nexport default function AuthDebug() {\n  const [status, setStatus] = useState<{\n    supabase: 'loading' | 'connected' | 'error'\n    auth: 'loading' | 'authenticated' | 'unauthenticated' | 'error'\n    user: any\n    session: any\n    error: string | null\n  }>({\n    supabase: 'loading',\n    auth: 'loading',\n    user: null,\n    session: null,\n    error: null,\n  })\n\n  const [loading, setLoading] = useState(false)\n\n  const checkStatus = async () => {\n    setLoading(true)\n    try {\n      const supabase = createClient()\n\n      // Check Supabase connection\n      const { data: sessionData, error: sessionError } = await supabase.auth.getSession()\n\n      if (sessionError) {\n        setStatus({\n          supabase: 'error',\n          auth: 'error',\n          user: null,\n          session: null,\n          error: sessionError.message,\n        })\n        return\n      }\n\n      setStatus({\n        supabase: 'connected',\n        auth: sessionData.session ? 'authenticated' : 'unauthenticated',\n        user: sessionData.session?.user || null,\n        session: sessionData.session,\n        error: null,\n      })\n    } catch (error) {\n      setStatus({\n        supabase: 'error',\n        auth: 'error',\n        user: null,\n        session: null,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const testSignIn = async () => {\n    setLoading(true)\n    try {\n      const supabase = createClient()\n\n      const { data, error } = await supabase.auth.signInWithOAuth({\n        provider: 'github',\n        options: {\n          redirectTo: `${window.location.origin}/auth/callback`,\n        },\n      })\n\n      if (error) {\n        setStatus(prev => ({ ...prev, error: error.message }))\n      } else {\n        console.log('OAuth initiated successfully:', data)\n      }\n    } catch (error) {\n      setStatus(prev => ({\n        ...prev,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }))\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const testServerAuth = async () => {\n    setLoading(true)\n    try {\n      const response = await fetch('/api/test-auth', {\n        method: 'GET',\n        credentials: 'include',\n      })\n\n      const result = await response.json()\n      console.log('Server auth test result:', result)\n\n      if (result.error) {\n        setStatus(prev => ({ ...prev, error: result.error }))\n      } else {\n        setStatus(prev => ({\n          ...prev,\n          supabase: 'connected',\n          auth: result.user ? 'authenticated' : 'unauthenticated',\n          user: result.user,\n        }))\n      }\n    } catch (error) {\n      console.error('Server auth test error:', error)\n      setStatus(prev => ({\n        ...prev,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }))\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    checkStatus()\n  }, [])\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold\">Authentication Debug</h1>\n        <Button onClick={checkStatus} disabled={loading} variant=\"outline\">\n          <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n          Refresh\n        </Button>\n      </div>\n\n      {/* Environment Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">Environment Configuration</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">Supabase URL:</span>\n              <Badge variant={process.env.NEXT_PUBLIC_SUPABASE_URL ? 'default' : 'destructive'}>\n                {process.env.NEXT_PUBLIC_SUPABASE_URL ? '✅ Set' : '❌ Missing'}\n              </Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">Supabase Anon Key:</span>\n              <Badge\n                variant={process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'default' : 'destructive'}\n              >\n                {process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '✅ Set' : '❌ Missing'}\n              </Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">App URL:</span>\n              <Badge variant=\"outline\">\n                {process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}\n              </Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">Environment:</span>\n              <Badge variant=\"outline\">{process.env.NODE_ENV || 'development'}</Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Connection Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            Connection Status\n            {status.supabase === 'connected' && <CheckCircle className=\"h-5 w-5 text-green-500\" />}\n            {status.supabase === 'error' && <XCircle className=\"h-5 w-5 text-red-500\" />}\n            {status.supabase === 'loading' && <RefreshCw className=\"h-5 w-5 animate-spin\" />}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium\">Supabase Connection:</span>\n            <Badge\n              variant={\n                status.supabase === 'connected'\n                  ? 'default'\n                  : status.supabase === 'error'\n                    ? 'destructive'\n                    : 'secondary'\n              }\n            >\n              {status.supabase === 'connected' && '✅ Connected'}\n              {status.supabase === 'error' && '❌ Error'}\n              {status.supabase === 'loading' && '⏳ Loading'}\n            </Badge>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium\">Authentication Status:</span>\n            <Badge\n              variant={\n                status.auth === 'authenticated'\n                  ? 'default'\n                  : status.auth === 'error'\n                    ? 'destructive'\n                    : 'secondary'\n              }\n            >\n              {status.auth === 'authenticated' && '✅ Authenticated'}\n              {status.auth === 'unauthenticated' && '❌ Not Authenticated'}\n              {status.auth === 'error' && '❌ Error'}\n              {status.auth === 'loading' && '⏳ Loading'}\n            </Badge>\n          </div>\n\n          {status.user && (\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium mb-2\">User Info:</h4>\n              <pre className=\"text-xs overflow-auto\">{JSON.stringify(status.user, null, 2)}</pre>\n            </div>\n          )}\n\n          {status.error && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>{status.error}</AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Test Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Test Actions</CardTitle>\n          <CardDescription>Test authentication functionality</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-wrap gap-4\">\n            <Button onClick={testSignIn} disabled={loading} variant=\"outline\">\n              Test GitHub Sign In\n            </Button>\n            <Button onClick={testServerAuth} disabled={loading} variant=\"outline\">\n              Test Server Auth\n            </Button>\n            <Button asChild variant=\"outline\">\n              <a href=\"/login\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\n                Open Login Page\n              </a>\n            </Button>\n            <Button asChild variant=\"outline\">\n              <a href=\"/signup\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\n                Open Signup Page\n              </a>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\auth\\auth-provider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createClient' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport type React from 'react'\nimport { createContext, useContext, useEffect, useState } from 'react'\nimport type { User, Session } from '@supabase/supabase-js'\nimport { DEFAULT_ROLE_PERMISSIONS, Role, Permission } from '@/lib/rbac/types'\nimport { createClient } from '@/lib/supabase/client'\n\ntype AuthContextType = {\n  user: User | null\n  loading: boolean\n  error: string | null\n  signOut: () => Promise<void>\n  retry: () => void\n  role: Role | null\n  permissions: Permission[]\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  loading: true,\n  error: null,\n  signOut: async () => {},\n  retry: () => {},\n  role: null,\n  permissions: [],\n})\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n\nexport const usePermissions = () => {\n  const { permissions, role } = useAuth()\n  const hasPermission = (perm: Permission) => permissions.includes(perm)\n  const hasAnyPermission = (perms: Permission[]) => perms.some(p => permissions.includes(p))\n  return { permissions, role, hasPermission, hasAnyPermission }\n}\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [mounted, setMounted] = useState(false)\n  const [retryCount, setRetryCount] = useState(0)\n  const [role, setRole] = useState<Role | null>(null)\n  const [permissions, setPermissions] = useState<Permission[]>([])\n\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  const retry = () => {\n    setRetryCount(prev => prev + 1)\n    setError(null)\n    setLoading(true)\n  }\n\n  useEffect(() => {\n    if (!mounted) return\n\n    let isMounted = true\n\n    const initializeAuth = async () => {\n      try {\n        setError(null)\n\n        // Dynamic import to prevent SSR issues\n        const { createClient, checkSupabaseConnection } = await import('@/lib/supabase/client')\n\n        // First check if Supabase is properly configured\n        const healthCheck = await checkSupabaseConnection()\n        if (!healthCheck.connected) {\n          throw new Error(`Supabase connection failed: ${healthCheck.error}`)\n        }\n\n        const supabase = createClient()\n\n        // Get initial session\n        const {\n          data: { session },\n          error: sessionError,\n        } = await supabase.auth.getSession()\n\n        if (sessionError) {\n          console.error('Session error:', sessionError)\n          throw new Error(`Authentication error: ${sessionError.message}`)\n        }\n\n        if (isMounted) {\n          setUser(session?.user ?? null)\n          setLoading(false)\n          setError(null)\n        }\n\n        // Fetch user profile for role/permissions\n        if (session?.user) {\n          const { data: profile, error: profileError } = await supabase\n            .from('profiles')\n            .select('role')\n            .eq('id', session.user.id)\n            .single()\n          if (!profileError && profile?.role) {\n            setRole(profile.role as Role)\n            setPermissions(DEFAULT_ROLE_PERMISSIONS[profile.role as Role] || [])\n          } else {\n            setRole(null)\n            setPermissions([])\n          }\n        } else {\n          setRole(null)\n          setPermissions([])\n        }\n\n        // Listen for auth changes\n        const {\n          data: { subscription },\n        } = supabase.auth.onAuthStateChange(async (event: string, session: Session | null) => {\n          console.log('Auth state changed:', event, session?.user?.id)\n          if (isMounted) {\n            setUser(session?.user ?? null)\n            setLoading(false)\n            setError(null)\n          }\n          // Refetch profile/permissions on auth change\n          if (session?.user) {\n            const { data: profile, error: profileError } = await supabase\n              .from('profiles')\n              .select('role')\n              .eq('id', session.user.id)\n              .single()\n            if (!profileError && profile?.role) {\n              setRole(profile.role as Role)\n              setPermissions(DEFAULT_ROLE_PERMISSIONS[profile.role as Role] || [])\n            } else {\n              setRole(null)\n              setPermissions([])\n            }\n          } else {\n            setRole(null)\n            setPermissions([])\n          }\n        })\n\n        return () => {\n          subscription.unsubscribe()\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error)\n        if (isMounted) {\n          setError(error instanceof Error ? error.message : 'Authentication initialization failed')\n          setLoading(false)\n        }\n      }\n    }\n\n    const cleanup = initializeAuth()\n\n    return () => {\n      isMounted = false\n      cleanup?.then(unsubscribe => unsubscribe?.())\n    }\n  }, [mounted, retryCount])\n\n  const signOut = async () => {\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      const { error } = await supabase.auth.signOut()\n\n      if (error) {\n        console.error('Sign out error:', error)\n        setError(`Sign out failed: ${error.message}`)\n      }\n    } catch (error) {\n      console.error('Sign out error:', error)\n      setError('Sign out failed')\n    }\n  }\n\n  // Don't render anything until mounted to prevent hydration issues\n  if (!mounted) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Initializing AssetTracker Pro...</p>\n        </div>\n      </div>\n    )\n  }\n\n  // Show error state with retry option\n  if (error && !loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-red-50 via-white to-orange-50\">\n        <div className=\"text-center max-w-md mx-auto p-6\">\n          <div className=\"bg-red-100 rounded-full h-16 w-16 flex items-center justify-center mx-auto mb-4\">\n            <svg\n              className=\"h-8 w-8 text-red-600\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"\n              />\n            </svg>\n          </div>\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Connection Error</h2>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <button\n            onClick={retry}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors\"\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, loading, error, signOut, retry, role, permissions }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\auth\\auth-wrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\auth\\login-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLocalhost' is assigned a value but never used.","line":27,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used.","line":35,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":64,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":111,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":141,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4635,4705],"text":"\n                      Update your GitHub OAuth app&apos;s Homepage URL to:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4635,4705],"text":"\n                      Update your GitHub OAuth app&lsquo;s Homepage URL to:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4635,4705],"text":"\n                      Update your GitHub OAuth app&#39;s Homepage URL to:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4635,4705],"text":"\n                      Update your GitHub OAuth app&rsquo;s Homepage URL to:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":195,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6793,6817],"text":"Fix &quot;Site Blocked\" Error"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6793,6817],"text":"Fix &ldquo;Site Blocked\" Error"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6793,6817],"text":"Fix &#34;Site Blocked\" Error"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6793,6817],"text":"Fix &rdquo;Site Blocked\" Error"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":195,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6793,6817],"text":"Fix \"Site Blocked&quot; Error"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6793,6817],"text":"Fix \"Site Blocked&ldquo; Error"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6793,6817],"text":"Fix \"Site Blocked&#34; Error"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6793,6817],"text":"Fix \"Site Blocked&rdquo; Error"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport type React from 'react'\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { createClient } from '@/lib/supabase/client'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Eye, EyeOff, Mail, Lock, Github, AlertTriangle, ExternalLink } from 'lucide-react'\nimport Link from 'next/link'\n\nexport default function LoginForm() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [showPassword, setShowPassword] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [githubLoading, setGithubLoading] = useState(false)\n  const [error, setError] = useState('')\n  const router = useRouter()\n  const supabase = createClient()\n\n  const isV0Preview =\n    typeof window !== 'undefined' && window.location.hostname.includes('vusercontent.net')\n  const isLocalhost = typeof window !== 'undefined' && window.location.hostname === 'localhost'\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })\n\n      if (error) {\n        if (error.message.includes('Email not confirmed')) {\n          setError('Please check your email and click the confirmation link before signing in.')\n        } else {\n          setError(error.message)\n        }\n      } else {\n        // Sync session for server-side\n        const {\n          data: { session },\n        } = await supabase.auth.getSession()\n        if (session) {\n          await fetch('/api/auth/set-session', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              access_token: session.access_token,\n              refresh_token: session.refresh_token,\n            }),\n          })\n        }\n        router.push('/')\n        router.refresh()\n      }\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleGithubLogin = async () => {\n    try {\n      setGithubLoading(true)\n      setError('')\n\n      console.log('GitHub OAuth redirect URL:', `${window.location.origin}/auth/callback`)\n\n      const { data, error } = await supabase.auth.signInWithOAuth({\n        provider: 'github',\n        options: {\n          redirectTo: `${window.location.origin}/auth/callback`,\n        },\n      })\n\n      console.log('GitHub auth response:', { data, error })\n\n      if (error) {\n        console.error('GitHub auth error:', error)\n        setError(`GitHub authentication error: ${error.message}`)\n      }\n    } catch (err) {\n      console.error('Unexpected GitHub auth error:', err)\n      setError('Failed to authenticate with GitHub. Please try again.')\n    } finally {\n      setGithubLoading(false)\n    }\n  }\n\n  const handleGoogleLogin = async () => {\n    try {\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: `${window.location.origin}/auth/callback`,\n        },\n      })\n\n      if (error) {\n        setError(error.message)\n      }\n    } catch (err) {\n      setError('Failed to authenticate with Google')\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Sign in to AssetTracker</CardTitle>\n          <CardDescription className=\"text-center\">\n            Enter your email and password to access your account\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Environment Notice */}\n          {isV0Preview && (\n            <Alert>\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <div className=\"space-y-2\">\n                  <p>\n                    <strong>v0 Preview Environment Detected</strong>\n                  </p>\n                  <p className=\"text-sm\">\n                    GitHub OAuth needs to be configured for this preview URL. For full\n                    functionality, please:\n                  </p>\n                  <ol className=\"text-sm list-decimal list-inside space-y-1 ml-2\">\n                    <li>\n                      Update your GitHub OAuth app's Homepage URL to:{' '}\n                      <code className=\"bg-gray-100 px-1 rounded text-xs\">\n                        {window.location.origin}\n                      </code>\n                    </li>\n                    <li>Or download and run locally at http://localhost:3000</li>\n                  </ol>\n                  <div className=\"mt-2\">\n                    <a\n                      href=\"https://github.com/settings/developers\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"inline-flex items-center text-blue-600 hover:text-blue-800 text-sm\"\n                    >\n                      Update GitHub OAuth Settings <ExternalLink className=\"h-3 w-3 ml-1\" />\n                    </a>\n                  </div>\n                </div>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                {error}\n                {error.includes('Email not confirmed') && (\n                  <div className=\"mt-2\">\n                    <Link\n                      href=\"/auth/resend\"\n                      className=\"text-blue-600 hover:text-blue-500 underline\"\n                    >\n                      Resend confirmation email\n                    </Link>\n                  </div>\n                )}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {/* Quick access to troubleshooting */}\n          {error && error.includes('blocked') && (\n            <div className=\"text-center\">\n              <Button asChild variant=\"outline\" size=\"sm\">\n                <Link href=\"/auth/oauth-status\">Advanced OAuth Troubleshooting</Link>\n              </Button>\n            </div>\n          )}\n\n          {/* Quick access to troubleshooting */}\n          {error && error.includes('blocked') && (\n            <div className=\"text-center\">\n              <Button asChild variant=\"outline\" size=\"sm\">\n                <Link href=\"/auth/blocked\">Fix \"Site Blocked\" Error</Link>\n              </Button>\n            </div>\n          )}\n\n          {/* Social Login Buttons */}\n          <div className=\"space-y-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleGithubLogin}\n              className=\"w-full\"\n              disabled={githubLoading}\n            >\n              {githubLoading ? (\n                <div className=\"w-4 h-4 mr-2 animate-spin rounded-full border-2 border-gray-300 border-t-gray-600\" />\n              ) : (\n                <Github className=\"w-4 h-4 mr-2\" />\n              )}\n              Continue with GitHub\n              {isV0Preview && <span className=\"ml-2 text-xs text-orange-600\">(Needs setup)</span>}\n            </Button>\n\n            <Button type=\"button\" variant=\"outline\" onClick={handleGoogleLogin} className=\"w-full\">\n              <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                <path\n                  fill=\"currentColor\"\n                  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                />\n              </svg>\n              Continue with Google\n            </Button>\n          </div>\n\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-white px-2 text-gray-500\">Or continue with email</span>\n            </div>\n          </div>\n\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <label htmlFor=\"email\" className=\"text-sm font-medium\">\n                Email\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={email}\n                  onChange={e => setEmail(e.target.value)}\n                  className=\"pl-10\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"password\" className=\"text-sm font-medium\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  placeholder=\"Enter your password\"\n                  value={password}\n                  onChange={e => setPassword(e.target.value)}\n                  className=\"pl-10 pr-10\"\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <Link href=\"/auth/resend\" className=\"text-sm text-blue-600 hover:text-blue-500\">\n                Resend confirmation\n              </Link>\n            </div>\n\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading ? 'Signing in...' : 'Sign in'}\n            </Button>\n          </form>\n\n          <div className=\"text-center text-sm\">\n            {\"Don't have an account? \"}\n            <Link href=\"/signup\" className=\"text-blue-600 hover:text-blue-500 font-medium\">\n              Sign up\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\auth\\modern-signup-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":44,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":15},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":126,"column":13,"nodeType":"JSXOpeningElement","endLine":126,"endColumn":100},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":155,"column":21,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5007,5087],"text":"\n                  We&apos;ve sent a confirmation link to your email\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5007,5087],"text":"\n                  We&lsquo;ve sent a confirmation link to your email\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5007,5087],"text":"\n                  We&#39;ve sent a confirmation link to your email\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5007,5087],"text":"\n                  We&rsquo;ve sent a confirmation link to your email\n                "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":170,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5783,5854],"text":"After confirming your email, you&apos;ll be able to sign in to your account."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5783,5854],"text":"After confirming your email, you&lsquo;ll be able to sign in to your account."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5783,5854],"text":"After confirming your email, you&#39;ll be able to sign in to your account."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5783,5854],"text":"After confirming your email, you&rsquo;ll be able to sign in to your account."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":172,"column":31,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5914,5988],"text":"\n                    If you don&apos;t see the email, check your spam folder or"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5914,5988],"text":"\n                    If you don&lsquo;t see the email, check your spam folder or"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5914,5988],"text":"\n                    If you don&#39;t see the email, check your spam folder or"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5914,5988],"text":"\n                    If you don&rsquo;t see the email, check your spam folder or"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":252,"column":25,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9514,9607],"text":"\n                      We&apos;ll never post anything without your permission\n                    "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9514,9607],"text":"\n                      We&lsquo;ll never post anything without your permission\n                    "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9514,9607],"text":"\n                      We&#39;ll never post anything without your permission\n                    "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9514,9607],"text":"\n                      We&rsquo;ll never post anything without your permission\n                    "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport type React from 'react'\n\nimport { useState } from 'react'\nimport Link from 'next/link'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Separator } from '@/components/ui/separator'\nimport {\n  Package,\n  AlertCircle,\n  Loader2,\n  Github,\n  Mail,\n  ArrowRight,\n  CheckCircle,\n  Building2,\n} from 'lucide-react'\nimport { motion } from 'framer-motion'\nimport { useBranding } from '@/components/branding-provider'\n\nexport default function SignupForm() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [name, setName] = useState('')\n  const [orgName, setOrgName] = useState('')\n  const [error, setError] = useState<string | null>(null)\n  const [loading, setLoading] = useState(false)\n  const [githubLoading, setGithubLoading] = useState(false)\n  const [success, setSuccess] = useState(false)\n  const router = useRouter()\n  const branding = useBranding()\n\n  const handleSignup = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(null)\n\n    if (!orgName.trim()) {\n      setError('Organization name is required')\n      setLoading(false)\n      return\n    }\n\n    try {\n      // Dynamically import to prevent SSR issues\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n\n      const { error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            full_name: name,\n            org_name: orgName,\n          },\n          emailRedirectTo: `${window.location.origin}/auth/callback`,\n        },\n      })\n\n      if (error) {\n        setError(error.message)\n      } else {\n        setSuccess(true)\n      }\n    } catch (err) {\n      console.error('Signup error:', err)\n      setError('An unexpected error occurred. Please try again.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleGithubSignup = async () => {\n    if (!orgName.trim()) {\n      setError('Organization name is required')\n      return\n    }\n    setGithubLoading(true)\n    setError(null)\n\n    try {\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      // Store org name in a cookie before GitHub OAuth\n      document.cookie = `signup_org_name=${encodeURIComponent(orgName)}; path=/; max-age=300`\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'github',\n        options: {\n          redirectTo: `${window.location.origin}/auth/callback`,\n        },\n      })\n      if (error) {\n        setError(error.message)\n        document.cookie = 'signup_org_name=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT'\n      }\n    } catch (err) {\n      console.error('GitHub signup error:', err)\n      setError('Failed to authenticate with GitHub. Please try again.')\n      document.cookie = 'signup_org_name=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT'\n    } finally {\n      setGithubLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n      {/* Header */}\n      <header className=\"w-full py-6 px-4 sm:px-6 lg:px-8 flex justify-center\">\n        <Link href=\"/\" className=\"flex items-center space-x-2\">\n          {branding?.logoUrl && (\n            <img src={branding.logoUrl} alt=\"Logo\" className=\"h-12 w-12 rounded bg-white border\" />\n          )}\n          <span className=\"text-2xl font-bold text-gray-900\">\n            {branding?.companyName || 'AssetTracker Pro'}\n          </span>\n        </Link>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"flex-1 flex items-center justify-center p-4 sm:p-6 lg:p-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"w-full max-w-md\"\n        >\n          {success ? (\n            <Card className=\"border-0 shadow-xl bg-white/90 backdrop-blur-sm\">\n              <CardHeader className=\"space-y-1\">\n                <motion.div\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  transition={{ delay: 0.2, type: 'spring', stiffness: 200 }}\n                  className=\"w-16 h-16 rounded-full bg-green-100 flex items-center justify-center mx-auto mb-4\"\n                >\n                  <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                </motion.div>\n                <CardTitle className=\"text-2xl font-bold text-center\">Check your email</CardTitle>\n                <CardDescription className=\"text-center\">\n                  We've sent a confirmation link to your email\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Alert className=\"bg-blue-50 border-blue-200\">\n                  <div className=\"flex items-start\">\n                    <Mail className=\"h-5 w-5 text-blue-600 mt-0.5 mr-3\" />\n                    <AlertDescription className=\"text-blue-800\">\n                      Please check <span className=\"font-medium\">{email}</span> and click the\n                      confirmation link to complete your registration.\n                    </AlertDescription>\n                  </div>\n                </Alert>\n\n                <div className=\"text-sm text-gray-600 space-y-2\">\n                  <p>After confirming your email, you'll be able to sign in to your account.</p>\n                  <p className=\"text-xs text-gray-500\">\n                    If you don't see the email, check your spam folder or{' '}\n                    <Link\n                      href=\"/auth/resend\"\n                      className=\"text-blue-600 hover:text-blue-800 font-medium\"\n                    >\n                      request a new link\n                    </Link>\n                    .\n                  </p>\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button asChild variant=\"outline\" className=\"w-full\">\n                  <Link href=\"/login\">\n                    Go to Sign In <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Link>\n                </Button>\n              </CardFooter>\n            </Card>\n          ) : (\n            <Card className=\"border-0 shadow-xl bg-white/90 backdrop-blur-sm\">\n              <CardHeader className=\"space-y-1\">\n                <div className=\"flex justify-center\">\n                  <div className=\"w-16 h-16 rounded-full bg-blue-100 flex items-center justify-center\">\n                    <Package className=\"h-8 w-8 text-blue-600\" />\n                  </div>\n                </div>\n                <CardTitle className=\"text-2xl font-bold text-center\">\n                  Create your account\n                </CardTitle>\n                <CardDescription className=\"text-center\">\n                  Join AssetTracker Pro to start managing your assets efficiently\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {error && (\n                  <Alert variant=\"destructive\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>{error}</AlertDescription>\n                  </Alert>\n                )}\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"orgName\">Organization Name</Label>\n                  <div className=\"relative\">\n                    <Building2 className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"orgName\"\n                      type=\"text\"\n                      placeholder=\"Enter your organization name\"\n                      value={orgName}\n                      onChange={e => setOrgName(e.target.value)}\n                      className=\"pl-10\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <Tabs defaultValue=\"github\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-2\">\n                    <TabsTrigger value=\"github\">GitHub</TabsTrigger>\n                    <TabsTrigger value=\"email\">Email</TabsTrigger>\n                  </TabsList>\n                  <TabsContent value=\"github\" className=\"space-y-4 pt-4\">\n                    <div className=\"text-sm text-center text-gray-600 mb-2\">\n                      Sign up quickly using your GitHub account\n                    </div>\n                    <Button\n                      onClick={handleGithubSignup}\n                      className=\"w-full bg-gray-900 hover:bg-gray-800 text-white\"\n                      disabled={githubLoading}\n                    >\n                      {githubLoading ? (\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      ) : (\n                        <Github className=\"mr-2 h-4 w-4\" />\n                      )}\n                      Continue with GitHub\n                    </Button>\n                    <div className=\"text-xs text-center text-gray-500\">\n                      We'll never post anything without your permission\n                    </div>\n                  </TabsContent>\n                  <TabsContent value=\"email\" className=\"space-y-4 pt-4\">\n                    <form onSubmit={handleSignup} className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"name\">Full Name</Label>\n                        <Input\n                          id=\"name\"\n                          placeholder=\"Enter your name\"\n                          value={name}\n                          onChange={e => setName(e.target.value)}\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          placeholder=\"you@example.com\"\n                          value={email}\n                          onChange={e => setEmail(e.target.value)}\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <Label htmlFor=\"password\">Password</Label>\n                          <Link\n                            href=\"/auth/reset-password\"\n                            className=\"text-xs text-blue-600 hover:text-blue-800 font-medium\"\n                          >\n                            Forgot password?\n                          </Link>\n                        </div>\n                        <Input\n                          id=\"password\"\n                          type=\"password\"\n                          placeholder=\"Create a secure password\"\n                          value={password}\n                          onChange={e => setPassword(e.target.value)}\n                          required\n                          minLength={8}\n                        />\n                        <p className=\"text-xs text-gray-500\">Must be at least 8 characters</p>\n                      </div>\n                      <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                        {loading ? (\n                          <>\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Creating account...\n                          </>\n                        ) : (\n                          'Create account'\n                        )}\n                      </Button>\n                    </form>\n                  </TabsContent>\n                </Tabs>\n\n                <div className=\"mt-4 text-center text-sm\">\n                  <p className=\"text-gray-600\">\n                    By signing up, you agree to our{' '}\n                    <Link href=\"/terms\" className=\"text-blue-600 hover:text-blue-800 font-medium\">\n                      Terms of Service\n                    </Link>{' '}\n                    and{' '}\n                    <Link href=\"/privacy\" className=\"text-blue-600 hover:text-blue-800 font-medium\">\n                      Privacy Policy\n                    </Link>\n                  </p>\n                </div>\n              </CardContent>\n              <CardFooter className=\"flex flex-col space-y-4\">\n                <Separator />\n                <div className=\"text-center text-sm w-full\">\n                  Already have an account?{' '}\n                  <Link href=\"/login\" className=\"text-blue-600 hover:text-blue-800 font-medium\">\n                    Sign in\n                  </Link>\n                </div>\n              </CardFooter>\n            </Card>\n          )}\n        </motion.div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center text-sm text-gray-500\">\n          &copy; {new Date().getFullYear()} AssetTracker Pro. All rights reserved.\n        </div>\n      </footer>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\auth\\oauth-status.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":46,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1572,1681],"text":"\n            You&apos;ve updated the settings but still getting blocked. Here are additional solutions.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1572,1681],"text":"\n            You&lsquo;ve updated the settings but still getting blocked. Here are additional solutions.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1572,1681],"text":"\n            You&#39;ve updated the settings but still getting blocked. Here are additional solutions.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1572,1681],"text":"\n            You&rsquo;ve updated the settings but still getting blocked. Here are additional solutions.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":67,"column":70,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2522,2660],"text":"\n              GitHub changes can take 2-5 minutes to propagate. If it&apos;s been less than 5 minutes,\n              please wait.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2522,2660],"text":"\n              GitHub changes can take 2-5 minutes to propagate. If it&lsquo;s been less than 5 minutes,\n              please wait.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2522,2660],"text":"\n              GitHub changes can take 2-5 minutes to propagate. If it&#39;s been less than 5 minutes,\n              please wait.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2522,2660],"text":"\n              GitHub changes can take 2-5 minutes to propagate. If it&rsquo;s been less than 5 minutes,\n              please wait.\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/signup/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":87,"column":19,"nodeType":"JSXOpeningElement","endLine":87,"endColumn":37},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/login/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":90,"column":19,"nodeType":"JSXOpeningElement","endLine":90,"endColumn":36},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":232,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10104,10126],"text":"App status is &quot;Active\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10104,10126],"text":"App status is &ldquo;Active\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10104,10126],"text":"App status is &#34;Active\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10104,10126],"text":"App status is &rdquo;Active\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":232,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[10104,10126],"text":"App status is \"Active&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[10104,10126],"text":"App status is \"Active&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[10104,10126],"text":"App status is \"Active&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[10104,10126],"text":"App status is \"Active&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/login/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":260,"column":17,"nodeType":"JSXOpeningElement","endLine":260,"endColumn":45},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/signup/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":272,"column":17,"nodeType":"JSXOpeningElement","endLine":272,"endColumn":35},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":307,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13369,13576],"text":" While troubleshooting GitHub OAuth, use email\n              authentication to test the full asset management system. You can always switch to\n              GitHub OAuth later once it&apos;s working.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13369,13576],"text":" While troubleshooting GitHub OAuth, use email\n              authentication to test the full asset management system. You can always switch to\n              GitHub OAuth later once it&lsquo;s working.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13369,13576],"text":" While troubleshooting GitHub OAuth, use email\n              authentication to test the full asset management system. You can always switch to\n              GitHub OAuth later once it&#39;s working.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13369,13576],"text":" While troubleshooting GitHub OAuth, use email\n              authentication to test the full asset management system. You can always switch to\n              GitHub OAuth later once it&rsquo;s working.\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { ExternalLink, Copy, CheckCircle, AlertTriangle, RefreshCw, Clock } from 'lucide-react'\nimport { useState, useEffect } from 'react'\n\nexport default function OAuthStatus() {\n  const [copied, setCopied] = useState<string | null>(null)\n  const [timeWaited, setTimeWaited] = useState(0)\n\n  const currentOrigin = typeof window !== 'undefined' ? window.location.origin : ''\n  const callbackUrl = 'https://wyqohljdnrouovuqqdlt.supabase.co/auth/v1/callback'\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeWaited(prev => prev + 1)\n    }, 1000)\n\n    return () => clearInterval(timer)\n  }, [])\n\n  const copyToClipboard = (text: string, type: string) => {\n    navigator.clipboard.writeText(text)\n    setCopied(type)\n    setTimeout(() => setCopied(null), 2000)\n  }\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n    const secs = seconds % 60\n    return `${mins}:${secs.toString().padStart(2, '0')}`\n  }\n\n  return (\n    <div className=\"container py-8 max-w-4xl mx-auto\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <AlertTriangle className=\"h-5 w-5 mr-2 text-orange-500\" />\n            GitHub OAuth Still Blocked - Advanced Troubleshooting\n          </CardTitle>\n          <CardDescription>\n            You've updated the settings but still getting blocked. Here are additional solutions.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <Alert variant=\"destructive\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Current Status:</strong> GitHub OAuth is still blocking access to{' '}\n              <code className=\"bg-red-100 px-1 rounded\">{currentOrigin}</code>\n            </AlertDescription>\n          </Alert>\n\n          {/* Timer */}\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"h-4 w-4 text-blue-600\" />\n              <span className=\"text-blue-800 font-medium\">\n                Time since page load: {formatTime(timeWaited)}\n              </span>\n            </div>\n            <p className=\"text-blue-700 text-sm mt-1\">\n              GitHub changes can take 2-5 minutes to propagate. If it's been less than 5 minutes,\n              please wait.\n            </p>\n          </div>\n\n          {/* Immediate Solution */}\n          <Card className=\"border-green-200 bg-green-50\">\n            <CardHeader>\n              <CardTitle className=\"text-green-800 text-lg flex items-center\">\n                <CheckCircle className=\"h-5 w-5 mr-2\" />✅ Immediate Solution: Use Email\n                Authentication\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-green-700 text-sm mb-3\">\n                Skip GitHub OAuth entirely. Email authentication works perfectly and gives you full\n                access to all features.\n              </p>\n              <div className=\"space-y-2\">\n                <Button asChild className=\"w-full\">\n                  <a href=\"/signup\">Sign Up with Email Now</a>\n                </Button>\n                <Button asChild variant=\"outline\" className=\"w-full\">\n                  <a href=\"/login\">Already have an account? Sign In</a>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Advanced Troubleshooting */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Advanced GitHub OAuth Troubleshooting</h3>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Card className=\"border-orange-200\">\n                <CardHeader>\n                  <CardTitle className=\"text-orange-800 text-base\">\n                    🔍 Check Current Settings\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div>\n                    <label className=\"text-xs font-medium text-gray-600\">\n                      Your Homepage URL should be:\n                    </label>\n                    <div className=\"flex items-center space-x-2\">\n                      <code className=\"bg-white px-2 py-1 rounded border text-xs flex-1 break-all\">\n                        {currentOrigin}\n                      </code>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(currentOrigin, 'homepage')}\n                        className=\"h-6 px-2\"\n                      >\n                        {copied === 'homepage' ? (\n                          <CheckCircle className=\"h-3 w-3\" />\n                        ) : (\n                          <Copy className=\"h-3 w-3\" />\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                  <div>\n                    <label className=\"text-xs font-medium text-gray-600\">\n                      Your Callback URL should be:\n                    </label>\n                    <div className=\"flex items-center space-x-2\">\n                      <code className=\"bg-white px-2 py-1 rounded border text-xs flex-1 break-all\">\n                        {callbackUrl}\n                      </code>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(callbackUrl, 'callback')}\n                        className=\"h-6 px-2\"\n                      >\n                        {copied === 'callback' ? (\n                          <CheckCircle className=\"h-3 w-3\" />\n                        ) : (\n                          <Copy className=\"h-3 w-3\" />\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                  <Button asChild variant=\"outline\" className=\"w-full\">\n                    <a\n                      href=\"https://github.com/settings/developers\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Verify Settings <ExternalLink className=\"h-4 w-4 ml-1\" />\n                    </a>\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-blue-200\">\n                <CardHeader>\n                  <CardTitle className=\"text-blue-800 text-base\">\n                    🆕 Create Fresh OAuth App\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <p className=\"text-blue-700 text-sm\">\n                    Sometimes existing apps have cached settings. Create a completely new one:\n                  </p>\n                  <ol className=\"text-xs space-y-1 list-decimal list-inside\">\n                    <li>Delete your current OAuth app</li>\n                    <li>Create a new one with a different name</li>\n                    <li>Use the exact URLs shown above</li>\n                    <li>Update Supabase with new credentials</li>\n                  </ol>\n                  <Button asChild variant=\"outline\" className=\"w-full\">\n                    <a\n                      href=\"https://github.com/settings/applications/new\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      Create New App <ExternalLink className=\"h-4 w-4 ml-1\" />\n                    </a>\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Common Issues Checklist */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Common Issues Checklist</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-red-800\">❌ Common Mistakes</h4>\n                <ul className=\"text-sm space-y-1\">\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"text-red-500 mt-0.5\">•</span>\n                    <span>Extra spaces or characters in URLs</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"text-red-500 mt-0.5\">•</span>\n                    <span>Trailing slashes (/) at the end of URLs</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"text-red-500 mt-0.5\">•</span>\n                    <span>Using http instead of https</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"text-red-500 mt-0.5\">•</span>\n                    <span>App is in pending/suspended state</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"text-red-500 mt-0.5\">•</span>\n                    <span>Browser cache issues</span>\n                  </li>\n                </ul>\n              </div>\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-green-800\">✅ What Should Work</h4>\n                <ul className=\"text-sm space-y-1\">\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"text-green-500 mt-0.5\">•</span>\n                    <span>Exact URL matches (no extra characters)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"text-green-500 mt-0.5\">•</span>\n                    <span>App status is \"Active\"</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"text-green-500 mt-0.5\">•</span>\n                    <span>Client ID/Secret correctly entered in Supabase</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"text-green-500 mt-0.5\">•</span>\n                    <span>Waited 5+ minutes after changes</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"text-green-500 mt-0.5\">•</span>\n                    <span>Cleared browser cache</span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Quick Actions to Try</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3\">\n              <Button variant=\"outline\" className=\"w-full\" onClick={() => window.location.reload()}>\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh Page\n              </Button>\n              <Button asChild variant=\"outline\" className=\"w-full\">\n                <a href=\"/login?clear=true\">Clear Cache & Retry</a>\n              </Button>\n              <Button asChild variant=\"outline\" className=\"w-full\">\n                <a\n                  href=\"https://supabase.com/dashboard/project/wyqohljdnrouovuqqdlt/auth/providers\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Check Supabase <ExternalLink className=\"h-4 w-4 ml-1\" />\n                </a>\n              </Button>\n              <Button asChild className=\"w-full\">\n                <a href=\"/signup\">Use Email Instead</a>\n              </Button>\n            </div>\n          </div>\n\n          {/* Status Indicators */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Current Status</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"bg-gray-50 p-3 rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">Environment</span>\n                  <Badge variant=\"outline\">v0 Preview</Badge>\n                </div>\n              </div>\n              <div className=\"bg-gray-50 p-3 rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">Email Auth</span>\n                  <Badge variant=\"default\">Working</Badge>\n                </div>\n              </div>\n              <div className=\"bg-gray-50 p-3 rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">GitHub OAuth</span>\n                  <Badge variant=\"destructive\">Blocked</Badge>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Recommendation:</strong> While troubleshooting GitHub OAuth, use email\n              authentication to test the full asset management system. You can always switch to\n              GitHub OAuth later once it's working.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\auth\\production-login-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Package' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":44,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":68,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":89,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":17},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":102,"column":15,"nodeType":"JSXOpeningElement","endLine":106,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":245,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8817,8840],"text":"Don&apos;t have an account? "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8817,8840],"text":"Don&lsquo;t have an account? "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8817,8840],"text":"Don&#39;t have an account? "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8817,8840],"text":"Don&rsquo;t have an account? "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport type React from 'react'\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Separator } from '@/components/ui/separator'\nimport { Package, Github, Mail, Eye, EyeOff, Loader2 } from 'lucide-react'\nimport { createClient } from '@/lib/supabase/client'\nimport Link from 'next/link'\nimport { useBranding } from '@/components/branding-provider'\n\nexport default function ProductionLoginForm() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [showPassword, setShowPassword] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const router = useRouter()\n  const branding = useBranding()\n\n  const handleEmailLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    try {\n      const supabase = createClient()\n      const { error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })\n\n      if (error) {\n        setError(error.message)\n      } else {\n        router.push('/dashboard')\n      }\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleGitHubLogin = async () => {\n    setLoading(true)\n    setError('')\n\n    try {\n      const supabase = createClient()\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'github',\n        options: {\n          redirectTo: `${window.location.origin}/auth/callback`,\n        },\n      })\n\n      if (error) {\n        setError(error.message)\n        setLoading(false)\n      }\n    } catch (err) {\n      setError('Failed to initiate GitHub login')\n      setLoading(false)\n    }\n  }\n\n  const handleGoogleLogin = async () => {\n    setLoading(true)\n    setError('')\n    try {\n      const supabase = createClient()\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: `${window.location.origin}/auth/callback`,\n        },\n      })\n      if (error) {\n        setError(error.message)\n        setLoading(false)\n      }\n    } catch (err) {\n      setError('Failed to initiate Google login')\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50 px-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex flex-col items-center space-y-2 mb-6\">\n            {branding?.logoUrl && (\n              <img\n                src={branding.logoUrl}\n                alt=\"Logo\"\n                className=\"h-12 w-12 rounded bg-white border\"\n              />\n            )}\n            <h1 className=\"text-3xl font-bold text-gray-900\">\n              {branding?.companyName || 'AssetTracker Pro'}\n            </h1>\n          </div>\n          <p className=\"text-gray-600\">Professional Asset Management System</p>\n        </div>\n\n        <Card className=\"shadow-lg\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl text-center\">Welcome back</CardTitle>\n            <CardDescription className=\"text-center\">\n              Sign in to your account to continue\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            {/* GitHub Login */}\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={handleGitHubLogin}\n              disabled={loading}\n            >\n              <Github className=\"mr-2 h-4 w-4\" />\n              Continue with GitHub\n            </Button>\n\n            <Button\n              variant=\"outline\"\n              className=\"w-full mt-2\"\n              onClick={handleGoogleLogin}\n              disabled={loading}\n            >\n              <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n                <g>\n                  <path\n                    fill=\"#4285F4\"\n                    d=\"M21.805 10.023h-9.765v3.977h5.617c-.242 1.242-1.484 3.648-5.617 3.648-3.375 0-6.125-2.789-6.125-6.25s2.75-6.25 6.125-6.25c1.922 0 3.211.773 3.953 1.477l2.703-2.633c-1.711-1.594-3.922-2.57-6.656-2.57-5.523 0-10 4.477-10 10s4.477 10 10 10c5.75 0 9.547-4.031 9.547-9.719 0-.656-.07-1.156-.156-1.602z\"\n                  />\n                  <path\n                    fill=\"#34A853\"\n                    d=\"M3.545 7.545l3.273 2.402c.891-1.242 2.273-2.047 3.887-2.047.992 0 1.922.344 2.641.914l3.164-3.086c-1.422-1.32-3.242-2.128-5.305-2.128-3.242 0-5.977 2.203-6.953 5.219z\"\n                  />\n                  <path\n                    fill=\"#FBBC05\"\n                    d=\"M12.705 21.455c2.484 0 4.57-.82 6.094-2.234l-2.812-2.305c-.773.547-1.758.867-3.281.867-2.523 0-4.664-1.703-5.43-4.008l-3.273 2.531c1.406 2.953 4.484 5.149 8.702 5.149z\"\n                  />\n                  <path\n                    fill=\"#EA4335\"\n                    d=\"M21.805 10.023h-9.765v3.977h5.617c-.242 1.242-1.484 3.648-5.617 3.648-3.375 0-6.125-2.789-6.125-6.25s2.75-6.25 6.125-6.25c1.922 0 3.211.773 3.953 1.477l2.703-2.633c-1.711-1.594-3.922-2.57-6.656-2.57-5.523 0-10 4.477-10 10s4.477 10 10 10c5.75 0 9.547-4.031 9.547-9.719 0-.656-.07-1.156-.156-1.602z\"\n                  />\n                </g>\n              </svg>\n              Continue with Google\n            </Button>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <Separator className=\"w-full\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-white px-2 text-muted-foreground\">Or continue with</span>\n              </div>\n            </div>\n\n            {/* Email Login Form */}\n            <form onSubmit={handleEmailLogin} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={email}\n                    onChange={e => setEmail(e.target.value)}\n                    className=\"pl-10\"\n                    required\n                    disabled={loading}\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder=\"Enter your password\"\n                    value={password}\n                    onChange={e => setPassword(e.target.value)}\n                    className=\"pr-10\"\n                    required\n                    disabled={loading}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\n                    disabled={loading}\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                {loading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Signing in...\n                  </>\n                ) : (\n                  'Sign in'\n                )}\n              </Button>\n            </form>\n\n            <div className=\"text-center space-y-2\">\n              <Link\n                href=\"/auth/reset-password\"\n                className=\"text-sm text-blue-600 hover:text-blue-800 hover:underline\"\n              >\n                Forgot your password?\n              </Link>\n            </div>\n\n            <Separator />\n\n            <div className=\"text-center\">\n              <span className=\"text-sm text-gray-600\">Don't have an account? </span>\n              <Link\n                href=\"/signup\"\n                className=\"text-sm text-blue-600 hover:text-blue-800 hover:underline font-medium\"\n              >\n                Sign up\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center mt-8 text-sm text-gray-500\">\n          <p>© 2024 AssetTracker Pro. All rights reserved.</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\auth\\production-signup-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":61,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":87,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":104,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3380,3429],"text":"\n              We&apos;ve sent a confirmation link to "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3380,3429],"text":"\n              We&lsquo;ve sent a confirmation link to "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3380,3429],"text":"\n              We&#39;ve sent a confirmation link to "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3380,3429],"text":"\n              We&rsquo;ve sent a confirmation link to "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":116,"column":56,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4037,4062],"text":"Didn&apos;t receive the email?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4037,4062],"text":"Didn&lsquo;t receive the email?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4037,4062],"text":"Didn&#39;t receive the email?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4037,4062],"text":"Didn&rsquo;t receive the email?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport type React from 'react'\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport {\n  Eye,\n  EyeOff,\n  Mail,\n  Lock,\n  User,\n  AlertTriangle,\n  Package,\n  Shield,\n  Github,\n  CheckCircle,\n  Building2,\n} from 'lucide-react'\nimport Link from 'next/link'\nimport { signUpWithEmail, signInWithGitHub } from '@/lib/auth-actions'\n\nexport default function ProductionSignupForm() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [fullName, setFullName] = useState('')\n  const [orgName, setOrgName] = useState('')\n  const [showPassword, setShowPassword] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState(false)\n  const router = useRouter()\n  const [successMessage, setSuccessMessage] = useState('')\n\n  const handleEmailSignup = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    if (!orgName.trim()) {\n      setError('Organization name is required')\n      setLoading(false)\n      return\n    }\n\n    try {\n      const result = await signUpWithEmail(email, password, fullName, orgName)\n      if (result.error) {\n        setError(result.error)\n      } else if (result.needsConfirmation) {\n        setSuccess(true)\n        setSuccessMessage(result.message || 'Please check your email for a confirmation link.')\n      } else {\n        // Auto-confirmed, redirect to login\n        router.push('/login?message=Account created successfully! Please sign in.')\n      }\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleGitHubSignup = async () => {\n    if (!orgName.trim()) {\n      setError('Organization name is required')\n      return\n    }\n\n    setLoading(true)\n    setError('')\n\n    try {\n      // Store org name in a cookie before GitHub OAuth\n      document.cookie = `signup_org_name=${encodeURIComponent(orgName)}; path=/; max-age=300` // 5 minutes expiry\n\n      const result = await signInWithGitHub()\n      if (result.error) {\n        setError(result.error)\n        document.cookie = 'signup_org_name=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT'\n      }\n      // GitHub OAuth will handle the redirect\n    } catch (err) {\n      setError('Failed to sign up with GitHub')\n      document.cookie = 'signup_org_name=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT'\n      setLoading(false)\n    }\n  }\n\n  if (success) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center px-4\">\n        <Card className=\"max-w-md w-full shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto h-12 w-12 bg-green-600 rounded-full flex items-center justify-center mb-4\">\n              <CheckCircle className=\"h-6 w-6 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-green-800\">Check Your Email</CardTitle>\n            <CardDescription>\n              We've sent a confirmation link to <strong>{email}</strong>\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Alert className=\"border-green-200 bg-green-50\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <AlertDescription className=\"text-green-800\">\n                {successMessage ||\n                  `Please check your email and click the confirmation link to activate your account.`}\n              </AlertDescription>\n            </Alert>\n            <div className=\"text-center space-y-2\">\n              <p className=\"text-sm text-gray-600\">Didn't receive the email?</p>\n              <Button variant=\"outline\" onClick={() => setSuccess(false)}>\n                Try Again\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n      {/* Header */}\n      <div className=\"bg-white/80 backdrop-blur-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Package className=\"h-8 w-8 text-blue-600\" />\n              <h1 className=\"text-2xl font-bold text-gray-900\">AssetTracker Pro</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/docs\" className=\"text-sm text-blue-600 hover:text-blue-800\">\n                Documentation\n              </Link>\n              <Link href=\"/login\" className=\"text-sm text-blue-600 hover:text-blue-800\">\n                Sign In\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-md w-full space-y-8\">\n          {/* Welcome Section */}\n          <div className=\"text-center\">\n            <div className=\"mx-auto h-12 w-12 bg-blue-600 rounded-full flex items-center justify-center mb-4\">\n              <Shield className=\"h-6 w-6 text-white\" />\n            </div>\n            <h2 className=\"text-3xl font-bold text-gray-900\">Get Started</h2>\n            <p className=\"mt-2 text-gray-600\">Create your AssetTracker Pro account</p>\n          </div>\n\n          <Card className=\"shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n            <CardHeader className=\"space-y-1\">\n              <CardTitle className=\"text-2xl font-bold text-center\">Create Account</CardTitle>\n              <CardDescription className=\"text-center\">\n                Start managing your assets professionally\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n\n              {/* GitHub OAuth */}\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"orgName\" className=\"text-sm font-medium\">\n                    Organization Name\n                  </label>\n                  <div className=\"relative\">\n                    <Building2 className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"orgName\"\n                      type=\"text\"\n                      placeholder=\"Enter your organization name\"\n                      value={orgName}\n                      onChange={e => setOrgName(e.target.value)}\n                      className=\"pl-10\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <Button\n                  onClick={handleGitHubSignup}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  disabled={loading}\n                >\n                  <Github className=\"h-4 w-4 mr-2\" />\n                  Continue with GitHub\n                </Button>\n              </div>\n\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-white px-2 text-gray-500\">Or create account with email</span>\n                </div>\n              </div>\n\n              <form onSubmit={handleEmailSignup} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"fullName\" className=\"text-sm font-medium\">\n                    Full Name\n                  </label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"fullName\"\n                      type=\"text\"\n                      placeholder=\"Enter your full name\"\n                      value={fullName}\n                      onChange={e => setFullName(e.target.value)}\n                      className=\"pl-10\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"email\" className=\"text-sm font-medium\">\n                    Email\n                  </label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={email}\n                      onChange={e => setEmail(e.target.value)}\n                      className=\"pl-10\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"password\" className=\"text-sm font-medium\">\n                    Password\n                  </label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? 'text' : 'password'}\n                      placeholder=\"Create a password\"\n                      value={password}\n                      onChange={e => setPassword(e.target.value)}\n                      className=\"pl-10 pr-10\"\n                      required\n                      minLength={6}\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2\"\n                    >\n                      {showPassword ? (\n                        <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                      ) : (\n                        <Eye className=\"h-4 w-4 text-gray-400\" />\n                      )}\n                    </button>\n                  </div>\n                  <p className=\"text-xs text-gray-500\">Password must be at least 6 characters</p>\n                </div>\n\n                <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                  {loading ? 'Creating account...' : 'Create account'}\n                </Button>\n              </form>\n\n              <div className=\"text-center text-sm\">\n                {'Already have an account? '}\n                <Link href=\"/login\" className=\"text-blue-600 hover:text-blue-500 font-medium\">\n                  Sign in\n                </Link>\n              </div>\n\n              <div className=\"text-xs text-gray-500 text-center\">\n                By creating an account, you agree to our{' '}\n                <Link href=\"/terms\" className=\"text-blue-600 hover:text-blue-500\">\n                  Terms of Service\n                </Link>{' '}\n                and{' '}\n                <Link href=\"/privacy\" className=\"text-blue-600 hover:text-blue-500\">\n                  Privacy Policy\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\auth\\resend-confirmation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":40,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":60,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1695,1749],"text":"\n              We&apos;ve sent a new confirmation email to "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1695,1749],"text":"\n              We&lsquo;ve sent a new confirmation email to "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1695,1749],"text":"\n              We&#39;ve sent a new confirmation email to "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1695,1749],"text":"\n              We&rsquo;ve sent a new confirmation email to "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport type React from 'react'\n\nimport { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { createClient } from '@/lib/supabase/client'\nimport { Mail, Send } from 'lucide-react'\nimport Link from 'next/link'\n\nexport default function ResendConfirmation() {\n  const [email, setEmail] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [success, setSuccess] = useState(false)\n  const [error, setError] = useState('')\n  const supabase = createClient()\n\n  const handleResend = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    try {\n      const { error } = await supabase.auth.resend({\n        type: 'signup',\n        email,\n        options: {\n          emailRedirectTo: `${window.location.origin}/auth/callback`,\n        },\n      })\n\n      if (error) {\n        setError(error.message)\n      } else {\n        setSuccess(true)\n      }\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (success) {\n    return (\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle className=\"text-center\">Email Sent!</CardTitle>\n          <CardDescription className=\"text-center\">\n            Check your email for the confirmation link\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Alert>\n            <Mail className=\"h-4 w-4\" />\n            <AlertDescription>\n              We've sent a new confirmation email to <strong>{email}</strong>\n            </AlertDescription>\n          </Alert>\n          <Button asChild className=\"w-full mt-4\" variant=\"outline\">\n            <Link href=\"/login\">Back to Login</Link>\n          </Button>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle className=\"text-center\">Resend Confirmation</CardTitle>\n        <CardDescription className=\"text-center\">\n          Enter your email to receive a new confirmation link\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-4\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        <form onSubmit={handleResend} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <label htmlFor=\"email\" className=\"text-sm font-medium\">\n              Email\n            </label>\n            <div className=\"relative\">\n              <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                className=\"pl-10\"\n                required\n              />\n            </div>\n          </div>\n\n          <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n            {loading ? (\n              'Sending...'\n            ) : (\n              <>\n                <Send className=\"h-4 w-4 mr-2\" />\n                Resend Confirmation\n              </>\n            )}\n          </Button>\n        </form>\n\n        <div className=\"text-center text-sm mt-4\">\n          <Link href=\"/login\" className=\"text-blue-600 hover:text-blue-500\">\n            Back to Login\n          </Link>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\auth\\sign-out-button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\auth\\signup-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":61,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":88,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":122,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3952,4014],"text":"\n              We&apos;ve sent you a confirmation link\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3952,4014],"text":"\n              We&lsquo;ve sent you a confirmation link\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3952,4014],"text":"\n              We&#39;ve sent you a confirmation link\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3952,4014],"text":"\n              We&rsquo;ve sent you a confirmation link\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":135,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4481,4551],"text":"After clicking the link, you&apos;ll be redirected back to the application."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4481,4551],"text":"After clicking the link, you&lsquo;ll be redirected back to the application."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4481,4551],"text":"After clicking the link, you&#39;ll be redirected back to the application."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4481,4551],"text":"After clicking the link, you&rsquo;ll be redirected back to the application."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":136,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4593,4644],"text":"If you don&apos;t see the email, check your spam folder."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4593,4644],"text":"If you don&lsquo;t see the email, check your spam folder."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4593,4644],"text":"If you don&#39;t see the email, check your spam folder."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4593,4644],"text":"If you don&rsquo;t see the email, check your spam folder."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport type React from 'react'\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { createClient } from '@/lib/supabase/client'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Eye, EyeOff, Mail, Lock, User, Github, Building2 } from 'lucide-react'\nimport Link from 'next/link'\n\nexport default function SignupForm() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [fullName, setFullName] = useState('')\n  const [orgName, setOrgName] = useState('')\n  const [showPassword, setShowPassword] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [githubLoading, setGithubLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState(false)\n  const router = useRouter()\n  const supabase = createClient()\n\n  const handleSignup = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    if (!orgName.trim()) {\n      setError('Organization name is required')\n      setLoading(false)\n      return\n    }\n\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            full_name: fullName,\n            org_name: orgName,\n          },\n          emailRedirectTo: `${window.location.origin}/auth/callback`,\n        },\n      })\n\n      if (error) {\n        setError(error.message)\n      } else if (data.user && !data.user.email_confirmed_at) {\n        setSuccess(true)\n      } else if (data.user && data.user.email_confirmed_at) {\n        // User is already confirmed, redirect to dashboard\n        router.push('/')\n        router.refresh()\n      }\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleGithubSignup = async () => {\n    if (!orgName.trim()) {\n      setError('Organization name is required')\n      return\n    }\n    setGithubLoading(true)\n    setError('')\n    try {\n      // Store org name in a cookie before GitHub OAuth\n      document.cookie = `signup_org_name=${encodeURIComponent(orgName)}; path=/; max-age=300`\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: 'github',\n        options: {\n          redirectTo: `${window.location.origin}/auth/callback`,\n        },\n      })\n      if (error) {\n        setError(error.message)\n        document.cookie = 'signup_org_name=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT'\n      }\n    } catch (err) {\n      setError('Failed to authenticate with GitHub')\n      document.cookie = 'signup_org_name=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT'\n    } finally {\n      setGithubLoading(false)\n    }\n  }\n\n  const handleGoogleSignup = async () => {\n    if (!orgName.trim()) {\n      setError('Organization name is required')\n      return\n    }\n    // Store org name in a cookie before Google OAuth\n    document.cookie = `signup_org_name=${encodeURIComponent(orgName)}; path=/; max-age=300`\n    const { error } = await supabase.auth.signInWithOAuth({\n      provider: 'google',\n      options: {\n        redirectTo: `${window.location.origin}/auth/callback`,\n      },\n    })\n    if (error) {\n      setError(error.message)\n      document.cookie = 'signup_org_name=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT'\n    }\n  }\n\n  if (success) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-bold text-center\">Check your email</CardTitle>\n            <CardDescription className=\"text-center\">\n              We've sent you a confirmation link\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Alert>\n              <Mail className=\"h-4 w-4\" />\n              <AlertDescription>\n                Please check your email at <strong>{email}</strong> and click the confirmation link\n                to complete your registration.\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"text-sm text-gray-600 space-y-2\">\n              <p>After clicking the link, you'll be redirected back to the application.</p>\n              <p className=\"text-xs\">If you don't see the email, check your spam folder.</p>\n            </div>\n\n            <Button onClick={() => router.push('/login')} className=\"w-full\" variant=\"outline\">\n              Back to Login\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Create your account</CardTitle>\n          <CardDescription className=\"text-center\">\n            Enter your details to get started with AssetTracker\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {/* Organization Name Field */}\n          <div className=\"space-y-2\">\n            <label htmlFor=\"orgName\" className=\"text-sm font-medium\">\n              Organization Name\n            </label>\n            <div className=\"relative\">\n              <Building2 className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"orgName\"\n                type=\"text\"\n                placeholder=\"Enter your organization name\"\n                value={orgName}\n                onChange={e => setOrgName(e.target.value)}\n                className=\"pl-10\"\n                required\n              />\n            </div>\n          </div>\n\n          {/* Social Signup Buttons */}\n          <div className=\"space-y-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleGithubSignup}\n              className=\"w-full\"\n              disabled={githubLoading}\n            >\n              {githubLoading ? (\n                <div className=\"w-4 h-4 mr-2 animate-spin rounded-full border-2 border-gray-300 border-t-gray-600\" />\n              ) : (\n                <Github className=\"w-4 h-4 mr-2\" />\n              )}\n              Continue with GitHub\n            </Button>\n\n            <Button type=\"button\" variant=\"outline\" onClick={handleGoogleSignup} className=\"w-full\">\n              <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                <path\n                  fill=\"currentColor\"\n                  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                />\n              </svg>\n              Continue with Google\n            </Button>\n          </div>\n\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-white px-2 text-gray-500\">Or continue with email</span>\n            </div>\n          </div>\n\n          <form onSubmit={handleSignup} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <label htmlFor=\"fullName\" className=\"text-sm font-medium\">\n                Full Name\n              </label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"fullName\"\n                  type=\"text\"\n                  placeholder=\"Enter your full name\"\n                  value={fullName}\n                  onChange={e => setFullName(e.target.value)}\n                  className=\"pl-10\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"email\" className=\"text-sm font-medium\">\n                Email\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={email}\n                  onChange={e => setEmail(e.target.value)}\n                  className=\"pl-10\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"password\" className=\"text-sm font-medium\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  placeholder=\"Create a password\"\n                  value={password}\n                  onChange={e => setPassword(e.target.value)}\n                  className=\"pl-10 pr-10\"\n                  required\n                  minLength={6}\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </button>\n              </div>\n              <p className=\"text-xs text-gray-500\">Password must be at least 6 characters long</p>\n            </div>\n\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading ? 'Creating account...' : 'Create account'}\n            </Button>\n          </form>\n\n          <div className=\"text-center text-sm\">\n            Already have an account?{' '}\n            <Link href=\"/login\" className=\"text-blue-600 hover:text-blue-500 font-medium\">\n              Sign in\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\auth\\unified-auth-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\auth\\url-debug.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\branding-provider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tenant' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\nimport React, { createContext, useContext, useEffect, useState, ReactNode } from 'react'\nimport { createClient } from '@/lib/supabase/client'\nimport { useAuth } from '@/components/auth/auth-provider'\nimport { Tenant } from '@/lib/rbac/types'\n\nexport interface Branding {\n  logoUrl?: string\n  primaryColor?: string\n  secondaryColor?: string\n  companyName?: string\n}\n\nconst BrandingContext = createContext<Branding | null>(null)\n\nexport function BrandingProvider({ children }: { children: ReactNode }) {\n  const { user } = useAuth()\n  const [branding, setBranding] = useState<Branding>({})\n\n  useEffect(() => {\n    async function fetchBranding() {\n      if (!user) return\n      const supabase = createClient()\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('*, tenants(*)')\n        .eq('id', user.id)\n        .single()\n      if (profile?.tenants) {\n        setBranding({\n          logoUrl: profile.tenants.branding_logo_url || undefined,\n          primaryColor: profile.tenants.branding_primary_color || undefined,\n          secondaryColor: profile.tenants.branding_secondary_color || undefined,\n          companyName: profile.tenants.branding_company_name || profile.tenants.name || undefined,\n        })\n      }\n    }\n    fetchBranding()\n  }, [user])\n\n  return <BrandingContext.Provider value={branding}>{children}</BrandingContext.Provider>\n}\n\nexport function useBranding() {\n  return useContext(BrandingContext)\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\bulk-qr-operations.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fetchDefaultQRTemplate' is defined but never used.","line":27,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'html2canvas' is defined but never used.","line":29,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1108,1111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1108,1111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1425,1428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1425,1428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1539,1542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1539,1542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1680,1683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1680,1683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1954,1957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1954,1957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":69,"column":15,"nodeType":"BlockStatement","messageId":"unexpected","endLine":69,"endColumn":17,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[2112,2112],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":128,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'row' is assigned a value but never used.","line":167,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":167,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":209,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":209,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Progress } from '@/components/ui/progress'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport {\n  QrCode,\n  Download,\n  Upload,\n  CheckCircle,\n  AlertTriangle,\n  FileText,\n  Printer,\n} from 'lucide-react'\nimport { generateBulkQRCodes } from '@/lib/qr-actions'\nimport { fetchQRTemplates, fetchDefaultQRTemplate } from '@/lib/qr-template-utils'\nimport jsPDF from 'jspdf'\nimport html2canvas from 'html2canvas'\nimport QRLabel from '@/components/qr-label'\nimport { useToast } from '@/hooks/use-toast'\n\ninterface Asset {\n  id: string\n  asset_id: string\n  name: string\n  category: string\n  status: string\n  qr_code?: string | null\n}\n\ninterface BulkQROperationsProps {\n  assets: Asset[]\n  onBulkGenerated?: (results: any[]) => void\n}\n\nexport default function BulkQROperations({ assets, onBulkGenerated }: BulkQROperationsProps) {\n  const [selectedAssets, setSelectedAssets] = useState<string[]>([])\n  const [loading, setLoading] = useState(false)\n  const [progress, setProgress] = useState(0)\n  const [results, setResults] = useState<any[]>([])\n  const [error, setError] = useState<string | null>(null)\n  const [templates, setTemplates] = useState<any[]>([])\n  const [selectedTemplateId, setSelectedTemplateId] = useState<string>('')\n  const [templateConfig, setTemplateConfig] = useState<any>(null)\n  const { toast } = useToast()\n  const [printLabels, setPrintLabels] = useState(false)\n\n  useEffect(() => {\n    async function loadTemplates() {\n      try {\n        const all = await fetchQRTemplates()\n        setTemplates(all)\n        const def = all.find((tpl: any) => tpl.is_default) || all[0]\n        if (def) {\n          setSelectedTemplateId(def.id)\n          setTemplateConfig(def.config)\n        }\n      } catch {}\n    }\n    loadTemplates()\n  }, [])\n\n  useEffect(() => {\n    if (!selectedTemplateId) return\n    const tpl = templates.find(t => t.id === selectedTemplateId)\n    if (tpl) setTemplateConfig(tpl.config)\n  }, [selectedTemplateId, templates])\n\n  const assetsWithoutQR = assets.filter(asset => !asset.qr_code)\n  const allSelected = selectedAssets.length === assetsWithoutQR.length\n  const someSelected = selectedAssets.length > 0\n\n  const handleSelectAll = () => {\n    if (allSelected) {\n      setSelectedAssets([])\n    } else {\n      setSelectedAssets(assetsWithoutQR.map(asset => asset.asset_id))\n    }\n  }\n\n  const handleSelectAsset = (assetId: string) => {\n    setSelectedAssets(prev =>\n      prev.includes(assetId) ? prev.filter(id => id !== assetId) : [...prev, assetId]\n    )\n  }\n\n  const handleBulkGenerate = async () => {\n    if (selectedAssets.length === 0) {\n      setError('Please select at least one asset')\n      return\n    }\n\n    setLoading(true)\n    setError(null)\n    setProgress(0)\n    setResults([])\n\n    try {\n      // Simulate progress updates\n      const progressInterval = setInterval(() => {\n        setProgress(prev => Math.min(prev + 10, 90))\n      }, 200)\n\n      const result = await generateBulkQRCodes(selectedAssets)\n\n      clearInterval(progressInterval)\n      setProgress(100)\n\n      if (result.error) {\n        setError(result.error)\n      } else {\n        setResults(result.results!)\n        if (onBulkGenerated) {\n          onBulkGenerated(result.results!)\n        }\n      }\n    } catch (err) {\n      setError('Failed to generate QR codes')\n    } finally {\n      setLoading(false)\n      setTimeout(() => setProgress(0), 2000)\n    }\n  }\n\n  const handleDownloadAll = () => {\n    const successfulResults = results.filter(r => r.success)\n\n    successfulResults.forEach((result, index) => {\n      setTimeout(() => {\n        const link = document.createElement('a')\n        link.download = `qr-${result.assetId}.png`\n        link.href = result.qrCode\n        link.click()\n      }, index * 100) // Stagger downloads\n    })\n  }\n\n  // Add this function to generate a PDF with all QR codes and asset info\n  const handleDownloadPDF = async () => {\n    const successfulResults = results.filter(r => r.success)\n    if (successfulResults.length === 0) {\n      toast({\n        title: 'Nothing to export',\n        description: 'No QR codes to export.',\n        variant: 'destructive',\n      })\n      return\n    }\n    try {\n      const pdf = new jsPDF({ orientation: 'portrait', unit: 'px', format: [800, 1120] })\n      const itemsPerRow = 3\n      const itemWidth = (templateConfig?.qrSize || 120) + 40\n      const itemHeight = (templateConfig?.qrSize || 120) + 80\n      let x = 0,\n        y = 0,\n        row = 0,\n        col = 0\n      for (let i = 0; i < successfulResults.length; i++) {\n        const result = successfulResults[i]\n        const asset = assets.find(a => a.asset_id === result.assetId)\n        if (!asset) continue\n        const container = document.createElement('div')\n        container.style.position = 'fixed'\n        container.style.left = '-9999px'\n        container.style.top = '0'\n        document.body.appendChild(container)\n        const label = (\n          <QRLabel asset={asset} templateConfig={templateConfig} qrCodeUrl={result.qrCode} />\n        )\n        await new Promise(resolve => {\n          import('react-dom/client').then(({ createRoot }) => {\n            const root = createRoot(container)\n            root.render(label)\n            setTimeout(async () => {\n              const canvas = await (\n                await import('html2canvas')\n              ).default(container, { backgroundColor: '#fff', scale: 2 })\n              const imgData = canvas.toDataURL('image/png')\n              pdf.addImage(imgData, 'PNG', x, y, itemWidth, itemHeight)\n              root.unmount()\n              document.body.removeChild(container)\n              col++\n              if (col >= itemsPerRow) {\n                col = 0\n                row++\n                x = 0\n                y += itemHeight + 16\n              } else {\n                x += itemWidth + 16\n              }\n              resolve(null)\n            }, 100)\n          })\n        })\n      }\n      pdf.save('qr-codes-batch.pdf')\n      toast({ title: 'Exported PDF', description: 'QR report exported as PDF.' })\n    } catch (err) {\n      toast({\n        title: 'Export Failed',\n        description: 'Failed to export PDF.',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  // Print all QR labels\n  const handlePrintAll = () => {\n    if (results.filter(r => r.success).length === 0) {\n      toast({\n        title: 'Nothing to print',\n        description: 'No QR codes to print.',\n        variant: 'destructive',\n      })\n      return\n    }\n    setPrintLabels(true)\n    setTimeout(() => {\n      window.print()\n      setTimeout(() => setPrintLabels(false), 1000)\n    }, 100)\n  }\n\n  const generateCSVTemplate = () => {\n    const csvContent = [\n      'asset_id,name,category,location,value',\n      'AST-001,MacBook Pro 16\",it-equipment,Office A,2499.99',\n      'AST-002,Office Chair,furniture,Office B,299.99',\n      'AST-003,Projector,av-equipment,Conference Room,899.99',\n    ].join('\\n')\n\n    const blob = new Blob([csvContent], { type: 'text/csv' })\n    const url = URL.createObjectURL(blob)\n    const link = document.createElement('a')\n    link.href = url\n    link.download = 'asset-template.csv'\n    link.click()\n    URL.revokeObjectURL(url)\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Print container for all QR labels */}\n      {printLabels && (\n        <div className=\"print:block hidden\">\n          {results\n            .filter(r => r.success)\n            .map(result => {\n              const asset = assets.find(a => a.asset_id === result.assetId)\n              if (!asset) return null\n              return (\n                <div key={result.assetId} className=\"mb-4\">\n                  <QRLabel\n                    asset={asset}\n                    templateConfig={templateConfig}\n                    qrCodeUrl={result.qrCode}\n                  />\n                </div>\n              )\n            })}\n        </div>\n      )}\n      {templates.length > 0 && (\n        <div className=\"mb-4\">\n          <label className=\"block text-sm font-medium mb-1\">QR Template</label>\n          <select\n            className=\"border rounded px-2 py-1\"\n            value={selectedTemplateId}\n            onChange={e => setSelectedTemplateId(e.target.value)}\n          >\n            {templates.map(tpl => (\n              <option key={tpl.id} value={tpl.id}>\n                {tpl.name} {tpl.is_default ? '(Default)' : ''}\n              </option>\n            ))}\n          </select>\n        </div>\n      )}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <QrCode className=\"h-5 w-5 mr-2\" />\n            Bulk QR Code Operations\n          </CardTitle>\n          <CardDescription>Generate QR codes for multiple assets at once</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {loading && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span>Generating QR codes...</span>\n                <span>{progress}%</span>\n              </div>\n              <Progress value={progress} className=\"w-full\" />\n            </div>\n          )}\n\n          {results.length > 0 && (\n            <Alert className=\"border-green-200 bg-green-50\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <AlertDescription className=\"text-green-800\">\n                <div className=\"flex items-center justify-between\">\n                  <span>\n                    Generated {results.filter(r => r.success).length} QR codes successfully\n                  </span>\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" onClick={handleDownloadAll}>\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Download All\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={handleDownloadPDF}\n                      disabled={results.filter(r => r.success).length === 0}\n                    >\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      Download PDF\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={handlePrintAll}\n                      disabled={results.filter(r => r.success).length === 0}\n                    >\n                      <Printer className=\"h-4 w-4 mr-2\" />\n                      Print All QR Labels\n                    </Button>\n                  </div>\n                </div>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Asset Selection */}\n            <div className=\"lg:col-span-2 space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"font-medium\">\n                  Select Assets ({selectedAssets.length} of {assetsWithoutQR.length} selected)\n                </h4>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleSelectAll}\n                    disabled={assetsWithoutQR.length === 0}\n                  >\n                    {allSelected ? 'Deselect All' : 'Select All'}\n                  </Button>\n                  <Button\n                    onClick={handleBulkGenerate}\n                    disabled={!someSelected || loading}\n                    size=\"sm\"\n                  >\n                    Generate QR Codes\n                  </Button>\n                </div>\n              </div>\n\n              {assetsWithoutQR.length === 0 ? (\n                <Alert>\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <AlertDescription>All assets already have QR codes generated!</AlertDescription>\n                </Alert>\n              ) : (\n                <Card>\n                  <CardContent className=\"p-0\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead className=\"w-12\">\n                            <Checkbox checked={allSelected} onCheckedChange={handleSelectAll} />\n                          </TableHead>\n                          <TableHead>Asset ID</TableHead>\n                          <TableHead>Name</TableHead>\n                          <TableHead>Category</TableHead>\n                          <TableHead>Status</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {assetsWithoutQR.map(asset => (\n                          <TableRow key={asset.id}>\n                            <TableCell>\n                              <Checkbox\n                                checked={selectedAssets.includes(asset.asset_id)}\n                                onCheckedChange={() => handleSelectAsset(asset.asset_id)}\n                              />\n                            </TableCell>\n                            <TableCell className=\"font-medium\">{asset.asset_id}</TableCell>\n                            <TableCell>{asset.name}</TableCell>\n                            <TableCell className=\"capitalize\">{asset.category}</TableCell>\n                            <TableCell className=\"capitalize\">{asset.status}</TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* Tools and Templates */}\n            <div className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Import Tools</CardTitle>\n                  <CardDescription>Bulk import assets from CSV</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Button variant=\"outline\" className=\"w-full\" onClick={generateCSVTemplate}>\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    Download CSV Template\n                  </Button>\n\n                  <Button variant=\"outline\" className=\"w-full\" disabled>\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Upload CSV File\n                  </Button>\n\n                  <p className=\"text-xs text-gray-500\">\n                    Upload a CSV file with asset data to bulk create assets and generate QR codes\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">QR Code Settings</CardTitle>\n                  <CardDescription>Default settings for bulk generation</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Size</label>\n                    <select className=\"w-full px-3 py-2 border rounded-md text-sm\">\n                      <option value=\"200\">200x200 px</option>\n                      <option value=\"300\">300x300 px</option>\n                      <option value=\"400\">400x400 px</option>\n                    </select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Format</label>\n                    <select className=\"w-full px-3 py-2 border rounded-md text-sm\">\n                      <option value=\"png\">PNG</option>\n                      <option value=\"svg\">SVG</option>\n                      <option value=\"pdf\">PDF</option>\n                    </select>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Results Display */}\n          {results.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Generation Results</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Asset ID</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {results.map(result => (\n                      <TableRow key={result.assetId}>\n                        <TableCell className=\"font-medium\">{result.assetId}</TableCell>\n                        <TableCell>\n                          {result.success ? (\n                            <span className=\"text-green-600 flex items-center\">\n                              <CheckCircle className=\"h-4 w-4 mr-1\" />\n                              Success\n                            </span>\n                          ) : (\n                            <span className=\"text-red-600 flex items-center\">\n                              <AlertTriangle className=\"h-4 w-4 mr-1\" />\n                              Failed\n                            </span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {result.success && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => {\n                                const link = document.createElement('a')\n                                link.download = `qr-${result.assetId}.png`\n                                link.href = result.qrCode\n                                link.click()\n                              }}\n                            >\n                              <Download className=\"h-4 w-4 mr-1\" />\n                              Download\n                            </Button>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\custom-report-builder.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[525,528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[525,528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2304,2307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2304,2307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\n\nconst FIELD_OPTIONS = [\n  { value: 'asset_id', label: 'Asset ID' },\n  { value: 'name', label: 'Name' },\n  { value: 'category', label: 'Category' },\n  { value: 'status', label: 'Status' },\n  { value: 'created_at', label: 'Created At' },\n]\n\nexport default function CustomReportBuilder({\n  report,\n  onClose,\n}: {\n  report?: any\n  onClose: () => void\n}) {\n  const [name, setName] = useState(report?.name || '')\n  const [fields, setFields] = useState<string[]>(report?.config?.fields || ['asset_id', 'name'])\n  const [dateFrom, setDateFrom] = useState(report?.config?.dateFrom || '')\n  const [dateTo, setDateTo] = useState(report?.config?.dateTo || '')\n  const [category, setCategory] = useState(report?.config?.category || '')\n  const [status, setStatus] = useState(report?.config?.status || '')\n  const [groupBy, setGroupBy] = useState(report?.config?.groupBy || '')\n  const [sortBy, setSortBy] = useState(report?.config?.sortBy || '')\n  const [sortDir, setSortDir] = useState(report?.config?.sortDir || 'asc')\n  const [error, setError] = useState<string | null>(null)\n  const [saving, setSaving] = useState(false)\n\n  const handleFieldChange = (field: string) => {\n    setFields(prev => (prev.includes(field) ? prev.filter(f => f !== field) : [...prev, field]))\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(null)\n    setSaving(true)\n    try {\n      const config = { fields, dateFrom, dateTo, category, status, groupBy, sortBy, sortDir }\n      let res, data\n      if (report) {\n        res = await fetch(`/api/custom-reports/${report.id}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ name, config }),\n        })\n        data = await res.json()\n      } else {\n        res = await fetch('/api/custom-reports', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ name, config }),\n        })\n        data = await res.json()\n      }\n      if (data.error) throw new Error(data.error)\n      onClose()\n    } catch (e: any) {\n      setError(e.message)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  return (\n    <div className=\"border rounded p-4 mt-6 bg-gray-50\">\n      <form className=\"space-y-4\" onSubmit={handleSubmit}>\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Report Name</label>\n          <Input value={name} onChange={e => setName(e.target.value)} required />\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Fields</label>\n          <div className=\"flex gap-2 flex-wrap\">\n            {FIELD_OPTIONS.map(opt => (\n              <label key={opt.value} className=\"flex items-center gap-1\">\n                <input\n                  type=\"checkbox\"\n                  checked={fields.includes(opt.value)}\n                  onChange={() => handleFieldChange(opt.value)}\n                />\n                {opt.label}\n              </label>\n            ))}\n          </div>\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium mb-1\">Filters</label>\n          <div className=\"flex gap-2 flex-wrap\">\n            <div>\n              <label className=\"block text-xs mb-0.5\">Date From</label>\n              <input\n                type=\"date\"\n                value={dateFrom}\n                onChange={e => setDateFrom(e.target.value)}\n                className=\"border rounded px-2 py-1\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs mb-0.5\">Date To</label>\n              <input\n                type=\"date\"\n                value={dateTo}\n                onChange={e => setDateTo(e.target.value)}\n                className=\"border rounded px-2 py-1\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs mb-0.5\">Category</label>\n              <input\n                type=\"text\"\n                value={category}\n                onChange={e => setCategory(e.target.value)}\n                placeholder=\"e.g. IT\"\n                className=\"border rounded px-2 py-1\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs mb-0.5\">Status</label>\n              <input\n                type=\"text\"\n                value={status}\n                onChange={e => setStatus(e.target.value)}\n                placeholder=\"e.g. active\"\n                className=\"border rounded px-2 py-1\"\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"flex gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Group by</label>\n            <select\n              className=\"border rounded px-2 py-1\"\n              value={groupBy}\n              onChange={e => setGroupBy(e.target.value)}\n            >\n              <option value=\"\">None</option>\n              {FIELD_OPTIONS.map(opt => (\n                <option key={opt.value} value={opt.value}>\n                  {opt.label}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Sort by</label>\n            <select\n              className=\"border rounded px-2 py-1\"\n              value={sortBy}\n              onChange={e => setSortBy(e.target.value)}\n            >\n              <option value=\"\">None</option>\n              {FIELD_OPTIONS.map(opt => (\n                <option key={opt.value} value={opt.value}>\n                  {opt.label}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Sort direction</label>\n            <select\n              className=\"border rounded px-2 py-1\"\n              value={sortDir}\n              onChange={e => setSortDir(e.target.value)}\n            >\n              <option value=\"asc\">Ascending</option>\n              <option value=\"desc\">Descending</option>\n            </select>\n          </div>\n        </div>\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        <div className=\"flex gap-2\">\n          <Button type=\"submit\" disabled={saving}>\n            {saving ? 'Saving...' : 'Save Report'}\n          </Button>\n          <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\dashboard-content.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Database' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":11},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":67,"column":9,"nodeType":"JSXOpeningElement","endLine":67,"endColumn":94},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1932,1935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1932,1935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2084,2087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2084,2087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2105,2108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2105,2108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2553,2556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2553,2556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2636,2639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2636,2639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3795,3798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3795,3798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4481,4484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4481,4484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkProfile' and 'fetchStats'. Either include them or remove the dependency array.","line":177,"column":6,"nodeType":"ArrayExpression","endLine":177,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [user, loading, router, mounted, checkProfile, fetchStats]","fix":{"range":[5164,5196],"text":"[user, loading, router, mounted, checkProfile, fetchStats]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":240,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":240,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { useAuth } from '@/components/auth/auth-provider'\nimport { createClient } from '@/lib/supabase/client'\nimport AssetDashboard from '@/components/asset-dashboard'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport {\n  Package,\n  Plus,\n  QrCode,\n  BarChart3,\n  MapPin,\n  Settings,\n  Layers,\n  Users,\n  Database,\n  FileText,\n  Download,\n  Upload,\n  Search,\n  Shield,\n  Globe,\n  Zap,\n  History,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  DollarSign,\n  FileImage,\n  Navigation,\n  Eye,\n  Grid3X3,\n  Sparkles,\n  ArrowRight,\n  TrendingUp,\n  Activity,\n  Building2,\n  CreditCard,\n  User,\n} from 'lucide-react'\nimport Link from 'next/link'\nimport { useToast } from '@/hooks/use-toast'\nimport { getAssetStats } from '@/lib/asset-actions'\nimport { Progress } from '@/components/ui/progress'\nimport SignOutButton from '@/components/auth/sign-out-button'\nimport NotificationsBell from '@/components/notifications-bell'\nimport { useBranding } from '@/components/branding-provider'\n\ninterface AssetStats {\n  total: number\n  byStatus: Record<string, number>\n  byCategory: Record<string, number>\n  totalValue: number\n  recentAdditions?: number\n}\n\nfunction DashboardHeader() {\n  const branding = useBranding()\n  return (\n    <div className=\"flex items-center space-x-3\">\n      {branding?.logoUrl && (\n        <img src={branding.logoUrl} alt=\"Logo\" className=\"h-8 w-8 rounded bg-white border\" />\n      )}\n      <h1 className=\"text-2xl font-bold text-gray-900\">\n        {branding?.companyName || 'AssetTracker Pro'}\n      </h1>\n    </div>\n  )\n}\n\nfunction GeofenceAlertsPanel() {\n  const [events, setEvents] = useState<any[]>([])\n  const [stats, setStats] = useState({ entries: 0, exits: 0 })\n  useEffect(() => {\n    const supabase = createClient()\n    let subscription: any\n    let polling: any\n    async function fetchEvents() {\n      const since = new Date()\n      since.setHours(0, 0, 0, 0)\n      const { data } = await supabase\n        .from('geofence_events')\n        .select('*, asset:asset_id(name), geofence:geofence_id(name)')\n        .gte('timestamp', since.toISOString())\n        .order('timestamp', { ascending: false })\n        .limit(10)\n      setEvents(data || [])\n      setStats({\n        entries: (data || []).filter((ev: any) => ev.event_type === 'entry').length,\n        exits: (data || []).filter((ev: any) => ev.event_type === 'exit').length,\n      })\n    }\n    fetchEvents()\n    // Try to use Supabase real-time if available\n    try {\n      subscription = supabase\n        .channel('public:geofence_events')\n        .on(\n          'postgres_changes',\n          { event: '*', schema: 'public', table: 'geofence_events' },\n          fetchEvents\n        )\n        .subscribe()\n    } catch {\n      // Fallback to polling\n      polling = setInterval(fetchEvents, 10000)\n    }\n    return () => {\n      if (subscription) supabase.removeChannel(subscription)\n      if (polling) clearInterval(polling)\n    }\n  }, [])\n  return (\n    <div className=\"mb-6\">\n      <div className=\"flex items-center gap-2 mb-2\">\n        <AlertTriangle className=\"h-5 w-5 text-orange-600\" />\n        <span className=\"font-semibold\">Geofence Alerts Today</span>\n        <span className=\"ml-4 text-xs text-gray-500\">\n          Entries: {stats.entries} | Exits: {stats.exits}\n        </span>\n      </div>\n      <div className=\"space-y-1\">\n        {events.length === 0 ? (\n          <div className=\"text-xs text-gray-500\">No geofence events today.</div>\n        ) : (\n          events.map((ev: any) => (\n            <div key={ev.id} className=\"flex items-center gap-2 text-xs\">\n              <MapPin className=\"h-4 w-4 text-blue-600\" />\n              <span>\n                <b>{ev.event_type === 'entry' ? 'Entered' : 'Exited'}</b>{' '}\n                <b>{ev.geofence?.name || ev.geofence_id}</b> by{' '}\n                <b>{ev.asset?.name || ev.asset_id}</b> at{' '}\n                {new Date(ev.timestamp).toLocaleTimeString()}\n              </span>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default function DashboardContent() {\n  const { user, loading } = useAuth()\n  const router = useRouter()\n  const [profile, setProfile] = useState<any>(null)\n  const [profileLoading, setProfileLoading] = useState(true)\n  const [mounted, setMounted] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [activeTab, setActiveTab] = useState('overview')\n  const [stats, setStats] = useState<AssetStats | null>(null)\n  const { toast } = useToast()\n  const [refreshKey, setRefreshKey] = useState(0)\n\n  // Ensure component is mounted before accessing browser APIs\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  useEffect(() => {\n    if (!mounted) return\n\n    if (!loading && !user) {\n      router.push('/login')\n      return\n    }\n\n    if (user) {\n      checkProfile()\n      fetchStats()\n    }\n  }, [user, loading, router, mounted])\n\n  const checkProfile = async () => {\n    try {\n      setError(null)\n      console.log('Checking profile for user:', user?.id)\n\n      // Create client with explicit error handling\n      let supabase\n      try {\n        supabase = createClient()\n        console.log('Dashboard: Supabase client created successfully')\n      } catch (err) {\n        console.error('Dashboard: Error creating Supabase client:', err)\n        setError('Failed to initialize database connection. Please refresh and try again.')\n        setProfileLoading(false)\n        return\n      }\n\n      // Fetch profile with error handling\n      try {\n        const { data: profile, error } = await supabase\n          .from('profiles')\n          .select('*')\n          .eq('id', user?.id)\n          .single()\n\n        if (error) {\n          if (error.code === 'PGRST116') {\n            console.log('No profile found, redirecting to profile setup')\n            router.push('/profile-setup')\n            return\n          }\n\n          throw error\n        }\n\n        console.log('Profile fetched successfully:', profile)\n        setProfile(profile)\n      } catch (error) {\n        console.error('Error fetching profile:', error)\n        setError('Failed to load your profile. Please refresh and try again.')\n      }\n    } catch (error) {\n      console.error('Error in checkProfile:', error)\n      setError('An unexpected error occurred. Please refresh and try again.')\n    } finally {\n      setProfileLoading(false)\n    }\n  }\n\n  const fetchStats = async () => {\n    try {\n      const result = await getAssetStats()\n      if (result.error) {\n        toast({\n          title: 'Error Loading Stats',\n          description: result.error,\n          variant: 'destructive',\n        })\n      } else {\n        setStats(result.data as AssetStats)\n      }\n    } catch (error) {\n      toast({\n        title: 'Error Loading Stats',\n        description: 'Failed to load asset statistics',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  const handleRefresh = () => {\n    setRefreshKey(k => k + 1)\n    fetchStats()\n  }\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      active: 'bg-green-100 text-green-800',\n      maintenance: 'bg-amber-100 text-amber-800',\n      retired: 'bg-gray-100 text-gray-800',\n      lost: 'bg-red-100 text-red-800',\n      damaged: 'bg-orange-100 text-orange-800',\n    }\n    return colors[status as keyof typeof colors] || 'bg-blue-100 text-blue-800'\n  }\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value)\n  }\n\n  // Don't render anything until mounted\n  if (!mounted) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Initializing...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (loading || profileLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading dashboard...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"text-red-600\">Error Loading Dashboard</CardTitle>\n            <CardDescription>{error}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button onClick={() => window.location.reload()} className=\"w-full\">\n              Refresh Page\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  if (!user) {\n    return null // Will redirect to login\n  }\n\n  if (!profile) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle>Profile Setup Required</CardTitle>\n            <CardDescription>Please complete your profile to access the dashboard.</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button asChild className=\"w-full\">\n              <Link href=\"/profile-setup\">Complete Profile Setup</Link>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  const featureCategories = [\n    {\n      id: 'asset-management',\n      title: 'Asset Management',\n      icon: Package,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n      borderColor: 'border-blue-200',\n      description: 'Complete asset lifecycle management',\n      features: [\n        { name: 'Asset Dashboard', href: '/assets', icon: Grid3X3 },\n        { name: 'Add New Asset', href: '/add-asset', icon: Plus },\n        { name: 'Asset Search', href: '/assets', icon: Search },\n        { name: 'Asset History', href: '/assets', icon: History },\n        { name: 'Asset Attachments', href: '/assets', icon: FileImage },\n        { name: 'Asset Depreciation', href: '/assets', icon: DollarSign },\n      ],\n    },\n    {\n      id: 'qr-system',\n      title: 'QR Code System',\n      icon: QrCode,\n      color: 'text-purple-600',\n      bgColor: 'bg-purple-50',\n      borderColor: 'border-purple-200',\n      description: 'Advanced QR code generation and scanning',\n      features: [\n        { name: 'QR Management', href: '/qr-management', icon: QrCode },\n        { name: 'QR Scanner', href: '/qr-test', icon: Eye },\n        { name: 'Bulk QR Operations', href: '/preview', icon: Layers },\n        { name: 'QR Analytics', href: '/analytics', icon: BarChart3 },\n      ],\n    },\n    {\n      id: 'geofencing',\n      title: 'Geofencing & Location',\n      icon: MapPin,\n      color: 'text-green-600',\n      bgColor: 'bg-green-50',\n      borderColor: 'border-green-200',\n      description: 'GPS tracking and geofence management',\n      features: [\n        { name: 'Interactive Maps', href: '/asset-tracker-preview', icon: Globe },\n        { name: 'Geofence Management', href: '/asset/geofence-management', icon: Navigation },\n        { name: 'Location History', href: '/assets', icon: History },\n        { name: 'Geofence Alerts', href: '/assets', icon: AlertTriangle },\n      ],\n    },\n    {\n      id: 'analytics',\n      title: 'Analytics & Reporting',\n      icon: BarChart3,\n      color: 'text-orange-600',\n      bgColor: 'bg-orange-50',\n      borderColor: 'border-orange-200',\n      description: 'Comprehensive analytics and reporting',\n      features: [\n        { name: 'Analytics Dashboard', href: '/analytics', icon: BarChart3 },\n        { name: 'Real-time Charts', href: '/analytics', icon: Zap },\n        { name: 'Activity Feed', href: '/dashboard', icon: Clock },\n        { name: 'Custom Reports', href: '/analytics', icon: FileText },\n      ],\n    },\n    {\n      id: 'bulk-operations',\n      title: 'Bulk Operations',\n      icon: Layers,\n      color: 'text-indigo-600',\n      bgColor: 'bg-indigo-50',\n      borderColor: 'border-indigo-200',\n      description: 'Efficient bulk processing tools',\n      features: [\n        { name: 'Bulk Import', href: '/assets', icon: Upload },\n        { name: 'Bulk Export', href: '/assets', icon: Download },\n        { name: 'Bulk QR Generation', href: '/preview', icon: QrCode },\n        { name: 'Bulk Assignment', href: '/assets', icon: Users },\n      ],\n    },\n    {\n      id: 'system-admin',\n      title: 'System Administration',\n      icon: Settings,\n      color: 'text-red-600',\n      bgColor: 'bg-red-50',\n      borderColor: 'border-red-200',\n      description: 'Advanced system administration tools',\n      features: [\n        { name: 'Organization Settings', href: '/settings/tenant', icon: Building2 },\n        { name: 'Billing & Plans', href: '/settings/billing', icon: CreditCard },\n        { name: 'Team Management', href: '/settings/team', icon: Users },\n        { name: 'Security Settings', href: '/settings/security', icon: Shield },\n      ],\n    },\n  ]\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-2\">\n              <DashboardHeader />\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <NotificationsBell />\n              <span className=\"text-sm text-gray-600\">\n                Welcome, {profile.full_name || user.email}\n              </span>\n              <Link\n                href=\"/settings/profile\"\n                className=\"flex items-center gap-2 text-sm text-blue-600 hover:text-blue-800\"\n              >\n                <User className=\"h-4 w-4\" />\n                Profile\n              </Link>\n              <SignOutButton />\n              <Button asChild size=\"sm\">\n                <Link href=\"/add-asset\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Asset\n                </Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Quick Actions</CardTitle>\n              <Plus className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <Button asChild className=\"w-full\">\n                <Link href=\"/add-asset\">Add New Asset</Link>\n              </Button>\n              <Button variant=\"outline\" className=\"w-full mt-2\" onClick={handleRefresh}>\n                Refresh Dashboard\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">QR Management</CardTitle>\n              <QrCode className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <Button asChild variant=\"outline\" className=\"w-full\">\n                <Link href=\"/qr-management\">Manage QR Codes</Link>\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Analytics</CardTitle>\n              <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <Button asChild variant=\"outline\" className=\"w-full\">\n                <Link href=\"/analytics\">View Analytics</Link>\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Geofence Alerts Panel */}\n        <GeofenceAlertsPanel />\n\n        {/* Main Dashboard Content */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"overview\">Dashboard Overview</TabsTrigger>\n            <TabsTrigger value=\"features\">All Features</TabsTrigger>\n          </TabsList>\n\n          {/* Dashboard Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Pass refreshKey as a key to analytics/child components if needed */}\n            <AssetDashboard key={refreshKey} />\n          </TabsContent>\n\n          {/* All Features Tab */}\n          <TabsContent value=\"features\" className=\"space-y-6\">\n            <div className=\"text-center mb-8\">\n              <div className=\"flex items-center justify-center mb-4\">\n                <Sparkles className=\"h-8 w-8 text-blue-600 mr-3\" />\n                <h2 className=\"text-3xl font-bold text-gray-900\">All Features</h2>\n              </div>\n              <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n                Access all the powerful features available in AssetPro. Each feature is fully\n                implemented and ready to use.\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {featureCategories.map((category, index) => (\n                <Card\n                  key={index}\n                  className={`${category.borderColor} ${category.bgColor} hover:shadow-lg transition-all duration-200 hover:scale-105`}\n                >\n                  <CardHeader>\n                    <CardTitle className={`flex items-center ${category.color}`}>\n                      <category.icon className=\"h-6 w-6 mr-3\" />\n                      {category.title}\n                    </CardTitle>\n                    <CardDescription className=\"text-sm\">{category.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {category.features.map((feature, featureIndex) => (\n                        <Link key={featureIndex} href={feature.href}>\n                          <div className=\"flex items-center space-x-3 p-2 rounded-lg hover:bg-white/50 transition-colors cursor-pointer\">\n                            <feature.icon className=\"h-4 w-4 text-gray-600\" />\n                            <span className=\"text-sm font-medium text-gray-900\">\n                              {feature.name}\n                            </span>\n                            <ArrowRight className=\"h-3 w-3 text-gray-400 ml-auto\" />\n                          </div>\n                        </Link>\n                      ))}\n                    </div>\n                    <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                      <Button asChild variant=\"outline\" size=\"sm\" className=\"w-full\">\n                        <Link href={`/features#${category.id}`}>\n                          View All {category.title} Features\n                          <ArrowRight className=\"h-3 w-3 ml-2\" />\n                        </Link>\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Quick Access Section */}\n            <Card className=\"mt-8\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Zap className=\"h-5 w-5 mr-2\" />\n                  Quick Access\n                </CardTitle>\n                <CardDescription>Direct links to main application areas</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <Button asChild variant=\"outline\">\n                    <Link href=\"/assets\">Assets</Link>\n                  </Button>\n                  <Button asChild variant=\"outline\">\n                    <Link href=\"/analytics\">Analytics</Link>\n                  </Button>\n                  <Button asChild variant=\"outline\">\n                    <Link href=\"/docs\">Documentation</Link>\n                  </Button>\n                  <Button asChild variant=\"outline\">\n                    <Link href=\"/features\">All Features</Link>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Asset Statistics Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Assets</CardTitle>\n              <Package className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats?.total || 0}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {stats?.recentAdditions || 0} added this month\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Assets</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">\n                {stats?.byStatus?.active || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {stats?.total ? Math.round(((stats.byStatus?.active || 0) / stats.total) * 100) : 0}\n                % of total\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">In Maintenance</CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-amber-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-amber-600\">\n                {stats?.byStatus?.maintenance || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Requires attention</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Value</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">\n                {formatCurrency(stats?.totalValue || 0)}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Asset portfolio value</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Asset Status Breakdown */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BarChart3 className=\"h-5 w-5 mr-2\" />\n                Asset Status Distribution\n              </CardTitle>\n              <CardDescription>Breakdown of assets by current status</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {stats?.byStatus &&\n                Object.entries(stats.byStatus).map(([status, count]) => (\n                  <div key={status} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge className={getStatusColor(status)}>\n                        {status.charAt(0).toUpperCase() + status.slice(1)}\n                      </Badge>\n                      <span className=\"text-sm text-muted-foreground\">{count} assets</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Progress\n                        value={stats.total ? (count / stats.total) * 100 : 0}\n                        className=\"w-20\"\n                      />\n                      <span className=\"text-sm font-medium\">\n                        {stats.total ? Math.round((count / stats.total) * 100) : 0}%\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              {(!stats?.byStatus || Object.keys(stats.byStatus).length === 0) && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                  <p>No assets found</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <TrendingUp className=\"h-5 w-5 mr-2\" />\n                Asset Categories\n              </CardTitle>\n              <CardDescription>Assets organized by category</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {stats?.byCategory &&\n                Object.entries(stats.byCategory).map(([category, count]) => (\n                  <div key={category} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm font-medium capitalize\">\n                        {category.replace('-', ' ')}\n                      </span>\n                      <span className=\"text-sm text-muted-foreground\">{count} assets</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Progress\n                        value={stats.total ? (count / stats.total) * 100 : 0}\n                        className=\"w-20\"\n                      />\n                      <span className=\"text-sm font-medium\">\n                        {stats.total ? Math.round((count / stats.total) * 100) : 0}%\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              {(!stats?.byCategory || Object.keys(stats.byCategory).length === 0) && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                  <p>No categories found</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Activity className=\"h-5 w-5 mr-2\" />\n              Quick Actions\n            </CardTitle>\n            <CardDescription>Common asset management tasks</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Button asChild className=\"h-auto p-4 flex flex-col items-center space-y-2\">\n                <Link href=\"/add-asset\">\n                  <Plus className=\"h-6 w-6\" />\n                  <span>Add New Asset</span>\n                </Link>\n              </Button>\n\n              <Button\n                asChild\n                variant=\"outline\"\n                className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n              >\n                <Link href=\"/assets\">\n                  <Package className=\"h-6 w-6\" />\n                  <span>View All Assets</span>\n                </Link>\n              </Button>\n\n              <Button\n                asChild\n                variant=\"outline\"\n                className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n              >\n                <Link href=\"/analytics\">\n                  <BarChart3 className=\"h-6 w-6\" />\n                  <span>Analytics</span>\n                </Link>\n              </Button>\n\n              <Button\n                asChild\n                variant=\"outline\"\n                className=\"h-auto p-4 flex flex-col items-center space-y-2\"\n              >\n                <Link href=\"/qr-management\">\n                  <QrCode className=\"h-6 w-6\" />\n                  <span>QR Management</span>\n                </Link>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* System Status */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card className=\"border-green-200 bg-green-50\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-green-800 flex items-center\">\n                <CheckCircle className=\"h-4 w-4 mr-2\" />\n                System Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-green-700 text-sm\">All systems operational</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-blue-200 bg-blue-50\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-blue-800 flex items-center\">\n                <Shield className=\"h-4 w-4 mr-2\" />\n                Security\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-blue-700 text-sm\">Authentication active</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-purple-200 bg-purple-50\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-purple-800 flex items-center\">\n                <Clock className=\"h-4 w-4 mr-2\" />\n                Recent Activity\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-purple-700 text-sm\">\n                {stats?.recentAdditions || 0} assets added recently\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Getting Started Guide */}\n        {(!stats || stats.total === 0) && (\n          <Card className=\"border-blue-200 bg-blue-50\">\n            <CardHeader>\n              <CardTitle className=\"text-blue-800\">Welcome to AssetPro!</CardTitle>\n              <CardDescription className=\"text-blue-700\">\n                Get started by adding your first asset to begin managing your inventory.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                    1\n                  </div>\n                  <span className=\"text-blue-800\">Add your first asset using the form above</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                    2\n                  </div>\n                  <span className=\"text-blue-800\">\n                    Generate QR codes for easy asset identification\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                    3\n                  </div>\n                  <span className=\"text-blue-800\">Track asset locations and assignments</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                    4\n                  </div>\n                  <span className=\"text-blue-800\">Monitor analytics and generate reports</span>\n                </div>\n                <Button asChild className=\"mt-4\">\n                  <Link href=\"/add-asset\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Your First Asset\n                    <ArrowRight className=\"h-4 w-4 ml-2\" />\n                  </Link>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\demo-banner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\error-boundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\fallback-dashboard.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":25,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1097,1178],"text":"\n                You&apos;re viewing this in the v0 preview environment\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1097,1178],"text":"\n                You&lsquo;re viewing this in the v0 preview environment\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1097,1178],"text":"\n                You&#39;re viewing this in the v0 preview environment\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1097,1178],"text":"\n                You&rsquo;re viewing this in the v0 preview environment\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":38,"column":65,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1673,1689],"text":"What&apos;s affected:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1673,1689],"text":"What&lsquo;s affected:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1673,1689],"text":"What&#39;s affected:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1673,1689],"text":"What&rsquo;s affected:"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { AlertTriangle, Download, RefreshCw, Database } from 'lucide-react'\n\nexport default function FallbackDashboard() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12 px-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">AssetTracker Pro</h1>\n          <p className=\"text-gray-600\">Professional Asset Management System</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className=\"border-orange-200 bg-orange-50\">\n            <CardHeader>\n              <CardTitle className=\"text-orange-800 flex items-center\">\n                <AlertTriangle className=\"h-5 w-5 mr-2\" />\n                Preview Environment Detected\n              </CardTitle>\n              <CardDescription className=\"text-orange-700\">\n                You're viewing this in the v0 preview environment\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Alert>\n                <Database className=\"h-4 w-4\" />\n                <AlertDescription>\n                  The v0 preview environment may have network restrictions that prevent full\n                  database connectivity.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-orange-800\">What's affected:</h4>\n                <ul className=\"text-sm text-orange-700 space-y-1 list-disc list-inside\">\n                  <li>Real-time database connections</li>\n                  <li>Authentication with external services</li>\n                  <li>File uploads and downloads</li>\n                  <li>Some API calls</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-green-200 bg-green-50\">\n            <CardHeader>\n              <CardTitle className=\"text-green-800 flex items-center\">\n                <Download className=\"h-5 w-5 mr-2\" />\n                Full Functionality Available\n              </CardTitle>\n              <CardDescription className=\"text-green-700\">\n                Download and run locally for complete features\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-green-800\">When running locally:</h4>\n                <ul className=\"text-sm text-green-700 space-y-1 list-disc list-inside\">\n                  <li>✅ Full database connectivity</li>\n                  <li>✅ Real-time asset tracking</li>\n                  <li>✅ GitHub/Google OAuth</li>\n                  <li>✅ File uploads</li>\n                  <li>✅ QR code generation</li>\n                  <li>✅ Team collaboration</li>\n                </ul>\n              </div>\n\n              <Button className=\"w-full\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download Complete Code\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Feature Preview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Asset Management</CardTitle>\n              <CardDescription>Track and manage all your assets</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Total Assets</span>\n                  <span className=\"font-semibold\">Demo: 24</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Active</span>\n                  <span className=\"font-semibold text-green-600\">20</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Maintenance</span>\n                  <span className=\"font-semibold text-orange-600\">3</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">Retired</span>\n                  <span className=\"font-semibold text-gray-600\">1</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">QR Code Tools</CardTitle>\n              <CardDescription>Generate and scan QR codes</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <Button variant=\"outline\" className=\"w-full\" disabled>\n                  Generate QR Code\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\" disabled>\n                  Scan QR Code\n                </Button>\n                <p className=\"text-xs text-gray-500\">Available when running locally</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Team Collaboration</CardTitle>\n              <CardDescription>Manage team access and permissions</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <Button variant=\"outline\" className=\"w-full\" disabled>\n                  Invite Team Members\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\" disabled>\n                  Manage Permissions\n                </Button>\n                <p className=\"text-xs text-gray-500\">Available when running locally</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"text-center space-y-4\">\n          <div className=\"flex justify-center space-x-4\">\n            <Button onClick={() => (window.location.href = '/client-dashboard')}>\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Try Client Dashboard\n            </Button>\n            <Button variant=\"outline\" onClick={() => (window.location.href = '/login')}>\n              Go to Login\n            </Button>\n          </div>\n\n          <p className=\"text-sm text-gray-600\">\n            For the best experience with full functionality, download the code and run it locally at\n            localhost:3000\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\geofence-map-editor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Polygon' is defined but never used.","line":4,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Popup' is defined but never used.","line":4,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":71},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":6,"column":1,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":6,"endColumn":14,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[201,214],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[846,849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[846,849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isCreating' is assigned a value but never used.","line":31,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1008,1011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1008,1011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1139,1142],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1139,1142],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2326,2329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2326,2329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2434,2437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2434,2437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2493,2496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2493,2496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3861,3864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3861,3864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3969,3972],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3969,3972],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5245,5248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5245,5248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":184,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5292,5295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5292,5295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapKey' is assigned a value but never used.","line":265,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":265,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":266,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7924,7927],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7924,7927],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'mapRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'mapRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":276,"column":16,"nodeType":"Identifier","endLine":276,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useEffect, useRef, useState } from 'react'\nimport { MapContainer, TileLayer, Polygon, FeatureGroup, useMap, Popup } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\n// @ts-ignore\nimport { EditControl } from 'react-leaflet-draw'\nimport 'leaflet-draw/dist/leaflet.draw.css'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { useToast } from '@/components/ui/use-toast'\n\ninterface Geofence {\n  id?: string\n  name: string\n  polygon: { coordinates: [number, number][][] }\n  description?: string\n  created_at?: string\n}\n\ninterface GeofenceMapEditorProps {\n  geofences: Geofence[]\n  onChange: () => void\n  userRole: string\n}\n\nfunction GeofenceDraw({ geofences, onChange, userRole }: GeofenceMapEditorProps) {\n  const map = useMap()\n  const featureGroupRef = useRef<any>(null)\n  const { toast } = useToast()\n  const [isCreating, setIsCreating] = useState(false)\n\n  // Handle create/edit/delete\n  const handleCreated = async (e: any) => {\n    try {\n      setIsCreating(true)\n      const layer = e.layer\n      const latlngs = layer.getLatLngs()[0].map((latlng: any) => [latlng.lng, latlng.lat])\n      const polygon = { type: 'Polygon', coordinates: [latlngs] }\n\n      // Prompt for zone details\n      const name = prompt('Enter zone name:') || 'New Zone'\n      if (!name.trim()) {\n        toast({\n          title: 'Error',\n          description: 'Zone name is required',\n          variant: 'destructive',\n        })\n        return\n      }\n\n      const description = prompt('Enter zone description (optional):') || ''\n\n      const res = await fetch('/api/geofence/zones', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name, polygon, description }),\n      })\n\n      if (!res.ok) {\n        throw new Error('Failed to create geofence zone')\n      }\n\n      toast({\n        title: 'Success',\n        description: `Geofence zone \"${name}\" created successfully`,\n      })\n\n      onChange()\n    } catch (error) {\n      console.error('Error creating geofence:', error)\n      toast({\n        title: 'Error',\n        description: 'Failed to create geofence zone',\n        variant: 'destructive',\n      })\n    } finally {\n      setIsCreating(false)\n    }\n  }\n\n  const handleEdited = async (e: any) => {\n    try {\n      for (const layer of Object.values(e.layers._layers)) {\n        const l = layer as any\n        const latlngs = l.getLatLngs()[0].map((latlng: any) => [latlng.lng, latlng.lat])\n        const polygon = { type: 'Polygon', coordinates: [latlngs] }\n        const id = l.options.zoneId\n        const currentName = l.options.zoneName || 'Unnamed Zone'\n        const currentDescription = l.options.zoneDescription || ''\n\n        const name = prompt('Enter zone name:', currentName) || currentName\n        if (!name.trim()) {\n          toast({\n            title: 'Error',\n            description: 'Zone name is required',\n            variant: 'destructive',\n          })\n          return\n        }\n\n        const description =\n          prompt('Enter zone description:', currentDescription) || currentDescription\n\n        const res = await fetch('/api/geofence/zones', {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ id, name, polygon, description }),\n        })\n\n        if (!res.ok) {\n          throw new Error('Failed to update geofence zone')\n        }\n      }\n\n      toast({\n        title: 'Success',\n        description: 'Geofence zone updated successfully',\n      })\n\n      onChange()\n    } catch (error) {\n      console.error('Error updating geofence:', error)\n      toast({\n        title: 'Error',\n        description: 'Failed to update geofence zone',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  const handleDeleted = async (e: any) => {\n    try {\n      for (const layer of Object.values(e.layers._layers)) {\n        const l = layer as any\n        const id = l.options.zoneId\n        const name = l.options.zoneName || 'this zone'\n\n        if (\n          typeof window !== 'undefined' &&\n          !window.confirm(`Are you sure you want to delete \"${name}\"?`)\n        ) {\n          return\n        }\n\n        const res = await fetch('/api/geofence/zones', {\n          method: 'DELETE',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ id }),\n        })\n\n        if (!res.ok) {\n          throw new Error('Failed to delete geofence zone')\n        }\n      }\n\n      toast({\n        title: 'Success',\n        description: 'Geofence zone deleted successfully',\n      })\n\n      onChange()\n    } catch (error) {\n      console.error('Error deleting geofence:', error)\n      toast({\n        title: 'Error',\n        description: 'Failed to delete geofence zone',\n        variant: 'destructive',\n      })\n    }\n  }\n\n  // Add polygons to map with zone info\n  useEffect(() => {\n    if (!map || !featureGroupRef.current) return\n\n    // Clear existing layers\n    featureGroupRef.current.clearLayers()\n\n    geofences.forEach(zone => {\n      try {\n        const latlngs = zone.polygon.coordinates[0].map(([lng, lat]) => [lat, lng])\n        if (typeof window !== 'undefined' && (window as any).L) {\n          const polygon = (window as any).L.polygon(latlngs, {\n            zoneId: zone.id,\n            zoneName: zone.name,\n            zoneDescription: zone.description,\n            color: '#3B82F6',\n            weight: 2,\n            opacity: 0.8,\n            fillColor: '#3B82F6',\n            fillOpacity: 0.2,\n          })\n\n          // Create popup content\n          const popupContent = `\n            <div style=\"min-width: 200px;\">\n              <h3 style=\"margin: 0 0 8px 0; font-weight: 600; color: #1F2937;\">${zone.name}</h3>\n              ${zone.description ? `<p style=\"margin: 0 0 8px 0; color: #6B7280; font-size: 14px;\">${zone.description}</p>` : ''}\n              <div style=\"display: flex; gap: 8px; margin-top: 8px;\">\n                <span style=\"background: #E5E7EB; padding: 2px 8px; border-radius: 12px; font-size: 12px; color: #374151;\">\n                  ${zone.polygon.coordinates[0].length} points\n                </span>\n                ${\n                  zone.created_at\n                    ? `<span style=\"background: #E5E7EB; padding: 2px 8px; border-radius: 12px; font-size: 12px; color: #374151;\">\n                  Created ${new Date(zone.created_at).toLocaleDateString()}\n                </span>`\n                    : ''\n                }\n              </div>\n            </div>\n          `\n\n          polygon.bindPopup(popupContent)\n          featureGroupRef.current.addLayer(polygon)\n        }\n      } catch (error) {\n        console.error('Error adding geofence to map:', error)\n      }\n    })\n  }, [geofences, map])\n\n  return (\n    <FeatureGroup ref={featureGroupRef}>\n      {['admin', 'manager'].includes(userRole) && (\n        <EditControl\n          position=\"topright\"\n          onCreated={handleCreated}\n          onEdited={handleEdited}\n          onDeleted={handleDeleted}\n          draw={{\n            rectangle: false,\n            circle: false,\n            marker: false,\n            polyline: false,\n            circlemarker: false,\n            polygon: {\n              allowIntersection: false,\n              drawError: {\n                color: '#e1e100',\n                message: '<strong>Error:</strong> Shape edges cannot cross!',\n              },\n              shapeOptions: {\n                color: '#3B82F6',\n                weight: 2,\n              },\n            },\n          }}\n          edit={{\n            featureGroup: featureGroupRef.current,\n            remove: true,\n          }}\n        />\n      )}\n    </FeatureGroup>\n  )\n}\n\nexport default function GeofenceMapEditor({\n  geofences,\n  onChange,\n  userRole,\n}: GeofenceMapEditorProps) {\n  const [mapKey, setMapKey] = useState(0)\n  const mapRef = useRef<any>(null)\n\n  // Force map re-render when geofences change\n  useEffect(() => {\n    setMapKey(prev => prev + 1)\n  }, [geofences.length])\n\n  useEffect(() => {\n    return () => {\n      if (mapRef.current && mapRef.current._leaflet_id) {\n        mapRef.current.remove()\n      }\n    }\n  }, [])\n\n  return (\n    <div className=\"space-y-4\">\n      <div style={{ height: 500, width: '100%' }} className=\"rounded-lg overflow-hidden border\">\n        <MapContainer ref={mapRef} style={{ height: '100%', width: '100%' }}>\n          <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n          <GeofenceDraw geofences={geofences} onChange={onChange} userRole={userRole} />\n        </MapContainer>\n      </div>\n\n      {/* Geofence Summary */}\n      <div className=\"bg-gray-50 p-4 rounded-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h4 className=\"font-semibold text-gray-900\">Geofence Zones Summary</h4>\n            <p className=\"text-sm text-gray-600\">\n              {geofences.length} zone{geofences.length !== 1 ? 's' : ''} created\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 border-blue-200\">\n              {geofences.length} Active\n            </Badge>\n            {['admin', 'manager'].includes(userRole) && (\n              <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                Edit Mode\n              </Badge>\n            )}\n          </div>\n        </div>\n\n        {geofences.length > 0 && (\n          <div className=\"mt-3 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2\">\n            {geofences.slice(0, 6).map((zone, index) => (\n              <div key={zone.id || index} className=\"text-xs bg-white p-2 rounded border\">\n                <span className=\"font-medium text-gray-900\">{zone.name}</span>\n                <span className=\"text-gray-500 ml-2\">\n                  ({zone.polygon.coordinates[0].length} points)\n                </span>\n              </div>\n            ))}\n            {geofences.length > 6 && (\n              <div className=\"text-xs text-gray-500 p-2\">+{geofences.length - 6} more zones</div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\geofence-rule-manager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[672,675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[672,675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[692,695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[692,695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[740,743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[740,743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[949,952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[949,952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1532,1535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1532,1535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1771,1774],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1771,1774],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1980,1983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1980,1983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3495,3498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3495,3498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3863,3866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3863,3866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\n\nconst TRIGGER_OPTIONS = [\n  { value: 'entry', label: 'Entry' },\n  { value: 'exit', label: 'Exit' },\n  { value: 'dwell', label: 'Dwell' },\n]\nconst ESCALATION_OPTIONS = [\n  { value: 'info', label: 'Info' },\n  { value: 'warning', label: 'Warning' },\n  { value: 'critical', label: 'Critical' },\n]\n\nexport default function GeofenceRuleManager({\n  assets = [],\n  geofences = [],\n}: {\n  assets?: any[]\n  geofences?: any[]\n}) {\n  const [rules, setRules] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [showForm, setShowForm] = useState(false)\n  const [editRule, setEditRule] = useState<any>(null)\n  const [form, setForm] = useState({\n    asset_id: '',\n    category: '',\n    geofence_id: '',\n    trigger_event: 'entry',\n    min_duration_minutes: 0,\n    notify_email: false,\n    notify_in_app: true,\n    escalation_level: 'info',\n    is_active: true,\n  })\n\n  useEffect(() => {\n    fetchRules()\n  }, [])\n\n  const fetchRules = async () => {\n    setLoading(true)\n    setError(null)\n    try {\n      const res = await fetch('/api/geofence-rules')\n      const data = await res.json()\n      if (data.error) throw new Error(data.error)\n      setRules(data.rules)\n    } catch (e: any) {\n      setError(e.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value, type } = e.target\n    let newValue: any = value\n    if (type === 'checkbox' && e.target instanceof HTMLInputElement) {\n      newValue = e.target.checked\n    }\n    setForm(prev => ({ ...prev, [name]: newValue }))\n  }\n\n  const handleEdit = (rule: any) => {\n    setEditRule(rule)\n    setShowForm(true)\n    setForm({\n      asset_id: rule.asset_id || '',\n      category: rule.category || '',\n      geofence_id: rule.geofence_id || '',\n      trigger_event: rule.trigger_event || 'entry',\n      min_duration_minutes: rule.min_duration_minutes || 0,\n      notify_email: !!rule.notify_email,\n      notify_in_app: !!rule.notify_in_app,\n      escalation_level: rule.escalation_level || 'info',\n      is_active: !!rule.is_active,\n    })\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(null)\n    try {\n      let res, data\n      if (editRule) {\n        res = await fetch(`/api/geofence-rules/${editRule.id}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(form),\n        })\n        data = await res.json()\n      } else {\n        res = await fetch('/api/geofence-rules', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(form),\n        })\n        data = await res.json()\n      }\n      if (data.error) throw new Error(data.error)\n      setShowForm(false)\n      setEditRule(null)\n      setForm({\n        asset_id: '',\n        category: '',\n        geofence_id: '',\n        trigger_event: 'entry',\n        min_duration_minutes: 0,\n        notify_email: false,\n        notify_in_app: true,\n        escalation_level: 'info',\n        is_active: true,\n      })\n      fetchRules()\n    } catch (e: any) {\n      setError(e.message)\n    }\n  }\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('Delete this rule?')) return\n    setError(null)\n    try {\n      const res = await fetch(`/api/geofence-rules/${id}`, { method: 'DELETE' })\n      const data = await res.json()\n      if (data.error) throw new Error(data.error)\n      fetchRules()\n    } catch (e: any) {\n      setError(e.message)\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Geofence Rules</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          {loading ? (\n            <div>Loading rules...</div>\n          ) : (\n            <>\n              <div className=\"mb-4 flex justify-between items-center\">\n                <div className=\"font-medium\">Existing Rules</div>\n                <Button\n                  onClick={() => {\n                    setShowForm(true)\n                    setEditRule(null)\n                  }}\n                >\n                  New Rule\n                </Button>\n              </div>\n              <div className=\"space-y-2\">\n                {rules.length === 0 && <div className=\"text-gray-500\">No rules found.</div>}\n                {rules.map(rule => (\n                  <div key={rule.id} className=\"flex items-center gap-4 border p-2 rounded\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-semibold\">\n                        {rule.trigger_event} - {rule.geofence_id}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        Asset: {rule.asset_id || 'Any'} | Category: {rule.category || 'Any'} |\n                        Escalation: {rule.escalation_level}\n                      </div>\n                    </div>\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(rule)}>\n                      Edit\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleDelete(rule.id)}>\n                      Delete\n                    </Button>\n                  </div>\n                ))}\n              </div>\n              {showForm && (\n                <form className=\"mt-6 space-y-4\" onSubmit={handleSubmit}>\n                  <div className=\"flex gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Asset</label>\n                      <select\n                        name=\"asset_id\"\n                        className=\"border rounded px-2 py-1\"\n                        value={form.asset_id}\n                        onChange={handleInputChange}\n                      >\n                        <option value=\"\">Any</option>\n                        {assets.map(a => (\n                          <option key={a.id} value={a.id}>\n                            {a.asset_id} - {a.name}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Category</label>\n                      <Input\n                        name=\"category\"\n                        value={form.category}\n                        onChange={handleInputChange}\n                        placeholder=\"Any\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Geofence Zone</label>\n                      <select\n                        name=\"geofence_id\"\n                        className=\"border rounded px-2 py-1\"\n                        value={form.geofence_id}\n                        onChange={handleInputChange}\n                        required\n                      >\n                        <option value=\"\">Select...</option>\n                        {geofences.map(g => (\n                          <option key={g.id} value={g.id}>\n                            {g.name}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Trigger Event</label>\n                      <select\n                        name=\"trigger_event\"\n                        className=\"border rounded px-2 py-1\"\n                        value={form.trigger_event}\n                        onChange={handleInputChange}\n                        required\n                      >\n                        {TRIGGER_OPTIONS.map(opt => (\n                          <option key={opt.value} value={opt.value}>\n                            {opt.label}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Min Duration (min)</label>\n                      <Input\n                        name=\"min_duration_minutes\"\n                        type=\"number\"\n                        value={form.min_duration_minutes}\n                        onChange={handleInputChange}\n                        min={0}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Escalation</label>\n                      <select\n                        name=\"escalation_level\"\n                        className=\"border rounded px-2 py-1\"\n                        value={form.escalation_level}\n                        onChange={handleInputChange}\n                      >\n                        {ESCALATION_OPTIONS.map(opt => (\n                          <option key={opt.value} value={opt.value}>\n                            {opt.label}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-4 items-center\">\n                    <label className=\"flex items-center gap-1\">\n                      <input\n                        type=\"checkbox\"\n                        name=\"notify_email\"\n                        checked={form.notify_email}\n                        onChange={handleInputChange}\n                      />{' '}\n                      Email\n                    </label>\n                    <label className=\"flex items-center gap-1\">\n                      <input\n                        type=\"checkbox\"\n                        name=\"notify_in_app\"\n                        checked={form.notify_in_app}\n                        onChange={handleInputChange}\n                      />{' '}\n                      In-App\n                    </label>\n                    <label className=\"flex items-center gap-1\">\n                      <input\n                        type=\"checkbox\"\n                        name=\"is_active\"\n                        checked={form.is_active}\n                        onChange={handleInputChange}\n                      />{' '}\n                      Active\n                    </label>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button type=\"submit\">{editRule ? 'Save Changes' : 'Save Rule'}</Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setShowForm(false)\n                        setEditRule(null)\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\github-oauth-fix.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":14,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[500,556],"text":"\n            Fix &quot;This Site is Blocked\" Error\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[500,556],"text":"\n            Fix &ldquo;This Site is Blocked\" Error\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[500,556],"text":"\n            Fix &#34;This Site is Blocked\" Error\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[500,556],"text":"\n            Fix &rdquo;This Site is Blocked\" Error\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":14,"column":38,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[500,556],"text":"\n            Fix \"This Site is Blocked&quot; Error\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[500,556],"text":"\n            Fix \"This Site is Blocked&ldquo; Error\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[500,556],"text":"\n            Fix \"This Site is Blocked&#34; Error\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[500,556],"text":"\n            Fix \"This Site is Blocked&rdquo; Error\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":22,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[828,986],"text":"\n              The &quot;This site is blocked\" error usually means your GitHub OAuth app configuration\n              doesn't match your current setup.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[828,986],"text":"\n              The &ldquo;This site is blocked\" error usually means your GitHub OAuth app configuration\n              doesn't match your current setup.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[828,986],"text":"\n              The &#34;This site is blocked\" error usually means your GitHub OAuth app configuration\n              doesn't match your current setup.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[828,986],"text":"\n              The &rdquo;This site is blocked\" error usually means your GitHub OAuth app configuration\n              doesn't match your current setup.\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":22,"column":40,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[828,986],"text":"\n              The \"This site is blocked&quot; error usually means your GitHub OAuth app configuration\n              doesn't match your current setup.\n            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[828,986],"text":"\n              The \"This site is blocked&ldquo; error usually means your GitHub OAuth app configuration\n              doesn't match your current setup.\n            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[828,986],"text":"\n              The \"This site is blocked&#34; error usually means your GitHub OAuth app configuration\n              doesn't match your current setup.\n            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[828,986],"text":"\n              The \"This site is blocked&rdquo; error usually means your GitHub OAuth app configuration\n              doesn't match your current setup.\n            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":23,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[828,986],"text":"\n              The \"This site is blocked\" error usually means your GitHub OAuth app configuration\n              doesn&apos;t match your current setup.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[828,986],"text":"\n              The \"This site is blocked\" error usually means your GitHub OAuth app configuration\n              doesn&lsquo;t match your current setup.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[828,986],"text":"\n              The \"This site is blocked\" error usually means your GitHub OAuth app configuration\n              doesn&#39;t match your current setup.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[828,986],"text":"\n              The \"This site is blocked\" error usually means your GitHub OAuth app configuration\n              doesn&rsquo;t match your current setup.\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":66,"column":27,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2981,3002],"text":"Click &quot;New OAuth App\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2981,3002],"text":"Click &ldquo;New OAuth App\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2981,3002],"text":"Click &#34;New OAuth App\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2981,3002],"text":"Click &rdquo;New OAuth App\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":66,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2981,3002],"text":"Click \"New OAuth App&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2981,3002],"text":"Click \"New OAuth App&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2981,3002],"text":"Click \"New OAuth App&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2981,3002],"text":"Click \"New OAuth App&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { ExternalLink, AlertTriangle } from 'lucide-react'\n\nexport default function GitHubOAuthFix() {\n  return (\n    <div className=\"container py-8 max-w-4xl mx-auto\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <AlertTriangle className=\"h-5 w-5 mr-2 text-orange-500\" />\n            Fix \"This Site is Blocked\" Error\n          </CardTitle>\n          <CardDescription>Follow these steps to resolve GitHub OAuth issues</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              The \"This site is blocked\" error usually means your GitHub OAuth app configuration\n              doesn't match your current setup.\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Step 1: Update GitHub OAuth App</h3>\n            <div className=\"bg-gray-50 p-4 rounded-lg space-y-2\">\n              <p className=\"font-medium\">Go to your GitHub OAuth App settings:</p>\n              <a\n                href=\"https://github.com/settings/developers\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"inline-flex items-center text-blue-600 hover:text-blue-800\"\n              >\n                GitHub Developer Settings <ExternalLink className=\"h-4 w-4 ml-1\" />\n              </a>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Step 2: Verify These Exact URLs</h3>\n            <div className=\"bg-gray-50 p-4 rounded-lg space-y-3\">\n              <div>\n                <p className=\"font-medium text-sm text-gray-600\">Homepage URL:</p>\n                <code className=\"bg-white px-2 py-1 rounded border text-sm\">\n                  http://localhost:3000\n                </code>\n              </div>\n              <div>\n                <p className=\"font-medium text-sm text-gray-600\">Authorization callback URL:</p>\n                <code className=\"bg-white px-2 py-1 rounded border text-sm\">\n                  https://wyqohljdnrouovuqqdlt.supabase.co/auth/v1/callback\n                </code>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Step 3: Alternative - Create New OAuth App</h3>\n            <div className=\"bg-blue-50 p-4 rounded-lg space-y-2\">\n              <p className=\"text-sm\">If the issue persists, create a new GitHub OAuth app:</p>\n              <ol className=\"list-decimal list-inside text-sm space-y-1 ml-4\">\n                <li>Go to GitHub Settings → Developer settings → OAuth Apps</li>\n                <li>Click \"New OAuth App\"</li>\n                <li>\n                  Use these settings:\n                  <ul className=\"list-disc list-inside ml-4 mt-1 space-y-1\">\n                    <li>Application name: AssetTracker Pro Dev</li>\n                    <li>Homepage URL: http://localhost:3000</li>\n                    <li>\n                      Authorization callback URL:\n                      https://wyqohljdnrouovuqqdlt.supabase.co/auth/v1/callback\n                    </li>\n                  </ul>\n                </li>\n                <li>Get the new Client ID and Client Secret</li>\n                <li>Update them in your Supabase dashboard</li>\n              </ol>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Step 4: Check for Common Issues</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"bg-red-50 p-3 rounded-lg\">\n                <h4 className=\"font-medium text-red-800 mb-2\">❌ Common Mistakes</h4>\n                <ul className=\"text-sm text-red-700 space-y-1\">\n                  <li>• Wrong callback URL (missing /auth/v1/callback)</li>\n                  <li>• Using https for localhost</li>\n                  <li>• Trailing slashes in URLs</li>\n                  <li>• App in pending/suspended state</li>\n                </ul>\n              </div>\n              <div className=\"bg-green-50 p-3 rounded-lg\">\n                <h4 className=\"font-medium text-green-800 mb-2\">✅ Correct Setup</h4>\n                <ul className=\"text-sm text-green-700 space-y-1\">\n                  <li>• Exact URL matches</li>\n                  <li>• App is active and approved</li>\n                  <li>• Client ID/Secret correctly entered</li>\n                  <li>• No extra characters or spaces</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          <Alert>\n            <AlertDescription>\n              <strong>Pro Tip:</strong> After making changes to your GitHub OAuth app, wait a few\n              minutes before testing. GitHub sometimes takes time to propagate changes.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\github-oauth-setup.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":33,"column":18,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1180,1361],"text":"\n              You&apos;re currently viewing this app in the v0 preview environment. To enable GitHub\n              OAuth, you need to update your GitHub OAuth app settings.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1180,1361],"text":"\n              You&lsquo;re currently viewing this app in the v0 preview environment. To enable GitHub\n              OAuth, you need to update your GitHub OAuth app settings.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1180,1361],"text":"\n              You&#39;re currently viewing this app in the v0 preview environment. To enable GitHub\n              OAuth, you need to update your GitHub OAuth app settings.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1180,1361],"text":"\n              You&rsquo;re currently viewing this app in the v0 preview environment. To enable GitHub\n              OAuth, you need to update your GitHub OAuth app settings.\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":52,"column":31,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2018,2104],"text":"\n                Click on your &quot;AssetTracker Pro\" OAuth app to edit it.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2018,2104],"text":"\n                Click on your &ldquo;AssetTracker Pro\" OAuth app to edit it.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2018,2104],"text":"\n                Click on your &#34;AssetTracker Pro\" OAuth app to edit it.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2018,2104],"text":"\n                Click on your &rdquo;AssetTracker Pro\" OAuth app to edit it.\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":52,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2018,2104],"text":"\n                Click on your \"AssetTracker Pro&quot; OAuth app to edit it.\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2018,2104],"text":"\n                Click on your \"AssetTracker Pro&ldquo; OAuth app to edit it.\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2018,2104],"text":"\n                Click on your \"AssetTracker Pro&#34; OAuth app to edit it.\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2018,2104],"text":"\n                Click on your \"AssetTracker Pro&rdquo; OAuth app to edit it.\n              "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":108,"column":25,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4390,4426],"text":"Click &quot;Update application\" in GitHub"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4390,4426],"text":"Click &ldquo;Update application\" in GitHub"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4390,4426],"text":"Click &#34;Update application\" in GitHub"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4390,4426],"text":"Click &rdquo;Update application\" in GitHub"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":108,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4390,4426],"text":"Click \"Update application&quot; in GitHub"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4390,4426],"text":"Click \"Update application&ldquo; in GitHub"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4390,4426],"text":"Click \"Update application&#34; in GitHub"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4390,4426],"text":"Click \"Update application&rdquo; in GitHub"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":110,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4517,4572],"text":"Return to the login page and try &quot;Continue with GitHub\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4517,4572],"text":"Return to the login page and try &ldquo;Continue with GitHub\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4517,4572],"text":"Return to the login page and try &#34;Continue with GitHub\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4517,4572],"text":"Return to the login page and try &rdquo;Continue with GitHub\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":110,"column":73,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4517,4572],"text":"Return to the login page and try \"Continue with GitHub&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4517,4572],"text":"Return to the login page and try \"Continue with GitHub&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4517,4572],"text":"Return to the login page and try \"Continue with GitHub&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4517,4572],"text":"Return to the login page and try \"Continue with GitHub&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Button } from '@/components/ui/button'\nimport { ExternalLink, Copy, CheckCircle } from 'lucide-react'\nimport { useState } from 'react'\n\nexport default function GitHubOAuthSetup() {\n  const [copied, setCopied] = useState<string | null>(null)\n\n  const currentOrigin = typeof window !== 'undefined' ? window.location.origin : ''\n  const callbackUrl = 'https://wyqohljdnrouovuqqdlt.supabase.co/auth/v1/callback'\n\n  const copyToClipboard = (text: string, type: string) => {\n    navigator.clipboard.writeText(text)\n    setCopied(type)\n    setTimeout(() => setCopied(null), 2000)\n  }\n\n  return (\n    <div className=\"container py-8 max-w-4xl mx-auto\">\n      <Card>\n        <CardHeader>\n          <CardTitle>GitHub OAuth Setup for v0 Preview</CardTitle>\n          <CardDescription>\n            Configure GitHub OAuth to work with the current preview environment\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <Alert>\n            <AlertDescription>\n              You're currently viewing this app in the v0 preview environment. To enable GitHub\n              OAuth, you need to update your GitHub OAuth app settings.\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Step 1: Update GitHub OAuth App</h3>\n            <div className=\"space-y-3\">\n              <Button asChild>\n                <a\n                  href=\"https://github.com/settings/developers\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"inline-flex items-center\"\n                >\n                  Open GitHub Developer Settings <ExternalLink className=\"h-4 w-4 ml-2\" />\n                </a>\n              </Button>\n              <p className=\"text-sm text-gray-600\">\n                Click on your \"AssetTracker Pro\" OAuth app to edit it.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Step 2: Update URLs</h3>\n            <div className=\"space-y-4\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <label className=\"font-medium text-sm\">Homepage URL:</label>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(currentOrigin, 'homepage')}\n                    className=\"h-6 px-2\"\n                  >\n                    {copied === 'homepage' ? (\n                      <CheckCircle className=\"h-3 w-3\" />\n                    ) : (\n                      <Copy className=\"h-3 w-3\" />\n                    )}\n                  </Button>\n                </div>\n                <code className=\"bg-white px-3 py-2 rounded border text-sm block break-all\">\n                  {currentOrigin}\n                </code>\n              </div>\n\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <label className=\"font-medium text-sm\">Authorization callback URL:</label>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(callbackUrl, 'callback')}\n                    className=\"h-6 px-2\"\n                  >\n                    {copied === 'callback' ? (\n                      <CheckCircle className=\"h-3 w-3\" />\n                    ) : (\n                      <Copy className=\"h-3 w-3\" />\n                    )}\n                  </Button>\n                </div>\n                <code className=\"bg-white px-3 py-2 rounded border text-sm block break-all\">\n                  {callbackUrl}\n                </code>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Step 3: Save and Test</h3>\n            <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n              <li>Copy the URLs above and paste them into your GitHub OAuth app settings</li>\n              <li>Click \"Update application\" in GitHub</li>\n              <li>Wait a few minutes for changes to propagate</li>\n              <li>Return to the login page and try \"Continue with GitHub\"</li>\n            </ol>\n          </div>\n\n          <Alert>\n            <AlertDescription>\n              <strong>Alternative:</strong> You can also download this code and run it locally at\n              http://localhost:3000 where GitHub OAuth is already configured to work.\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">For Local Development</h3>\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <p className=\"text-sm mb-2\">If you prefer to run locally:</p>\n              <div className=\"space-y-1 text-sm\">\n                <p>\n                  <strong>Homepage URL:</strong> <code>http://localhost:3000</code>\n                </p>\n                <p>\n                  <strong>Authorization callback URL:</strong> <code>{callbackUrl}</code>\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\github-oauth-troubleshoot.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":27,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1009,1065],"text":"\n            Fix &quot;This Site is Blocked\" Error\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1009,1065],"text":"\n            Fix &ldquo;This Site is Blocked\" Error\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1009,1065],"text":"\n            Fix &#34;This Site is Blocked\" Error\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1009,1065],"text":"\n            Fix &rdquo;This Site is Blocked\" Error\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":27,"column":38,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1009,1065],"text":"\n            Fix \"This Site is Blocked&quot; Error\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1009,1065],"text":"\n            Fix \"This Site is Blocked&ldquo; Error\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1009,1065],"text":"\n            Fix \"This Site is Blocked&#34; Error\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1009,1065],"text":"\n            Fix \"This Site is Blocked&rdquo; Error\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":29,"column":67,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1105,1160],"text":"GitHub OAuth configuration issue - here&apos;s how to fix it"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1105,1160],"text":"GitHub OAuth configuration issue - here&lsquo;s how to fix it"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1105,1160],"text":"GitHub OAuth configuration issue - here&#39;s how to fix it"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1105,1160],"text":"GitHub OAuth configuration issue - here&rsquo;s how to fix it"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":36,"column":38,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1411,1508],"text":" Your GitHub OAuth app is configured for\n              localhost:3000, but you&apos;re accessing from:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1411,1508],"text":" Your GitHub OAuth app is configured for\n              localhost:3000, but you&lsquo;re accessing from:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1411,1508],"text":" Your GitHub OAuth app is configured for\n              localhost:3000, but you&#39;re accessing from:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1411,1508],"text":" Your GitHub OAuth app is configured for\n              localhost:3000, but you&rsquo;re accessing from:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/signup/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":53,"column":19,"nodeType":"JSXOpeningElement","endLine":53,"endColumn":37},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":163,"column":27,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6793,6821],"text":"Click &quot;Register application\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6793,6821],"text":"Click &ldquo;Register application\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6793,6821],"text":"Click &#34;Register application\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6793,6821],"text":"Click &rdquo;Register application\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":163,"column":48,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6793,6821],"text":"Click \"Register application&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6793,6821],"text":"Click \"Register application&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6793,6821],"text":"Click \"Register application&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6793,6821],"text":"Click \"Register application&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/signup/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":209,"column":15,"nodeType":"JSXOpeningElement","endLine":209,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Button } from '@/components/ui/button'\nimport { ExternalLink, Copy, CheckCircle, AlertTriangle, Info } from 'lucide-react'\nimport { useState } from 'react'\n\nexport default function GitHubOAuthTroubleshoot() {\n  const [copied, setCopied] = useState<string | null>(null)\n\n  const currentOrigin = typeof window !== 'undefined' ? window.location.origin : ''\n  const callbackUrl = 'https://wyqohljdnrouovuqqdlt.supabase.co/auth/v1/callback'\n\n  const copyToClipboard = (text: string, type: string) => {\n    navigator.clipboard.writeText(text)\n    setCopied(type)\n    setTimeout(() => setCopied(null), 2000)\n  }\n\n  return (\n    <div className=\"container py-8 max-w-4xl mx-auto\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <AlertTriangle className=\"h-5 w-5 mr-2 text-red-500\" />\n            Fix \"This Site is Blocked\" Error\n          </CardTitle>\n          <CardDescription>GitHub OAuth configuration issue - here's how to fix it</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <Alert variant=\"destructive\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Current Issue:</strong> Your GitHub OAuth app is configured for\n              localhost:3000, but you're accessing from:{' '}\n              <code className=\"bg-red-100 px-1 rounded\">{currentOrigin}</code>\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card className=\"border-green-200 bg-green-50\">\n              <CardHeader>\n                <CardTitle className=\"text-green-800 text-lg\">\n                  ✅ Quick Fix: Use Email Auth\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-green-700 text-sm mb-3\">\n                  Email authentication works immediately without any OAuth setup required.\n                </p>\n                <Button asChild className=\"w-full\">\n                  <a href=\"/signup\">Sign Up with Email</a>\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-blue-200 bg-blue-50\">\n              <CardHeader>\n                <CardTitle className=\"text-blue-800 text-lg\">🔧 Fix GitHub OAuth</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-blue-700 text-sm mb-3\">\n                  Update your GitHub OAuth app to work with v0 preview.\n                </p>\n                <Button asChild variant=\"outline\" className=\"w-full\">\n                  <a\n                    href=\"https://github.com/settings/developers\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    Open GitHub Settings <ExternalLink className=\"h-4 w-4 ml-1\" />\n                  </a>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Option 1: Update Existing GitHub OAuth App</h3>\n            <div className=\"space-y-4\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <label className=\"font-medium text-sm\">1. Update Homepage URL to:</label>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(currentOrigin, 'homepage')}\n                    className=\"h-6 px-2\"\n                  >\n                    {copied === 'homepage' ? (\n                      <CheckCircle className=\"h-3 w-3\" />\n                    ) : (\n                      <Copy className=\"h-3 w-3\" />\n                    )}\n                  </Button>\n                </div>\n                <code className=\"bg-white px-3 py-2 rounded border text-sm block break-all\">\n                  {currentOrigin}\n                </code>\n              </div>\n\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <label className=\"font-medium text-sm\">\n                    2. Keep Authorization callback URL as:\n                  </label>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(callbackUrl, 'callback')}\n                    className=\"h-6 px-2\"\n                  >\n                    {copied === 'callback' ? (\n                      <CheckCircle className=\"h-3 w-3\" />\n                    ) : (\n                      <Copy className=\"h-3 w-3\" />\n                    )}\n                  </Button>\n                </div>\n                <code className=\"bg-white px-3 py-2 rounded border text-sm block break-all\">\n                  {callbackUrl}\n                </code>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">\n              Option 2: Create New GitHub OAuth App (Recommended)\n            </h3>\n            <Alert>\n              <Info className=\"h-4 w-4\" />\n              <AlertDescription>\n                Creating a new OAuth app is often faster and avoids conflicts with existing\n                configurations.\n              </AlertDescription>\n            </Alert>\n            <div className=\"bg-blue-50 p-4 rounded-lg space-y-3\">\n              <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n                <li>\n                  Go to{' '}\n                  <a\n                    href=\"https://github.com/settings/applications/new\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-blue-600 hover:text-blue-800 underline\"\n                  >\n                    GitHub → New OAuth App <ExternalLink className=\"h-3 w-3 inline ml-1\" />\n                  </a>\n                </li>\n                <li>\n                  <strong>Application name:</strong> AssetTracker Pro v0\n                </li>\n                <li>\n                  <strong>Homepage URL:</strong>{' '}\n                  <code className=\"bg-white px-1 rounded text-xs\">{currentOrigin}</code>\n                </li>\n                <li>\n                  <strong>Authorization callback URL:</strong>{' '}\n                  <code className=\"bg-white px-1 rounded text-xs\">{callbackUrl}</code>\n                </li>\n                <li>Click \"Register application\"</li>\n                <li>Copy the new Client ID and Client Secret</li>\n                <li>\n                  Update them in your{' '}\n                  <a\n                    href=\"https://supabase.com/dashboard/project/wyqohljdnrouovuqqdlt/auth/providers\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-blue-600 hover:text-blue-800 underline\"\n                  >\n                    Supabase Dashboard <ExternalLink className=\"h-3 w-3 inline ml-1\" />\n                  </a>\n                </li>\n              </ol>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Option 3: Download and Run Locally</h3>\n            <div className=\"bg-green-50 p-4 rounded-lg\">\n              <p className=\"text-green-700 text-sm mb-3\">\n                Your existing GitHub OAuth app is already configured for localhost:3000. Download\n                the code and run it locally for immediate GitHub OAuth functionality.\n              </p>\n              <div className=\"space-y-2 text-sm\">\n                <p>\n                  <strong>Homepage URL:</strong> <code>http://localhost:3000</code> ✅ Already\n                  configured\n                </p>\n                <p>\n                  <strong>Callback URL:</strong> <code>{callbackUrl}</code> ✅ Already configured\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Important:</strong> After making changes to GitHub OAuth settings, wait 2-3\n              minutes before testing. GitHub needs time to propagate the changes.\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Button asChild className=\"w-full\">\n              <a href=\"/signup\">Try Email Signup</a>\n            </Button>\n            <Button asChild variant=\"outline\" className=\"w-full\">\n              <a\n                href=\"https://github.com/settings/applications/new\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Create New OAuth App <ExternalLink className=\"h-4 w-4 ml-1\" />\n              </a>\n            </Button>\n            <Button asChild variant=\"outline\" className=\"w-full\">\n              <a\n                href=\"https://supabase.com/dashboard/project/wyqohljdnrouovuqqdlt/auth/providers\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Update Supabase <ExternalLink className=\"h-4 w-4 ml-1\" />\n              </a>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\helpdesk-widget.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":78,"column":39,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2595,2676],"text":"\n                  Ticket submitted! We&apos;ll get back to you soon.\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2595,2676],"text":"\n                  Ticket submitted! We&lsquo;ll get back to you soon.\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2595,2676],"text":"\n                  Ticket submitted! We&#39;ll get back to you soon.\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2595,2676],"text":"\n                  Ticket submitted! We&rsquo;ll get back to you soon.\n                "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport Link from 'next/link'\n\nexport default function HelpdeskWidget() {\n  const [open, setOpen] = useState(false)\n  const [email, setEmail] = useState('')\n  const [message, setMessage] = useState('')\n  const [submitting, setSubmitting] = useState(false)\n  const [success, setSuccess] = useState(false)\n  const [error, setError] = useState('')\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setSubmitting(true)\n    setError('')\n    setSuccess(false)\n    const res = await fetch('/api/support', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, message }),\n    })\n    if (res.ok) {\n      setSuccess(true)\n      setEmail('')\n      setMessage('')\n    } else {\n      setError('Failed to submit ticket. Please try again.')\n    }\n    setSubmitting(false)\n  }\n\n  return (\n    <>\n      <Button\n        className=\"fixed bottom-6 right-6 z-50 rounded-full shadow-lg px-6 py-3 text-lg\"\n        style={{ background: 'var(--branding-primary, #2563eb)', color: 'white' }}\n        onClick={() => setOpen(true)}\n      >\n        Help\n      </Button>\n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Need Help?</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p>\n              Contact support or check our{' '}\n              <Link href=\"/docs/faq\" className=\"underline text-blue-600\">\n                FAQ\n              </Link>\n              .\n            </p>\n            <form onSubmit={handleSubmit} className=\"space-y-2\">\n              <Input\n                type=\"email\"\n                placeholder=\"Your email\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                required\n              />\n              <Textarea\n                placeholder=\"How can we help you?\"\n                value={message}\n                onChange={e => setMessage(e.target.value)}\n                required\n                rows={4}\n              />\n              <Button type=\"submit\" disabled={submitting} className=\"w-full\">\n                {submitting ? 'Sending...' : 'Submit Ticket'}\n              </Button>\n              {success && (\n                <div className=\"text-green-600 text-sm\">\n                  Ticket submitted! We'll get back to you soon.\n                </div>\n              )}\n              {error && <div className=\"text-red-600 text-sm\">{error}</div>}\n            </form>\n            <div className=\"text-xs text-gray-500\">\n              For urgent issues, email{' '}\n              <a href=\"mailto:support@example.com\" className=\"underline\">\n                support@example.com\n              </a>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\live-activity-feed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\main-navigation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Building' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Wrench' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useAuth, usePermissions } from '@/components/auth/auth-provider'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Separator } from '@/components/ui/separator'\nimport {\n  Package,\n  QrCode,\n  BarChart3,\n  MapPin,\n  Users,\n  Settings,\n  Database,\n  FileText,\n  Download,\n  Upload,\n  Search,\n  Shield,\n  Globe,\n  Zap,\n  Layers,\n  History,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  DollarSign,\n  FileImage,\n  Navigation,\n  Building,\n  Wrench,\n  Eye,\n  Plus,\n  Grid3X3,\n  Menu,\n  X,\n  Sparkles,\n} from 'lucide-react'\nimport Link from 'next/link'\nimport SignOutButton from '@/components/auth/sign-out-button'\n\ninterface MainNavigationProps {\n  className?: string\n}\n\nexport default function MainNavigation({ className }: MainNavigationProps) {\n  const { user } = useAuth()\n  const { hasPermission } = usePermissions()\n  const [isOpen, setIsOpen] = useState(false)\n\n  useEffect(() => {\n    if (!user) {\n      return\n    }\n  }, [user])\n\n  const featureCategories = [\n    {\n      title: 'Asset Management',\n      icon: Package,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n      borderColor: 'border-blue-200',\n      features: [\n        {\n          name: 'Asset Dashboard',\n          description: 'View and manage all assets',\n          href: '/assets',\n          icon: Grid3X3,\n          status: 'active',\n        },\n        {\n          name: 'Add New Asset',\n          description: 'Create new asset entries',\n          href: '/add-asset',\n          icon: Plus,\n          status: 'active',\n        },\n        {\n          name: 'Asset Search',\n          description: 'Advanced search and filtering',\n          href: '/assets',\n          icon: Search,\n          status: 'active',\n        },\n        {\n          name: 'Asset History',\n          description: 'Track asset lifecycle',\n          href: '/assets',\n          icon: History,\n          status: 'active',\n        },\n        {\n          name: 'Asset Attachments',\n          description: 'Manage asset files and documents',\n          href: '/assets',\n          icon: FileImage,\n          status: 'active',\n        },\n        {\n          name: 'Asset Depreciation',\n          description: 'Financial tracking and depreciation',\n          href: '/assets',\n          icon: DollarSign,\n          status: 'active',\n        },\n      ],\n    },\n    {\n      title: 'QR Code System',\n      icon: QrCode,\n      color: 'text-purple-600',\n      bgColor: 'bg-purple-50',\n      borderColor: 'border-purple-200',\n      features: [\n        {\n          name: 'QR Management',\n          description: 'Generate and manage QR codes',\n          href: '/qr-management',\n          icon: QrCode,\n          status: 'active',\n        },\n        {\n          name: 'QR Scanner',\n          description: 'Scan QR codes with camera',\n          href: '/qr-test',\n          icon: Eye,\n          status: 'active',\n        },\n        {\n          name: 'Bulk QR Operations',\n          description: 'Generate multiple QR codes',\n          href: '/preview',\n          icon: Layers,\n          status: 'active',\n        },\n        {\n          name: 'QR Analytics',\n          description: 'Track QR code usage',\n          href: '/analytics',\n          icon: BarChart3,\n          status: 'active',\n        },\n      ],\n    },\n    {\n      title: 'Geofencing & Location',\n      icon: MapPin,\n      color: 'text-green-600',\n      bgColor: 'bg-green-50',\n      borderColor: 'border-green-200',\n      features: [\n        {\n          name: 'Interactive Maps',\n          description: 'View assets on interactive maps',\n          href: '/asset-tracker-preview',\n          icon: Globe,\n          status: 'active',\n        },\n        {\n          name: 'Geofence Management',\n          description: 'Create and manage geofence zones',\n          href: '/asset/geofence-management',\n          icon: Navigation,\n          status: 'active',\n        },\n        {\n          name: 'Location History',\n          description: 'Track asset movement history',\n          href: '/assets',\n          icon: History,\n          status: 'active',\n        },\n        {\n          name: 'Geofence Alerts',\n          description: 'Monitor zone entry/exit',\n          href: '/assets',\n          icon: AlertTriangle,\n          status: 'active',\n        },\n      ],\n    },\n    {\n      title: 'Analytics & Reporting',\n      icon: BarChart3,\n      color: 'text-orange-600',\n      bgColor: 'bg-orange-50',\n      borderColor: 'border-orange-200',\n      features: [\n        {\n          name: 'Analytics Dashboard',\n          description: 'Comprehensive analytics',\n          href: '/analytics',\n          icon: BarChart3,\n          status: 'active',\n        },\n        {\n          name: 'Real-time Charts',\n          description: 'Live data visualization',\n          href: '/analytics',\n          icon: Zap,\n          status: 'active',\n        },\n        {\n          name: 'Activity Feed',\n          description: 'Live system activity',\n          href: '/dashboard',\n          icon: Clock,\n          status: 'active',\n        },\n        {\n          name: 'Custom Reports',\n          description: 'Generate custom reports',\n          href: '/analytics',\n          icon: FileText,\n          status: 'active',\n        },\n      ],\n    },\n    {\n      title: 'Bulk Operations',\n      icon: Layers,\n      color: 'text-indigo-600',\n      bgColor: 'bg-indigo-50',\n      borderColor: 'border-indigo-200',\n      features: [\n        {\n          name: 'Bulk Import',\n          description: 'Import assets from CSV/Excel',\n          href: '/assets',\n          icon: Upload,\n          status: 'active',\n        },\n        {\n          name: 'Bulk Export',\n          description: 'Export assets to various formats',\n          href: '/assets',\n          icon: Download,\n          status: 'active',\n        },\n        {\n          name: 'Bulk QR Generation',\n          description: 'Generate QR codes for multiple assets',\n          href: '/preview',\n          icon: QrCode,\n          status: 'active',\n        },\n        {\n          name: 'Bulk Assignment',\n          description: 'Assign multiple assets to users',\n          href: '/assets',\n          icon: Users,\n          status: 'active',\n        },\n      ],\n    },\n    {\n      title: 'System Administration',\n      icon: Settings,\n      color: 'text-red-600',\n      bgColor: 'bg-red-50',\n      borderColor: 'border-red-200',\n      features: [\n        {\n          name: 'Database Management',\n          description: 'Database tools and scripts',\n          href: '/debug-supabase',\n          icon: Database,\n          status: 'active',\n        },\n        {\n          name: 'Auth Debug',\n          description: 'Authentication troubleshooting',\n          href: '/auth/debug',\n          icon: Shield,\n          status: 'active',\n        },\n        {\n          name: 'Supabase Status',\n          description: 'Check system status',\n          href: '/supabase-test',\n          icon: CheckCircle,\n          status: 'active',\n        },\n        {\n          name: 'Environment Debug',\n          description: 'Environment configuration',\n          href: '/debug-urls',\n          icon: Settings,\n          status: 'active',\n        },\n      ],\n    },\n  ]\n\n  return (\n    <div className={className}>\n      {/* Mobile Menu Button */}\n      <div className=\"lg:hidden\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"w-full justify-between\"\n        >\n          <span>Feature Navigation</span>\n          {isOpen ? <X className=\"h-4 w-4\" /> : <Menu className=\"h-4 w-4\" />}\n        </Button>\n      </div>\n\n      {/* Navigation Content */}\n      <div className={`${isOpen ? 'block' : 'hidden'} lg:block`}>\n        <div className=\"space-y-6\">\n          {featureCategories.map((category, categoryIndex) => (\n            <Card key={categoryIndex} className={`${category.borderColor} ${category.bgColor}`}>\n              <CardHeader>\n                <CardTitle className={`flex items-center ${category.color}`}>\n                  <category.icon className=\"h-5 w-5 mr-2\" />\n                  {category.title}\n                </CardTitle>\n                <CardDescription>\n                  Access all {category.title.toLowerCase()} features\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {category.features.map((feature, featureIndex) => (\n                    <Link key={featureIndex} href={feature.href}>\n                      <Card className=\"hover:shadow-md transition-shadow cursor-pointer border-gray-200\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start space-x-3\">\n                            <feature.icon className=\"h-5 w-5 text-gray-600 mt-0.5\" />\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"flex items-center space-x-2\">\n                                <h4 className=\"font-medium text-sm text-gray-900 truncate\">\n                                  {feature.name}\n                                </h4>\n                                <Badge\n                                  variant={feature.status === 'active' ? 'default' : 'secondary'}\n                                  className=\"text-xs\"\n                                >\n                                  {feature.status}\n                                </Badge>\n                              </div>\n                              <p className=\"text-xs text-gray-600 mt-1\">{feature.description}</p>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </Link>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Quick Access Links */}\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Zap className=\"h-5 w-5 mr-2\" />\n              Quick Access\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n              <Button asChild variant=\"outline\" size=\"sm\">\n                <Link href=\"/dashboard\">Dashboard</Link>\n              </Button>\n              <Button asChild variant=\"outline\" size=\"sm\">\n                <Link href=\"/assets\">Assets</Link>\n              </Button>\n              <Button asChild variant=\"outline\" size=\"sm\">\n                <Link href=\"/analytics\">Analytics</Link>\n              </Button>\n              <Button asChild variant=\"outline\" size=\"sm\">\n                <Link href=\"/docs\">Documentation</Link>\n              </Button>\n            </div>\n            <div className=\"mt-4\">\n              <Button asChild className=\"w-full\" size=\"sm\">\n                <Link href=\"/features\">\n                  <Sparkles className=\"h-4 w-4 mr-2\" />\n                  View All Features\n                </Link>\n              </Button>\n            </div>\n            {hasPermission('manage:roles') && (\n              <div className=\"mt-2\">\n                <Button asChild className=\"w-full\" size=\"sm\" variant=\"destructive\">\n                  <Link href=\"/admin\">\n                    <Shield className=\"h-4 w-4 mr-2\" />\n                    Admin Panel\n                  </Link>\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n        <div className=\"flex items-center space-x-4\">{user && <SignOutButton />}</div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\maintenance-calendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[206,209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[206,209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[223,226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[223,226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'assetId' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[891,894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[891,894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\n// You can use a simple calendar library or build a basic grid\n// For brevity, this is a minimal calendar view\n\ninterface MaintenanceCalendarProps {\n  assetId: string\n  schedules: any[]\n  history: any[]\n}\n\nexport default function MaintenanceCalendar({\n  assetId,\n  schedules,\n  history,\n}: MaintenanceCalendarProps) {\n  // Flatten all dates (next_due for schedules, performed_at for history)\n  const events = [\n    ...schedules.map(s => ({\n      date: s.next_due,\n      type: s.status === 'overdue' ? 'overdue' : 'due',\n      label: s.type,\n    })),\n    ...history.map(h => ({ date: h.performed_at, type: 'completed', label: 'Completed' })),\n  ]\n  // Group by date\n  const grouped = events.reduce(\n    (acc, ev) => {\n      if (!ev.date) return acc\n      acc[ev.date] = acc[ev.date] || []\n      acc[ev.date].push(ev)\n      return acc\n    },\n    {} as Record<string, any[]>\n  )\n\n  // Show current month\n  const today = new Date()\n  const year = today.getFullYear()\n  const month = today.getMonth()\n  const daysInMonth = new Date(year, month + 1, 0).getDate()\n  const days = Array.from({ length: daysInMonth }, (_, i) => new Date(year, month, i + 1))\n\n  return (\n    <div className=\"border rounded p-4 bg-white\">\n      <h3 className=\"font-semibold mb-2\">Maintenance Calendar</h3>\n      <div className=\"grid grid-cols-7 gap-2\">\n        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(d => (\n          <div key={d} className=\"text-xs font-bold text-center\">\n            {d}\n          </div>\n        ))}\n        {days.map(date => {\n          const key = date.toISOString().slice(0, 10)\n          const evs = grouped[key] || []\n          return (\n            <div\n              key={key}\n              className=\"h-16 border rounded flex flex-col items-center justify-center bg-gray-50 relative\"\n            >\n              <span className=\"text-xs text-gray-700\">{date.getDate()}</span>\n              {evs.map((ev, i) => (\n                <span\n                  key={i}\n                  className={\n                    ev.type === 'overdue'\n                      ? 'text-red-600 text-xs font-bold'\n                      : ev.type === 'due'\n                        ? 'text-yellow-600 text-xs font-bold'\n                        : 'text-green-600 text-xs font-bold'\n                  }\n                >\n                  {ev.label}\n                </span>\n              ))}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\network-status.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2156,2159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2156,2159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Button } from '@/components/ui/button'\nimport { Wifi, WifiOff, RefreshCw } from 'lucide-react'\nimport { firebaseConfig, vapidKey } from '@/lib/firebase'\n\nexport default function NetworkStatus() {\n  const [isOnline, setIsOnline] = useState(true)\n  const [showOfflineMessage, setShowOfflineMessage] = useState(false)\n  const [permission, setPermission] = useState<NotificationPermission | null>(null)\n  const [token, setToken] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true)\n      setShowOfflineMessage(false)\n    }\n\n    const handleOffline = () => {\n      setIsOnline(false)\n      setShowOfflineMessage(true)\n    }\n\n    // Check initial status\n    setIsOnline(navigator.onLine)\n\n    window.addEventListener('online', handleOnline)\n    window.addEventListener('offline', handleOffline)\n\n    if (typeof window !== 'undefined' && 'Notification' in window) {\n      setPermission(Notification.permission)\n    }\n\n    return () => {\n      window.removeEventListener('online', handleOnline)\n      window.removeEventListener('offline', handleOffline)\n    }\n  }, [])\n\n  const subscribe = async () => {\n    try {\n      setError(null)\n      // Modular Firebase imports\n      const { initializeApp, getApps } = await import('firebase/app')\n      const { getMessaging, getToken } = await import('firebase/messaging')\n      let app\n      if (!getApps().length) {\n        app = initializeApp(firebaseConfig)\n      } else {\n        app = getApps()[0]\n      }\n      const messaging = getMessaging(app)\n      const currentToken = await getToken(messaging, { vapidKey })\n      setToken(currentToken)\n      setPermission(Notification.permission)\n      // Send currentToken to your backend to associate with the user\n      await fetch('/api/notifications/token', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ token: currentToken }),\n      })\n    } catch (err: any) {\n      setError(err.message || 'Failed to subscribe to notifications')\n    }\n  }\n\n  if (!showOfflineMessage && isOnline) {\n    return null\n  }\n\n  return (\n    <div>\n      <Alert variant={isOnline ? 'default' : 'destructive'} className=\"mb-4\">\n        {isOnline ? <Wifi className=\"h-4 w-4\" /> : <WifiOff className=\"h-4 w-4\" />}\n        <AlertDescription className=\"flex items-center justify-between\">\n          <span>\n            {isOnline\n              ? 'Connection restored! You may need to refresh the page.'\n              : 'You appear to be offline. Some features may not work properly.'}\n          </span>\n          {isOnline && (\n            <Button size=\"sm\" variant=\"outline\" onClick={() => window.location.reload()}>\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Refresh\n            </Button>\n          )}\n        </AlertDescription>\n      </Alert>\n      <div className=\"my-4\">\n        <div className=\"mb-2\">\n          Push Notifications: <b>{permission}</b>\n        </div>\n        <Button onClick={subscribe} disabled={permission === 'granted'}>\n          {permission === 'granted' ? 'Subscribed' : 'Enable Notifications'}\n        </Button>\n        {token && <div className=\"text-xs mt-2 break-all\">Token: {token}</div>}\n        {error && <div className=\"text-xs text-red-600 mt-2\">{error}</div>}\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\notifications-bell.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[346,349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[346,349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchNotifications'. Either include it or remove the dependency array.","line":19,"column":6,"nodeType":"ArrayExpression","endLine":19,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchNotifications]","fix":{"range":[639,641],"text":"[fetchNotifications]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":23,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { createClient } from '@/lib/supabase/client'\nimport { Bell, CheckCircle, Loader2 } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport Link from 'next/link'\n\nexport default function NotificationsBell() {\n  const [notifications, setNotifications] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [open, setOpen] = useState(false)\n  const [marking, setMarking] = useState(false)\n  const supabase = createClient()\n\n  useEffect(() => {\n    fetchNotifications()\n    // Optionally, set up polling or Supabase Realtime here\n  }, [])\n\n  const fetchNotifications = async () => {\n    setLoading(true)\n    const { data, error } = await supabase\n      .from('notifications')\n      .select('*')\n      .order('created_at', { ascending: false })\n      .limit(10)\n    setNotifications(data || [])\n    setLoading(false)\n  }\n\n  const unreadCount = notifications.filter(n => !n.read).length\n\n  const markAllAsRead = async () => {\n    setMarking(true)\n    await supabase.from('notifications').update({ read: true }).eq('read', false)\n    await fetchNotifications()\n    setMarking(false)\n  }\n\n  return (\n    <div className=\"relative\">\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={() => setOpen(v => !v)}\n        aria-label=\"Notifications\"\n      >\n        <Bell className=\"h-5 w-5\" />\n        {unreadCount > 0 && (\n          <span className=\"absolute -top-1 -right-1 bg-red-500 text-white rounded-full text-xs w-5 h-5 flex items-center justify-center\">\n            {unreadCount}\n          </span>\n        )}\n      </Button>\n      {open && (\n        <div className=\"absolute right-0 mt-2 w-80 bg-white shadow-lg rounded-lg z-50 border\">\n          <div className=\"p-4 border-b flex items-center justify-between\">\n            <span className=\"font-semibold\">Notifications</span>\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={markAllAsRead}\n              disabled={marking || unreadCount === 0}\n            >\n              {marking ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <CheckCircle className=\"h-4 w-4 mr-1\" />\n              )}\n              Mark all as read\n            </Button>\n          </div>\n          <div className=\"max-h-96 overflow-y-auto\">\n            {loading ? (\n              <div className=\"flex justify-center p-4\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" />\n              </div>\n            ) : notifications.length === 0 ? (\n              <div className=\"p-4 text-center text-gray-500\">No notifications</div>\n            ) : (\n              notifications.map(n => (\n                <div\n                  key={n.id}\n                  className={`p-4 border-b last:border-b-0 ${n.read ? 'bg-gray-50' : 'bg-blue-50'}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"font-medium\">{n.message}</div>\n                      <div className=\"text-xs text-gray-500\">\n                        {new Date(n.created_at).toLocaleString()}\n                      </div>\n                    </div>\n                    {n.link && (\n                      <Link href={n.link} className=\"text-blue-600 hover:underline text-xs ml-2\">\n                        View\n                      </Link>\n                    )}\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\profile-check.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profile' is assigned a value but never used.","line":33,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":47,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":86,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkProfile'. Either include it or remove the dependency array.","line":95,"column":6,"nodeType":"ArrayExpression","endLine":95,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkProfile]","fix":{"range":[2580,2582],"text":"[checkProfile]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { createClient } from '@/lib/supabase/client'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { AlertTriangle, CheckCircle, RefreshCw } from 'lucide-react'\n\nexport default function ProfileCheck() {\n  const [profileStatus, setProfileStatus] = useState<'checking' | 'exists' | 'missing' | 'error'>(\n    'checking'\n  )\n  const [error, setError] = useState<string | null>(null)\n  const [creating, setCreating] = useState(false)\n  const supabase = createClient()\n\n  const checkProfile = async () => {\n    try {\n      setProfileStatus('checking')\n      setError(null)\n\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n\n      if (!user) {\n        setError('No authenticated user found')\n        setProfileStatus('error')\n        return\n      }\n\n      const { data: profile, error: profileError } = await supabase\n        .from('profiles')\n        .select('id, email, full_name, role')\n        .eq('id', user.id)\n        .single()\n\n      if (profileError && profileError.code === 'PGRST116') {\n        setProfileStatus('missing')\n      } else if (profileError) {\n        setError(profileError.message)\n        setProfileStatus('error')\n      } else {\n        setProfileStatus('exists')\n      }\n    } catch (err) {\n      setError('Failed to check profile')\n      setProfileStatus('error')\n    }\n  }\n\n  const createProfile = async () => {\n    try {\n      setCreating(true)\n      setError(null)\n\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n\n      if (!user) {\n        setError('No authenticated user found')\n        return\n      }\n\n      const { error: createError } = await supabase.from('profiles').insert({\n        id: user.id,\n        email: user.email!,\n        full_name:\n          user.user_metadata?.full_name ||\n          user.user_metadata?.name ||\n          user.email?.split('@')[0] ||\n          null,\n        avatar_url: user.user_metadata?.avatar_url || user.user_metadata?.picture || null,\n        role: 'user',\n      })\n\n      if (createError) {\n        setError(createError.message)\n      } else {\n        setProfileStatus('exists')\n        // Refresh the page to update the UI\n        window.location.reload()\n      }\n    } catch (err) {\n      setError('Failed to create profile')\n    } finally {\n      setCreating(false)\n    }\n  }\n\n  useEffect(() => {\n    checkProfile()\n  }, [])\n\n  if (profileStatus === 'checking') {\n    return (\n      <Alert>\n        <RefreshCw className=\"h-4 w-4 animate-spin\" />\n        <AlertDescription>Checking user profile...</AlertDescription>\n      </Alert>\n    )\n  }\n\n  if (profileStatus === 'exists') {\n    return (\n      <Alert className=\"border-green-200 bg-green-50\">\n        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n        <AlertDescription className=\"text-green-800\">\n          User profile is properly configured\n        </AlertDescription>\n      </Alert>\n    )\n  }\n\n  if (profileStatus === 'missing') {\n    return (\n      <Card className=\"border-orange-200 bg-orange-50\">\n        <CardHeader>\n          <CardTitle className=\"text-orange-800 flex items-center\">\n            <AlertTriangle className=\"h-5 w-5 mr-2\" />\n            Profile Setup Required\n          </CardTitle>\n          <CardDescription className=\"text-orange-700\">\n            Your user profile needs to be created before you can add assets.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Your user profile is missing from the database. This is required to create assets.\n              </AlertDescription>\n            </Alert>\n\n            <Button onClick={createProfile} disabled={creating} className=\"w-full\">\n              {creating ? (\n                <>\n                  <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Creating Profile...\n                </>\n              ) : (\n                'Create User Profile'\n              )}\n            </Button>\n\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Alert variant=\"destructive\">\n      <AlertTriangle className=\"h-4 w-4\" />\n      <AlertDescription>\n        Error checking profile: {error}\n        <Button variant=\"outline\" size=\"sm\" onClick={checkProfile} className=\"ml-2\">\n          Retry\n        </Button>\n      </AlertDescription>\n    </Alert>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\profile-settings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LogOut' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Mail' is defined but never used.","line":11,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Building2' is defined but never used.","line":11,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[690,693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[690,693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchProfile'. Either include it or remove the dependency array.","line":29,"column":6,"nodeType":"ArrayExpression","endLine":29,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchProfile]","fix":{"range":[1204,1206],"text":"[fetchProfile]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":150,"column":19,"nodeType":"JSXOpeningElement","endLine":150,"endColumn":94}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState, useRef } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { createClient } from '@/lib/supabase/client'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'\nimport { Label } from '@/components/ui/label'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { LogOut, Upload, User, Mail, Building2, Loader2 } from 'lucide-react'\nimport SignOutButton from '@/components/auth/sign-out-button'\n\nexport default function ProfileSettings() {\n  const [profile, setProfile] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n  const [fullName, setFullName] = useState('')\n  const [avatarUrl, setAvatarUrl] = useState('')\n  const [avatarFile, setAvatarFile] = useState<File | null>(null)\n  const fileInputRef = useRef<HTMLInputElement>(null)\n  const router = useRouter()\n  const supabase = createClient()\n\n  useEffect(() => {\n    fetchProfile()\n  }, [])\n\n  const fetchProfile = async () => {\n    setLoading(true)\n    setError('')\n    const {\n      data: { user },\n    } = await supabase.auth.getUser()\n    if (!user) {\n      router.push('/login')\n      return\n    }\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('*', { count: 'exact' })\n      .eq('id', user.id)\n      .single()\n    if (error) {\n      setError('Failed to load profile.')\n    } else {\n      setProfile(data)\n      setFullName(data.full_name || '')\n      setAvatarUrl(data.avatar_url || '')\n    }\n    setLoading(false)\n  }\n\n  const handleAvatarChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (!file) return\n    setAvatarFile(file)\n    // Optionally preview\n    const reader = new FileReader()\n    reader.onload = ev => {\n      if (ev.target?.result) setAvatarUrl(ev.target.result as string)\n    }\n    reader.readAsDataURL(file)\n  }\n\n  const uploadAvatar = async (file: File) => {\n    const {\n      data: { user },\n    } = await supabase.auth.getUser()\n    if (!user) return null\n    const fileExt = file.name.split('.').pop()\n    const filePath = `avatars/${user.id}.${fileExt}`\n    const { error: uploadError } = await supabase.storage\n      .from('avatars')\n      .upload(filePath, file, { upsert: true })\n    if (uploadError) {\n      setError('Failed to upload avatar.')\n      return null\n    }\n    const { data } = supabase.storage.from('avatars').getPublicUrl(filePath)\n    return data.publicUrl\n  }\n\n  const handleSave = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setSaving(true)\n    setError('')\n    setSuccess('')\n    let newAvatarUrl = avatarUrl\n    if (avatarFile) {\n      const url = await uploadAvatar(avatarFile)\n      if (url) newAvatarUrl = url\n    }\n    const {\n      data: { user },\n    } = await supabase.auth.getUser()\n    if (!user) {\n      setError('Not authenticated.')\n      setSaving(false)\n      return\n    }\n    const { error: updateError } = await supabase\n      .from('profiles')\n      .update({\n        full_name: fullName,\n        avatar_url: newAvatarUrl,\n      })\n      .eq('id', user.id)\n    if (updateError) {\n      setError('Failed to update profile.')\n    } else {\n      setSuccess('Profile updated successfully.')\n      setAvatarFile(null)\n    }\n    setSaving(false)\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-blue-600\" />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-8 px-4\">\n      <Card className=\"w-full max-w-lg shadow-xl border-0 bg-white/90 backdrop-blur-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-bold\">Profile Settings</CardTitle>\n          <CardDescription>Manage your personal information and avatar</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          {success && (\n            <Alert className=\"mb-4 border-green-200 bg-green-50\">\n              <AlertDescription className=\"text-green-800\">{success}</AlertDescription>\n            </Alert>\n          )}\n          <form onSubmit={handleSave} className=\"space-y-6\">\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"relative w-20 h-20 rounded-full overflow-hidden border-2 border-blue-200 bg-gray-100\">\n                {avatarUrl ? (\n                  <img src={avatarUrl} alt=\"Avatar\" className=\"object-cover w-full h-full\" />\n                ) : (\n                  <User className=\"w-full h-full text-gray-400\" />\n                )}\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  className=\"hidden\"\n                  ref={fileInputRef}\n                  onChange={handleAvatarChange}\n                />\n                <Button\n                  type=\"button\"\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"absolute bottom-0 right-0 rounded-full p-1\"\n                  onClick={() => fileInputRef.current?.click()}\n                >\n                  <Upload className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              <div className=\"flex-1\">\n                <Label htmlFor=\"fullName\">Full Name</Label>\n                <Input\n                  id=\"fullName\"\n                  type=\"text\"\n                  value={fullName}\n                  onChange={e => setFullName(e.target.value)}\n                  className=\"mt-1\"\n                  required\n                />\n              </div>\n            </div>\n            <div>\n              <Label>Email</Label>\n              <Input\n                type=\"email\"\n                value={profile?.email || ''}\n                readOnly\n                className=\"mt-1 bg-gray-100\"\n              />\n            </div>\n            <div>\n              <Label>Organization</Label>\n              <Input\n                type=\"text\"\n                value={profile?.tenant_id || ''}\n                readOnly\n                className=\"mt-1 bg-gray-100\"\n              />\n            </div>\n            {/* Password change could be added here */}\n            <div className=\"flex justify-between items-center pt-4\">\n              <Button type=\"submit\" disabled={saving}>\n                {saving ? <Loader2 className=\"h-4 w-4 animate-spin mr-2\" /> : null}\n                Save Changes\n              </Button>\n              <SignOutButton />\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\profile-setup.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[821,824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[821,824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { AlertTriangle, CheckCircle, RefreshCw, User } from 'lucide-react'\nimport { createUserProfile, checkUserProfile } from '@/lib/profile-actions'\n\nexport default function ProfileSetup() {\n  const [profileStatus, setProfileStatus] = useState<'checking' | 'exists' | 'missing' | 'error'>(\n    'checking'\n  )\n  const [error, setError] = useState<string | null>(null)\n  const [creating, setCreating] = useState(false)\n  const [userInfo, setUserInfo] = useState<any>(null)\n  const [formData, setFormData] = useState({\n    full_name: '',\n    role: 'user',\n  })\n\n  const checkProfile = async () => {\n    try {\n      setProfileStatus('checking')\n      setError(null)\n\n      const result = await checkUserProfile()\n\n      if (result.error) {\n        setError(result.error)\n        setProfileStatus('error')\n        return\n      }\n\n      if (result.user) {\n        setUserInfo(result.user)\n        // Pre-fill form with user metadata\n        setFormData({\n          full_name:\n            result.user.user_metadata?.full_name ||\n            result.user.user_metadata?.name ||\n            result.user.email?.split('@')[0] ||\n            '',\n          role: 'user',\n        })\n      }\n\n      if (result.exists) {\n        setProfileStatus('exists')\n      } else {\n        setProfileStatus('missing')\n      }\n    } catch (err) {\n      console.error('Unexpected error checking profile:', err)\n      setError('Failed to check profile')\n      setProfileStatus('error')\n    }\n  }\n\n  const createProfile = async () => {\n    try {\n      setCreating(true)\n      setError(null)\n\n      const result = await createUserProfile({\n        full_name: formData.full_name,\n        role: formData.role,\n      })\n\n      if (result.error) {\n        setError(result.error)\n      } else {\n        setProfileStatus('exists')\n        // Refresh the page to update all components\n        setTimeout(() => {\n          window.location.reload()\n        }, 1000)\n      }\n    } catch (err) {\n      console.error('Unexpected error creating profile:', err)\n      setError('An unexpected error occurred while creating your profile')\n    } finally {\n      setCreating(false)\n    }\n  }\n\n  useEffect(() => {\n    checkProfile()\n  }, [])\n\n  if (profileStatus === 'checking') {\n    return (\n      <Alert>\n        <RefreshCw className=\"h-4 w-4 animate-spin\" />\n        <AlertDescription>Checking user profile...</AlertDescription>\n      </Alert>\n    )\n  }\n\n  if (profileStatus === 'exists') {\n    return (\n      <Alert className=\"border-green-200 bg-green-50\">\n        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n        <AlertDescription className=\"text-green-800\">\n          ✅ User profile is properly configured. You can now add assets!\n        </AlertDescription>\n      </Alert>\n    )\n  }\n\n  if (profileStatus === 'missing') {\n    return (\n      <Card className=\"border-orange-200 bg-orange-50\">\n        <CardHeader>\n          <CardTitle className=\"text-orange-800 flex items-center\">\n            <User className=\"h-5 w-5 mr-2\" />\n            Complete Your Profile Setup\n          </CardTitle>\n          <CardDescription className=\"text-orange-700\">\n            We need to create your user profile to enable asset management features.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Profile Required:</strong> Your user profile is missing from the database.\n              This is required to create and manage assets.\n            </AlertDescription>\n          </Alert>\n\n          {userInfo && (\n            <div className=\"bg-blue-50 p-3 rounded-lg\">\n              <h4 className=\"font-medium text-blue-800 mb-2\">Account Information</h4>\n              <div className=\"text-sm text-blue-700 space-y-1\">\n                <p>\n                  <strong>Email:</strong> {userInfo.email}\n                </p>\n                <p>\n                  <strong>User ID:</strong> {userInfo.id}\n                </p>\n                <p>\n                  <strong>Auth Provider:</strong> {userInfo.app_metadata?.provider || 'email'}\n                </p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"space-y-3\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"full_name\">Full Name</Label>\n              <Input\n                id=\"full_name\"\n                placeholder=\"Enter your full name\"\n                value={formData.full_name}\n                onChange={e => setFormData({ ...formData, full_name: e.target.value })}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"role\">Role</Label>\n              <select\n                id=\"role\"\n                value={formData.role}\n                onChange={e => setFormData({ ...formData, role: e.target.value })}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"user\">User</option>\n                <option value=\"manager\">Manager</option>\n                <option value=\"admin\">Admin</option>\n              </select>\n            </div>\n          </div>\n\n          <Button onClick={createProfile} disabled={creating} className=\"w-full\">\n            {creating ? (\n              <>\n                <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                Creating Profile...\n              </>\n            ) : (\n              <>\n                <User className=\"h-4 w-4 mr-2\" />\n                Create My Profile\n              </>\n            )}\n          </Button>\n\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Error:</strong> {error}\n                <div className=\"mt-2\">\n                  <Button variant=\"outline\" size=\"sm\" onClick={checkProfile}>\n                    Retry Check\n                  </Button>\n                </div>\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"text-xs text-gray-600 bg-gray-50 p-3 rounded\">\n            <strong>Why is this needed?</strong> Your profile stores essential information like your\n            name and role, which is required for asset ownership and team collaboration features.\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Alert variant=\"destructive\">\n      <AlertTriangle className=\"h-4 w-4\" />\n      <AlertDescription>\n        <strong>Profile Check Failed:</strong> {error}\n        <div className=\"mt-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={checkProfile}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Retry Check\n          </Button>\n        </div>\n      </AlertDescription>\n    </Alert>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\qr-analytics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'loading' is assigned a value but never used.","line":34,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":124,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Progress } from '@/components/ui/progress'\nimport { BarChart3, TrendingUp, Scan, QrCode, MapPin, Activity } from 'lucide-react'\nimport { createClient } from '@/lib/supabase/client'\n\ninterface QRAnalyticsProps {\n  assets: Array<{\n    id: string\n    asset_id: string\n    name: string\n    category: string\n    qr_code?: string | null\n    location?: string | null\n  }>\n}\n\nexport default function QRAnalytics({ assets }: QRAnalyticsProps) {\n  const [analytics, setAnalytics] = useState({\n    totalQRCodes: 0,\n    qrCoverage: 0,\n    scansByCategory: {} as Record<string, number>,\n    scansByLocation: {} as Record<string, number>,\n    recentScans: [] as Array<{\n      assetId: string\n      assetName: string\n      timestamp: string\n      location?: string\n    }>,\n  })\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const fetchAnalytics = async () => {\n      setLoading(true)\n      // Calculate analytics from assets data\n      const totalAssets = assets.length\n      const assetsWithQR = assets.filter(asset => asset.qr_code).length\n      const qrCoverage = totalAssets > 0 ? Math.round((assetsWithQR / totalAssets) * 100) : 0\n\n      // Fetch real QR analytics from Supabase\n      let scansByCategory: Record<string, number> = {}\n      let scansByLocation: Record<string, number> = {}\n      let recentScans: Array<{\n        assetId: string\n        assetName: string\n        timestamp: string\n        location?: string\n      }> = []\n      try {\n        const supabase = createClient()\n        // Get recent QR analytics events (scans and generations)\n        const { data: qrEvents, error } = await supabase\n          .from('analytics_events')\n          .select('asset_id, event_type, created_at, metadata')\n          .in('event_type', ['asset_scanned', 'qr_generated'])\n          .order('created_at', { ascending: false })\n          .limit(20)\n        if (!error && qrEvents && qrEvents.length > 0) {\n          // Map asset_id to asset info\n          const assetMap = Object.fromEntries(assets.map(a => [a.id, a]))\n          // Count scans by category/location\n          for (const event of qrEvents) {\n            const asset = assetMap[event.asset_id]\n            if (!asset) continue\n            // By category\n            if (asset.category) {\n              scansByCategory[asset.category] = (scansByCategory[asset.category] || 0) + 1\n            }\n            // By location\n            if (asset.location) {\n              scansByLocation[asset.location] = (scansByLocation[asset.location] || 0) + 1\n            }\n            // Recent scans\n            if (event.event_type === 'asset_scanned' || event.event_type === 'qr_generated') {\n              recentScans.push({\n                assetId: asset.asset_id,\n                assetName: asset.name,\n                timestamp: event.created_at,\n                location: asset.location ?? undefined,\n              })\n            }\n          }\n        } else {\n          // Fallback to mock data if no analytics\n          scansByCategory = {\n            'it-equipment': 45,\n            furniture: 23,\n            'av-equipment': 18,\n            vehicles: 12,\n            tools: 8,\n          }\n          scansByLocation = {\n            'Office A': 32,\n            Warehouse: 28,\n            'Office B': 21,\n            'Conference Room': 15,\n            Storage: 10,\n          }\n          recentScans = [\n            {\n              assetId: 'AST-001',\n              assetName: 'MacBook Pro 16\"',\n              timestamp: new Date(Date.now() - 5 * 60 * 1000).toISOString(),\n              location: 'Office A',\n            },\n            {\n              assetId: 'AST-002',\n              assetName: 'Office Chair',\n              timestamp: new Date(Date.now() - 15 * 60 * 1000).toISOString(),\n              location: 'Office B',\n            },\n            {\n              assetId: 'AST-003',\n              assetName: 'Projector',\n              timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\n              location: 'Conference Room',\n            },\n          ]\n        }\n      } catch (e) {\n        // Fallback to mock data on error\n        scansByCategory = {\n          'it-equipment': 45,\n          furniture: 23,\n          'av-equipment': 18,\n          vehicles: 12,\n          tools: 8,\n        }\n        scansByLocation = {\n          'Office A': 32,\n          Warehouse: 28,\n          'Office B': 21,\n          'Conference Room': 15,\n          Storage: 10,\n        }\n        recentScans = [\n          {\n            assetId: 'AST-001',\n            assetName: 'MacBook Pro 16\"',\n            timestamp: new Date(Date.now() - 5 * 60 * 1000).toISOString(),\n            location: 'Office A',\n          },\n          {\n            assetId: 'AST-002',\n            assetName: 'Office Chair',\n            timestamp: new Date(Date.now() - 15 * 60 * 1000).toISOString(),\n            location: 'Office B',\n          },\n          {\n            assetId: 'AST-003',\n            assetName: 'Projector',\n            timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\n            location: 'Conference Room',\n          },\n        ]\n      }\n      setAnalytics({\n        totalQRCodes: assetsWithQR,\n        qrCoverage,\n        scansByCategory,\n        scansByLocation,\n        recentScans,\n      })\n      setLoading(false)\n    }\n    fetchAnalytics()\n  }, [assets])\n\n  const formatTimeAgo = (timestamp: string) => {\n    const now = new Date()\n    const scanTime = new Date(timestamp)\n    const diffInMinutes = Math.floor((now.getTime() - scanTime.getTime()) / (1000 * 60))\n\n    if (diffInMinutes < 1) return 'Just now'\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`\n    return `${Math.floor(diffInMinutes / 1440)}d ago`\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <QrCode className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total QR Codes</p>\n                <p className=\"text-2xl font-bold\">{analytics.totalQRCodes}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <BarChart3 className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Coverage</p>\n                <p className=\"text-2xl font-bold\">{analytics.qrCoverage}%</p>\n              </div>\n            </div>\n            <Progress value={analytics.qrCoverage} className=\"mt-2\" />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <Scan className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Scans</p>\n                <p className=\"text-2xl font-bold\">\n                  {Object.values(analytics.scansByCategory).reduce((a, b) => a + b, 0)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"h-8 w-8 text-orange-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">This Week</p>\n                <p className=\"text-2xl font-bold\">+24%</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Scans by Category */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <BarChart3 className=\"h-5 w-5 mr-2\" />\n              Scans by Category\n            </CardTitle>\n            <CardDescription>QR code usage across asset categories</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {Object.entries(analytics.scansByCategory).map(([category, scans]) => {\n              const maxScans = Math.max(...Object.values(analytics.scansByCategory))\n              const percentage = (scans / maxScans) * 100\n\n              return (\n                <div key={category} className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium capitalize\">\n                      {category.replace('-', ' ')}\n                    </span>\n                    <Badge variant=\"outline\">{scans} scans</Badge>\n                  </div>\n                  <Progress value={percentage} />\n                </div>\n              )\n            })}\n          </CardContent>\n        </Card>\n\n        {/* Scans by Location */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <MapPin className=\"h-5 w-5 mr-2\" />\n              Scans by Location\n            </CardTitle>\n            <CardDescription>QR code usage across locations</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {Object.entries(analytics.scansByLocation).map(([location, scans]) => {\n              const maxScans = Math.max(...Object.values(analytics.scansByLocation))\n              const percentage = (scans / maxScans) * 100\n\n              return (\n                <div key={location} className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">{location}</span>\n                    <Badge variant=\"outline\">{scans} scans</Badge>\n                  </div>\n                  <Progress value={percentage} />\n                </div>\n              )\n            })}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Activity className=\"h-5 w-5 mr-2\" />\n            Recent QR Scans\n          </CardTitle>\n          <CardDescription>Latest QR code scan activity</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {analytics.recentScans.map((scan, index) => (\n              <div key={index} className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">{scan.assetName}</p>\n                  <p className=\"text-xs text-gray-500\">\n                    {scan.assetId} • {scan.location}\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <Badge variant=\"outline\">Scanned</Badge>\n                  <p className=\"text-xs text-gray-500 mt-1\">{formatTimeAgo(scan.timestamp)}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\qr-generator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'generateAssetQRCode' is defined but never used.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateAssetQRCodeUrl' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fetchDefaultQRTemplate' is defined but never used.","line":23,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1029,1032],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1029,1032],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2063,2066],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2063,2066],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2180,2183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2180,2183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2321,2324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2321,2324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2508,2511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2508,2511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":68,"column":15,"nodeType":"BlockStatement","messageId":"unexpected","endLine":68,"endColumn":17,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[2666,2666],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'imgData' is assigned a value but never used.","line":135,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":24},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/login/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":227,"column":15,"nodeType":"JSXOpeningElement","endLine":227,"endColumn":74},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":409,"column":21,"nodeType":"JSXOpeningElement","endLine":418,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { QrCode, Download, Copy, CheckCircle, AlertTriangle, RefreshCw } from 'lucide-react'\nimport { generateAssetQRCode } from '@/lib/qr-actions'\nimport { useAuth } from '@/components/auth/auth-provider'\nimport { createClient } from '@/lib/supabase/client'\nimport { updateAssetQRCodeUrl } from '@/lib/qr-actions'\nimport { toast } from '@/components/ui/use-toast'\nimport clsx from 'clsx'\nimport { fetchQRTemplates, fetchDefaultQRTemplate } from '@/lib/qr-template-utils'\nimport QRLabel from '@/components/qr-label'\n\ninterface QRGeneratorProps {\n  assets: any[]\n  onQRGenerated: (assetId: string, qrCode: string) => void\n  settings: {\n    autoGenerate: boolean\n    includeDetails: boolean\n    trackAnalytics: boolean\n    mobileNotifications: boolean\n    defaultSize: string\n    errorCorrection: string\n    defaultFormat: string\n  }\n}\n\nexport default function QRGenerator({ assets, onQRGenerated, settings }: QRGeneratorProps) {\n  const { user, loading: authLoading } = useAuth()\n  const [selectedAssetId, setSelectedAssetId] = useState('')\n  const [customAssetId, setCustomAssetId] = useState('')\n  const [qrSize, setQrSize] = useState('200')\n  const [qrColor, setQrColor] = useState('#000000')\n  const [qrBgColor, setQrBgColor] = useState('#FFFFFF')\n  const [generatedQR, setGeneratedQR] = useState<string | null>(null)\n  const [assetUrl, setAssetUrl] = useState<string | null>(null)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [copied, setCopied] = useState(false)\n  const [selectedAsset, setSelectedAsset] = useState<any | null>(null)\n  const [generating, setGenerating] = useState(false)\n  const [templates, setTemplates] = useState<any[]>([])\n  const [selectedTemplateId, setSelectedTemplateId] = useState<string>('')\n  const [templateConfig, setTemplateConfig] = useState<any>(null)\n\n  useEffect(() => {\n    async function loadTemplates() {\n      try {\n        const all = await fetchQRTemplates()\n        setTemplates(all)\n        const def = all.find((tpl: any) => tpl.is_default) || all[0]\n        if (def) {\n          setSelectedTemplateId(def.id)\n          setTemplateConfig(def.config)\n        }\n      } catch {}\n    }\n    loadTemplates()\n  }, [])\n\n  useEffect(() => {\n    if (!selectedTemplateId) return\n    const tpl = templates.find(t => t.id === selectedTemplateId)\n    if (tpl) setTemplateConfig(tpl.config)\n  }, [selectedTemplateId, templates])\n\n  const handleGenerate = async () => {\n    const assetId = selectedAssetId || customAssetId\n    if (!assetId) {\n      setError('Please select or enter an Asset ID')\n      return\n    }\n\n    if (!user) {\n      setError('You must be logged in to generate QR codes. Please sign in and try again.')\n      return\n    }\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      setGenerating(true)\n      setSelectedAsset(assets.find(asset => asset.asset_id === assetId))\n\n      const supabase = createClient() // <-- Add this line\n      // Create QR code data with settings\n      const qrData = settings.includeDetails\n        ? {\n            assetId: assetId,\n            name: selectedAsset?.name || assetId,\n            category: selectedAsset?.category || '',\n            url: `${window.location.origin}/asset/${assetId}`,\n          }\n        : assetId\n\n      const QRCode = (await import('qrcode')).default\n      const qrCodeDataUrl = await QRCode.toDataURL(JSON.stringify(qrData), {\n        width: parseInt(settings.defaultSize),\n        margin: 1,\n        errorCorrectionLevel: settings.errorCorrection as 'L' | 'M' | 'Q' | 'H',\n      })\n\n      // Instead of just saving the QR code image, render the label to a hidden div and use html2canvas\n      const labelContainer = document.createElement('div')\n      labelContainer.style.position = 'fixed'\n      labelContainer.style.left = '-9999px'\n      labelContainer.style.top = '0'\n      document.body.appendChild(labelContainer)\n      const label = (\n        <QRLabel asset={selectedAsset} templateConfig={templateConfig} qrCodeUrl={qrCodeDataUrl} />\n      )\n      // Render the React element to the container\n      // Use ReactDOM.render or createRoot depending on React version\n      // (Assume React 18+)\n      import('react-dom/client').then(({ createRoot }) => {\n        const root = createRoot(labelContainer)\n        root.render(label)\n        setTimeout(async () => {\n          const canvas = await (\n            await import('html2canvas')\n          ).default(labelContainer, { backgroundColor: '#fff', scale: 2 })\n          const imgData = canvas.toDataURL('image/png')\n          // Save or upload imgData as needed (replace qrCodeDataUrl with imgData)\n          // ... existing upload logic ...\n          root.unmount()\n          document.body.removeChild(labelContainer)\n        }, 100)\n      })\n\n      // Track analytics if enabled\n      if (settings.trackAnalytics) {\n        await supabase.from('analytics_events').insert({\n          event_type: 'qr_generated',\n          asset_id: selectedAsset?.id,\n          user_id: user.id,\n          metadata: { asset_name: selectedAsset?.name },\n          created_at: new Date().toISOString(),\n        })\n      }\n\n      toast({\n        title: 'QR Code Generated',\n        description: 'QR code has been generated and saved successfully',\n      })\n\n      setGeneratedQR(qrCodeDataUrl)\n      setAssetUrl(qrCodeDataUrl)\n      onQRGenerated(assetId, qrCodeDataUrl)\n    } catch (error) {\n      console.error('QR generation error:', error)\n      toast({\n        title: 'Generation Failed',\n        description: 'Failed to generate QR code',\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n      setGenerating(false)\n      setSelectedAsset(null)\n    }\n  }\n\n  const handleDownload = () => {\n    if (!generatedQR) return\n\n    const link = document.createElement('a')\n    link.download = `qr-${selectedAssetId || customAssetId}.png`\n    link.href = generatedQR\n    link.click()\n  }\n\n  const handleCopyUrl = async () => {\n    if (!assetUrl) return\n\n    try {\n      await navigator.clipboard.writeText(assetUrl)\n      setCopied(true)\n      setTimeout(() => setCopied(false), 2000)\n    } catch (err) {\n      console.error('Failed to copy URL:', err)\n    }\n  }\n\n  // Show loading state while auth is loading\n  if (authLoading) {\n    return (\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center justify-center py-8\">\n            <RefreshCw className=\"h-6 w-6 animate-spin mr-2\" />\n            <span>Loading authentication...</span>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  // Show login prompt if not authenticated\n  if (!user) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <QrCode className=\"h-5 w-5 mr-2\" />\n            QR Code Generator\n          </CardTitle>\n          <CardDescription>Generate QR codes for your assets</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              You must be logged in to generate QR codes. Please{' '}\n              <a href=\"/login\" className=\"text-blue-600 hover:underline\">\n                sign in\n              </a>{' '}\n              to continue.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  // Add global print styles to hide all except .print:block\n  if (typeof window !== 'undefined') {\n    const style = document.createElement('style')\n    style.innerHTML = `@media print { body * { display: none !important; } .print\\\\:block, .print\\\\:block * { display: block !important; } }`\n    document.head.appendChild(style)\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {templates.length > 0 && (\n        <div className=\"mb-4\">\n          <label className=\"block text-sm font-medium mb-1\">QR Template</label>\n          <select\n            className=\"border rounded px-2 py-1\"\n            value={selectedTemplateId}\n            onChange={e => setSelectedTemplateId(e.target.value)}\n          >\n            {templates.map(tpl => (\n              <option key={tpl.id} value={tpl.id}>\n                {tpl.name} {tpl.is_default ? '(Default)' : ''}\n              </option>\n            ))}\n          </select>\n        </div>\n      )}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <QrCode className=\"h-5 w-5 mr-2\" />\n            QR Code Generator\n          </CardTitle>\n          <CardDescription>Generate QR codes for your assets</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Configuration Panel */}\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Select Asset</Label>\n                <Select value={selectedAssetId} onValueChange={setSelectedAssetId}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose an existing asset\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {assets.length > 0 ? (\n                      assets.map(asset => (\n                        <SelectItem key={asset.id} value={asset.asset_id}>\n                          {asset.asset_id} - {asset.name}\n                        </SelectItem>\n                      ))\n                    ) : (\n                      <SelectItem value=\"\" disabled>\n                        No assets found\n                      </SelectItem>\n                    )}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"text-center text-sm text-gray-500\">or</div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"customAssetId\">Enter Asset ID</Label>\n                <Input\n                  id=\"customAssetId\"\n                  placeholder=\"e.g., AST-001\"\n                  value={customAssetId}\n                  onChange={e => setCustomAssetId(e.target.value)}\n                  disabled={!!selectedAssetId}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"qrSize\">Size (px)</Label>\n                  <Select value={qrSize} onValueChange={setQrSize}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"150\">150x150</SelectItem>\n                      <SelectItem value=\"200\">200x200</SelectItem>\n                      <SelectItem value=\"300\">300x300</SelectItem>\n                      <SelectItem value=\"400\">400x400</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"qrColor\">QR Color</Label>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      id=\"qrColor\"\n                      type=\"color\"\n                      value={qrColor}\n                      onChange={e => setQrColor(e.target.value)}\n                      className=\"w-16 h-10 p-1\"\n                    />\n                    <Input\n                      type=\"color\"\n                      value={qrBgColor}\n                      onChange={e => setQrBgColor(e.target.value)}\n                      className=\"w-16 h-10 p-1\"\n                      title=\"Background Color\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {selectedAsset && (\n                <Card className=\"bg-blue-50 border-blue-200\">\n                  <CardContent className=\"pt-4\">\n                    <h4 className=\"font-medium text-blue-800 mb-2\">Selected Asset</h4>\n                    <div className=\"text-sm text-blue-700 space-y-1\">\n                      <div>\n                        <strong>ID:</strong> {selectedAsset.asset_id}\n                      </div>\n                      <div>\n                        <strong>Name:</strong> {selectedAsset.name}\n                      </div>\n                      <div>\n                        <strong>Category:</strong> {selectedAsset.category}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              <Button\n                onClick={handleGenerate}\n                className=\"w-full\"\n                disabled={loading || (!selectedAssetId && !customAssetId)}\n              >\n                {generating ? (\n                  <>\n                    <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Generating...\n                  </>\n                ) : (\n                  'Generate QR Code'\n                )}\n              </Button>\n            </div>\n\n            {/* Preview Panel */}\n            <div className=\"space-y-4\">\n              {templateConfig && selectedAsset && (\n                <div className=\"mb-4\">\n                  <div className=\"font-medium mb-2\">Label Preview</div>\n                  <QRLabel\n                    asset={selectedAsset}\n                    templateConfig={templateConfig}\n                    qrCodeUrl={generatedQR || undefined}\n                  />\n                </div>\n              )}\n              <div\n                className={clsx(\n                  'border-2 border-dashed border-gray-300 rounded-lg p-8 text-center min-h-[300px] flex items-center justify-center',\n                  'print:block print:text-center'\n                )}\n              >\n                {generatedQR ? (\n                  <div className={clsx('space-y-4', 'print:block print:text-center')}>\n                    <img\n                      src={generatedQR || '/placeholder.svg'}\n                      alt=\"Generated QR Code\"\n                      className=\"mx-auto border rounded print:mx-auto print:my-8 print:w-48 print:h-48\"\n                      style={{\n                        width: `${qrSize}px`,\n                        height: `${qrSize}px`,\n                        maxWidth: '100%',\n                      }}\n                    />\n                    {/* Print asset info below QR code when printing */}\n                    {selectedAsset && (\n                      <div className=\"hidden print:block print:mt-4 print:text-lg\">\n                        <div>\n                          <strong>ID:</strong> {selectedAsset.asset_id}\n                        </div>\n                        <div>\n                          <strong>Name:</strong> {selectedAsset.name}\n                        </div>\n                        <div>\n                          <strong>Category:</strong> {selectedAsset.category}\n                        </div>\n                      </div>\n                    )}\n                    <Button\n                      onClick={() => window.print()}\n                      className=\"w-full mt-2 print:hidden\"\n                      variant=\"outline\"\n                    >\n                      Print QR\n                    </Button>\n                    <div className=\"space-y-2\">\n                      <Button onClick={handleDownload} className=\"w-full\">\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Download QR Code\n                      </Button>\n\n                      {assetUrl && (\n                        <div className=\"space-y-2\">\n                          <div className=\"text-xs text-gray-600\">Asset URL:</div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Input value={assetUrl} readOnly className=\"text-xs\" />\n                            <Button size=\"sm\" variant=\"outline\" onClick={handleCopyUrl}>\n                              {copied ? (\n                                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                              ) : (\n                                <Copy className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center\">\n                    <QrCode className=\"h-16 w-16 mx-auto text-gray-400 mb-2\" />\n                    <p className=\"text-gray-500\">QR code will appear here</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\qr-image-upload.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'uploadData' is assigned a value but never used.","line":52,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":31},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":98,"column":15,"nodeType":"JSXOpeningElement","endLine":98,"endColumn":84}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Upload, Image as ImageIcon, AlertCircle } from 'lucide-react'\nimport { createClient } from '@/lib/supabase/client'\nimport { useToast } from '@/hooks/use-toast'\n\ninterface QRImageUploadProps {\n  onUploadComplete: (assetId: string, imageUrl: string) => void\n}\n\nexport default function QRImageUpload({ onUploadComplete }: QRImageUploadProps) {\n  const [uploading, setUploading] = useState(false)\n  const [selectedFile, setSelectedFile] = useState<File | null>(null)\n  const [preview, setPreview] = useState<string | null>(null)\n  const { toast } = useToast()\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (file) {\n      if (!file.type.includes('image/')) {\n        toast({\n          title: 'Invalid File Type',\n          description: 'Please select an image file',\n          variant: 'destructive',\n        })\n        return\n      }\n\n      setSelectedFile(file)\n      const reader = new FileReader()\n      reader.onloadend = () => {\n        setPreview(reader.result as string)\n      }\n      reader.readAsDataURL(file)\n    }\n  }\n\n  const handleUpload = async () => {\n    if (!selectedFile) return\n\n    setUploading(true)\n    try {\n      const supabase = createClient()\n\n      // Generate unique filename\n      const fileExt = selectedFile.name.split('.').pop()\n      const fileName = `${Math.random().toString(36).substring(2)}.${fileExt}`\n      const filePath = `qr-codes/${fileName}`\n\n      // Upload to Supabase Storage\n      const { data: uploadData, error: uploadError } = await supabase.storage\n        .from('assets')\n        .upload(filePath, selectedFile)\n\n      if (uploadError) throw uploadError\n\n      // Get public URL\n      const {\n        data: { publicUrl },\n      } = supabase.storage.from('assets').getPublicUrl(filePath)\n\n      toast({\n        title: 'Upload Successful',\n        description: 'QR code image has been uploaded',\n      })\n\n      onUploadComplete('custom', publicUrl)\n\n      // Reset state\n      setSelectedFile(null)\n      setPreview(null)\n    } catch (error) {\n      console.error('Upload error:', error)\n      toast({\n        title: 'Upload Failed',\n        description: 'Failed to upload QR code image',\n        variant: 'destructive',\n      })\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <ImageIcon className=\"h-5 w-5 mr-2\" />\n          Upload QR Code Image\n        </CardTitle>\n        <CardDescription>Upload an existing QR code image for an asset</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"border-2 border-dashed rounded-lg p-6 text-center\">\n          {preview ? (\n            <div className=\"space-y-4\">\n              <img src={preview} alt=\"Preview\" className=\"max-w-[200px] mx-auto\" />\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setSelectedFile(null)\n                  setPreview(null)\n                }}\n              >\n                Remove\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <Upload className=\"h-12 w-12 mx-auto text-gray-400\" />\n              <div>\n                <Button variant=\"outline\" asChild>\n                  <label className=\"cursor-pointer\">\n                    <input\n                      type=\"file\"\n                      className=\"hidden\"\n                      accept=\"image/*\"\n                      onChange={handleFileSelect}\n                    />\n                    Select QR Code Image\n                  </label>\n                </Button>\n              </div>\n              <p className=\"text-sm text-gray-500\">Supports: PNG, JPG, JPEG, GIF (max 5MB)</p>\n            </div>\n          )}\n        </div>\n\n        {selectedFile && (\n          <Button className=\"w-full\" onClick={handleUpload} disabled={uploading}>\n            {uploading ? 'Uploading...' : 'Upload QR Code'}\n          </Button>\n        )}\n\n        <div className=\"flex items-start space-x-2 text-sm text-amber-600\">\n          <AlertCircle className=\"h-4 w-4 mt-0.5\" />\n          <p>\n            Make sure the QR code image is clear and readable. Poor quality images may not scan\n            properly.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\qr-label.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[61,64],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[61,64],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[83,86],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[83,86],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":30,"column":19,"nodeType":"JSXOpeningElement","endLine":30,"endColumn":91},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":43,"column":11,"nodeType":"JSXOpeningElement","endLine":43,"endColumn":85}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\n\ninterface QRLabelProps {\n  asset: any\n  templateConfig: any\n  qrCodeUrl?: string // Optional: for batch PDF, pass the QR code image URL\n}\n\nexport default function QRLabel({ asset, templateConfig, qrCodeUrl }: QRLabelProps) {\n  const { logoUrl, fields, fontSize, labelPosition, qrSize } = templateConfig || {}\n  const labelText = fields\n    ?.map((f: string) => asset[f])\n    .filter(Boolean)\n    .join(' | ')\n\n  return (\n    <div\n      style={{\n        border: '1px solid #eee',\n        borderRadius: 8,\n        padding: 16,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        width: qrSize + 40,\n        background: '#fff',\n      }}\n    >\n      {labelPosition === 'above' && <div style={{ fontSize, marginBottom: 8 }}>{labelText}</div>}\n      {logoUrl && <img src={logoUrl} alt=\"Logo\" style={{ height: 32, marginBottom: 8 }} />}\n      <div\n        style={{\n          width: qrSize,\n          height: qrSize,\n          background: '#f3f3f3',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginBottom: labelPosition === 'below' ? 8 : 0,\n        }}\n      >\n        {qrCodeUrl ? (\n          <img src={qrCodeUrl} alt=\"QR\" style={{ width: qrSize, height: qrSize }} />\n        ) : (\n          <span style={{ color: '#bbb' }}>QR</span>\n        )}\n      </div>\n      {labelPosition === 'below' && <div style={{ fontSize, marginTop: 8 }}>{labelText}</div>}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\qr-scanner.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[609,612],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[609,612],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1182,1185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1182,1185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'scanAgain' is assigned a value but never used.","line":32,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'stopCamera'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [stopCamera, user]","fix":{"range":[1783,1789],"text":"[stopCamera, user]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":57,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":83,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'imageData' is assigned a value but never used.","line":116,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":123,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":154,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":154,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":188,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":188,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":229,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":229,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":255,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":255,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport type React from 'react'\n\nimport { useEffect, useRef, useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Camera, Upload, X, Scan, AlertTriangle, CheckCircle } from 'lucide-react'\nimport { lookupAssetByQR } from '@/lib/qr-actions'\nimport { QRCodeScanner } from '@/lib/qr-code-utils'\nimport { useAuth } from '@/components/auth/auth-provider'\n\ninterface QRScannerProps {\n  onScanSuccess?: (assetData: any) => void\n  onScanError?: (error: string) => void\n}\n\nexport default function QRScanner({ onScanSuccess, onScanError }: QRScannerProps) {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const fileInputRef = useRef<HTMLInputElement>(null)\n\n  const [isScanning, setIsScanning] = useState(false)\n  const [hasCamera, setHasCamera] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [stream, setStream] = useState<MediaStream | null>(null)\n  const [scanResult, setScanResult] = useState<any>(null)\n  const [loading, setLoading] = useState(false)\n  const { user } = useAuth()\n  const [userRole, setUserRole] = useState<string>('user')\n  const [scanAgain, setScanAgain] = useState(false)\n\n  useEffect(() => {\n    checkCameraAvailability()\n    const fetchUserRole = async () => {\n      if (!user) return\n      try {\n        const res = await fetch(`/api/profiles/${user.id}`)\n        const data = await res.json()\n        setUserRole(data.profile?.role || 'user')\n      } catch {\n        setUserRole('user')\n      }\n    }\n    fetchUserRole()\n    return () => {\n      stopCamera()\n    }\n  }, [user])\n\n  const checkCameraAvailability = async () => {\n    try {\n      const devices = await navigator.mediaDevices.enumerateDevices()\n      const videoDevices = devices.filter(device => device.kind === 'videoinput')\n      setHasCamera(videoDevices.length > 0)\n    } catch (err) {\n      setHasCamera(false)\n    }\n  }\n\n  const startCamera = async () => {\n    try {\n      setError(null)\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: 'environment', // Use back camera if available\n          width: { ideal: 640 },\n          height: { ideal: 480 },\n        },\n      })\n\n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream\n        videoRef.current.play()\n      }\n\n      setStream(mediaStream)\n      setIsScanning(true)\n\n      // Start scanning loop\n      scanQRCode()\n    } catch (err) {\n      setError('Failed to access camera. Please check permissions.')\n      setIsScanning(false)\n    }\n  }\n\n  const stopCamera = () => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop())\n      setStream(null)\n    }\n    setIsScanning(false)\n  }\n\n  const scanQRCode = async () => {\n    if (!isScanning || !videoRef.current || !canvasRef.current) return\n\n    const video = videoRef.current\n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n\n    if (!context || video.readyState !== video.HAVE_ENOUGH_DATA) {\n      setTimeout(scanQRCode, 100)\n      return\n    }\n\n    canvas.width = video.videoWidth\n    canvas.height = video.videoHeight\n    context.drawImage(video, 0, 0, canvas.width, canvas.height)\n\n    try {\n      // In a real implementation, you would use a QR code library like jsQR\n      // For this demo, we'll simulate QR detection\n      const imageData = context.getImageData(0, 0, canvas.width, canvas.height)\n\n      // Simulate QR code detection (replace with actual QR library)\n      // const code = jsQR(imageData.data, imageData.width, imageData.height)\n\n      // For demo purposes, we'll check if user clicks to simulate scan\n      setTimeout(scanQRCode, 100)\n    } catch (err) {\n      setTimeout(scanQRCode, 100)\n    }\n  }\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (!file) return\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      // Use the enhanced scanner utility\n      const scanResult = await QRCodeScanner.scanFromFile(file)\n\n      if (scanResult.success && scanResult.data) {\n        // Convert the scanned data to the expected format\n        const qrDataString = JSON.stringify({\n          type: 'asset',\n          id: scanResult.data.assetId,\n          name: scanResult.data.name,\n          category: scanResult.data.category,\n          url: scanResult.data.url,\n          timestamp: new Date().toISOString(),\n        })\n\n        await processQRData(qrDataString)\n      } else {\n        setError(scanResult.error || 'Failed to scan QR code from image')\n      }\n    } catch (err) {\n      setError('Failed to process uploaded image')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const processQRData = async (qrData: string) => {\n    setLoading(true)\n    try {\n      const result = await lookupAssetByQR(qrData)\n\n      if (result.error) {\n        setError(result.error)\n        onScanError?.(result.error)\n      } else {\n        setScanResult(result)\n        // Log scan event to analytics_events\n        if (user && result.asset) {\n          const supabase = (await import('@/lib/supabase/client')).createClient()\n          await supabase.from('analytics_events').insert({\n            event_type: 'asset_scanned',\n            asset_id: result.asset.id,\n            user_id: user.id,\n            metadata: {\n              asset_name: result.asset.name,\n              category: result.asset.category,\n              url: result.asset.url || undefined,\n            },\n            created_at: new Date().toISOString(),\n          })\n        }\n        onScanSuccess?.(result)\n      }\n    } catch (err) {\n      const errorMsg = 'Failed to lookup asset'\n      setError(errorMsg)\n      onScanError?.(errorMsg)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const simulateSuccessfulScan = async () => {\n    // Demo function to simulate a successful QR scan\n    const sampleQRData = JSON.stringify({\n      type: 'asset',\n      id: 'AST-001',\n      name: 'MacBook Pro 16\"',\n      category: 'it-equipment',\n      url: 'http://localhost:3000/asset/AST-001',\n    })\n\n    await processQRData(sampleQRData)\n  }\n\n  const handleAssignToMe = async () => {\n    if (!user || !scanResult?.asset) return\n    setLoading(true)\n    setError(null)\n    try {\n      const res = await fetch('/api/assets/assign', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ assetId: scanResult.asset.id, assigneeId: user.id }),\n      })\n      const result = await res.json()\n      if (result.success) {\n        setScanResult(null)\n        setScanAgain(true)\n        if (window.navigator.vibrate) window.navigator.vibrate(100)\n        // Optionally show a toast\n      } else {\n        setError(result.error || 'Assignment failed')\n      }\n    } catch (err) {\n      setError('Assignment failed')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleCheckIn = async () => {\n    if (!scanResult?.asset) return\n    setLoading(true)\n    setError(null)\n    try {\n      const res = await fetch('/api/assets/checkin', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ assetId: scanResult.asset.id }),\n      })\n      const result = await res.json()\n      if (result.success) {\n        setScanResult(null)\n        setScanAgain(true)\n        if (window.navigator.vibrate) window.navigator.vibrate(100)\n        // Optionally show a toast\n      } else {\n        setError(result.error || 'Check-in failed')\n      }\n    } catch (err) {\n      setError('Check-in failed')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleScanAgain = () => {\n    setScanResult(null)\n    setScanAgain(false)\n    setError(null)\n    // Optionally restart camera\n    if (!isScanning && hasCamera) startCamera()\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Scan className=\"h-5 w-5 mr-2\" />\n            QR Code Scanner\n          </CardTitle>\n          <CardDescription>Scan QR codes to quickly access asset information</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {scanResult && (\n            <Alert className=\"border-green-200 bg-green-50\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <AlertDescription className=\"text-green-800\">\n                <strong>Asset Found:</strong> {scanResult.asset?.name} ({scanResult.asset?.asset_id}\n                )\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {/* Camera Scanner */}\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium\">Camera Scanner</h4>\n              {hasCamera ? (\n                <div className=\"space-y-3\">\n                  {!isScanning ? (\n                    <Button onClick={startCamera} className=\"w-full\">\n                      <Camera className=\"h-4 w-4 mr-2\" />\n                      Start Camera\n                    </Button>\n                  ) : (\n                    <Button onClick={stopCamera} variant=\"outline\" className=\"w-full\">\n                      <X className=\"h-4 w-4 mr-2\" />\n                      Stop Camera\n                    </Button>\n                  )}\n\n                  <div className=\"relative\">\n                    <video\n                      ref={videoRef}\n                      className={`w-full rounded-lg border ${isScanning ? 'block' : 'hidden'}`}\n                      style={{ maxHeight: '300px' }}\n                    />\n                    {isScanning && (\n                      <div className=\"absolute inset-0 border-2 border-blue-500 rounded-lg pointer-events-none\">\n                        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-32 h-32 border-2 border-blue-500 rounded-lg\"></div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ) : (\n                <Alert>\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription>Camera not available or permission denied</AlertDescription>\n                </Alert>\n              )}\n            </div>\n\n            {/* File Upload */}\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium\">Upload QR Image</h4>\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileUpload}\n                className=\"hidden\"\n              />\n              <Button\n                onClick={() => fileInputRef.current?.click()}\n                variant=\"outline\"\n                className=\"w-full\"\n                disabled={loading}\n              >\n                <Upload className=\"h-4 w-4 mr-2\" />\n                {loading ? 'Processing...' : 'Upload QR Image'}\n              </Button>\n\n              <div className=\"text-center\">\n                <Button\n                  onClick={simulateSuccessfulScan}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"text-xs\"\n                >\n                  Demo: Simulate Scan\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Hidden canvas for image processing */}\n          <canvas ref={canvasRef} className=\"hidden\" />\n\n          {/* Scan Result Display */}\n          {scanResult && scanResult.asset && (\n            <Card className=\"border-green-200 bg-green-50\">\n              <CardHeader>\n                <CardTitle className=\"text-green-800\">Asset Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div>\n                    <strong>Asset ID:</strong>\n                  </div>\n                  <div>{scanResult.asset.asset_id}</div>\n\n                  <div>\n                    <strong>Name:</strong>\n                  </div>\n                  <div>{scanResult.asset.name}</div>\n\n                  <div>\n                    <strong>Category:</strong>\n                  </div>\n                  <div className=\"capitalize\">{scanResult.asset.category}</div>\n\n                  <div>\n                    <strong>Status:</strong>\n                  </div>\n                  <div className=\"capitalize\">{scanResult.asset.status}</div>\n\n                  <div>\n                    <strong>Location:</strong>\n                  </div>\n                  <div>{scanResult.asset.location || 'Not set'}</div>\n\n                  <div>\n                    <strong>Assignee:</strong>\n                  </div>\n                  <div>{scanResult.asset.assignee?.full_name || 'Unassigned'}</div>\n                </div>\n\n                <div className=\"flex flex-col gap-2 mt-4\">\n                  <Button className=\"w-full\" asChild>\n                    <a\n                      href={`/asset/${scanResult.asset.asset_id}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      View Full Asset Details\n                    </a>\n                  </Button>\n                  {/* Quick Actions */}\n                  {['admin', 'manager'].includes(userRole) &&\n                    scanResult.asset.status === 'available' && (\n                      <Button className=\"w-full\" onClick={handleAssignToMe} disabled={loading}>\n                        {loading ? 'Assigning...' : 'Check Out / Assign to Me'}\n                      </Button>\n                    )}\n                  {['admin', 'manager'].includes(userRole) &&\n                    scanResult.asset.status === 'checked_out' && (\n                      <Button\n                        className=\"w-full\"\n                        onClick={handleCheckIn}\n                        disabled={loading}\n                        variant=\"destructive\"\n                      >\n                        {loading ? 'Checking In...' : 'Check In'}\n                      </Button>\n                    )}\n                  <Button className=\"w-full\" variant=\"outline\" onClick={handleScanAgain}>\n                    Scan Again\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\qr-template-designer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[680,683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[680,683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'logoFile' is assigned a value but never used.","line":35,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1549,1552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1549,1552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2419,2422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2419,2422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3326,3329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3326,3329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4667,4670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4667,4670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5041,5044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5041,5044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":238,"column":23,"nodeType":"JSXOpeningElement","endLine":238,"endColumn":88},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":327,"column":23,"nodeType":"JSXOpeningElement","endLine":327,"endColumn":100}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\n\nconst FIELD_OPTIONS = [\n  { value: 'asset_id', label: 'Asset ID' },\n  { value: 'name', label: 'Name' },\n  { value: 'category', label: 'Category' },\n  { value: 'status', label: 'Status' },\n]\n\nexport default function QRTemplateDesigner() {\n  const [templates, setTemplates] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [showForm, setShowForm] = useState(false)\n  const [form, setForm] = useState({\n    name: '',\n    logoUrl: '',\n    fields: ['asset_id', 'name'],\n    fontSize: 14,\n    labelPosition: 'below',\n    qrSize: 120,\n    is_default: false,\n  })\n  const [logoFile, setLogoFile] = useState<File | null>(null)\n  const [previewUrl, setPreviewUrl] = useState<string>('')\n  const [editId, setEditId] = useState<string | null>(null)\n\n  useEffect(() => {\n    fetchTemplates()\n  }, [])\n\n  const fetchTemplates = async () => {\n    setLoading(true)\n    setError(null)\n    try {\n      const res = await fetch('/api/qr-templates')\n      const data = await res.json()\n      if (data.error) throw new Error(data.error)\n      setTemplates(data.templates)\n    } catch (e: any) {\n      setError(e.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setForm({ ...form, [e.target.name]: e.target.value })\n  }\n\n  const handleFieldChange = (field: string) => {\n    setForm(prev => ({\n      ...prev,\n      fields: prev.fields.includes(field)\n        ? prev.fields.filter(f => f !== field)\n        : [...prev.fields, field],\n    }))\n  }\n\n  const handleLogoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (file) {\n      setLogoFile(file)\n      const reader = new FileReader()\n      reader.onload = ev => {\n        setForm(prev => ({ ...prev, logoUrl: ev.target?.result as string }))\n        setPreviewUrl(ev.target?.result as string)\n      }\n      reader.readAsDataURL(file)\n    }\n  }\n\n  const handleEdit = (tpl: any) => {\n    setEditId(tpl.id)\n    setShowForm(true)\n    setForm({\n      name: tpl.name,\n      logoUrl: tpl.config.logoUrl || '',\n      fields: tpl.config.fields || ['asset_id', 'name'],\n      fontSize: tpl.config.fontSize || 14,\n      labelPosition: tpl.config.labelPosition || 'below',\n      qrSize: tpl.config.qrSize || 120,\n      is_default: tpl.is_default || false,\n    })\n    setPreviewUrl(tpl.config.logoUrl || '')\n  }\n\n  const handleSetDefault = async (id: string) => {\n    setError(null)\n    try {\n      // Set is_default true for this template, false for others\n      const res = await fetch(`/api/qr-templates/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ ...form, is_default: true }),\n      })\n      const data = await res.json()\n      if (data.error) throw new Error(data.error)\n      fetchTemplates()\n    } catch (e: any) {\n      setError(e.message)\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError(null)\n    try {\n      const config = {\n        logoUrl: form.logoUrl,\n        fields: form.fields,\n        fontSize: form.fontSize,\n        labelPosition: form.labelPosition,\n        qrSize: form.qrSize,\n      }\n      let res, data\n      if (editId) {\n        res = await fetch(`/api/qr-templates/${editId}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ name: form.name, config, is_default: form.is_default }),\n        })\n        data = await res.json()\n      } else {\n        res = await fetch('/api/qr-templates', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ name: form.name, config, is_default: form.is_default }),\n        })\n        data = await res.json()\n      }\n      if (data.error) throw new Error(data.error)\n      setShowForm(false)\n      setEditId(null)\n      setForm({\n        name: '',\n        logoUrl: '',\n        fields: ['asset_id', 'name'],\n        fontSize: 14,\n        labelPosition: 'below',\n        qrSize: 120,\n        is_default: false,\n      })\n      setLogoFile(null)\n      setPreviewUrl('')\n      fetchTemplates()\n    } catch (e: any) {\n      setError(e.message)\n    }\n  }\n\n  const handleDelete = async (id: string) => {\n    if (!confirm('Delete this template?')) return\n    setError(null)\n    try {\n      const res = await fetch(`/api/qr-templates/${id}`, { method: 'DELETE' })\n      const data = await res.json()\n      if (data.error) throw new Error(data.error)\n      fetchTemplates()\n    } catch (e: any) {\n      setError(e.message)\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>QR Template Designer</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          {loading ? (\n            <div>Loading templates...</div>\n          ) : (\n            <>\n              <div className=\"mb-4 flex justify-between items-center\">\n                <div className=\"font-medium\">Existing Templates</div>\n                <Button onClick={() => setShowForm(v => !v)}>\n                  {showForm ? 'Cancel' : 'New Template'}\n                </Button>\n              </div>\n              <div className=\"space-y-2\">\n                {templates.length === 0 && <div className=\"text-gray-500\">No templates found.</div>}\n                {templates.map(tpl => (\n                  <div key={tpl.id} className=\"flex items-center gap-4 border p-2 rounded\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-semibold\">\n                        {tpl.name}{' '}\n                        {tpl.is_default && <span className=\"text-xs text-blue-600\">(Default)</span>}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        Fields: {tpl.config.fields?.join(', ')}\n                      </div>\n                    </div>\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(tpl)}>\n                      Edit\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleSetDefault(tpl.id)}\n                      disabled={tpl.is_default}\n                    >\n                      Set Default\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleDelete(tpl.id)}>\n                      Delete\n                    </Button>\n                  </div>\n                ))}\n              </div>\n              {showForm && (\n                <form className=\"mt-6 space-y-4\" onSubmit={handleSubmit}>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Template Name</label>\n                    <Input name=\"name\" value={form.name} onChange={handleInputChange} required />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Logo</label>\n                    <Input type=\"file\" accept=\"image/*\" onChange={handleLogoUpload} />\n                    {previewUrl && (\n                      <img src={previewUrl} alt=\"Logo preview\" className=\"mt-2 h-12\" />\n                    )}\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Fields to Display</label>\n                    <div className=\"flex gap-2 flex-wrap\">\n                      {FIELD_OPTIONS.map(opt => (\n                        <label key={opt.value} className=\"flex items-center gap-1\">\n                          <input\n                            type=\"checkbox\"\n                            checked={form.fields.includes(opt.value)}\n                            onChange={() => handleFieldChange(opt.value)}\n                          />\n                          {opt.label}\n                        </label>\n                      ))}\n                    </div>\n                  </div>\n                  <div className=\"flex gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Font Size</label>\n                      <Input\n                        type=\"number\"\n                        name=\"fontSize\"\n                        value={form.fontSize}\n                        onChange={handleInputChange}\n                        min={8}\n                        max={32}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Label Position</label>\n                      <Select\n                        value={form.labelPosition}\n                        onValueChange={v => setForm(f => ({ ...f, labelPosition: v }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"below\">Below QR</SelectItem>\n                          <SelectItem value=\"above\">Above QR</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">QR Size (px)</label>\n                      <Input\n                        type=\"number\"\n                        name=\"qrSize\"\n                        value={form.qrSize}\n                        onChange={handleInputChange}\n                        min={80}\n                        max={300}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={form.is_default}\n                      onChange={e => setForm(f => ({ ...f, is_default: e.target.checked }))}\n                    />\n                    <span>Set as default</span>\n                  </div>\n                  <Button type=\"submit\">{editId ? 'Save Changes' : 'Save Template'}</Button>\n                </form>\n              )}\n              {/* Live Preview */}\n              {showForm && (\n                <div className=\"mt-6\">\n                  <div className=\"font-medium mb-2\">Live Preview</div>\n                  <div\n                    style={{\n                      border: '1px solid #eee',\n                      borderRadius: 8,\n                      padding: 16,\n                      display: 'flex',\n                      flexDirection: 'column',\n                      alignItems: 'center',\n                      width: form.qrSize + 40,\n                    }}\n                  >\n                    {form.labelPosition === 'above' && (\n                      <div style={{ fontSize: form.fontSize, marginBottom: 8 }}>\n                        {form.fields.map(f => f.toUpperCase()).join(' | ')}\n                      </div>\n                    )}\n                    {form.logoUrl && (\n                      <img src={form.logoUrl} alt=\"Logo\" style={{ height: 32, marginBottom: 8 }} />\n                    )}\n                    <div\n                      style={{\n                        width: form.qrSize,\n                        height: form.qrSize,\n                        background: '#f3f3f3',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        marginBottom: form.labelPosition === 'below' ? 8 : 0,\n                      }}\n                    >\n                      <span style={{ color: '#bbb' }}>QR</span>\n                    </div>\n                    {form.labelPosition === 'below' && (\n                      <div style={{ fontSize: form.fontSize, marginTop: 8 }}>\n                        {form.fields.map(f => f.toUpperCase()).join(' | ')}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\rbac\\assign-role-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\rbac\\create-role-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateRoleName' is assigned a value but never used.","line":104,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\n// =====================================================\n// CREATE ROLE DIALOG\n// =====================================================\n// Dialog component for creating new roles with permissions\n\nimport { useState, useEffect } from 'react'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Label } from '@/components/ui/label'\nimport { Switch } from '@/components/ui/switch'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Shield, Key, AlertTriangle, Search, X } from 'lucide-react'\nimport { Role, Permission, CreateRoleRequest } from '@/lib/types/rbac'\n\ninterface CreateRoleDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  onCreateRole: (roleData: CreateRoleRequest) => Promise<void>\n  existingRoles: Role[]\n}\n\nexport function CreateRoleDialog({\n  open,\n  onOpenChange,\n  onCreateRole,\n  existingRoles,\n}: CreateRoleDialogProps) {\n  const [formData, setFormData] = useState<CreateRoleRequest>({\n    name: '',\n    display_name: '',\n    description: '',\n    parent_role_id: undefined,\n    permission_names: [],\n    is_default_role: false,\n    max_users: undefined,\n  })\n\n  const [permissions, setPermissions] = useState<Permission[]>([])\n  const [selectedPermissions, setSelectedPermissions] = useState<Set<string>>(new Set())\n  const [permissionSearch, setPermissionSearch] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [nameError, setNameError] = useState<string | null>(null)\n\n  useEffect(() => {\n    if (open) {\n      loadPermissions()\n      resetForm()\n    }\n  }, [open])\n\n  const loadPermissions = async () => {\n    try {\n      const response = await fetch('/api/permissions')\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      setPermissions(data.permissions || [])\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to load permissions')\n    }\n  }\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      display_name: '',\n      description: '',\n      parent_role_id: undefined,\n      permission_names: [],\n      is_default_role: false,\n      max_users: undefined,\n    })\n    setSelectedPermissions(new Set())\n    setPermissionSearch('')\n    setError(null)\n    setNameError(null)\n  }\n\n  const validateRoleName = (name: string) => {\n    if (!name) {\n      setNameError(null)\n      return\n    }\n\n    // Check format\n    if (!/^[a-zA-Z0-9_-]+$/.test(name)) {\n      setNameError('Role name can only contain letters, numbers, underscores, and hyphens')\n      return\n    }\n\n    // Check uniqueness\n    if (existingRoles.some(role => role.name.toLowerCase() === name.toLowerCase())) {\n      setNameError('A role with this name already exists')\n      return\n    }\n\n    setNameError(null)\n  }\n\n  const handlePermissionToggle = (permissionName: string, checked: boolean) => {\n    const newSelected = new Set(selectedPermissions)\n    if (checked) {\n      newSelected.add(permissionName)\n    } else {\n      newSelected.delete(permissionName)\n    }\n    setSelectedPermissions(newSelected)\n\n    setFormData(prev => ({\n      ...prev,\n      permission_names: Array.from(newSelected),\n    }))\n  }\n\n  const handleSubmit = async () => {\n    if (!formData.name || !formData.display_name) {\n      setError('Name and display name are required')\n      return\n    }\n\n    if (nameError) {\n      setError('Please fix the role name error')\n      return\n    }\n\n    try {\n      setLoading(true)\n      setError(null)\n\n      await onCreateRole(formData)\n      onOpenChange(false)\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to create role')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Filter permissions based on search\n  const filteredPermissions = permissions.filter(\n    permission =>\n      permission.name.toLowerCase().includes(permissionSearch.toLowerCase()) ||\n      permission.display_name.toLowerCase().includes(permissionSearch.toLowerCase()) ||\n      permission.resource_type.toLowerCase().includes(permissionSearch.toLowerCase())\n  )\n\n  // Group permissions by resource type\n  const permissionsByResource = filteredPermissions.reduce(\n    (acc, permission) => {\n      if (!acc[permission.resource_type]) {\n        acc[permission.resource_type] = []\n      }\n      acc[permission.resource_type].push(permission)\n      return acc\n    },\n    {} as Record<string, Permission[]>\n  )\n\n  // Get available parent roles (excluding system roles and roles that would create circular references)\n  const availableParentRoles = existingRoles.filter(role => !role.is_system_role && role.is_active)\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Shield className=\"h-5 w-5\" />\n            <span>Create New Role</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        <Tabs defaultValue=\"basic\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"basic\">Basic Information</TabsTrigger>\n            <TabsTrigger value=\"permissions\">Permissions</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"basic\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Role Name *</Label>\n                <Input\n                  id=\"name\"\n                  placeholder=\"e.g., asset_manager\"\n                  value={formData.name}\n                  onChange={e => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                  className={nameError ? 'border-red-500' : ''}\n                />\n                {nameError && <p className=\"text-sm text-red-600\">{nameError}</p>}\n                <p className=\"text-xs text-gray-500\">\n                  Used internally. Only letters, numbers, underscores, and hyphens allowed.\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"display_name\">Display Name *</Label>\n                <Input\n                  id=\"display_name\"\n                  placeholder=\"e.g., Asset Manager\"\n                  value={formData.display_name}\n                  onChange={e => setFormData(prev => ({ ...prev, display_name: e.target.value }))}\n                />\n                <p className=\"text-xs text-gray-500\">Human-readable name shown in the UI.</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Describe what this role is for and what permissions it should have...\"\n                value={formData.description}\n                onChange={e => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                rows={3}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"parent_role\">Parent Role</Label>\n                <Select\n                  value={formData.parent_role_id || ''}\n                  onValueChange={value =>\n                    setFormData(prev => ({\n                      ...prev,\n                      parent_role_id: value || undefined,\n                    }))\n                  }\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select parent role (optional)\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">No parent role</SelectItem>\n                    {availableParentRoles.map(role => (\n                      <SelectItem key={role.id} value={role.id}>\n                        {role.display_name} (Level {role.level})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-xs text-gray-500\">\n                  Child roles inherit permissions from parent roles.\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"max_users\">Max Users</Label>\n                <Input\n                  id=\"max_users\"\n                  type=\"number\"\n                  min=\"1\"\n                  placeholder=\"No limit\"\n                  value={formData.max_users || ''}\n                  onChange={e =>\n                    setFormData(prev => ({\n                      ...prev,\n                      max_users: e.target.value ? parseInt(e.target.value) : undefined,\n                    }))\n                  }\n                />\n                <p className=\"text-xs text-gray-500\">\n                  Maximum number of users that can have this role.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"is_default\"\n                checked={formData.is_default_role}\n                onCheckedChange={checked =>\n                  setFormData(prev => ({\n                    ...prev,\n                    is_default_role: checked,\n                  }))\n                }\n              />\n              <Label htmlFor=\"is_default\">Default Role</Label>\n              <p className=\"text-xs text-gray-500\">\n                Automatically assigned to new users in this tenant.\n              </p>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"permissions\" className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Key className=\"h-5 w-5\" />\n                <h3 className=\"font-semibold\">Select Permissions</h3>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Badge variant=\"outline\">{selectedPermissions.size} selected</Badge>\n              </div>\n            </div>\n\n            {/* Permission Search */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search permissions...\"\n                value={permissionSearch}\n                onChange={e => setPermissionSearch(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            {/* Selected Permissions Summary */}\n            {selectedPermissions.size > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-sm\">Selected Permissions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {Array.from(selectedPermissions).map(permissionName => {\n                      const permission = permissions.find(p => p.name === permissionName)\n                      return (\n                        <Badge\n                          key={permissionName}\n                          variant=\"secondary\"\n                          className=\"flex items-center space-x-1\"\n                        >\n                          <span>{permission?.display_name || permissionName}</span>\n                          <X\n                            className=\"h-3 w-3 cursor-pointer hover:text-red-600\"\n                            onClick={() => handlePermissionToggle(permissionName, false)}\n                          />\n                        </Badge>\n                      )\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Permissions by Resource Type */}\n            <div className=\"space-y-4\">\n              {Object.entries(permissionsByResource).map(([resourceType, resourcePermissions]) => (\n                <Card key={resourceType}>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm capitalize flex items-center justify-between\">\n                      <span>{resourceType.replace('_', ' ')} Permissions</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            resourcePermissions.forEach(p => handlePermissionToggle(p.name, true))\n                          }}\n                        >\n                          Select All\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            resourcePermissions.forEach(p => handlePermissionToggle(p.name, false))\n                          }}\n                        >\n                          Clear All\n                        </Button>\n                      </div>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                      {resourcePermissions.map(permission => (\n                        <div\n                          key={permission.id}\n                          className=\"flex items-start space-x-3 p-2 rounded border hover:bg-gray-50\"\n                        >\n                          <Checkbox\n                            id={permission.id}\n                            checked={selectedPermissions.has(permission.name)}\n                            onCheckedChange={checked =>\n                              handlePermissionToggle(permission.name, checked as boolean)\n                            }\n                          />\n                          <div className=\"flex-1\">\n                            <Label htmlFor={permission.id} className=\"font-medium cursor-pointer\">\n                              {permission.display_name}\n                            </Label>\n                            {permission.description && (\n                              <p className=\"text-xs text-gray-600 mt-1\">{permission.description}</p>\n                            )}\n                            <div className=\"flex items-center space-x-2 mt-1\">\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {permission.action}\n                              </Badge>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {permission.scope}\n                              </Badge>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {Object.keys(permissionsByResource).length === 0 && (\n              <div className=\"text-center py-8\">\n                <Key className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-600\">No permissions found matching your search.</p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)} disabled={loading}>\n            Cancel\n          </Button>\n          <Button\n            onClick={handleSubmit}\n            disabled={loading || !formData.name || !formData.display_name || !!nameError}\n          >\n            {loading ? 'Creating...' : 'Create Role'}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\rbac\\delegation-management.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_showCreateDelegationDialog' is assigned a value but never used.","line":59,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setShowCreateDelegationDialog' is assigned a value but never used.","line":59,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_showCreateGuestDialog' is assigned a value but never used.","line":60,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setShowCreateGuestDialog' is assigned a value but never used.","line":60,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":59},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadDelegations' function makes the dependencies of useEffect Hook (at line 107) change on every render. To fix this, wrap the definition of 'loadDelegations' in its own useCallback() Hook.","line":66,"column":9,"nodeType":"VariableDeclarator","endLine":84,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'loadDelegations' in its own useCallback() Hook.","fix":{"range":[2139,2620],"text":"useCallback(async () => {\n    try {\n      setLoading(true)\n      const response = await fetch(\n        `/api/delegations?tenant_id=${tenantId}&user_id=${currentUserId}`\n      )\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      setDelegations(data.delegations || [])\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to load delegations')\n    } finally {\n      setLoading(false)\n    }\n  })"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadGuestAccess' function makes the dependencies of useEffect Hook (at line 107) change on every render. To fix this, wrap the definition of 'loadGuestAccess' in its own useCallback() Hook.","line":86,"column":9,"nodeType":"VariableDeclarator","endLine":102,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'loadGuestAccess' in its own useCallback() Hook.","fix":{"range":[2648,3073],"text":"useCallback(async () => {\n    try {\n      const response = await fetch(`/api/guest-access?tenant_id=${tenantId}`)\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      setGuestAccess(data.guestAccess || [])\n    } catch (err: unknown) {\n      console.error(\n        'Error loading guest access:',\n        err instanceof Error ? err.message : 'Unknown error'\n      )\n    }\n  })"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_handleCreateDelegation' is assigned a value but never used.","line":109,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_handleCreateGuestAccess' is assigned a value but never used.","line":134,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\n// =====================================================\n// DELEGATION MANAGEMENT COMPONENT\n// =====================================================\n// Component for managing permission delegations and guest access\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport {\n  Plus,\n  Search,\n  MoreVertical,\n  Users,\n  Share,\n  Clock,\n  Trash2,\n  Eye,\n  UserPlus,\n  AlertTriangle,\n  Calendar,\n  Mail,\n  Shield,\n  Key,\n} from 'lucide-react'\nimport { PermissionDelegationWithProfiles, GuestAccessWithRole } from '@/lib/types/rbac'\n\ninterface DelegationManagementProps {\n  tenantId: string\n  currentUserId: string\n  canManageDelegations?: boolean\n}\n\nexport function DelegationManagement({\n  tenantId,\n  currentUserId,\n  canManageDelegations = false,\n}: DelegationManagementProps) {\n  const [delegations, setDelegations] = useState<PermissionDelegationWithProfiles[]>([])\n  const [guestAccess, setGuestAccess] = useState<GuestAccessWithRole[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [activeTab, setActiveTab] = useState('delegations')\n\n  // Dialog states\n  const [_showCreateDelegationDialog, _setShowCreateDelegationDialog] = useState(false)\n  const [_showCreateGuestDialog, _setShowCreateGuestDialog] = useState(false)\n  const [showRevokeConfirm, setShowRevokeConfirm] = useState(false)\n  const [selectedItem, setSelectedItem] = useState<\n    PermissionDelegationWithProfiles | GuestAccessWithRole | null\n  >(null)\n\n  const loadDelegations = async () => {\n    try {\n      setLoading(true)\n      const response = await fetch(\n        `/api/delegations?tenant_id=${tenantId}&user_id=${currentUserId}`\n      )\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      setDelegations(data.delegations || [])\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to load delegations')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadGuestAccess = async () => {\n    try {\n      const response = await fetch(`/api/guest-access?tenant_id=${tenantId}`)\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      setGuestAccess(data.guestAccess || [])\n    } catch (err: unknown) {\n      console.error(\n        'Error loading guest access:',\n        err instanceof Error ? err.message : 'Unknown error'\n      )\n    }\n  }\n\n  useEffect(() => {\n    loadDelegations()\n    loadGuestAccess()\n  }, [tenantId, currentUserId, loadDelegations, loadGuestAccess])\n\n  const _handleCreateDelegation = async (delegationData: Record<string, unknown>) => {\n    try {\n      const response = await fetch('/api/delegations', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...delegationData,\n          tenant_id: tenantId,\n          delegator_id: currentUserId,\n        }),\n      })\n\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      await loadDelegations()\n      // setShowCreateDelegationDialog(false)\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to create delegation')\n    }\n  }\n\n  const _handleCreateGuestAccess = async (guestData: Record<string, unknown>) => {\n    try {\n      const response = await fetch('/api/guest-access', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...guestData,\n          tenant_id: tenantId,\n          invited_by: currentUserId,\n        }),\n      })\n\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      await loadGuestAccess()\n      // setShowCreateGuestDialog(false)\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to create guest access')\n    }\n  }\n\n  const handleRevokeDelegation = async (delegationId: string) => {\n    try {\n      const response = await fetch(`/api/delegations/${delegationId}/revoke`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          tenant_id: tenantId,\n          revoked_by: currentUserId,\n        }),\n      })\n\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      await loadDelegations()\n      setShowRevokeConfirm(false)\n      setSelectedItem(null)\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to revoke delegation')\n    }\n  }\n\n  const handleRevokeGuestAccess = async (guestId: string) => {\n    try {\n      const response = await fetch(`/api/guest-access/${guestId}/revoke`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ tenant_id: tenantId }),\n      })\n\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      await loadGuestAccess()\n      setShowRevokeConfirm(false)\n      setSelectedItem(null)\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to revoke guest access')\n    }\n  }\n\n  const getStatusBadge = (status: string, expiresAt: string) => {\n    const isExpired = new Date(expiresAt) <= new Date()\n\n    if (status === 'revoked') {\n      return <Badge variant=\"destructive\">Revoked</Badge>\n    }\n\n    if (isExpired) {\n      return <Badge variant=\"secondary\">Expired</Badge>\n    }\n\n    if (status === 'active') {\n      return <Badge variant=\"default\">Active</Badge>\n    }\n\n    return <Badge variant=\"outline\">{status}</Badge>\n  }\n\n  const formatTimeRemaining = (expiresAt: string) => {\n    const now = new Date()\n    const expires = new Date(expiresAt)\n    const diff = expires.getTime() - now.getTime()\n\n    if (diff <= 0) {\n      return 'Expired'\n    }\n\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24))\n    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n\n    if (days > 0) {\n      return `${days} day${days !== 1 ? 's' : ''} remaining`\n    }\n\n    return `${hours} hour${hours !== 1 ? 's' : ''} remaining`\n  }\n\n  const filteredDelegations = delegations.filter(\n    delegation =>\n      delegation.delegatee?.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      delegation.delegator?.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      delegation.reason?.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  const filteredGuestAccess = guestAccess.filter(\n    guest =>\n      guest.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      guest.full_name?.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Delegation Management</h1>\n          <p className=\"text-gray-600\">Manage permission delegations and guest access</p>\n        </div>\n        {canManageDelegations && (\n          <div className=\"flex items-center space-x-2\">\n            <Button onClick={() => setShowCreateDelegationDialog(true)}>\n              <Share className=\"h-4 w-4 mr-2\" />\n              Create Delegation\n            </Button>\n            <Button variant=\"outline\" onClick={() => setShowCreateGuestDialog(true)}>\n              <UserPlus className=\"h-4 w-4 mr-2\" />\n              Invite Guest\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Share className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Delegations</p>\n                <p className=\"text-2xl font-bold\">{delegations.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Active Delegations</p>\n                <p className=\"text-2xl font-bold\">\n                  {\n                    delegations.filter(\n                      d => d.status === 'active' && new Date(d.expires_at) > new Date()\n                    ).length\n                  }\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"h-5 w-5 text-purple-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Guest Access</p>\n                <p className=\"text-2xl font-bold\">{guestAccess.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"h-5 w-5 text-orange-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Active Guests</p>\n                <p className=\"text-2xl font-bold\">\n                  {\n                    guestAccess.filter(g => g.is_active && new Date(g.expires_at) > new Date())\n                      .length\n                  }\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"relative flex-1 max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n          <Input\n            placeholder=\"Search delegations and guests...\"\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"delegations\">\n            <Share className=\"h-4 w-4 mr-2\" />\n            Delegations ({delegations.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"guest-access\">\n            <UserPlus className=\"h-4 w-4 mr-2\" />\n            Guest Access ({guestAccess.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"delegations\" className=\"space-y-4\">\n          {filteredDelegations.length > 0 ? (\n            <div className=\"grid grid-cols-1 gap-4\">\n              {filteredDelegations.map(delegation => (\n                <Card key={delegation.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1 space-y-3\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Share className=\"h-5 w-5 text-blue-600\" />\n                          <div>\n                            <h3 className=\"font-semibold\">\n                              {delegation.delegator?.full_name || delegation.delegator?.email}→{' '}\n                              {delegation.delegatee?.full_name || delegation.delegatee?.email}\n                            </h3>\n                            <p className=\"text-sm text-gray-600\">\n                              {delegation.reason || 'No reason provided'}\n                            </p>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center space-x-4\">\n                          {getStatusBadge(delegation.status, delegation.expires_at)}\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {delegation.scope}\n                          </Badge>\n                          <div className=\"flex items-center space-x-1 text-sm text-gray-500\">\n                            <Calendar className=\"h-4 w-4\" />\n                            <span>{formatTimeRemaining(delegation.expires_at)}</span>\n                          </div>\n                        </div>\n\n                        {delegation.permission_ids && delegation.permission_ids.length > 0 && (\n                          <div className=\"flex items-center space-x-2\">\n                            <Key className=\"h-4 w-4 text-gray-400\" />\n                            <span className=\"text-sm text-gray-600\">\n                              {delegation.permission_ids.length} permission\n                              {delegation.permission_ids.length !== 1 ? 's' : ''} delegated\n                            </span>\n                          </div>\n                        )}\n\n                        {delegation.role && (\n                          <div className=\"flex items-center space-x-2\">\n                            <Shield className=\"h-4 w-4 text-gray-400\" />\n                            <span className=\"text-sm text-gray-600\">\n                              Role: {delegation.role.display_name}\n                            </span>\n                          </div>\n                        )}\n\n                        <div className=\"text-xs text-gray-500\">\n                          Created: {new Date(delegation.created_at).toLocaleDateString()} • Expires:{' '}\n                          {new Date(delegation.expires_at).toLocaleDateString()}\n                        </div>\n                      </div>\n\n                      {canManageDelegations && delegation.delegator_id === currentUserId && (\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <MoreVertical className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => setSelectedItem(delegation)}>\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              View Details\n                            </DropdownMenuItem>\n                            {delegation.status === 'active' && (\n                              <DropdownMenuItem\n                                onClick={() => {\n                                  setSelectedItem(delegation)\n                                  setShowRevokeConfirm(true)\n                                }}\n                                className=\"text-red-600\"\n                              >\n                                <Trash2 className=\"h-4 w-4 mr-2\" />\n                                Revoke Delegation\n                              </DropdownMenuItem>\n                            )}\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Share className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-600\">No delegations found.</p>\n              {canManageDelegations && (\n                <Button className=\"mt-4\" onClick={() => setShowCreateDelegationDialog(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create First Delegation\n                </Button>\n              )}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"guest-access\" className=\"space-y-4\">\n          {filteredGuestAccess.length > 0 ? (\n            <div className=\"grid grid-cols-1 gap-4\">\n              {filteredGuestAccess.map(guest => (\n                <Card key={guest.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1 space-y-3\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Mail className=\"h-5 w-5 text-green-600\" />\n                          <div>\n                            <h3 className=\"font-semibold\">{guest.full_name || guest.email}</h3>\n                            <p className=\"text-sm text-gray-600\">{guest.email}</p>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center space-x-4\">\n                          {getStatusBadge(\n                            guest.is_active ? 'active' : 'inactive',\n                            guest.expires_at\n                          )}\n                          <div className=\"flex items-center space-x-1 text-sm text-gray-500\">\n                            <Calendar className=\"h-4 w-4\" />\n                            <span>{formatTimeRemaining(guest.expires_at)}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-1 text-sm text-gray-500\">\n                            <Users className=\"h-4 w-4\" />\n                            <span>\n                              {guest.login_count} login{guest.login_count !== 1 ? 's' : ''}\n                            </span>\n                          </div>\n                        </div>\n\n                        {guest.role && (\n                          <div className=\"flex items-center space-x-2\">\n                            <Shield className=\"h-4 w-4 text-gray-400\" />\n                            <span className=\"text-sm text-gray-600\">\n                              Role: {guest.role.display_name}\n                            </span>\n                          </div>\n                        )}\n\n                        <div className=\"text-xs text-gray-500\">\n                          Invited: {new Date(guest.created_at).toLocaleDateString()} • Expires:{' '}\n                          {new Date(guest.expires_at).toLocaleDateString()}\n                          {guest.first_login_at && (\n                            <>\n                              {' '}\n                              • First login: {new Date(guest.first_login_at).toLocaleDateString()}\n                            </>\n                          )}\n                        </div>\n                      </div>\n\n                      {canManageDelegations && (\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <MoreVertical className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => setSelectedItem(guest)}>\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              View Details\n                            </DropdownMenuItem>\n                            {guest.is_active && (\n                              <DropdownMenuItem\n                                onClick={() => {\n                                  setSelectedItem(guest)\n                                  setShowRevokeConfirm(true)\n                                }}\n                                className=\"text-red-600\"\n                              >\n                                <Trash2 className=\"h-4 w-4 mr-2\" />\n                                Revoke Access\n                              </DropdownMenuItem>\n                            )}\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <UserPlus className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-600\">No guest access found.</p>\n              {canManageDelegations && (\n                <Button className=\"mt-4\" onClick={() => setShowCreateGuestDialog(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Invite First Guest\n                </Button>\n              )}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Revoke Confirmation Dialog */}\n      {selectedItem && (\n        <Dialog open={showRevokeConfirm} onOpenChange={setShowRevokeConfirm}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {'delegator_id' in selectedItem ? 'Revoke Delegation' : 'Revoke Guest Access'}\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <p>\n                Are you sure you want to revoke this{' '}\n                {'delegator_id' in selectedItem ? 'delegation' : 'guest access'}? This action cannot\n                be undone.\n              </p>\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setShowRevokeConfirm(false)}>\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={() => {\n                    if ('delegator_id' in selectedItem) {\n                      handleRevokeDelegation(selectedItem.id)\n                    } else {\n                      handleRevokeGuestAccess(selectedItem.id)\n                    }\n                  }}\n                >\n                  Revoke {'delegator_id' in selectedItem ? 'Delegation' : 'Access'}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\rbac\\department-management.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_showCreateDialog' is assigned a value but never used.","line":55,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setShowCreateDialog' is assigned a value but never used.","line":55,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_showEditDialog' is assigned a value but never used.","line":56,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setShowEditDialog' is assigned a value but never used.","line":56,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_showAssignUsersDialog' is assigned a value but never used.","line":58,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_setShowAssignUsersDialog' is assigned a value but never used.","line":58,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":59},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadDepartments' function makes the dependencies of useEffect Hook (at line 99) change on every render. To fix this, wrap the definition of 'loadDepartments' in its own useCallback() Hook.","line":60,"column":9,"nodeType":"VariableDeclarator","endLine":76,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'loadDepartments' in its own useCallback() Hook.","fix":{"range":[2014,2454],"text":"useCallback(async () => {\n    try {\n      setLoading(true)\n      const response = await fetch(`/api/departments?tenant_id=${tenantId}`)\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      setDepartments(data.departments || [])\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to load departments')\n    } finally {\n      setLoading(false)\n    }\n  })"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadDepartmentHierarchy' function makes the dependencies of useEffect Hook (at line 99) change on every render. To fix this, wrap the definition of 'loadDepartmentHierarchy' in its own useCallback() Hook.","line":78,"column":9,"nodeType":"VariableDeclarator","endLine":94,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'loadDepartmentHierarchy' in its own useCallback() Hook.","fix":{"range":[2490,2938],"text":"useCallback(async () => {\n    try {\n      const response = await fetch(`/api/departments/hierarchy?tenant_id=${tenantId}`)\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      setDepartmentHierarchy(data.hierarchy || [])\n    } catch (err: unknown) {\n      console.error(\n        'Error loading department hierarchy:',\n        err instanceof Error ? err.message : 'Unknown error'\n      )\n    }\n  })"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_handleCreateDepartment' is assigned a value but never used.","line":101,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_handleUpdateDepartment' is assigned a value but never used.","line":123,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\n// =====================================================\n// DEPARTMENT MANAGEMENT COMPONENT\n// =====================================================\n// Component for managing organizational departments\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport {\n  Plus,\n  Search,\n  MoreVertical,\n  Users,\n  Building,\n  Settings,\n  Trash2,\n  Edit,\n  Eye,\n  UserPlus,\n  AlertTriangle,\n  TreePine,\n} from 'lucide-react'\nimport { Department, DepartmentHierarchyNode } from '@/lib/types/rbac'\n\ninterface DepartmentManagementProps {\n  tenantId: string\n  canManageDepartments?: boolean\n}\n\nexport function DepartmentManagement({\n  tenantId,\n  canManageDepartments = false,\n}: DepartmentManagementProps) {\n  const [departments, setDepartments] = useState<Department[]>([])\n  const [departmentHierarchy, setDepartmentHierarchy] = useState<DepartmentHierarchyNode[]>([])\n  const [selectedDepartment, setSelectedDepartment] = useState<Department | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [viewMode, setViewMode] = useState<'list' | 'hierarchy'>('list')\n\n  // Dialog states\n  const [_showCreateDialog, _setShowCreateDialog] = useState(false)\n  const [_showEditDialog, _setShowEditDialog] = useState(false)\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false)\n  const [_showAssignUsersDialog, _setShowAssignUsersDialog] = useState(false)\n\n  const loadDepartments = async () => {\n    try {\n      setLoading(true)\n      const response = await fetch(`/api/departments?tenant_id=${tenantId}`)\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      setDepartments(data.departments || [])\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to load departments')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadDepartmentHierarchy = async () => {\n    try {\n      const response = await fetch(`/api/departments/hierarchy?tenant_id=${tenantId}`)\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      setDepartmentHierarchy(data.hierarchy || [])\n    } catch (err: unknown) {\n      console.error(\n        'Error loading department hierarchy:',\n        err instanceof Error ? err.message : 'Unknown error'\n      )\n    }\n  }\n\n  useEffect(() => {\n    loadDepartments()\n    loadDepartmentHierarchy()\n  }, [tenantId, loadDepartments, loadDepartmentHierarchy])\n\n  const _handleCreateDepartment = async (departmentData: Record<string, unknown>) => {\n    try {\n      const response = await fetch('/api/departments', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ ...departmentData, tenant_id: tenantId }),\n      })\n\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      await loadDepartments()\n      await loadDepartmentHierarchy()\n      // setShowCreateDialog(false)\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to create department')\n    }\n  }\n\n  const _handleUpdateDepartment = async (\n    departmentId: string,\n    updates: Record<string, unknown>\n  ) => {\n    try {\n      const response = await fetch(`/api/departments/${departmentId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ ...updates, tenant_id: tenantId }),\n      })\n\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      await loadDepartments()\n      await loadDepartmentHierarchy()\n      // setShowEditDialog(false)\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to update department')\n    }\n  }\n\n  const handleDeleteDepartment = async (departmentId: string) => {\n    try {\n      const response = await fetch(`/api/departments/${departmentId}?tenant_id=${tenantId}`, {\n        method: 'DELETE',\n      })\n\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      await loadDepartments()\n      await loadDepartmentHierarchy()\n      setSelectedDepartment(null)\n      setShowDeleteConfirm(false)\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to delete department')\n    }\n  }\n\n  const filteredDepartments = departments.filter(\n    dept =>\n      dept.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      dept.display_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (dept.code && dept.code.toLowerCase().includes(searchTerm.toLowerCase()))\n  )\n\n  const renderDepartmentHierarchy = (nodes: DepartmentHierarchyNode[], level = 0) => {\n    return nodes.map(node => (\n      <div\n        key={node.department.id}\n        className={`${level > 0 ? 'ml-6 border-l-2 border-gray-200 pl-4' : ''}`}\n      >\n        <Card className=\"mb-2 hover:shadow-md transition-shadow\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3 flex-1\">\n                <Building\n                  className={`h-5 w-5 ${\n                    node.department.department_type === 'operational'\n                      ? 'text-blue-600'\n                      : node.department.department_type === 'administrative'\n                        ? 'text-green-600'\n                        : node.department.department_type === 'technical'\n                          ? 'text-purple-600'\n                          : node.department.department_type === 'financial'\n                            ? 'text-yellow-600'\n                            : 'text-red-600'\n                  }`}\n                />\n\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <h3 className=\"font-semibold text-gray-900\">{node.department.display_name}</h3>\n                    {node.department.code && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {node.department.code}\n                      </Badge>\n                    )}\n                  </div>\n\n                  {node.department.description && (\n                    <p className=\"text-sm text-gray-600 mt-1\">{node.department.description}</p>\n                  )}\n\n                  <div className=\"flex items-center space-x-4 mt-2\">\n                    <div className=\"flex items-center space-x-1 text-sm text-gray-500\">\n                      <Users className=\"h-4 w-4\" />\n                      <span>{node.users?.length || 0} users</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1 text-sm text-gray-500\">\n                      <Settings className=\"h-4 w-4\" />\n                      <span>{node.roles?.length || 0} roles</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex flex-wrap gap-1\">\n                  <Badge variant=\"outline\" className=\"text-xs capitalize\">\n                    {node.department.department_type}\n                  </Badge>\n                  {!node.department.is_active && (\n                    <Badge variant=\"destructive\" className=\"text-xs\">\n                      Inactive\n                    </Badge>\n                  )}\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    Level {node.department.level}\n                  </Badge>\n                </div>\n\n                {canManageDepartments && (\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <MoreVertical className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem onClick={() => setSelectedDepartment(node.department)}>\n                        <Eye className=\"h-4 w-4 mr-2\" />\n                        View Details\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        onClick={() => {\n                          setSelectedDepartment(node.department)\n                          setShowEditDialog(true)\n                        }}\n                      >\n                        <Edit className=\"h-4 w-4 mr-2\" />\n                        Edit Department\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        onClick={() => {\n                          setSelectedDepartment(node.department)\n                          setShowAssignUsersDialog(true)\n                        }}\n                      >\n                        <UserPlus className=\"h-4 w-4 mr-2\" />\n                        Manage Users\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        onClick={() => {\n                          setSelectedDepartment(node.department)\n                          setShowDeleteConfirm(true)\n                        }}\n                        className=\"text-red-600\"\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        Delete Department\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {node.children.length > 0 && (\n          <div className=\"mt-2\">{renderDepartmentHierarchy(node.children, level + 1)}</div>\n        )}\n      </div>\n    ))\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Department Management</h1>\n          <p className=\"text-gray-600\">Manage organizational structure and user assignments</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant={viewMode === 'list' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setViewMode('list')}\n          >\n            List View\n          </Button>\n          <Button\n            variant={viewMode === 'hierarchy' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setViewMode('hierarchy')}\n          >\n            <TreePine className=\"h-4 w-4 mr-2\" />\n            Hierarchy\n          </Button>\n          {canManageDepartments && (\n            <Button onClick={() => setShowCreateDialog(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Department\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Building className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Departments</p>\n                <p className=\"text-2xl font-bold\">{departments.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Active Departments</p>\n                <p className=\"text-2xl font-bold\">{departments.filter(d => d.is_active).length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <TreePine className=\"h-5 w-5 text-purple-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Root Departments</p>\n                <p className=\"text-2xl font-bold\">{departmentHierarchy.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Settings className=\"h-5 w-5 text-orange-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Max Depth</p>\n                <p className=\"text-2xl font-bold\">\n                  {departments.length > 0 ? Math.max(...departments.map(d => d.level)) : 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"relative flex-1 max-w-md\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n          <Input\n            placeholder=\"Search departments...\"\n            value={searchTerm}\n            onChange={e => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Department Content */}\n      {viewMode === 'hierarchy' ? (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Department Hierarchy</h3>\n          {departmentHierarchy.length > 0 ? (\n            <div className=\"space-y-2\">{renderDepartmentHierarchy(departmentHierarchy)}</div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Building className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-600\">No departments found.</p>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {filteredDepartments.map(department => (\n            <Card key={department.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Building\n                      className={`h-5 w-5 ${\n                        department.department_type === 'operational'\n                          ? 'text-blue-600'\n                          : department.department_type === 'administrative'\n                            ? 'text-green-600'\n                            : department.department_type === 'technical'\n                              ? 'text-purple-600'\n                              : department.department_type === 'financial'\n                                ? 'text-yellow-600'\n                                : 'text-red-600'\n                      }`}\n                    />\n                    <CardTitle className=\"text-lg\">{department.display_name}</CardTitle>\n                  </div>\n                  {canManageDepartments && (\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreVertical className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => setSelectedDepartment(department)}>\n                          <Eye className=\"h-4 w-4 mr-2\" />\n                          View Details\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                          onClick={() => {\n                            setSelectedDepartment(department)\n                            setShowEditDialog(true)\n                          }}\n                        >\n                          <Edit className=\"h-4 w-4 mr-2\" />\n                          Edit Department\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                          onClick={() => {\n                            setSelectedDepartment(department)\n                            setShowAssignUsersDialog(true)\n                          }}\n                        >\n                          <UserPlus className=\"h-4 w-4 mr-2\" />\n                          Manage Users\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                          onClick={() => {\n                            setSelectedDepartment(department)\n                            setShowDeleteConfirm(true)\n                          }}\n                          className=\"text-red-600\"\n                        >\n                          <Trash2 className=\"h-4 w-4 mr-2\" />\n                          Delete Department\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <p className=\"text-sm text-gray-600\">\n                    {department.description || 'No description'}\n                  </p>\n\n                  <div className=\"flex flex-wrap gap-1\">\n                    <Badge variant=\"outline\" className=\"text-xs capitalize\">\n                      {department.department_type}\n                    </Badge>\n                    {department.code && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {department.code}\n                      </Badge>\n                    )}\n                    {!department.is_active && (\n                      <Badge variant=\"destructive\" className=\"text-xs\">\n                        Inactive\n                      </Badge>\n                    )}\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      Level {department.level}\n                    </Badge>\n                  </div>\n\n                  <div className=\"flex items-center justify-between text-sm text-gray-500\">\n                    <span>Created: {new Date(department.created_at).toLocaleDateString()}</span>\n                    {department.budget_limit && (\n                      <span>Budget: ${department.budget_limit.toLocaleString()}</span>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {filteredDepartments.length === 0 && viewMode === 'list' && (\n        <div className=\"text-center py-8\">\n          <Building className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">No departments found matching your search.</p>\n        </div>\n      )}\n\n      {/* Delete Confirmation Dialog */}\n      {selectedDepartment && (\n        <Dialog open={showDeleteConfirm} onOpenChange={setShowDeleteConfirm}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Delete Department</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <p>\n                Are you sure you want to delete the department &quot;\n                {selectedDepartment.display_name}&quot;? This action cannot be undone.\n              </p>\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setShowDeleteConfirm(false)}>\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={() => handleDeleteDepartment(selectedDepartment.id)}\n                >\n                  Delete Department\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\rbac\\edit-role-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[579,582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[579,582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'existingRoles' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Switch } from '@/components/ui/switch'\nimport { Role } from '@/lib/types/rbac'\n\ninterface EditRoleDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  role: Role\n  onUpdateRole: (roleId: string, updates: any) => Promise<void>\n  existingRoles: Role[]\n}\n\nexport function EditRoleDialog({\n  open,\n  onOpenChange,\n  role,\n  onUpdateRole,\n  existingRoles,\n}: EditRoleDialogProps) {\n  const [formData, setFormData] = useState({\n    name: '',\n    display_name: '',\n    description: '',\n    is_active: true,\n    max_users: '',\n  })\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n    if (role) {\n      setFormData({\n        name: role.name || '',\n        display_name: role.display_name || '',\n        description: role.description || '',\n        is_active: role.is_active ?? true,\n        max_users: role.max_users?.toString() || '',\n      })\n    }\n  }, [role])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      const updates = {\n        ...formData,\n        max_users: formData.max_users ? parseInt(formData.max_users) : null,\n      }\n\n      await onUpdateRole(role.id, updates)\n      onOpenChange(false)\n    } catch (error) {\n      console.error('Error updating role:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Edit Role</DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Role Name</Label>\n            <Input\n              id=\"name\"\n              value={formData.name}\n              onChange={e => setFormData(prev => ({ ...prev, name: e.target.value }))}\n              placeholder=\"Enter role name\"\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"display_name\">Display Name</Label>\n            <Input\n              id=\"display_name\"\n              value={formData.display_name}\n              onChange={e => setFormData(prev => ({ ...prev, display_name: e.target.value }))}\n              placeholder=\"Enter display name\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={e => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              placeholder=\"Enter role description\"\n              rows={3}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"max_users\">Max Users (optional)</Label>\n            <Input\n              id=\"max_users\"\n              type=\"number\"\n              value={formData.max_users}\n              onChange={e => setFormData(prev => ({ ...prev, max_users: e.target.value }))}\n              placeholder=\"Leave empty for unlimited\"\n              min=\"1\"\n            />\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Switch\n              id=\"is_active\"\n              checked={formData.is_active}\n              onCheckedChange={checked => setFormData(prev => ({ ...prev, is_active: checked }))}\n            />\n            <Label htmlFor=\"is_active\">Active</Label>\n          </div>\n\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              disabled={isLoading}\n            >\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={isLoading}>\n              {isLoading ? 'Updating...' : 'Update Role'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\rbac\\permission-guard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'context'. Either exclude it or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":116,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [userContext, permissions, resourceId, tenantId, userId, requireAll, onUnauthorized, permissionService]","fix":{"range":[2941,3094],"text":"[userContext, permissions, resourceId, tenantId, userId, requireAll, onUnauthorized, permissionService]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'permissionService' object construction makes the dependencies of useCallback Hook (at line 253) change on every render. Move it inside the useCallback callback. Alternatively, wrap the initialization of 'permissionService' in its own useMemo() Hook.","line":161,"column":9,"nodeType":"VariableDeclarator","endLine":161,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\n// =====================================================\n// PERMISSION GUARD COMPONENT\n// =====================================================\n// Component for protecting UI elements based on user permissions\n\nimport { ReactNode, useEffect, useState, useCallback } from 'react'\nimport { createClient } from '@/lib/supabase/client'\nimport { PermissionService } from '@/lib/services/permission-service'\nimport { PermissionCheckRequest } from '@/lib/types/rbac'\n\ninterface PermissionGuardProps {\n  children: ReactNode\n  permissions: string | string[]\n  requireAll?: boolean // true = AND, false = OR (default)\n  resourceId?: string\n  context?: Record<string, unknown>\n  fallback?: ReactNode\n  loading?: ReactNode\n  onUnauthorized?: () => void\n  tenantId?: string\n  userId?: string\n}\n\nexport function PermissionGuard({\n  children,\n  permissions,\n  requireAll = false,\n  resourceId,\n  context,\n  fallback = null,\n  loading = null,\n  onUnauthorized,\n  tenantId,\n  userId,\n}: PermissionGuardProps): JSX.Element {\n  const [hasPermission, setHasPermission] = useState<boolean | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [userContext, setUserContext] = useState<{ tenantId: string; userId: string } | null>(null)\n\n  const permissionService = new PermissionService()\n\n  const loadUserContext = useCallback(async () => {\n    if (tenantId && userId) {\n      setUserContext({ tenantId, userId })\n      return\n    }\n\n    try {\n      const response = await fetch('/api/auth/me')\n      const data = await response.json()\n\n      if (data.user && data.tenant) {\n        setUserContext({\n          tenantId: data.tenant.id,\n          userId: data.user.id,\n        })\n      }\n    } catch (error) {\n      console.error('Failed to load user context:', error)\n    }\n  }, [tenantId, userId])\n\n  const checkPermissions = useCallback(async () => {\n    if (!userContext && !(tenantId && userId)) {\n      setHasPermission(false)\n      setIsLoading(false)\n      return\n    }\n\n    const currentTenantId = tenantId || userContext?.tenantId\n    const currentUserId = userId || userContext?.userId\n\n    if (!currentTenantId || !currentUserId) {\n      setHasPermission(false)\n      setIsLoading(false)\n      return\n    }\n\n    try {\n      setIsLoading(true)\n\n      const permissionArray = Array.isArray(permissions) ? permissions : [permissions]\n      const results = await Promise.all(\n        permissionArray.map(permission =>\n          permissionService.checkPermission(currentUserId, resourceId || 'default', permission)\n        )\n      )\n\n      const hasAccess = requireAll\n        ? results.every(result => result)\n        : results.some(result => result)\n\n      setHasPermission(hasAccess)\n\n      if (!hasAccess && onUnauthorized) {\n        onUnauthorized()\n      }\n    } catch (error) {\n      console.error('Permission check failed:', error)\n      setHasPermission(false)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [\n    userContext,\n    permissions,\n    resourceId,\n    context,\n    tenantId,\n    userId,\n    requireAll,\n    onUnauthorized,\n    permissionService,\n  ])\n\n  useEffect(() => {\n    loadUserContext()\n  }, [loadUserContext])\n\n  useEffect(() => {\n    if (userContext || (tenantId && userId)) {\n      checkPermissions()\n    }\n  }, [userContext, tenantId, userId, checkPermissions])\n\n  if (isLoading) {\n    return loading || <div className=\"animate-pulse bg-gray-200 rounded h-4 w-16\"></div>\n  }\n\n  if (hasPermission === false) {\n    return <>{fallback}</>\n  }\n\n  if (hasPermission === true) {\n    return <>{children}</>\n  }\n\n  return <></>\n}\n\n// =====================================================\n// HOOK FOR PERMISSION CHECKING\n// =====================================================\n\nexport function usePermissions(\n  permissions: string | string[],\n  options: {\n    requireAll?: boolean\n    resourceId?: string\n    context?: Record<string, unknown>\n    tenantId?: string\n    userId?: string\n  } = {}\n) {\n  const [hasPermission, setHasPermission] = useState<boolean | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [userContext, setUserContext] = useState<{ tenantId: string; userId: string } | null>(null)\n\n  const permissionService = new PermissionService()\n\n  const loadUserContext = useCallback(async () => {\n    if (options.tenantId && options.userId) {\n      setUserContext({ tenantId: options.tenantId, userId: options.userId })\n      return\n    }\n\n    try {\n      const supabase = createClient()\n      const {\n        data: { user },\n        error,\n      } = await supabase.auth.getUser()\n\n      if (error || !user) {\n        setHasPermission(false)\n        setIsLoading(false)\n        return\n      }\n\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('tenant_id')\n        .eq('id', user.id)\n        .single()\n\n      if (!profile) {\n        setHasPermission(false)\n        setIsLoading(false)\n        return\n      }\n\n      setUserContext({\n        tenantId: profile.tenant_id,\n        userId: user.id,\n      })\n    } catch (error) {\n      console.error('Error loading user context:', error)\n      setHasPermission(false)\n      setIsLoading(false)\n    }\n  }, [options.tenantId, options.userId])\n\n  const checkPermissions = useCallback(async () => {\n    if (!userContext && !(options.tenantId && options.userId)) {\n      setHasPermission(false)\n      setIsLoading(false)\n      return\n    }\n\n    const currentTenantId = options.tenantId || userContext!.tenantId\n    const currentUserId = options.userId || userContext!.userId\n\n    try {\n      setIsLoading(true)\n\n      const permissionList = Array.isArray(permissions) ? permissions : [permissions]\n\n      if (permissionList.length === 0) {\n        setHasPermission(true)\n        setIsLoading(false)\n        return\n      }\n\n      const requests: PermissionCheckRequest[] = permissionList.map(permission => ({\n        permission_name: permission,\n        resource_id: options.resourceId,\n        context: {\n          ...options.context,\n          hook: 'usePermissions',\n          timestamp: new Date().toISOString(),\n        },\n      }))\n\n      const results = await permissionService.checkMultiplePermissions(\n        currentTenantId,\n        currentUserId,\n        requests\n      )\n\n      const hasRequiredPermissions = options.requireAll\n        ? permissionList.every(permission => results[permission]?.granted)\n        : permissionList.some(permission => results[permission]?.granted)\n\n      setHasPermission(hasRequiredPermissions)\n    } catch (error) {\n      console.error('Error checking permissions:', error)\n      setHasPermission(false)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [userContext, permissions, options, permissionService])\n\n  useEffect(() => {\n    loadUserContext()\n  }, [loadUserContext])\n\n  useEffect(() => {\n    if (userContext || (options.tenantId && options.userId)) {\n      checkPermissions()\n    }\n  }, [userContext, options.tenantId, options.userId, checkPermissions])\n\n  const refetch = () => {\n    checkPermissions()\n  }\n\n  return {\n    hasPermission,\n    isLoading,\n    refetch,\n  }\n}\n\n// =====================================================\n// HIGHER-ORDER COMPONENT FOR PERMISSION PROTECTION\n// =====================================================\n\nexport function withPermissions<P extends object>(\n  Component: React.ComponentType<P>,\n  permissions: string | string[],\n  options: {\n    requireAll?: boolean\n    fallback?: ReactNode\n    loading?: ReactNode\n  } = {}\n) {\n  return function PermissionProtectedComponent(props: P) {\n    return (\n      <PermissionGuard\n        permissions={permissions}\n        requireAll={options.requireAll}\n        fallback={options.fallback}\n        loading={options.loading}\n      >\n        <Component {...props} />\n      </PermissionGuard>\n    )\n  }\n}\n\n// =====================================================\n// CONDITIONAL RENDERING HELPERS\n// =====================================================\n\ninterface ConditionalRenderProps {\n  children: ReactNode\n  condition: boolean\n  fallback?: ReactNode\n}\n\nexport function ConditionalRender({\n  children,\n  condition,\n  fallback = null,\n}: ConditionalRenderProps) {\n  return condition ? <>{children}</> : <>{fallback}</>\n}\n\n// =====================================================\n// PERMISSION-BASED BUTTON COMPONENT\n// =====================================================\n\ninterface PermissionButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  permissions: string | string[]\n  requireAll?: boolean\n  resourceId?: string\n  context?: Record<string, unknown>\n  fallback?: ReactNode\n  children: ReactNode\n  className?: string\n}\n\nexport function PermissionButton({\n  permissions,\n  requireAll = false,\n  resourceId,\n  context,\n  fallback = null,\n  children,\n  className = '',\n  ...buttonProps\n}: PermissionButtonProps) {\n  const { hasPermission, isLoading } = usePermissions(permissions, {\n    requireAll,\n    resourceId,\n    context,\n  })\n\n  if (isLoading) {\n    return (\n      <button {...buttonProps} disabled className={`${className} opacity-50 cursor-not-allowed`}>\n        <div className=\"animate-pulse\">Loading...</div>\n      </button>\n    )\n  }\n\n  if (!hasPermission) {\n    return <>{fallback}</>\n  }\n\n  return (\n    <button {...buttonProps} className={className}>\n      {children}\n    </button>\n  )\n}\n\n// =====================================================\n// PERMISSION-BASED LINK COMPONENT\n// =====================================================\n\ninterface PermissionLinkProps {\n  permissions: string | string[]\n  requireAll?: boolean\n  resourceId?: string\n  context?: Record<string, unknown>\n  fallback?: ReactNode\n  children: ReactNode\n  href: string\n  className?: string\n}\n\nexport function PermissionLink({\n  permissions,\n  requireAll = false,\n  resourceId,\n  context,\n  fallback = null,\n  children,\n  href,\n  className = '',\n}: PermissionLinkProps) {\n  const { hasPermission, isLoading } = usePermissions(permissions, {\n    requireAll,\n    resourceId,\n    context,\n  })\n\n  if (isLoading) {\n    return (\n      <span className={`${className} opacity-50`}>\n        <div className=\"animate-pulse\">Loading...</div>\n      </span>\n    )\n  }\n\n  if (!hasPermission) {\n    return <>{fallback}</>\n  }\n\n  return (\n    <a href={href} className={className}>\n      {children}\n    </a>\n  )\n}\n\n// =====================================================\n// PERMISSION CONSTANTS FOR EASY REFERENCE\n// =====================================================\n\nexport const PERMISSIONS = {\n  ASSETS: {\n    CREATE: 'create:asset',\n    READ: 'read:asset',\n    UPDATE: 'update:asset',\n    DELETE: 'delete:asset',\n    ASSIGN: 'assign:asset',\n    TRANSFER: 'transfer:asset',\n    MANAGE: 'manage:asset',\n  },\n  USERS: {\n    CREATE: 'create:user',\n    READ: 'read:user',\n    UPDATE: 'update:user',\n    DELETE: 'delete:user',\n    MANAGE: 'manage:user',\n  },\n  ROLES: {\n    CREATE: 'create:role',\n    READ: 'read:role',\n    UPDATE: 'update:role',\n    DELETE: 'delete:role',\n    MANAGE: 'manage:role',\n  },\n  DEPARTMENTS: {\n    CREATE: 'create:department',\n    READ: 'read:department',\n    UPDATE: 'update:department',\n    DELETE: 'delete:department',\n    MANAGE: 'manage:department',\n  },\n  REPORTS: {\n    CREATE: 'create:report',\n    READ: 'read:report',\n    UPDATE: 'update:report',\n    DELETE: 'delete:report',\n    EXPORT: 'export:report',\n  },\n  SETTINGS: {\n    READ: 'read:setting',\n    UPDATE: 'update:setting',\n    MANAGE: 'manage:setting',\n  },\n  AUDIT: {\n    READ: 'read:audit',\n    EXPORT: 'export:audit',\n  },\n} as const\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\rbac\\permission-matrix.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tenantId' is defined but never used.","line":14,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'canManageRoles' is defined but never used.","line":14,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Role } from '@/lib/types/rbac'\n\ninterface PermissionMatrixProps {\n  tenantId: string\n  roles: Role[]\n  canManageRoles: boolean\n}\n\nexport function PermissionMatrix({ tenantId, roles, canManageRoles }: PermissionMatrixProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Permission Matrix</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {roles.map(role => (\n            <div key={role.id} className=\"border rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h3 className=\"font-medium\">{role.display_name || role.name}</h3>\n                <Badge variant={role.is_active ? 'default' : 'secondary'}>\n                  {role.is_active ? 'Active' : 'Inactive'}\n                </Badge>\n              </div>\n              <p className=\"text-sm text-muted-foreground mb-2\">{role.description}</p>\n              <div className=\"text-sm text-muted-foreground\">\n                Level: {role.level} | Max Users: {role.max_users || 'Unlimited'}\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\rbac\\role-analytics.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tenantId' is defined but never used.","line":13,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Role } from '@/lib/types/rbac'\n\ninterface RoleAnalyticsProps {\n  tenantId: string\n  roles: Role[]\n}\n\nexport function RoleAnalytics({ tenantId, roles }: RoleAnalyticsProps) {\n  const totalRoles = roles.length\n  const activeRoles = roles.filter(r => r.is_active).length\n  const systemRoles = roles.filter(r => r.is_system_role).length\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Roles</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalRoles}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Roles</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{activeRoles}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">System Roles</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{systemRoles}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Role Distribution</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            {roles.map(role => (\n              <div key={role.id} className=\"flex items-center justify-between p-2 border rounded\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-medium\">{role.display_name || role.name}</span>\n                  <Badge variant={role.is_active ? 'default' : 'secondary'}>\n                    {role.is_active ? 'Active' : 'Inactive'}\n                  </Badge>\n                  {role.is_system_role && <Badge variant=\"outline\">System</Badge>}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Level {role.level}</div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\rbac\\role-hierarchy-tree.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8100,8103],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8100,8103],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\n// =====================================================\n// ROLE HIERARCHY TREE\n// =====================================================\n// Component for displaying and managing role hierarchy\n\nimport { useState } from 'react'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { ChevronDown, ChevronRight, Shield, Users, Key, Plus, Edit, Trash2 } from 'lucide-react'\nimport { RoleHierarchyNode, Role } from '@/lib/types/rbac'\n\ninterface RoleHierarchyTreeProps {\n  hierarchy: RoleHierarchyNode[]\n  onRoleSelect?: (roleId: string) => void\n  onCreateChildRole?: (parentRole: Role) => void\n  onEditRole?: (role: Role) => void\n  onDeleteRole?: (role: Role) => void\n  canManageRoles?: boolean\n}\n\nexport function RoleHierarchyTree({\n  hierarchy,\n  onRoleSelect,\n  onCreateChildRole,\n  onEditRole,\n  onDeleteRole,\n  canManageRoles = false,\n}: RoleHierarchyTreeProps) {\n  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set())\n\n  const toggleNode = (roleId: string) => {\n    const newExpanded = new Set(expandedNodes)\n    if (newExpanded.has(roleId)) {\n      newExpanded.delete(roleId)\n    } else {\n      newExpanded.add(roleId)\n    }\n    setExpandedNodes(newExpanded)\n  }\n\n  const renderNode = (node: RoleHierarchyNode, level = 0) => {\n    const isExpanded = expandedNodes.has(node.role.id)\n    const hasChildren = node.children.length > 0\n\n    return (\n      <div key={node.role.id} className=\"w-full\">\n        <Card className={`mb-2 ${level > 0 ? 'ml-6' : ''} hover:shadow-md transition-shadow`}>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3 flex-1\">\n                {/* Expand/Collapse Button */}\n                {hasChildren ? (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => toggleNode(node.role.id)}\n                    className=\"p-1 h-6 w-6\"\n                  >\n                    {isExpanded ? (\n                      <ChevronDown className=\"h-4 w-4\" />\n                    ) : (\n                      <ChevronRight className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                ) : (\n                  <div className=\"w-6\" />\n                )}\n\n                {/* Role Icon */}\n                <div className=\"flex-shrink-0\">\n                  <Shield\n                    className={`h-5 w-5 ${\n                      node.role.is_system_role\n                        ? 'text-red-600'\n                        : node.role.is_default_role\n                          ? 'text-blue-600'\n                          : 'text-gray-600'\n                    }`}\n                  />\n                </div>\n\n                {/* Role Information */}\n                <div className=\"flex-1 cursor-pointer\" onClick={() => onRoleSelect?.(node.role.id)}>\n                  <div className=\"flex items-center space-x-2\">\n                    <h3 className=\"font-semibold text-gray-900\">{node.role.display_name}</h3>\n                    <span className=\"text-sm text-gray-500\">({node.role.name})</span>\n                  </div>\n\n                  {node.role.description && (\n                    <p className=\"text-sm text-gray-600 mt-1\">{node.role.description}</p>\n                  )}\n\n                  {/* Role Stats */}\n                  <div className=\"flex items-center space-x-4 mt-2\">\n                    <div className=\"flex items-center space-x-1 text-sm text-gray-500\">\n                      <Users className=\"h-4 w-4\" />\n                      <span>{node.user_count} users</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1 text-sm text-gray-500\">\n                      <Key className=\"h-4 w-4\" />\n                      <span>{node.permissions.length} permissions</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Role Badges */}\n                <div className=\"flex flex-wrap gap-1\">\n                  {node.role.is_system_role && (\n                    <Badge variant=\"destructive\" className=\"text-xs\">\n                      System\n                    </Badge>\n                  )}\n                  {node.role.is_default_role && (\n                    <Badge variant=\"default\" className=\"text-xs\">\n                      Default\n                    </Badge>\n                  )}\n                  {!node.role.is_active && (\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      Inactive\n                    </Badge>\n                  )}\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    Level {node.role.level}\n                  </Badge>\n                </div>\n\n                {/* Action Buttons */}\n                {canManageRoles && (\n                  <div className=\"flex items-center space-x-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={e => {\n                        e.stopPropagation()\n                        onCreateChildRole?.(node.role)\n                      }}\n                      className=\"h-8 w-8 p-0\"\n                      title=\"Create child role\"\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n\n                    {!node.role.is_system_role && (\n                      <>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={e => {\n                            e.stopPropagation()\n                            onEditRole?.(node.role)\n                          }}\n                          className=\"h-8 w-8 p-0\"\n                          title=\"Edit role\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={e => {\n                            e.stopPropagation()\n                            onDeleteRole?.(node.role)\n                          }}\n                          className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700\"\n                          title=\"Delete role\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Permission Preview */}\n            {node.permissions.length > 0 && (\n              <div className=\"mt-3 pt-3 border-t border-gray-200\">\n                <div className=\"flex flex-wrap gap-1\">\n                  {node.permissions.slice(0, 5).map(permission => (\n                    <Badge key={permission.id} variant=\"outline\" className=\"text-xs\">\n                      {permission.display_name}\n                    </Badge>\n                  ))}\n                  {node.permissions.length > 5 && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      +{node.permissions.length - 5} more\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Render Children */}\n        {hasChildren && isExpanded && (\n          <div className=\"ml-4 border-l-2 border-gray-200 pl-2\">\n            {node.children.map(child => renderNode(child, level + 1))}\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  if (hierarchy.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <Shield className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n        <p className=\"text-gray-600\">No roles found in the hierarchy.</p>\n        {canManageRoles && (\n          <Button className=\"mt-4\" onClick={() => onCreateChildRole?.(null as any)}>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Root Role\n          </Button>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Hierarchy Controls */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => {\n              const allRoleIds = new Set<string>()\n              const collectRoleIds = (nodes: RoleHierarchyNode[]) => {\n                nodes.forEach(node => {\n                  allRoleIds.add(node.role.id)\n                  collectRoleIds(node.children)\n                })\n              }\n              collectRoleIds(hierarchy)\n              setExpandedNodes(allRoleIds)\n            }}\n          >\n            Expand All\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => setExpandedNodes(new Set())}>\n            Collapse All\n          </Button>\n        </div>\n\n        <div className=\"text-sm text-gray-600\">\n          {hierarchy.length} root role{hierarchy.length !== 1 ? 's' : ''}\n        </div>\n      </div>\n\n      {/* Hierarchy Tree */}\n      <div className=\"space-y-2\">{hierarchy.map(node => renderNode(node))}</div>\n\n      {/* Legend */}\n      <Card className=\"bg-gray-50\">\n        <CardContent className=\"p-4\">\n          <h4 className=\"font-semibold mb-2\">Legend</h4>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"h-4 w-4 text-red-600\" />\n              <span>System Role</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"h-4 w-4 text-blue-600\" />\n              <span>Default Role</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"h-4 w-4 text-gray-600\" />\n              <span>Custom Role</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"outline\" className=\"text-xs\">\n                Level\n              </Badge>\n              <span>Hierarchy Level</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\rbac\\role-management-dashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadRoles' function makes the dependencies of useEffect Hook (at line 105) change on every render. To fix this, wrap the definition of 'loadRoles' in its own useCallback() Hook.","line":66,"column":9,"nodeType":"VariableDeclarator","endLine":82,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'loadRoles' in its own useCallback() Hook.","fix":{"range":[2339,2755],"text":"useCallback(async () => {\n    try {\n      setLoading(true)\n      const response = await fetch(`/api/roles?tenant_id=${tenantId}`)\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      setRoles(data.roles || [])\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to load roles')\n    } finally {\n      setLoading(false)\n    }\n  })"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadRoleHierarchy' function makes the dependencies of useEffect Hook (at line 105) change on every render. To fix this, wrap the definition of 'loadRoleHierarchy' in its own useCallback() Hook.","line":84,"column":9,"nodeType":"VariableDeclarator","endLine":100,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'loadRoleHierarchy' in its own useCallback() Hook.","fix":{"range":[2785,3215],"text":"useCallback(async () => {\n    try {\n      const response = await fetch(`/api/roles/hierarchy?tenant_id=${tenantId}`)\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      setRoleHierarchy(data.hierarchy || [])\n    } catch (err: unknown) {\n      console.error(\n        'Error loading role hierarchy:',\n        err instanceof Error ? err.message : 'Unknown error'\n      )\n    }\n  })"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\n// =====================================================\n// ROLE MANAGEMENT DASHBOARD\n// =====================================================\n// Main dashboard component for managing roles and permissions\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport {\n  Plus,\n  Search,\n  MoreVertical,\n  Users,\n  Shield,\n  Settings,\n  Trash2,\n  Edit,\n  Eye,\n  UserPlus,\n  AlertTriangle,\n} from 'lucide-react'\nimport { RoleHierarchyTree } from './role-hierarchy-tree'\nimport { CreateRoleDialog } from './create-role-dialog'\nimport { EditRoleDialog } from './edit-role-dialog'\nimport { AssignRoleDialog } from './assign-role-dialog'\nimport { PermissionMatrix } from './permission-matrix'\nimport { RoleAnalytics } from './role-analytics'\nimport { Role, RoleWithPermissions, RoleHierarchyNode } from '@/lib/types/rbac'\n\ninterface RoleManagementDashboardProps {\n  tenantId: string\n  canManageRoles?: boolean\n}\n\nexport function RoleManagementDashboard({\n  tenantId,\n  canManageRoles = false,\n}: RoleManagementDashboardProps) {\n  const [roles, setRoles] = useState<Role[]>([])\n  const [roleHierarchy, setRoleHierarchy] = useState<RoleHierarchyNode[]>([])\n  const [selectedRole, setSelectedRole] = useState<RoleWithPermissions | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [activeTab, setActiveTab] = useState('overview')\n\n  // Dialog states\n  const [showCreateDialog, setShowCreateDialog] = useState(false)\n  const [showEditDialog, setShowEditDialog] = useState(false)\n  const [showAssignDialog, setShowAssignDialog] = useState(false)\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false)\n\n  const loadRoles = async () => {\n    try {\n      setLoading(true)\n      const response = await fetch(`/api/roles?tenant_id=${tenantId}`)\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      setRoles(data.roles || [])\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to load roles')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadRoleHierarchy = async () => {\n    try {\n      const response = await fetch(`/api/roles/hierarchy?tenant_id=${tenantId}`)\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      setRoleHierarchy(data.hierarchy || [])\n    } catch (err: unknown) {\n      console.error(\n        'Error loading role hierarchy:',\n        err instanceof Error ? err.message : 'Unknown error'\n      )\n    }\n  }\n\n  useEffect(() => {\n    loadRoles()\n    loadRoleHierarchy()\n  }, [tenantId, loadRoles, loadRoleHierarchy])\n\n  const loadRoleDetails = async (roleId: string) => {\n    try {\n      const response = await fetch(`/api/roles/${roleId}?tenant_id=${tenantId}`)\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      setSelectedRole(data.role)\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to load role details')\n    }\n  }\n\n  const handleCreateRole = async (roleData: Record<string, unknown>) => {\n    try {\n      const response = await fetch('/api/roles', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ ...roleData, tenant_id: tenantId }),\n      })\n\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      await loadRoles()\n      await loadRoleHierarchy()\n      setShowCreateDialog(false)\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to create role')\n    }\n  }\n\n  const handleUpdateRole = async (roleId: string, updates: Record<string, unknown>) => {\n    try {\n      const response = await fetch(`/api/roles/${roleId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ ...updates, tenant_id: tenantId }),\n      })\n\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      await loadRoles()\n      await loadRoleHierarchy()\n      if (selectedRole?.id === roleId) {\n        await loadRoleDetails(roleId)\n      }\n      setShowEditDialog(false)\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to update role')\n    }\n  }\n\n  const handleDeleteRole = async (roleId: string) => {\n    try {\n      const response = await fetch(`/api/roles/${roleId}?tenant_id=${tenantId}`, {\n        method: 'DELETE',\n      })\n\n      const data = await response.json()\n\n      if (data.error) {\n        throw new Error(data.error)\n      }\n\n      await loadRoles()\n      await loadRoleHierarchy()\n      if (selectedRole?.id === roleId) {\n        setSelectedRole(null)\n      }\n      setShowDeleteConfirm(false)\n    } catch (err: unknown) {\n      setError(err instanceof Error ? err.message : 'Failed to delete role')\n    }\n  }\n\n  const filteredRoles = roles.filter(\n    role =>\n      role.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      role.display_name.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Role Management</h1>\n          <p className=\"text-gray-600\">Manage roles, permissions, and user assignments</p>\n        </div>\n        {canManageRoles && (\n          <Button onClick={() => setShowCreateDialog(true)}>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Role\n          </Button>\n        )}\n      </div>\n\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Roles</p>\n                <p className=\"text-2xl font-bold\">{roles.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Active Roles</p>\n                <p className=\"text-2xl font-bold\">{roles.filter(r => r.is_active).length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Settings className=\"h-5 w-5 text-orange-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">System Roles</p>\n                <p className=\"text-2xl font-bold\">{roles.filter(r => r.is_system_role).length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <UserPlus className=\"h-5 w-5 text-purple-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Default Roles</p>\n                <p className=\"text-2xl font-bold\">{roles.filter(r => r.is_default_role).length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"hierarchy\">Hierarchy</TabsTrigger>\n          <TabsTrigger value=\"permissions\">Permissions</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          {/* Search and Filters */}\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search roles...\"\n                value={searchTerm}\n                onChange={e => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n\n          {/* Roles List */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {filteredRoles.map(role => (\n              <Card key={role.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Shield className=\"h-5 w-5 text-blue-600\" />\n                      <CardTitle className=\"text-lg\">{role.display_name}</CardTitle>\n                    </div>\n                    {canManageRoles && (\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreVertical className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => loadRoleDetails(role.id)}>\n                            <Eye className=\"h-4 w-4 mr-2\" />\n                            View Details\n                          </DropdownMenuItem>\n                          {!role.is_system_role && (\n                            <>\n                              <DropdownMenuItem\n                                onClick={() => {\n                                  setSelectedRole(role as RoleWithPermissions)\n                                  setShowEditDialog(true)\n                                }}\n                              >\n                                <Edit className=\"h-4 w-4 mr-2\" />\n                                Edit Role\n                              </DropdownMenuItem>\n                              <DropdownMenuItem\n                                onClick={() => {\n                                  setSelectedRole(role as RoleWithPermissions)\n                                  setShowAssignDialog(true)\n                                }}\n                              >\n                                <UserPlus className=\"h-4 w-4 mr-2\" />\n                                Assign Users\n                              </DropdownMenuItem>\n                              <DropdownMenuItem\n                                onClick={() => {\n                                  setSelectedRole(role as RoleWithPermissions)\n                                  setShowDeleteConfirm(true)\n                                }}\n                                className=\"text-red-600\"\n                              >\n                                <Trash2 className=\"h-4 w-4 mr-2\" />\n                                Delete Role\n                              </DropdownMenuItem>\n                            </>\n                          )}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <p className=\"text-sm text-gray-600\">{role.description || 'No description'}</p>\n\n                    <div className=\"flex flex-wrap gap-1\">\n                      {role.is_system_role && <Badge variant=\"secondary\">System</Badge>}\n                      {role.is_default_role && <Badge variant=\"outline\">Default</Badge>}\n                      {!role.is_active && <Badge variant=\"destructive\">Inactive</Badge>}\n                      <Badge variant=\"outline\">Level {role.level}</Badge>\n                    </div>\n\n                    <div className=\"flex items-center justify-between text-sm text-gray-500\">\n                      <span>Created: {new Date(role.created_at).toLocaleDateString()}</span>\n                      {role.max_users && <span>Max Users: {role.max_users}</span>}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {filteredRoles.length === 0 && (\n            <div className=\"text-center py-8\">\n              <Shield className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-600\">No roles found matching your search.</p>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"hierarchy\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Role Hierarchy</CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Visual representation of role inheritance and relationships\n              </p>\n            </CardHeader>\n            <CardContent>\n              <RoleHierarchyTree\n                hierarchy={roleHierarchy}\n                onRoleSelect={loadRoleDetails}\n                canManageRoles={canManageRoles}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"permissions\">\n          <PermissionMatrix tenantId={tenantId} roles={roles} canManageRoles={canManageRoles} />\n        </TabsContent>\n\n        <TabsContent value=\"analytics\">\n          <RoleAnalytics tenantId={tenantId} roles={roles} />\n        </TabsContent>\n      </Tabs>\n\n      {/* Dialogs */}\n      <CreateRoleDialog\n        open={showCreateDialog}\n        onOpenChange={setShowCreateDialog}\n        onCreateRole={handleCreateRole}\n        tenantId={tenantId}\n        existingRoles={roles}\n      />\n\n      {selectedRole && (\n        <>\n          <EditRoleDialog\n            open={showEditDialog}\n            onOpenChange={setShowEditDialog}\n            role={selectedRole}\n            onUpdateRole={handleUpdateRole}\n            existingRoles={roles}\n          />\n\n          <AssignRoleDialog\n            open={showAssignDialog}\n            onOpenChange={setShowAssignDialog}\n            role={selectedRole}\n            tenantId={tenantId}\n            onAssignComplete={() => {\n              setShowAssignDialog(false)\n              loadRoleDetails(selectedRole.id)\n            }}\n          />\n\n          <Dialog open={showDeleteConfirm} onOpenChange={setShowDeleteConfirm}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Delete Role</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <p>\n                  Are you sure you want to delete the role &quot;{selectedRole.display_name}&quot;?\n                  This action cannot be undone.\n                </p>\n                <div className=\"flex justify-end space-x-2\">\n                  <Button variant=\"outline\" onClick={() => setShowDeleteConfirm(false)}>\n                    Cancel\n                  </Button>\n                  <Button variant=\"destructive\" onClick={() => handleDeleteRole(selectedRole.id)}>\n                    Delete Role\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\realtime-chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\realtime-dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\realtime-notifications.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\role-management.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[733,736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[733,736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[892,895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[892,895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1314,1317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1314,1317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1426,1429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1426,1429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2139,2142],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2139,2142],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\n\nconst PERMISSION_OPTIONS = [\n  { value: 'manage:assets', label: 'Manage Assets' },\n  { value: 'manage:geofences', label: 'Manage Geofences' },\n  { value: 'manage:reports', label: 'Manage Reports' },\n  { value: 'manage:users', label: 'Manage Users' },\n  { value: 'view:reports', label: 'View Reports' },\n  { value: 'view:audit', label: 'View Audit Log' },\n  { value: 'manage:settings', label: 'Manage Settings' },\n]\n\nexport default function RoleManagement() {\n  const [roles, setRoles] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [editRole, setEditRole] = useState<any>(null)\n  const [editPerms, setEditPerms] = useState<string[]>([])\n  const [saving, setSaving] = useState(false)\n\n  useEffect(() => {\n    fetchRoles()\n  }, [])\n\n  const fetchRoles = async () => {\n    setLoading(true)\n    setError(null)\n    try {\n      const res = await fetch('/api/roles')\n      const data = await res.json()\n      if (data.error) throw new Error(data.error)\n      setRoles(data.roles)\n    } catch (e: any) {\n      setError(e.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleEdit = (role: any) => {\n    setEditRole(role)\n    setEditPerms(role.permissions || [])\n  }\n\n  const handlePermChange = (perm: string) => {\n    setEditPerms(prev => (prev.includes(perm) ? prev.filter(p => p !== perm) : [...prev, perm]))\n  }\n\n  const handleSave = async () => {\n    if (!editRole) return\n    setSaving(true)\n    setError(null)\n    try {\n      const res = await fetch(`/api/roles/${editRole.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ permissions: editPerms }),\n      })\n      const data = await res.json()\n      if (data.error) throw new Error(data.error)\n      setEditRole(null)\n      setEditPerms([])\n      fetchRoles()\n    } catch (e: any) {\n      setError(e.message)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Role Management</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          {loading ? (\n            <div>Loading roles...</div>\n          ) : (\n            <>\n              <div className=\"mb-4 font-medium\">Roles</div>\n              <div className=\"space-y-2\">\n                {roles.length === 0 && <div className=\"text-gray-500\">No roles found.</div>}\n                {roles.map(role => (\n                  <div key={role.id} className=\"flex items-center gap-4 border p-2 rounded\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-semibold\">{role.name}</div>\n                      <div className=\"text-xs text-gray-500\">\n                        Permissions: {role.permissions?.join(', ')}\n                      </div>\n                    </div>\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => handleEdit(role)}>\n                      Edit\n                    </Button>\n                  </div>\n                ))}\n              </div>\n              {editRole && (\n                <div className=\"mt-6 border rounded p-4 bg-gray-50\">\n                  <div className=\"font-medium mb-2\">Edit Permissions for {editRole.name}</div>\n                  <div className=\"flex gap-2 flex-wrap mb-4\">\n                    {PERMISSION_OPTIONS.map(opt => (\n                      <label key={opt.value} className=\"flex items-center gap-1\">\n                        <input\n                          type=\"checkbox\"\n                          checked={editPerms.includes(opt.value)}\n                          onChange={() => handlePermChange(opt.value)}\n                        />\n                        {opt.label}\n                      </label>\n                    ))}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button onClick={handleSave} disabled={saving}>\n                      {saving ? 'Saving...' : 'Save'}\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        setEditRole(null)\n                        setEditPerms([])\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\safe-auth-wrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\session-sync.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\supabase-connection-test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setProjectRef' is assigned a value but never used.","line":20,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used.","line":30,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { createClient } from '@/lib/supabase/client'\nimport { SUPABASE_CONFIG } from '@/lib/supabase/config'\nimport { Button } from '@/components/ui/button'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport { CheckCircle2, XCircle, RefreshCw } from 'lucide-react'\n\nexport function SupabaseConnectionTest() {\n  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading')\n  const [message, setMessage] = useState<string>('')\n  const [projectRef, setProjectRef] = useState<string>(SUPABASE_CONFIG.projectId)\n\n  const testConnection = async () => {\n    setStatus('loading')\n    setMessage('Testing connection to Supabase...')\n\n    try {\n      const supabase = createClient()\n\n      // Simple query to test connection\n      const { data, error } = await supabase.from('profiles').select('id').limit(1)\n\n      if (error) {\n        console.error('Supabase connection error:', error)\n        setStatus('error')\n        setMessage(`Connection failed: ${error.message}`)\n        return\n      }\n\n      setStatus('success')\n      setMessage('Successfully connected to Supabase!')\n    } catch (err) {\n      console.error('Unexpected error:', err)\n      setStatus('error')\n      setMessage(`Unexpected error: ${err instanceof Error ? err.message : String(err)}`)\n    }\n  }\n\n  useEffect(() => {\n    testConnection()\n  }, [])\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          Supabase Connection Status\n          {status === 'loading' && <RefreshCw className=\"h-4 w-4 animate-spin\" />}\n          {status === 'success' && <CheckCircle2 className=\"h-5 w-5 text-green-500\" />}\n          {status === 'error' && <XCircle className=\"h-5 w-5 text-red-500\" />}\n        </CardTitle>\n        <CardDescription>Testing connection to project: {projectRef}</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div\n          className={`p-4 rounded-md ${\n            status === 'loading'\n              ? 'bg-blue-50 text-blue-700'\n              : status === 'success'\n                ? 'bg-green-50 text-green-700'\n                : 'bg-red-50 text-red-700'\n          }`}\n        >\n          {message}\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button\n          onClick={testConnection}\n          disabled={status === 'loading'}\n          variant={status === 'error' ? 'destructive' : 'default'}\n        >\n          {status === 'loading' ? (\n            <>\n              <RefreshCw className=\"mr-2 h-4 w-4 animate-spin\" />\n              Testing...\n            </>\n          ) : (\n            <>\n              <RefreshCw className=\"mr-2 h-4 w-4\" />\n              Test Connection Again\n            </>\n          )}\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\supabase-dashboard-guide.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":72,"column":99,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2661,2925],"text":"\n                  Auth settings in Supabase can only be configured through the dashboard UI, not\n                  through SQL queries. The SQL script provided creates a reference table but doesn&apos;t\n                  directly modify auth settings.\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2661,2925],"text":"\n                  Auth settings in Supabase can only be configured through the dashboard UI, not\n                  through SQL queries. The SQL script provided creates a reference table but doesn&lsquo;t\n                  directly modify auth settings.\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2661,2925],"text":"\n                  Auth settings in Supabase can only be configured through the dashboard UI, not\n                  through SQL queries. The SQL script provided creates a reference table but doesn&#39;t\n                  directly modify auth settings.\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2661,2925],"text":"\n                  Auth settings in Supabase can only be configured through the dashboard UI, not\n                  through SQL queries. The SQL script provided creates a reference table but doesn&rsquo;t\n                  directly modify auth settings.\n                "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":260,"column":37,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11342,11386],"text":"Disable &quot;Confirm email\" only for development"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11342,11386],"text":"Disable &ldquo;Confirm email\" only for development"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11342,11386],"text":"Disable &#34;Confirm email\" only for development"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11342,11386],"text":"Disable &rdquo;Confirm email\" only for development"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":260,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11342,11386],"text":"Disable \"Confirm email&quot; only for development"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11342,11386],"text":"Disable \"Confirm email&ldquo; only for development"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11342,11386],"text":"Disable \"Confirm email&#34; only for development"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11342,11386],"text":"Disable \"Confirm email&rdquo; only for development"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":265,"column":36,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11611,11639],"text":"Enable &quot;Secure email change\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11611,11639],"text":"Enable &ldquo;Secure email change\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11611,11639],"text":"Enable &#34;Secure email change\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11611,11639],"text":"Enable &rdquo;Secure email change\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":265,"column":56,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11611,11639],"text":"Enable \"Secure email change&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11611,11639],"text":"Enable \"Secure email change&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11611,11639],"text":"Enable \"Secure email change&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11611,11639],"text":"Enable \"Secure email change&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":405,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[17536,17658],"text":"\n                        Add this URL to your GitHub OAuth app&apos;s \"Authorization callback URL\" field\n                      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[17536,17658],"text":"\n                        Add this URL to your GitHub OAuth app&lsquo;s \"Authorization callback URL\" field\n                      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[17536,17658],"text":"\n                        Add this URL to your GitHub OAuth app&#39;s \"Authorization callback URL\" field\n                      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[17536,17658],"text":"\n                        Add this URL to your GitHub OAuth app&rsquo;s \"Authorization callback URL\" field\n                      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":405,"column":65,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17536,17658],"text":"\n                        Add this URL to your GitHub OAuth app's &quot;Authorization callback URL\" field\n                      "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17536,17658],"text":"\n                        Add this URL to your GitHub OAuth app's &ldquo;Authorization callback URL\" field\n                      "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17536,17658],"text":"\n                        Add this URL to your GitHub OAuth app's &#34;Authorization callback URL\" field\n                      "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17536,17658],"text":"\n                        Add this URL to your GitHub OAuth app's &rdquo;Authorization callback URL\" field\n                      "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":405,"column":92,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17536,17658],"text":"\n                        Add this URL to your GitHub OAuth app's \"Authorization callback URL&quot; field\n                      "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17536,17658],"text":"\n                        Add this URL to your GitHub OAuth app's \"Authorization callback URL&ldquo; field\n                      "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17536,17658],"text":"\n                        Add this URL to your GitHub OAuth app's \"Authorization callback URL&#34; field\n                      "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17536,17658],"text":"\n                        Add this URL to your GitHub OAuth app's \"Authorization callback URL&rdquo; field\n                      "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":426,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[18554,18662],"text":"\n                        Add this URL to your GitHub OAuth app&apos;s \"Homepage URL\" field\n                      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[18554,18662],"text":"\n                        Add this URL to your GitHub OAuth app&lsquo;s \"Homepage URL\" field\n                      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[18554,18662],"text":"\n                        Add this URL to your GitHub OAuth app&#39;s \"Homepage URL\" field\n                      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[18554,18662],"text":"\n                        Add this URL to your GitHub OAuth app&rsquo;s \"Homepage URL\" field\n                      "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":426,"column":65,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[18554,18662],"text":"\n                        Add this URL to your GitHub OAuth app's &quot;Homepage URL\" field\n                      "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[18554,18662],"text":"\n                        Add this URL to your GitHub OAuth app's &ldquo;Homepage URL\" field\n                      "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[18554,18662],"text":"\n                        Add this URL to your GitHub OAuth app's &#34;Homepage URL\" field\n                      "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[18554,18662],"text":"\n                        Add this URL to your GitHub OAuth app's &rdquo;Homepage URL\" field\n                      "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":426,"column":78,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[18554,18662],"text":"\n                        Add this URL to your GitHub OAuth app's \"Homepage URL&quot; field\n                      "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[18554,18662],"text":"\n                        Add this URL to your GitHub OAuth app's \"Homepage URL&ldquo; field\n                      "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[18554,18662],"text":"\n                        Add this URL to your GitHub OAuth app's \"Homepage URL&#34; field\n                      "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[18554,18662],"text":"\n                        Add this URL to your GitHub OAuth app's \"Homepage URL&rdquo; field\n                      "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":519,"column":59,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22905,22933],"text":"Click &quot;Continue with GitHub\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22905,22933],"text":"Click &ldquo;Continue with GitHub\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22905,22933],"text":"Click &#34;Continue with GitHub\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22905,22933],"text":"Click &rdquo;Continue with GitHub\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":519,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22905,22933],"text":"Click \"Continue with GitHub&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22905,22933],"text":"Click \"Continue with GitHub&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22905,22933],"text":"Click \"Continue with GitHub&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22905,22933],"text":"Click \"Continue with GitHub&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/signup/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":572,"column":17,"nodeType":"JSXOpeningElement","endLine":572,"endColumn":35},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/login/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":575,"column":17,"nodeType":"JSXOpeningElement","endLine":575,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { CheckCircle, Copy, ExternalLink, Github, Mail, AlertCircle } from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\n\nexport function SupabaseDashboardGuide() {\n  const { toast } = useToast()\n  const [copied, setCopied] = useState<Record<string, boolean>>({})\n\n  const copyToClipboard = (text: string, key: string) => {\n    navigator.clipboard.writeText(text)\n    setCopied({ ...copied, [key]: true })\n    toast({\n      title: 'Copied to clipboard',\n      description: 'Text has been copied to your clipboard',\n    })\n    setTimeout(() => {\n      setCopied({ ...copied, [key]: false })\n    }, 2000)\n  }\n\n  const SITE_URL = 'https://cloudeleavepro.vercel.app'\n  const LOCAL_URL = 'http://localhost:3000'\n  const GITHUB_CLIENT_ID = 'Ov23lipMb8831rUNvsJR'\n  const GITHUB_CLIENT_SECRET = '97c8805c06fa9b6589b8d33848a0835873fd2f98'\n\n  return (\n    <div className=\"container mx-auto py-8 max-w-4xl\">\n      <h1 className=\"text-3xl font-bold mb-6 text-center\">Supabase Authentication Setup Guide</h1>\n      <p className=\"text-gray-600 mb-8 text-center\">\n        Follow these steps to configure email confirmations and GitHub OAuth in your Supabase\n        project\n      </p>\n\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid grid-cols-4 mb-8\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"email\">Email Setup</TabsTrigger>\n          <TabsTrigger value=\"github\">GitHub OAuth</TabsTrigger>\n          <TabsTrigger value=\"test\">Testing</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Authentication Setup Overview</CardTitle>\n              <CardDescription>\n                Complete these steps to configure authentication for your application\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"rounded-lg border p-4 bg-amber-50 border-amber-200\">\n                <h3 className=\"flex items-center text-lg font-medium text-amber-800 mb-2\">\n                  <AlertCircle className=\"mr-2 h-5 w-5\" />\n                  Important Note\n                </h3>\n                <p className=\"text-amber-700\">\n                  Auth settings in Supabase can only be configured through the dashboard UI, not\n                  through SQL queries. The SQL script provided creates a reference table but doesn't\n                  directly modify auth settings.\n                </p>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start gap-3 p-3 rounded-lg border border-gray-200 bg-white\">\n                  <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-primary text-white\">\n                    1\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium\">Run the SQL script</h3>\n                    <p className=\"text-sm text-gray-500\">\n                      Execute the <code>scripts/11-configure-auth-settings-fixed.sql</code> script\n                      to create a reference table\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-3 p-3 rounded-lg border border-gray-200 bg-white\">\n                  <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-primary text-white\">\n                    2\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium\">Configure Email Settings</h3>\n                    <p className=\"text-sm text-gray-500\">\n                      Set up email confirmations in the Supabase dashboard\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-3 p-3 rounded-lg border border-gray-200 bg-white\">\n                  <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-primary text-white\">\n                    3\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium\">Configure GitHub OAuth</h3>\n                    <p className=\"text-sm text-gray-500\">\n                      Set up GitHub authentication with the provided credentials\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-3 p-3 rounded-lg border border-gray-200 bg-white\">\n                  <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-primary text-white\">\n                    4\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium\">Test Authentication</h3>\n                    <p className=\"text-sm text-gray-500\">\n                      Verify that email confirmations and GitHub login work correctly\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n            <CardFooter>\n              <Button asChild className=\"w-full\">\n                <a\n                  href=\"https://app.supabase.com/project/_/auth/providers\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Open Supabase Dashboard <ExternalLink className=\"ml-2 h-4 w-4\" />\n                </a>\n              </Button>\n            </CardFooter>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"email\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Mail className=\"mr-2 h-5 w-5\" />\n                Email Confirmation Setup\n              </CardTitle>\n              <CardDescription>\n                Configure email confirmations in your Supabase project\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"rounded-lg border p-4\">\n                  <h3 className=\"text-lg font-medium mb-2\">Step 1: Configure Site URL</h3>\n                  <p className=\"text-sm text-gray-500 mb-4\">\n                    Set your site URL in the Supabase dashboard\n                  </p>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"site-url\">Site URL</Label>\n                    <div className=\"flex gap-2\">\n                      <Input id=\"site-url\" value={SITE_URL} readOnly className=\"flex-1\" />\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => copyToClipboard(SITE_URL, 'site-url')}\n                      >\n                        {copied['site-url'] ? (\n                          <CheckCircle className=\"h-4 w-4\" />\n                        ) : (\n                          <Copy className=\"h-4 w-4\" />\n                        )}\n                      </Button>\n                    </div>\n                    <p className=\"text-xs text-gray-500\">\n                      Navigate to: Authentication → URL Configuration → Site URL\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"rounded-lg border p-4\">\n                  <h3 className=\"text-lg font-medium mb-2\">Step 2: Configure Redirect URLs</h3>\n                  <p className=\"text-sm text-gray-500 mb-4\">\n                    Add these redirect URLs to your Supabase project\n                  </p>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Production Redirect URLs</Label>\n                      <div className=\"space-y-2\">\n                        {[`${SITE_URL}/auth/callback`, `${SITE_URL}/dashboard`, `${SITE_URL}/`].map(\n                          (url, i) => (\n                            <div key={i} className=\"flex gap-2\">\n                              <Input value={url} readOnly className=\"flex-1\" />\n                              <Button\n                                variant=\"outline\"\n                                size=\"icon\"\n                                onClick={() => copyToClipboard(url, `prod-url-${i}`)}\n                              >\n                                {copied[`prod-url-${i}`] ? (\n                                  <CheckCircle className=\"h-4 w-4\" />\n                                ) : (\n                                  <Copy className=\"h-4 w-4\" />\n                                )}\n                              </Button>\n                            </div>\n                          )\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>Local Development Redirect URLs</Label>\n                      <div className=\"space-y-2\">\n                        {[\n                          `${LOCAL_URL}/auth/callback`,\n                          `${LOCAL_URL}/dashboard`,\n                          `${LOCAL_URL}/`,\n                        ].map((url, i) => (\n                          <div key={i} className=\"flex gap-2\">\n                            <Input value={url} readOnly className=\"flex-1\" />\n                            <Button\n                              variant=\"outline\"\n                              size=\"icon\"\n                              onClick={() => copyToClipboard(url, `local-url-${i}`)}\n                            >\n                              {copied[`local-url-${i}`] ? (\n                                <CheckCircle className=\"h-4 w-4\" />\n                              ) : (\n                                <Copy className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <p className=\"text-xs text-gray-500\">\n                      Navigate to: Authentication → URL Configuration → Redirect URLs\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"rounded-lg border p-4\">\n                  <h3 className=\"text-lg font-medium mb-2\">Step 3: Configure Email Provider</h3>\n                  <p className=\"text-sm text-gray-500 mb-4\">\n                    Enable and configure the Email provider\n                  </p>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-2 p-3 rounded-lg bg-gray-50\">\n                      <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                      <span>Enable Email provider</span>\n                    </div>\n\n                    <div className=\"flex items-center gap-2 p-3 rounded-lg bg-gray-50\">\n                      <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                      <span>Disable \"Confirm email\" only for development</span>\n                    </div>\n\n                    <div className=\"flex items-center gap-2 p-3 rounded-lg bg-gray-50\">\n                      <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                      <span>Enable \"Secure email change\"</span>\n                    </div>\n\n                    <p className=\"text-xs text-gray-500\">\n                      Navigate to: Authentication → Providers → Email\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n            <CardFooter>\n              <Button asChild className=\"w-full\">\n                <a\n                  href=\"https://app.supabase.com/project/_/auth/providers\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Configure Email Settings <ExternalLink className=\"ml-2 h-4 w-4\" />\n                </a>\n              </Button>\n            </CardFooter>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"github\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Github className=\"mr-2 h-5 w-5\" />\n                GitHub OAuth Setup\n              </CardTitle>\n              <CardDescription>\n                Configure GitHub authentication with your credentials\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"rounded-lg border p-4\">\n                  <h3 className=\"text-lg font-medium mb-2\">Step 1: Enable GitHub Provider</h3>\n                  <p className=\"text-sm text-gray-500 mb-4\">\n                    Enable the GitHub provider in your Supabase project\n                  </p>\n\n                  <div className=\"flex items-center gap-2 p-3 rounded-lg bg-gray-50\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                    <span>Navigate to Authentication → Providers → GitHub and enable it</span>\n                  </div>\n                </div>\n\n                <div className=\"rounded-lg border p-4\">\n                  <h3 className=\"text-lg font-medium mb-2\">Step 2: Configure GitHub Credentials</h3>\n                  <p className=\"text-sm text-gray-500 mb-4\">\n                    Add your GitHub OAuth credentials to Supabase\n                  </p>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"github-client-id\">Client ID</Label>\n                      <div className=\"flex gap-2\">\n                        <Input\n                          id=\"github-client-id\"\n                          value={GITHUB_CLIENT_ID}\n                          readOnly\n                          className=\"flex-1\"\n                        />\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => copyToClipboard(GITHUB_CLIENT_ID, 'github-client-id')}\n                        >\n                          {copied['github-client-id'] ? (\n                            <CheckCircle className=\"h-4 w-4\" />\n                          ) : (\n                            <Copy className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"github-client-secret\">Client Secret</Label>\n                      <div className=\"flex gap-2\">\n                        <Input\n                          id=\"github-client-secret\"\n                          value={GITHUB_CLIENT_SECRET}\n                          readOnly\n                          className=\"flex-1\"\n                        />\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() =>\n                            copyToClipboard(GITHUB_CLIENT_SECRET, 'github-client-secret')\n                          }\n                        >\n                          {copied['github-client-secret'] ? (\n                            <CheckCircle className=\"h-4 w-4\" />\n                          ) : (\n                            <Copy className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"rounded-lg border p-4\">\n                  <h3 className=\"text-lg font-medium mb-2\">Step 3: Configure GitHub OAuth App</h3>\n                  <p className=\"text-sm text-gray-500 mb-4\">\n                    Update your GitHub OAuth app with the correct callback URL\n                  </p>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"github-callback\">Callback URL</Label>\n                      <div className=\"flex gap-2\">\n                        <Input\n                          id=\"github-callback\"\n                          value=\"https://wyqohljdnrouovuqqdlt.supabase.co/auth/v1/callback\"\n                          readOnly\n                          className=\"flex-1\"\n                        />\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() =>\n                            copyToClipboard(\n                              'https://wyqohljdnrouovuqqdlt.supabase.co/auth/v1/callback',\n                              'github-callback'\n                            )\n                          }\n                        >\n                          {copied['github-callback'] ? (\n                            <CheckCircle className=\"h-4 w-4\" />\n                          ) : (\n                            <Copy className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                      <p className=\"text-xs text-gray-500\">\n                        Add this URL to your GitHub OAuth app's \"Authorization callback URL\" field\n                      </p>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"github-homepage\">Homepage URL</Label>\n                      <div className=\"flex gap-2\">\n                        <Input id=\"github-homepage\" value={SITE_URL} readOnly className=\"flex-1\" />\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => copyToClipboard(SITE_URL, 'github-homepage')}\n                        >\n                          {copied['github-homepage'] ? (\n                            <CheckCircle className=\"h-4 w-4\" />\n                          ) : (\n                            <Copy className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                      <p className=\"text-xs text-gray-500\">\n                        Add this URL to your GitHub OAuth app's \"Homepage URL\" field\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex flex-col gap-4\">\n              <Button asChild className=\"w-full\">\n                <a\n                  href=\"https://app.supabase.com/project/_/auth/providers\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Configure GitHub Provider <ExternalLink className=\"ml-2 h-4 w-4\" />\n                </a>\n              </Button>\n              <Button asChild variant=\"outline\" className=\"w-full\">\n                <a\n                  href=\"https://github.com/settings/developers\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Update GitHub OAuth App <Github className=\"ml-2 h-4 w-4\" />\n                </a>\n              </Button>\n            </CardFooter>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"test\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Test Authentication</CardTitle>\n              <CardDescription>\n                Verify that your authentication configuration is working correctly\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"rounded-lg border p-4\">\n                  <h3 className=\"text-lg font-medium mb-2\">Email Authentication</h3>\n                  <p className=\"text-sm text-gray-500 mb-4\">Test email signup and confirmation</p>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start gap-3 p-3 rounded-lg border border-gray-200 bg-white\">\n                      <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-primary text-white\">\n                        1\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium\">Sign up with a new email</h3>\n                        <p className=\"text-sm text-gray-500\">\n                          Create a new account using an email address\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start gap-3 p-3 rounded-lg border border-gray-200 bg-white\">\n                      <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-primary text-white\">\n                        2\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium\">Check for confirmation email</h3>\n                        <p className=\"text-sm text-gray-500\">\n                          Verify that you receive a confirmation email\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start gap-3 p-3 rounded-lg border border-gray-200 bg-white\">\n                      <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-primary text-white\">\n                        3\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium\">Click the confirmation link</h3>\n                        <p className=\"text-sm text-gray-500\">\n                          Confirm your email and verify you can access the dashboard\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"rounded-lg border p-4\">\n                  <h3 className=\"text-lg font-medium mb-2\">GitHub Authentication</h3>\n                  <p className=\"text-sm text-gray-500 mb-4\">Test GitHub OAuth login</p>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start gap-3 p-3 rounded-lg border border-gray-200 bg-white\">\n                      <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-primary text-white\">\n                        1\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium\">Click \"Continue with GitHub\"</h3>\n                        <p className=\"text-sm text-gray-500\">\n                          Attempt to sign in with your GitHub account\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start gap-3 p-3 rounded-lg border border-gray-200 bg-white\">\n                      <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-primary text-white\">\n                        2\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium\">Authorize the application</h3>\n                        <p className=\"text-sm text-gray-500\">\n                          Grant permission to your GitHub account\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start gap-3 p-3 rounded-lg border border-gray-200 bg-white\">\n                      <div className=\"flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-primary text-white\">\n                        3\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium\">Verify successful login</h3>\n                        <p className=\"text-sm text-gray-500\">\n                          Confirm you are redirected to the dashboard\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"rounded-lg border p-4 bg-amber-50 border-amber-200\">\n                  <h3 className=\"flex items-center text-lg font-medium text-amber-800 mb-2\">\n                    <AlertCircle className=\"mr-2 h-5 w-5\" />\n                    Troubleshooting\n                  </h3>\n                  <p className=\"text-amber-700 mb-4\">\n                    If you encounter issues with authentication, check these common problems:\n                  </p>\n                  <ul className=\"list-disc pl-5 space-y-2 text-amber-700\">\n                    <li>Verify that Site URL is correctly set</li>\n                    <li>Ensure all redirect URLs are properly configured</li>\n                    <li>Check that GitHub credentials match exactly</li>\n                    <li>Verify the GitHub callback URL is correct</li>\n                    <li>Check browser console for any errors</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex gap-4\">\n              <Button asChild className=\"w-full\">\n                <a href=\"/signup\">Test Email Signup</a>\n              </Button>\n              <Button asChild variant=\"outline\" className=\"w-full\">\n                <a href=\"/login\">Test GitHub Login</a>\n              </Button>\n            </CardFooter>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\supabase-debug.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'client' is assigned a value but never used.","line":41,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\n\ninterface DebugInfo {\n  supabaseUrl: string\n  hasAnonKey: boolean\n  clientCreated: boolean\n  connectionTest: {\n    success: boolean\n    error?: string\n  }\n  environmentVariables: {\n    [key: string]: string | undefined\n  }\n}\n\nexport function SupabaseDebug() {\n  const [debugInfo, setDebugInfo] = useState<DebugInfo | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  const runDiagnostics = async () => {\n    setLoading(true)\n    try {\n      const { createClient, getConfig, checkSupabaseConnection } = await import(\n        '@/lib/supabase/client'\n      )\n      const { ENV, validateEnvironment } = await import('@/lib/env')\n\n      const config = getConfig()\n      const validation = validateEnvironment()\n\n      let connectionTest = { success: false, error: 'Not tested' }\n      let clientCreated = false\n\n      try {\n        const client = createClient()\n        clientCreated = true\n        connectionTest = await checkSupabaseConnection()\n      } catch (error) {\n        connectionTest = {\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        }\n      }\n\n      setDebugInfo({\n        supabaseUrl: config?.url || 'Not configured',\n        hasAnonKey: !!config?.anonKey,\n        clientCreated,\n        connectionTest,\n        environmentVariables: {\n          NEXT_PUBLIC_SUPABASE_URL: ENV.SUPABASE_URL,\n          NEXT_PUBLIC_APP_URL: ENV.APP_URL,\n          NODE_ENV: ENV.NODE_ENV,\n          hasAnonKey: ENV.SUPABASE_ANON_KEY ? '✓ Present' : '✗ Missing',\n          validationStatus: validation.valid\n            ? '✓ Valid'\n            : `✗ Invalid: ${validation.errors.join(', ')}`,\n        },\n      })\n    } catch (error) {\n      console.error('Debug diagnostics failed:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    runDiagnostics()\n  }, [])\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Running Diagnostics...</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-2\">\n            <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (!debugInfo) {\n    return (\n      <Alert>\n        <AlertDescription>\n          Failed to run diagnostics. Please check the console for errors.\n        </AlertDescription>\n      </Alert>\n    )\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Supabase Configuration Debug</CardTitle>\n          <CardDescription>\n            Diagnostic information for troubleshooting Supabase connection issues\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <h4 className=\"font-medium mb-2\">Connection Status</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span>Client Created:</span>\n                  <Badge variant={debugInfo.clientCreated ? 'default' : 'destructive'}>\n                    {debugInfo.clientCreated ? '✓ Success' : '✗ Failed'}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Connection Test:</span>\n                  <Badge variant={debugInfo.connectionTest.success ? 'default' : 'destructive'}>\n                    {debugInfo.connectionTest.success ? '✓ Connected' : '✗ Failed'}\n                  </Badge>\n                </div>\n                {debugInfo.connectionTest.error && (\n                  <p className=\"text-sm text-red-600 mt-1\">\n                    Error: {debugInfo.connectionTest.error}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-medium mb-2\">Configuration</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span>Supabase URL:</span>\n                  <Badge\n                    variant={debugInfo.supabaseUrl !== 'Not configured' ? 'default' : 'destructive'}\n                  >\n                    {debugInfo.supabaseUrl !== 'Not configured' ? '✓ Set' : '✗ Missing'}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Anon Key:</span>\n                  <Badge variant={debugInfo.hasAnonKey ? 'default' : 'destructive'}>\n                    {debugInfo.hasAnonKey ? '✓ Present' : '✗ Missing'}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <h4 className=\"font-medium mb-2\">Environment Variables</h4>\n            <div className=\"bg-gray-50 p-3 rounded-lg space-y-1 text-sm font-mono\">\n              {Object.entries(debugInfo.environmentVariables).map(([key, value]) => (\n                <div key={key} className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">{key}:</span>\n                  <span className=\"text-gray-900\">{value || 'undefined'}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"pt-4 border-t\">\n            <Button onClick={runDiagnostics} className=\"w-full\">\n              Re-run Diagnostics\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {debugInfo.supabaseUrl !== 'Not configured' && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Configuration Details</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 text-sm\">\n              <div>\n                <strong>Supabase URL:</strong>\n                <code className=\"ml-2 bg-gray-100 px-2 py-1 rounded text-xs\">\n                  {debugInfo.supabaseUrl}\n                </code>\n              </div>\n              <div>\n                <strong>Project ID:</strong>\n                <code className=\"ml-2 bg-gray-100 px-2 py-1 rounded text-xs\">\n                  {debugInfo.supabaseUrl.includes('supabase.co')\n                    ? debugInfo.supabaseUrl.split('//')[1]?.split('.')[0]\n                    : 'Unknown'}\n                </code>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\supabase-oauth-setup.tsx","messages":[{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/signup/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":347,"column":23,"nodeType":"JSXOpeningElement","endLine":347,"endColumn":41},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/login/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":365,"column":23,"nodeType":"JSXOpeningElement","endLine":365,"endColumn":40},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":382,"column":74,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16624,16821],"text":" If authentication isn&apos;t working, check the\n                  browser console for errors and verify all URLs are correctly configured in both\n                  Supabase and GitHub.\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16624,16821],"text":" If authentication isn&lsquo;t working, check the\n                  browser console for errors and verify all URLs are correctly configured in both\n                  Supabase and GitHub.\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16624,16821],"text":" If authentication isn&#39;t working, check the\n                  browser console for errors and verify all URLs are correctly configured in both\n                  Supabase and GitHub.\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16624,16821],"text":" If authentication isn&rsquo;t working, check the\n                  browser console for errors and verify all URLs are correctly configured in both\n                  Supabase and GitHub.\n                "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/debug-supabase/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":392,"column":21,"nodeType":"JSXOpeningElement","endLine":392,"endColumn":47},{"ruleId":"@next/next/no-html-link-for-pages","severity":1,"message":"Do not use an `<a>` element to navigate to `/debug-urls/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":395,"column":21,"nodeType":"JSXOpeningElement","endLine":395,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Button } from '@/components/ui/button'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport {\n  ExternalLink,\n  Copy,\n  CheckCircle,\n  Mail,\n  Github,\n  Settings,\n  AlertTriangle,\n} from 'lucide-react'\nimport { useState } from 'react'\n\nexport default function SupabaseOAuthSetup() {\n  const [copied, setCopied] = useState<string | null>(null)\n\n  const copyToClipboard = (text: string, type: string) => {\n    navigator.clipboard.writeText(text)\n    setCopied(type)\n    setTimeout(() => setCopied(null), 2000)\n  }\n\n  const githubClientId = 'Ov23lipMb8831rUNvsJR'\n  const githubClientSecret = '97c8805c06fa9b6589b8d33848a0835873fd2f98'\n  const supabaseUrl = 'https://wyqohljdnrouovuqqdlt.supabase.co'\n  const callbackUrl = `${supabaseUrl}/auth/v1/callback`\n  const siteUrl = 'https://cloudeleavepro.vercel.app'\n\n  return (\n    <div className=\"container py-8 max-w-6xl mx-auto\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Authentication Setup Guide</h1>\n        <p className=\"text-gray-600\">\n          Configure email confirmations and GitHub OAuth for your AssetTracker Pro\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"email\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"email\" className=\"flex items-center gap-2\">\n            <Mail className=\"h-4 w-4\" />\n            Email Setup\n          </TabsTrigger>\n          <TabsTrigger value=\"github\" className=\"flex items-center gap-2\">\n            <Github className=\"h-4 w-4\" />\n            GitHub OAuth\n          </TabsTrigger>\n          <TabsTrigger value=\"testing\" className=\"flex items-center gap-2\">\n            <Settings className=\"h-4 w-4\" />\n            Testing\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Email Configuration */}\n        <TabsContent value=\"email\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Mail className=\"h-5 w-5 text-blue-600\" />\n                Email Configuration\n              </CardTitle>\n              <CardDescription>\n                Set up email confirmations and SMTP settings in Supabase\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <Alert>\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>Important:</strong> Email confirmations require proper SMTP configuration\n                  in Supabase.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">Step 1: Access Supabase Dashboard</h3>\n                  <Button asChild>\n                    <a\n                      href=\"https://app.supabase.com/project/wyqohljdnrouovuqqdlt/auth/settings\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"inline-flex items-center\"\n                    >\n                      Open Auth Settings <ExternalLink className=\"h-4 w-4 ml-2\" />\n                    </a>\n                  </Button>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">Step 2: Configure Site URL</h3>\n                  <div className=\"bg-gray-50 p-4 rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <label className=\"font-medium text-sm\">Site URL:</label>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(siteUrl, 'siteUrl')}\n                        className=\"h-6 px-2\"\n                      >\n                        {copied === 'siteUrl' ? (\n                          <CheckCircle className=\"h-3 w-3\" />\n                        ) : (\n                          <Copy className=\"h-3 w-3\" />\n                        )}\n                      </Button>\n                    </div>\n                    <code className=\"bg-white px-3 py-2 rounded border text-sm block break-all\">\n                      {siteUrl}\n                    </code>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">Step 3: Configure Redirect URLs</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"bg-gray-50 p-4 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <label className=\"font-medium text-sm\">Redirect URLs (add these):</label>\n                      </div>\n                      <div className=\"space-y-2\">\n                        {[\n                          `${siteUrl}/auth/callback`,\n                          `${siteUrl}/dashboard`,\n                          `${siteUrl}/`,\n                          'http://localhost:3000/auth/callback',\n                          'http://localhost:3000/dashboard',\n                          'http://localhost:3000/',\n                        ].map((url, index) => (\n                          <div key={index} className=\"flex items-center justify-between\">\n                            <code className=\"bg-white px-3 py-2 rounded border text-sm flex-1 mr-2\">\n                              {url}\n                            </code>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => copyToClipboard(url, `redirect-${index}`)}\n                              className=\"h-8 px-2\"\n                            >\n                              {copied === `redirect-${index}` ? (\n                                <CheckCircle className=\"h-3 w-3\" />\n                              ) : (\n                                <Copy className=\"h-3 w-3\" />\n                              )}\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">Step 4: Enable Email Confirmations</h3>\n                  <div className=\"bg-blue-50 p-4 rounded-lg\">\n                    <p className=\"text-sm mb-3\">In the Auth Settings, ensure these are enabled:</p>\n                    <ul className=\"text-sm space-y-1\">\n                      <li>✅ Enable email confirmations</li>\n                      <li>✅ Enable email change confirmations</li>\n                      <li>✅ Enable secure email change</li>\n                    </ul>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">\n                    Step 5: Configure SMTP (Optional but Recommended)\n                  </h3>\n                  <Alert>\n                    <AlertDescription>\n                      For production use, configure custom SMTP settings in the Auth Settings.\n                      Without SMTP, Supabase uses their default service which may have limitations.\n                    </AlertDescription>\n                  </Alert>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* GitHub OAuth Configuration */}\n        <TabsContent value=\"github\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Github className=\"h-5 w-5 text-gray-900\" />\n                GitHub OAuth Configuration\n              </CardTitle>\n              <CardDescription>Set up GitHub OAuth with your provided credentials</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <Alert>\n                <CheckCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>Credentials Provided:</strong> Using your GitHub OAuth app credentials.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">Step 1: Configure in Supabase</h3>\n                  <Button asChild>\n                    <a\n                      href=\"https://app.supabase.com/project/wyqohljdnrouovuqqdlt/auth/providers\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"inline-flex items-center\"\n                    >\n                      Open Auth Providers <ExternalLink className=\"h-4 w-4 ml-2\" />\n                    </a>\n                  </Button>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">Step 2: GitHub Provider Settings</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"bg-gray-50 p-4 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <label className=\"font-medium text-sm\">GitHub Client ID:</label>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard(githubClientId, 'clientId')}\n                          className=\"h-6 px-2\"\n                        >\n                          {copied === 'clientId' ? (\n                            <CheckCircle className=\"h-3 w-3\" />\n                          ) : (\n                            <Copy className=\"h-3 w-3\" />\n                          )}\n                        </Button>\n                      </div>\n                      <code className=\"bg-white px-3 py-2 rounded border text-sm block break-all\">\n                        {githubClientId}\n                      </code>\n                    </div>\n\n                    <div className=\"bg-gray-50 p-4 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <label className=\"font-medium text-sm\">GitHub Client Secret:</label>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard(githubClientSecret, 'clientSecret')}\n                          className=\"h-6 px-2\"\n                        >\n                          {copied === 'clientSecret' ? (\n                            <CheckCircle className=\"h-3 w-3\" />\n                          ) : (\n                            <Copy className=\"h-3 w-3\" />\n                          )}\n                        </Button>\n                      </div>\n                      <code className=\"bg-white px-3 py-2 rounded border text-sm block break-all\">\n                        {githubClientSecret}\n                      </code>\n                    </div>\n\n                    <div className=\"bg-gray-50 p-4 rounded-lg\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <label className=\"font-medium text-sm\">Redirect URL:</label>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard(callbackUrl, 'callbackUrl')}\n                          className=\"h-6 px-2\"\n                        >\n                          {copied === 'callbackUrl' ? (\n                            <CheckCircle className=\"h-3 w-3\" />\n                          ) : (\n                            <Copy className=\"h-3 w-3\" />\n                          )}\n                        </Button>\n                      </div>\n                      <code className=\"bg-white px-3 py-2 rounded border text-sm block break-all\">\n                        {callbackUrl}\n                      </code>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">Step 3: Update GitHub OAuth App</h3>\n                  <div className=\"space-y-3\">\n                    <Button asChild>\n                      <a\n                        href=\"https://github.com/settings/developers\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"inline-flex items-center\"\n                      >\n                        Open GitHub Developer Settings <ExternalLink className=\"h-4 w-4 ml-2\" />\n                      </a>\n                    </Button>\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <p className=\"text-sm mb-2\">In your GitHub OAuth app, update these URLs:</p>\n                      <ul className=\"text-sm space-y-1\">\n                        <li>\n                          <strong>Homepage URL:</strong> {siteUrl}\n                        </li>\n                        <li>\n                          <strong>Authorization callback URL:</strong> {callbackUrl}\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">Step 4: Enable GitHub Provider</h3>\n                  <div className=\"bg-green-50 p-4 rounded-lg\">\n                    <p className=\"text-sm mb-2\">In Supabase Auth Providers:</p>\n                    <ul className=\"text-sm space-y-1\">\n                      <li>✅ Enable GitHub provider</li>\n                      <li>✅ Enter Client ID and Client Secret</li>\n                      <li>✅ Save configuration</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Testing */}\n        <TabsContent value=\"testing\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5 text-green-600\" />\n                Testing Authentication\n              </CardTitle>\n              <CardDescription>\n                Verify that email confirmations and GitHub OAuth are working\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">Email Signup Test</h3>\n                  <div className=\"space-y-3\">\n                    <Button asChild className=\"w-full\">\n                      <a href=\"/signup\">Test Email Signup</a>\n                    </Button>\n                    <div className=\"text-sm text-gray-600\">\n                      <p>Expected behavior:</p>\n                      <ul className=\"list-disc list-inside space-y-1 mt-2\">\n                        <li>Form submission succeeds</li>\n                        <li>Confirmation email is sent</li>\n                        <li>Email contains activation link</li>\n                        <li>Clicking link activates account</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">GitHub OAuth Test</h3>\n                  <div className=\"space-y-3\">\n                    <Button asChild className=\"w-full\" variant=\"outline\">\n                      <a href=\"/login\">Test GitHub Login</a>\n                    </Button>\n                    <div className=\"text-sm text-gray-600\">\n                      <p>Expected behavior:</p>\n                      <ul className=\"list-disc list-inside space-y-1 mt-2\">\n                        <li>Redirects to GitHub</li>\n                        <li>GitHub authorization page appears</li>\n                        <li>After approval, redirects back</li>\n                        <li>User is logged in automatically</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <Alert>\n                <AlertDescription>\n                  <strong>Troubleshooting:</strong> If authentication isn't working, check the\n                  browser console for errors and verify all URLs are correctly configured in both\n                  Supabase and GitHub.\n                </AlertDescription>\n              </Alert>\n\n              <div>\n                <h3 className=\"text-lg font-semibold mb-3\">Debug Tools</h3>\n                <div className=\"flex gap-3\">\n                  <Button asChild variant=\"outline\">\n                    <a href=\"/debug-supabase\">Supabase Debug</a>\n                  </Button>\n                  <Button asChild variant=\"outline\">\n                    <a href=\"/debug-urls\">URL Debug</a>\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\supabase-setup-guide.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":165,"column":27,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6353,6448],"text":"\n                  Once you&apos;ve completed all steps, signup confirmation emails will redirect to"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6353,6448],"text":"\n                  Once you&lsquo;ve completed all steps, signup confirmation emails will redirect to"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6353,6448],"text":"\n                  Once you&#39;ve completed all steps, signup confirmation emails will redirect to"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6353,6448],"text":"\n                  Once you&rsquo;ve completed all steps, signup confirmation emails will redirect to"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { CheckCircle, ExternalLink, Copy, AlertCircle } from 'lucide-react'\nimport { toast } from 'sonner'\n\nexport function SupabaseSetupGuide() {\n  const [completedSteps, setCompletedSteps] = useState<number[]>([])\n\n  const toggleStep = (stepNumber: number) => {\n    setCompletedSteps(prev =>\n      prev.includes(stepNumber) ? prev.filter(n => n !== stepNumber) : [...prev, stepNumber]\n    )\n  }\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text)\n    toast.success('Copied to clipboard!')\n  }\n\n  const steps = [\n    {\n      id: 1,\n      title: 'Open Supabase Dashboard',\n      description: \"Navigate to your project's authentication settings\",\n      action: 'https://app.supabase.com/project/wyqohljdnrouovuqqdlt/auth/url-configuration',\n      actionText: 'Open Dashboard',\n    },\n    {\n      id: 2,\n      title: 'Set Site URL',\n      description: 'Update the main site URL for your application',\n      copyText: 'https://cloudeleavepro.vercel.app',\n      instruction: \"In the 'Site URL' field, enter:\",\n    },\n    {\n      id: 3,\n      title: 'Add Redirect URLs',\n      description: 'Configure allowed redirect URLs for authentication',\n      copyTexts: [\n        'https://cloudeleavepro.vercel.app/auth/callback',\n        'https://cloudeleavepro.vercel.app/auth/reset-password',\n        'https://cloudeleavepro.vercel.app/**',\n      ],\n      instruction: \"In the 'Redirect URLs' section, add these URLs (one per line):\",\n    },\n    {\n      id: 4,\n      title: 'Save Configuration',\n      description: 'Apply the changes to your Supabase project',\n      instruction: \"Click 'Save' to apply all URL configuration changes\",\n    },\n    {\n      id: 5,\n      title: 'Test Signup Flow',\n      description: 'Verify that confirmation emails now redirect correctly',\n      action: '/signup',\n      actionText: 'Test Signup',\n    },\n  ]\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <AlertCircle className=\"h-5 w-5 text-amber-500\" />\n            Supabase URL Configuration Setup\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Follow these steps to fix the localhost redirect issue in signup confirmation emails.\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {steps.map(step => (\n              <div key={step.id} className=\"flex gap-4\">\n                <div className=\"flex-shrink-0\">\n                  <Button\n                    variant={completedSteps.includes(step.id) ? 'default' : 'outline'}\n                    size=\"sm\"\n                    className=\"w-8 h-8 rounded-full p-0\"\n                    onClick={() => toggleStep(step.id)}\n                  >\n                    {completedSteps.includes(step.id) ? (\n                      <CheckCircle className=\"h-4 w-4\" />\n                    ) : (\n                      <span className=\"text-xs font-medium\">{step.id}</span>\n                    )}\n                  </Button>\n                </div>\n\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <h3 className=\"font-medium\">{step.title}</h3>\n                    {completedSteps.includes(step.id) && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        Completed\n                      </Badge>\n                    )}\n                  </div>\n\n                  <p className=\"text-sm text-muted-foreground\">{step.description}</p>\n\n                  {step.instruction && (\n                    <p className=\"text-sm font-medium text-blue-600\">{step.instruction}</p>\n                  )}\n\n                  {step.copyText && (\n                    <div className=\"flex items-center gap-2 p-2 bg-gray-50 rounded border\">\n                      <code className=\"flex-1 text-sm\">{step.copyText}</code>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(step.copyText!)}\n                      >\n                        <Copy className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  )}\n\n                  {step.copyTexts && (\n                    <div className=\"space-y-1\">\n                      {step.copyTexts.map((text, index) => (\n                        <div\n                          key={index}\n                          className=\"flex items-center gap-2 p-2 bg-gray-50 rounded border\"\n                        >\n                          <code className=\"flex-1 text-sm\">{text}</code>\n                          <Button variant=\"ghost\" size=\"sm\" onClick={() => copyToClipboard(text)}>\n                            <Copy className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  {step.action && (\n                    <Button variant=\"outline\" size=\"sm\" asChild className=\"mt-2\">\n                      <a\n                        href={step.action}\n                        target={step.action.startsWith('http') ? '_blank' : '_self'}\n                        rel={step.action.startsWith('http') ? 'noopener noreferrer' : undefined}\n                        className=\"flex items-center gap-2\"\n                      >\n                        {step.actionText}\n                        {step.action.startsWith('http') && <ExternalLink className=\"h-4 w-4\" />}\n                      </a>\n                    </Button>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"mt-8 p-4 bg-green-50 rounded-lg border border-green-200\">\n            <div className=\"flex items-start gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-600 mt-0.5\" />\n              <div>\n                <h4 className=\"font-medium text-green-900\">After Completion</h4>\n                <p className=\"text-sm text-green-700 mt-1\">\n                  Once you've completed all steps, signup confirmation emails will redirect to{' '}\n                  <code className=\"bg-green-100 px-1 rounded\">\n                    https://cloudeleavepro.vercel.app\n                  </code>{' '}\n                  instead of localhost.\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\supabase-status.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":120,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4019,4213],"text":" If you&apos;re in the v0 preview environment, some network requests\n            may be restricted. Consider downloading the code and running it locally for full\n            functionality.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4019,4213],"text":" If you&lsquo;re in the v0 preview environment, some network requests\n            may be restricted. Consider downloading the code and running it locally for full\n            functionality.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4019,4213],"text":" If you&#39;re in the v0 preview environment, some network requests\n            may be restricted. Consider downloading the code and running it locally for full\n            functionality.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4019,4213],"text":" If you&rsquo;re in the v0 preview environment, some network requests\n            may be restricted. Consider downloading the code and running it locally for full\n            functionality.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { AlertTriangle, CheckCircle, RefreshCw, Database } from 'lucide-react'\n\nexport default function SupabaseStatus() {\n  const [status, setStatus] = useState<'checking' | 'connected' | 'error' | 'offline'>('checking')\n  const [error, setError] = useState<string | null>(null)\n  const [retryCount, setRetryCount] = useState(0)\n\n  const checkSupabaseConnection = async () => {\n    try {\n      setStatus('checking')\n      setError(null)\n\n      // Check if we have the required environment variables\n      const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n      const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\n      if (!supabaseUrl || !supabaseAnonKey) {\n        setError('Supabase environment variables are missing')\n        setStatus('error')\n        return\n      }\n\n      // Try to make a simple request to Supabase\n      const response = await fetch(`${supabaseUrl}/rest/v1/`, {\n        method: 'HEAD',\n        headers: {\n          apikey: supabaseAnonKey,\n          Authorization: `Bearer ${supabaseAnonKey}`,\n        },\n      })\n\n      if (response.ok) {\n        setStatus('connected')\n      } else {\n        throw new Error(`Supabase responded with status: ${response.status}`)\n      }\n    } catch (err) {\n      console.error('Supabase connection error:', err)\n      setError(err instanceof Error ? err.message : 'Failed to connect to Supabase')\n      setStatus('error')\n    }\n  }\n\n  const handleRetry = () => {\n    setRetryCount(prev => prev + 1)\n    checkSupabaseConnection()\n  }\n\n  useEffect(() => {\n    checkSupabaseConnection()\n  }, [])\n\n  if (status === 'checking') {\n    return (\n      <Alert>\n        <Database className=\"h-4 w-4 animate-pulse\" />\n        <AlertDescription>Checking database connection...</AlertDescription>\n      </Alert>\n    )\n  }\n\n  if (status === 'connected') {\n    return (\n      <Alert className=\"border-green-200 bg-green-50\">\n        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n        <AlertDescription className=\"text-green-800\">\n          ✅ Database connection is working properly\n        </AlertDescription>\n      </Alert>\n    )\n  }\n\n  return (\n    <Card className=\"border-red-200 bg-red-50\">\n      <CardHeader>\n        <CardTitle className=\"text-red-800 flex items-center\">\n          <AlertTriangle className=\"h-5 w-5 mr-2\" />\n          Database Connection Issue\n        </CardTitle>\n        <CardDescription className=\"text-red-700\">\n          Unable to connect to the database. This may be a temporary network issue.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Alert variant=\"destructive\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            <strong>Error:</strong> {error}\n          </AlertDescription>\n        </Alert>\n\n        <div className=\"space-y-3\">\n          <h4 className=\"font-medium text-red-800\">Possible Solutions:</h4>\n          <ul className=\"text-sm text-red-700 space-y-1 list-disc list-inside\">\n            <li>Check your internet connection</li>\n            <li>Try refreshing the page</li>\n            <li>Wait a moment and try again</li>\n            <li>The v0 preview environment may have network restrictions</li>\n          </ul>\n        </div>\n\n        <div className=\"flex space-x-2\">\n          <Button onClick={handleRetry} variant=\"outline\" size=\"sm\">\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Retry Connection ({retryCount})\n          </Button>\n          <Button onClick={() => window.location.reload()} size=\"sm\">\n            Refresh Page\n          </Button>\n        </div>\n\n        <div className=\"bg-blue-50 p-3 rounded border border-blue-200\">\n          <p className=\"text-sm text-blue-800\">\n            <strong>Note:</strong> If you're in the v0 preview environment, some network requests\n            may be restricted. Consider downloading the code and running it locally for full\n            functionality.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\team-management.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":30,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[869,872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[869,872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[929,932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[929,932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":55,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1686,1689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1686,1689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":78,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2351,2354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2351,2354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3157,3160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3157,3160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3680,3683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3680,3683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4290,4293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4290,4293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4804,4807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4804,4807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useEffect, useState } from 'react'\nimport { createClient } from '@/lib/supabase/client'\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { User, Mail, Loader2, Trash2, Plus } from 'lucide-react'\nimport Link from 'next/link'\n\nconst ROLES = ['admin', 'manager', 'user']\n\nexport default function TeamManagement() {\n  const [members, setMembers] = useState<any[]>([])\n  const [invitations, setInvitations] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [inviteDialog, setInviteDialog] = useState(false)\n  const [inviteEmail, setInviteEmail] = useState('')\n  const [inviteRole, setInviteRole] = useState('user')\n  const [inviteLoading, setInviteLoading] = useState(false)\n  const [teamId, setTeamId] = useState<string | null>(null)\n\n  // Fetch teamId for current user\n  useEffect(() => {\n    async function fetchTeamId() {\n      setLoading(true)\n      setError(null)\n      try {\n        const supabase = createClient()\n        const { data: profile } = await supabase.from('profiles').select('team_id').single()\n        if (profile?.team_id) setTeamId(profile.team_id)\n      } catch (e: any) {\n        setError('Failed to load team info')\n      } finally {\n        setLoading(false)\n      }\n    }\n    fetchTeamId()\n  }, [])\n\n  // Fetch members and invitations\n  useEffect(() => {\n    if (!teamId) return\n    setLoading(true)\n    setError(null)\n    async function fetchData() {\n      try {\n        const supabase = createClient()\n        const [membersRes, invitesRes] = await Promise.all([\n          supabase.rpc('get_team_members', { team_id: teamId }),\n          fetch(`/api/teams/${teamId}/invitations`).then(r => r.json()),\n        ])\n        setMembers(membersRes.data || [])\n        setInvitations(invitesRes.invitations || [])\n      } catch (e: any) {\n        setError('Failed to load team data')\n      } finally {\n        setLoading(false)\n      }\n    }\n    fetchData()\n  }, [teamId])\n\n  async function handleInvite() {\n    setInviteLoading(true)\n    setError(null)\n    try {\n      const res = await fetch('/api/teams/invite', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email: inviteEmail, role: inviteRole, team_id: teamId }),\n      })\n      if (!res.ok) throw new Error((await res.json()).error || 'Failed to invite')\n      setInviteDialog(false)\n      setInviteEmail('')\n      setInviteRole('user')\n      // Refresh\n      const invitesRes = await fetch(`/api/teams/${teamId}/invitations`).then(r => r.json())\n      setInvitations(invitesRes.invitations || [])\n    } catch (e: any) {\n      setError(e.message)\n    } finally {\n      setInviteLoading(false)\n    }\n  }\n\n  async function handleRemoveMember(userId: string) {\n    if (!window.confirm('Remove this member from the team?')) return\n    setLoading(true)\n    setError(null)\n    try {\n      const res = await fetch(`/api/teams/${teamId}/members/${userId}`, { method: 'DELETE' })\n      if (!res.ok) throw new Error((await res.json()).error || 'Failed to remove member')\n      setMembers(members.filter(m => m.user_id !== userId))\n    } catch (e: any) {\n      setError(e.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  async function handleChangeRole(userId: string, newRole: string) {\n    setLoading(true)\n    setError(null)\n    try {\n      const res = await fetch(`/api/teams/${teamId}/members/${userId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ role: newRole }),\n      })\n      if (!res.ok) throw new Error((await res.json()).error || 'Failed to change role')\n      setMembers(members.map(m => (m.user_id === userId ? { ...m, role: newRole } : m)))\n    } catch (e: any) {\n      setError(e.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  async function handleCancelInvite(inviteId: string) {\n    if (!window.confirm('Cancel this invitation?')) return\n    setLoading(true)\n    setError(null)\n    try {\n      const res = await fetch(`/api/teams/invitations/${inviteId}`, { method: 'DELETE' })\n      if (!res.ok) throw new Error((await res.json()).error || 'Failed to cancel invitation')\n      setInvitations(invitations.filter(i => i.id !== inviteId))\n    } catch (e: any) {\n      setError(e.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div>\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle>Team Analytics</CardTitle>\n          <CardDescription>View analytics and reports for your team.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Button asChild variant=\"outline\">\n            <Link href=\"/settings/team/analytics\">View Team Analytics</Link>\n          </Button>\n        </CardContent>\n      </Card>\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle>Team Members</CardTitle>\n          <CardDescription>Manage your team members and their roles.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Button onClick={() => setInviteDialog(true)} className=\"mb-4\" size=\"sm\">\n            <Plus className=\"w-4 h-4 mr-2\" /> Invite Member\n          </Button>\n          {loading ? (\n            <div className=\"flex items-center gap-2\">\n              <Loader2 className=\"animate-spin\" /> Loading...\n            </div>\n          ) : error ? (\n            <div className=\"text-red-500\">{error}</div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Role</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {members.map(member => (\n                  <TableRow key={member.user_id}>\n                    <TableCell>\n                      {member.profiles?.full_name || <span className=\"text-gray-400\">-</span>}\n                    </TableCell>\n                    <TableCell>\n                      {member.profiles?.email || <span className=\"text-gray-400\">-</span>}\n                    </TableCell>\n                    <TableCell>\n                      <Select\n                        value={member.role}\n                        onValueChange={val => handleChangeRole(member.user_id, val)}\n                      >\n                        <SelectTrigger className=\"w-28\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {ROLES.map(role => (\n                            <SelectItem key={role} value={role}>\n                              {role}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"destructive\"\n                        size=\"icon\"\n                        onClick={() => handleRemoveMember(member.user_id)}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle>Pending Invitations</CardTitle>\n          <CardDescription>Invitations that have not yet been accepted.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"flex items-center gap-2\">\n              <Loader2 className=\"animate-spin\" /> Loading...\n            </div>\n          ) : error ? (\n            <div className=\"text-red-500\">{error}</div>\n          ) : invitations.length === 0 ? (\n            <div className=\"text-gray-500\">No pending invitations.</div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Role</TableHead>\n                  <TableHead>Invited By</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {invitations.map(invite => (\n                  <TableRow key={invite.id}>\n                    <TableCell>{invite.email}</TableCell>\n                    <TableCell>{invite.role}</TableCell>\n                    <TableCell>\n                      {invite.invited_by || <span className=\"text-gray-400\">-</span>}\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"destructive\"\n                        size=\"icon\"\n                        onClick={() => handleCancelInvite(invite.id)}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n      <Dialog open={inviteDialog} onOpenChange={setInviteDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Invite New Member</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Input\n              placeholder=\"Email address\"\n              value={inviteEmail}\n              onChange={e => setInviteEmail(e.target.value)}\n              type=\"email\"\n              required\n            />\n            <Select value={inviteRole} onValueChange={setInviteRole}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {ROLES.map(role => (\n                  <SelectItem key={role} value={role}>\n                    {role}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <DialogFooter>\n            <Button onClick={handleInvite} disabled={inviteLoading}>\n              {inviteLoading ? (\n                <Loader2 className=\"animate-spin w-4 h-4 mr-2\" />\n              ) : (\n                <Mail className=\"w-4 h-4 mr-2\" />\n              )}{' '}\n              Send Invite\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\calendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used.","line":50,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used.","line":51,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport * as React from 'react'\nimport { ChevronLeft, ChevronRight } from 'lucide-react'\nimport { DayPicker } from 'react-day-picker'\n\nimport { cn } from '@/lib/utils'\nimport { buttonVariants } from '@/components/ui/button'\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn('p-3', className)}\n      classNames={{\n        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\n        month: 'space-y-4',\n        caption: 'flex justify-center pt-1 relative items-center',\n        caption_label: 'text-sm font-medium',\n        nav: 'space-x-1 flex items-center',\n        nav_button: cn(\n          buttonVariants({ variant: 'outline' }),\n          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'\n        ),\n        nav_button_previous: 'absolute left-1',\n        nav_button_next: 'absolute right-1',\n        table: 'w-full border-collapse space-y-1',\n        head_row: 'flex',\n        head_cell: 'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',\n        row: 'flex w-full mt-2',\n        cell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',\n        day: cn(\n          buttonVariants({ variant: 'ghost' }),\n          'h-9 w-9 p-0 font-normal aria-selected:opacity-100'\n        ),\n        day_range_end: 'day-range-end',\n        day_selected:\n          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\n        day_today: 'bg-accent text-accent-foreground',\n        day_outside:\n          'day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground',\n        day_disabled: 'text-muted-foreground opacity-50',\n        day_range_middle: 'aria-selected:bg-accent aria-selected:text-accent-foreground',\n        day_hidden: 'invisible',\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = 'Calendar'\n\nexport { Calendar }\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\chart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":67,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport * as React from 'react'\nimport * as RechartsPrimitive from 'recharts'\n\nimport { cn } from '@/lib/utils'\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error('useChart must be used within a <ChartContainer />')\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> & {\n    config: ChartConfig\n    children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children']\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = 'Chart'\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(([_, config]) => config.theme || config.color)\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join('\\n')}\n}\n`\n          )\n          .join('\\n'),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<'div'> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: 'line' | 'dot' | 'dashed'\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = 'dot',\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || 'value'}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === 'string'\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn('font-medium', labelClassName)}>{labelFormatter(value, payload)}</div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn('font-medium', labelClassName)}>{value}</div>\n    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== 'dot'\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || 'value'}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',\n                  indicator === 'dot' && 'items-center'\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',\n                            {\n                              'h-2.5 w-2.5': indicator === 'dot',\n                              'w-1': indicator === 'line',\n                              'w-0 border-[1.5px] border-dashed bg-transparent':\n                                indicator === 'dashed',\n                              'my-0.5': nestLabel && indicator === 'dashed',\n                            }\n                          )}\n                          style={\n                            {\n                              '--color-bg': indicatorColor,\n                              '--color-border': indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        'flex flex-1 justify-between leading-none',\n                        nestLabel ? 'items-end' : 'items-center'\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = 'ChartTooltip'\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<'div'> &\n    Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(({ className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey }, ref) => {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        'flex items-center justify-center gap-4',\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n        className\n      )}\n    >\n      {payload.map(item => {\n        const key = `${nameKey || item.dataKey || 'value'}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={cn(\n              'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground'\n            )}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n})\nChartLegendContent.displayName = 'ChartLegend'\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n  if (typeof payload !== 'object' || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string\n  }\n\n  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\components\\ui\\use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type.","line":18,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":18,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\n// Inspired by react-hot-toast library\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id']\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id']\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map(t => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach(toast => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map(t =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter(t => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach(listener => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, 'id'>\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: open => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\e2e\\auth.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\hooks\\use-analytics-export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\hooks\\use-analytics.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'analytics'. Either include it or remove the dependency array.","line":104,"column":6,"nodeType":"ArrayExpression","endLine":104,"endColumn":37,"suggestions":[{"desc":"Update the dependencies array to be: [intervalMs, analytics.refresh, analytics]","fix":{"range":[2126,2157],"text":"[intervalMs, analytics.refresh, analytics]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react'\n\nexport interface AnalyticsData {\n  overview: {\n    totalAssets: number\n    activeAssets: number\n    assetsCreatedToday: number\n    assetsCreatedThisWeek: number\n    assetsCreatedThisMonth: number\n    totalValue: number\n    qrCoverage: number\n    lastUpdated: string\n  }\n  categories: Array<{\n    category: string\n    count: number\n    percentage: number\n  }>\n  status: Array<{\n    status: string\n    count: number\n    percentage: number\n  }>\n  locations: Array<{\n    location: string\n    count: number\n    percentage: number\n  }>\n  timeSeries: Array<{\n    date: string\n    assets: number\n    scans: number\n    users: number\n  }>\n  scanData: Array<{\n    hour: number\n    scans: number\n    timestamp: string\n  }>\n  recentActivity: Array<{\n    id: string\n    name: string\n    created_at: string\n    updated_at: string\n    status: string\n  }>\n  userActivity: {\n    totalUsers: number\n    activeUsers: number\n    newUsersThisMonth: number\n  }\n}\n\nexport function useAnalytics() {\n  const [data, setData] = useState<AnalyticsData | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  const fetchAnalytics = async () => {\n    try {\n      setLoading(true)\n      setError(null)\n\n      const response = await fetch('/api/analytics')\n      if (!response.ok) {\n        throw new Error('Failed to fetch analytics data')\n      }\n\n      const result = await response.json()\n      setData(result.analytics)\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred')\n      console.error('Analytics fetch error:', err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchAnalytics()\n  }, [])\n\n  const refresh = () => {\n    fetchAnalytics()\n  }\n\n  return {\n    data,\n    loading,\n    error,\n    refresh,\n  }\n}\n\nexport function useAnalyticsWithInterval(intervalMs: number = 30000) {\n  const analytics = useAnalytics()\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      analytics.refresh()\n    }, intervalMs)\n\n    return () => clearInterval(interval)\n  }, [intervalMs, analytics.refresh])\n\n  return analytics\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\hooks\\use-realtime-analytics.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[340,343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[340,343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[594,597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[594,597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":63,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3885,3888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3885,3888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState, useEffect, useCallback } from 'react'\nimport { realtimeAnalytics, type RealtimeEvent, type AnalyticsEvent } from '@/lib/realtime-client'\n\nexport interface RealtimeMetrics {\n  totalAssets: number\n  activeAssets: number\n  assetsCreatedToday: number\n  totalUsers: number\n  scansThisWeek: number\n  recentScans: any[]\n  lastUpdated: string\n}\n\nexport interface ActivityFeed {\n  id: string\n  type: 'asset_created' | 'asset_updated' | 'asset_scanned' | 'user_login' | 'qr_generated'\n  title: string\n  description: string\n  timestamp: string\n  metadata?: Record<string, any>\n}\n\nexport function useRealtimeMetrics() {\n  const [metrics, setMetrics] = useState<RealtimeMetrics>({\n    totalAssets: 0,\n    activeAssets: 0,\n    assetsCreatedToday: 0,\n    totalUsers: 0,\n    scansThisWeek: 0,\n    recentScans: [],\n    lastUpdated: new Date().toISOString(),\n  })\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  const updateMetrics = useCallback(async () => {\n    try {\n      const newMetrics = await realtimeAnalytics.getRealtimeMetrics()\n      setMetrics({\n        ...newMetrics,\n        lastUpdated: new Date().toISOString(),\n      })\n      setError(null)\n    } catch (err) {\n      setError('Failed to update metrics')\n      console.error('Metrics update error:', err)\n    }\n  }, [])\n\n  useEffect(() => {\n    // Initial load\n    updateMetrics().finally(() => setLoading(false))\n\n    // Subscribe to real-time updates\n    const handleAssetChange = (event: RealtimeEvent) => {\n      if (event.table === 'assets') {\n        updateMetrics()\n      }\n    }\n\n    const handleAnalyticsEvent = (event: AnalyticsEvent) => {\n      updateMetrics()\n    }\n\n    const assetChannelId = realtimeAnalytics.subscribeToTable('assets', handleAssetChange)\n    realtimeAnalytics.subscribeToAnalytics(handleAnalyticsEvent)\n\n    // Cleanup on unmount\n    return () => {\n      realtimeAnalytics.unsubscribe(assetChannelId, handleAssetChange)\n    }\n  }, [updateMetrics])\n\n  return { metrics, loading, error, refresh: updateMetrics }\n}\n\nexport function useActivityFeed(limit = 20) {\n  const [activities, setActivities] = useState<ActivityFeed[]>([])\n  const [loading, setLoading] = useState(true)\n\n  const addActivity = useCallback(\n    (event: AnalyticsEvent) => {\n      const activity: ActivityFeed = {\n        id: event.id,\n        type: event.event_type,\n        title: getActivityTitle(event.event_type),\n        description: getActivityDescription(event),\n        timestamp: event.timestamp,\n        metadata: event.metadata,\n      }\n\n      setActivities(prev => [activity, ...prev.slice(0, limit - 1)])\n    },\n    [limit]\n  )\n\n  useEffect(() => {\n    // Subscribe to analytics events\n    realtimeAnalytics.subscribeToAnalytics(addActivity)\n\n    // Load initial activities (mock data for demo)\n    const mockActivities: ActivityFeed[] = [\n      {\n        id: '1',\n        type: 'asset_created',\n        title: 'New Asset Created',\n        description: 'MacBook Pro 16\" was added to inventory',\n        timestamp: new Date(Date.now() - 5 * 60 * 1000).toISOString(),\n      },\n      {\n        id: '2',\n        type: 'asset_scanned',\n        title: 'Asset Scanned',\n        description: 'Office Chair QR code was scanned',\n        timestamp: new Date(Date.now() - 15 * 60 * 1000).toISOString(),\n      },\n      {\n        id: '3',\n        type: 'qr_generated',\n        title: 'QR Code Generated',\n        description: 'QR code created for Projector',\n        timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\n      },\n    ]\n\n    setActivities(mockActivities)\n    setLoading(false)\n\n    return () => {\n      // Cleanup handled by the analytics client\n    }\n  }, [addActivity])\n\n  return { activities, loading }\n}\n\nexport function useRealtimeAssetStatus(assetId?: string) {\n  const [assetStatus, setAssetStatus] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    if (!assetId) {\n      setLoading(false)\n      return\n    }\n\n    const handleAssetUpdate = (event: RealtimeEvent) => {\n      if (event.type === 'UPDATE' && event.record) {\n        setAssetStatus(event.record)\n      }\n    }\n\n    const channelId = realtimeAnalytics.subscribeToTable('assets', handleAssetUpdate, {\n      column: 'asset_id',\n      value: assetId,\n    })\n\n    // Load initial status\n    realtimeAnalytics.supabase\n      .from('assets')\n      .select('*')\n      .eq('asset_id', assetId)\n      .single()\n      .then(({ data }) => {\n        setAssetStatus(data)\n        setLoading(false)\n      })\n\n    return () => {\n      realtimeAnalytics.unsubscribe(channelId, handleAssetUpdate)\n    }\n  }, [assetId])\n\n  return { assetStatus, loading }\n}\n\n// Helper functions\nfunction getActivityTitle(eventType: string): string {\n  switch (eventType) {\n    case 'asset_created':\n      return 'New Asset Created'\n    case 'asset_updated':\n      return 'Asset Updated'\n    case 'asset_scanned':\n      return 'Asset Scanned'\n    case 'user_login':\n      return 'User Login'\n    case 'qr_generated':\n      return 'QR Code Generated'\n    default:\n      return 'Activity'\n  }\n}\n\nfunction getActivityDescription(event: AnalyticsEvent): string {\n  switch (event.event_type) {\n    case 'asset_created':\n      return `Asset ${event.asset_id} was added to inventory`\n    case 'asset_updated':\n      return `Asset ${event.asset_id} was modified`\n    case 'asset_scanned':\n      return `Asset ${event.asset_id} QR code was scanned`\n    case 'user_login':\n      return 'User logged into the system'\n    case 'qr_generated':\n      return `QR code generated for asset ${event.asset_id}`\n    default:\n      return 'System activity occurred'\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\hooks\\use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type.","line":18,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":18,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\n// Inspired by react-hot-toast library\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id']\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id']\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map(t => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach(toast => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map(t =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter(t => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach(listener => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, 'id'>\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: open => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\instrumentation-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\instrumentation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\jest.setup.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":5,"column":17,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":5,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":9,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":16,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":17,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":18,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":19,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":20,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":21,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":23,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":23,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":24,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":25,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":32,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":35,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":36,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":36,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":37,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":38,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":39,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":40,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":52,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":52,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":53,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":53,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":55,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":56,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":57,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":57,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":59,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":59,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":60,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":60,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":61,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":61,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":62,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":62,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":63,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":63,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":64,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":65,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":65,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":66,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":66,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":67,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":67,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":68,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":68,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":74,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":74,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":75,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":75,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":82,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":82,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":90,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":90,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":91,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":91,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":92,"column":10,"nodeType":"Identifier","messageId":"undef","endLine":92,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":93,"column":10,"nodeType":"Identifier","messageId":"undef","endLine":93,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":94,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":94,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":101,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":101,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":102,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":102,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":103,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":103,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":104,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":104,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":106,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":106,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":107,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":107,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":108,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":108,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":110,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":110,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":111,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":111,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":112,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":112,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":114,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":114,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":115,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":115,"endColumn":21}],"suppressedMessages":[],"errorCount":53,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom'\n\n// Ensure jest is available globally\nif (typeof jest === 'undefined') {\n  global.jest = require('@jest/globals').jest\n}\n\n// Mock Next.js router\njest.mock('next/router', () => ({\n  useRouter() {\n    return {\n      route: '/',\n      pathname: '/',\n      query: {},\n      asPath: '/',\n      push: jest.fn(),\n      pop: jest.fn(),\n      reload: jest.fn(),\n      back: jest.fn(),\n      prefetch: jest.fn(() => Promise.resolve()),\n      beforePopState: jest.fn(),\n      events: {\n        on: jest.fn(),\n        off: jest.fn(),\n        emit: jest.fn(),\n      },\n    }\n  },\n}))\n\n// Mock Next.js navigation\njest.mock('next/navigation', () => ({\n  useRouter() {\n    return {\n      push: jest.fn(),\n      replace: jest.fn(),\n      prefetch: jest.fn(),\n      back: jest.fn(),\n      forward: jest.fn(),\n      refresh: jest.fn(),\n    }\n  },\n  useSearchParams() {\n    return new URLSearchParams()\n  },\n  usePathname() {\n    return '/'\n  },\n}))\n\n// Mock Supabase\njest.mock('@supabase/supabase-js', () => ({\n  createClient: jest.fn(() => ({\n    auth: {\n      getUser: jest.fn(),\n      signInWithOAuth: jest.fn(),\n      signOut: jest.fn(),\n    },\n    from: jest.fn(() => ({\n      select: jest.fn().mockReturnThis(),\n      insert: jest.fn().mockReturnThis(),\n      update: jest.fn().mockReturnThis(),\n      delete: jest.fn().mockReturnThis(),\n      eq: jest.fn().mockReturnThis(),\n      gte: jest.fn().mockReturnThis(),\n      order: jest.fn().mockReturnThis(),\n      limit: jest.fn().mockReturnThis(),\n      single: jest.fn().mockResolvedValue({ data: null, error: null }),\n    })),\n  })),\n}))\n\n// Mock Next.js server APIs\njest.mock('next/server', () => ({\n  NextRequest: jest.fn().mockImplementation((url, options) => ({\n    url: url || 'http://localhost:3000',\n    method: options?.method || 'GET',\n    headers: new Map(Object.entries(options?.headers || {})),\n    ...options,\n  })),\n  NextResponse: {\n    json: jest.fn((data, options) => ({\n      status: options?.status || 200,\n      json: () => Promise.resolve(data),\n    })),\n  },\n}))\n\n// Mock Next.js cookies\njest.mock('next/headers', () => ({\n  cookies: jest.fn(() => ({\n    get: jest.fn(),\n    set: jest.fn(),\n    delete: jest.fn(),\n  })),\n}))\n\n// Mock crypto for Node.js environment\nObject.defineProperty(global, 'crypto', {\n  value: {\n    randomBytes: jest.fn(size => Buffer.alloc(size, 'mock')),\n    createHash: jest.fn(() => ({\n      update: jest.fn().mockReturnThis(),\n      digest: jest.fn(() => 'mocked-hash'),\n    })),\n    createCipheriv: jest.fn(() => ({\n      update: jest.fn(() => 'encrypted'),\n      final: jest.fn(() => 'final'),\n    })),\n    createDecipheriv: jest.fn(() => ({\n      update: jest.fn(() => 'decrypted'),\n      final: jest.fn(() => 'final'),\n    })),\n    scryptSync: jest.fn(() => Buffer.alloc(32, 'key')),\n    randomUUID: jest.fn(() => 'mock-uuid'),\n  },\n})\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\api-key.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\api-usage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\asset-actions.ts","messages":[{"ruleId":"prefer-const","severity":1,"message":"'updateData' is never reassigned. Use 'const' instead.","line":401,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":401,"endColumn":24,"fix":{"range":[10083,10107],"text":"const updateData: any = {}"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":401,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":401,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10099,10102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10099,10102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use server'\n\nimport { createClient } from '@/lib/supabase/server'\nimport { revalidatePath } from 'next/cache'\nimport { logAuditEvent } from './audit-log'\nimport { deliverWebhooks } from './webhook-utils'\nimport { sendIntegrationNotification } from './integration-utils'\n\nexport interface Asset {\n  id?: string\n  asset_id: string\n  name: string\n  description?: string | null\n  category: string\n  status: 'active' | 'maintenance' | 'retired' | 'lost' | 'damaged'\n  location?: string | null\n  purchase_value?: number | null\n  purchase_date?: string | null\n  manufacturer?: string | null\n  model?: string | null\n  serial_number?: string | null\n  warranty_expiry?: string | null\n  assigned_to?: string | null\n  qr_code?: string | null\n  tags?: string[] | null\n  notes?: string | null\n  created_by?: string\n  created_at?: string\n  updated_at?: string\n}\n\nexport interface AssetFilters {\n  status?: string\n  category?: string\n  location?: string\n  assigned_to?: string\n  search?: string\n  date_from?: string\n  date_to?: string\n  value_min?: number\n  value_max?: number\n}\n\nexport interface BulkOperation {\n  asset_ids: string[]\n  operation: 'update_status' | 'update_location' | 'update_category' | 'assign_user' | 'delete'\n  value: string | number\n}\n\nexport async function addAsset(assetData: Omit<Asset, 'id' | 'created_at' | 'updated_at'>) {\n  const supabase = await createClient()\n\n  try {\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n\n    if (userError || !user) {\n      return { error: 'Unauthorized' }\n    }\n\n    // Check if asset_id already exists\n    const { data: existingAsset } = await supabase\n      .from('assets')\n      .select('id')\n      .eq('asset_id', assetData.asset_id)\n      .single()\n\n    if (existingAsset) {\n      return { error: 'Asset ID already exists' }\n    }\n\n    const { data, error } = await supabase\n      .from('assets')\n      .insert([\n        {\n          ...assetData,\n          created_by: user.id,\n          tags: assetData.tags || [],\n          notes: assetData.notes || null,\n        },\n      ])\n      .select()\n      .single()\n\n    if (error) {\n      console.error('Error adding asset:', error)\n      return { error: error.message }\n    }\n\n    revalidatePath('/assets')\n    revalidatePath('/dashboard')\n\n    // Audit log: asset created\n    await logAuditEvent({\n      user_id: user.id,\n      action: 'create',\n      entity: 'asset',\n      entity_id: data.id,\n      details: { asset_id: data.asset_id, name: data.name },\n      tenant_id: data.tenant_id || undefined,\n      // ip_address, user_agent can be added from API context\n    })\n    // Trigger webhooks\n    if (data.tenant_id) {\n      await deliverWebhooks({ tenant_id: data.tenant_id, event: 'asset.created', payload: data })\n      await sendIntegrationNotification({\n        tenant_id: data.tenant_id,\n        message: `Asset created: ${data.name}`,\n      })\n    }\n\n    return { data }\n  } catch (error) {\n    console.error('Error in addAsset:', error)\n    return { error: 'Failed to add asset' }\n  }\n}\n\nexport async function updateAsset(assetId: string, updates: Partial<Asset>) {\n  const supabase = await createClient()\n\n  try {\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n\n    if (userError || !user) {\n      return { error: 'Unauthorized' }\n    }\n\n    // Check if user owns the asset or is admin\n    const { data: existingAsset } = await supabase\n      .from('assets')\n      .select('created_by, tenant_id')\n      .eq('id', assetId)\n      .single()\n\n    if (!existingAsset) {\n      return { error: 'Asset not found' }\n    }\n\n    if (existingAsset.created_by !== user.id) {\n      return { error: 'Unauthorized to update this asset' }\n    }\n\n    const { data, error } = await supabase\n      .from('assets')\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq('id', assetId)\n      .select()\n      .single()\n\n    if (error) {\n      console.error('Error updating asset:', error)\n      return { error: error.message }\n    }\n\n    revalidatePath('/assets')\n    revalidatePath(`/asset/${assetId}`)\n    revalidatePath('/dashboard')\n\n    // Audit log: asset updated\n    await logAuditEvent({\n      user_id: user.id,\n      action: 'update',\n      entity: 'asset',\n      entity_id: assetId,\n      details: { updates },\n      tenant_id: data?.tenant_id || undefined,\n      before: existingAsset,\n      after: data,\n      // ip_address, user_agent can be added from API context\n    })\n    // Trigger webhooks\n    if (data?.tenant_id) {\n      await deliverWebhooks({ tenant_id: data.tenant_id, event: 'asset.updated', payload: data })\n      await sendIntegrationNotification({\n        tenant_id: data.tenant_id,\n        message: `Asset updated: ${data.name}`,\n      })\n    }\n\n    return { data }\n  } catch (error) {\n    console.error('Error in updateAsset:', error)\n    return { error: 'Failed to update asset' }\n  }\n}\n\nexport async function deleteAsset(assetId: string) {\n  const supabase = await createClient()\n\n  try {\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n\n    if (userError || !user) {\n      return { error: 'Unauthorized' }\n    }\n\n    // Check if user owns the asset\n    const { data: existingAsset } = await supabase\n      .from('assets')\n      .select('created_by, tenant_id')\n      .eq('id', assetId)\n      .single()\n\n    if (!existingAsset) {\n      return { error: 'Asset not found' }\n    }\n\n    if (existingAsset.created_by !== user.id) {\n      return { error: 'Unauthorized to delete this asset' }\n    }\n\n    const { error } = await supabase.from('assets').delete().eq('id', assetId)\n\n    if (error) {\n      console.error('Error deleting asset:', error)\n      return { error: error.message }\n    }\n\n    revalidatePath('/assets')\n    revalidatePath('/dashboard')\n\n    // Audit log: asset deleted\n    await logAuditEvent({\n      user_id: user.id,\n      action: 'delete',\n      entity: 'asset',\n      entity_id: assetId,\n      details: {},\n      tenant_id: existingAsset.tenant_id || undefined,\n      before: existingAsset,\n      // ip_address, user_agent can be added from API context\n    })\n    // Trigger webhooks\n    if (existingAsset.tenant_id) {\n      await deliverWebhooks({\n        tenant_id: existingAsset.tenant_id,\n        event: 'asset.deleted',\n        payload: { assetId },\n      })\n      await sendIntegrationNotification({\n        tenant_id: existingAsset.tenant_id,\n        message: `Asset deleted: ${assetId}`,\n      })\n    }\n\n    return { success: true }\n  } catch (error) {\n    console.error('Error in deleteAsset:', error)\n    return { error: 'Failed to delete asset' }\n  }\n}\n\nexport async function getAsset(assetId: string) {\n  const supabase = await createClient()\n\n  try {\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n\n    if (userError || !user) {\n      return { error: 'Unauthorized' }\n    }\n\n    const { data, error } = await supabase\n      .from('assets')\n      .select('*')\n      .eq('id', assetId)\n      .eq('created_by', user.id)\n      .single()\n\n    if (error) {\n      console.error('Error fetching asset:', error)\n      return { error: error.message }\n    }\n\n    return { data }\n  } catch (error) {\n    console.error('Error in getAsset:', error)\n    return { error: 'Failed to fetch asset' }\n  }\n}\n\nexport async function getAssets(filters?: AssetFilters) {\n  const supabase = await createClient()\n\n  try {\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n\n    if (userError || !user) {\n      return { error: 'Unauthorized' }\n    }\n\n    let query = supabase\n      .from('assets')\n      .select('*')\n      .eq('created_by', user.id)\n      .order('created_at', { ascending: false })\n\n    // Apply filters\n    if (filters?.status && filters.status !== 'all') {\n      query = query.eq('status', filters.status)\n    }\n\n    if (filters?.category) {\n      query = query.eq('category', filters.category)\n    }\n\n    if (filters?.location) {\n      query = query.eq('location', filters.location)\n    }\n\n    if (filters?.assigned_to) {\n      query = query.eq('assigned_to', filters.assigned_to)\n    }\n\n    if (filters?.date_from) {\n      query = query.gte('created_at', filters.date_from)\n    }\n\n    if (filters?.date_to) {\n      query = query.lte('created_at', filters.date_to)\n    }\n\n    if (filters?.value_min) {\n      query = query.gte('purchase_value', filters.value_min)\n    }\n\n    if (filters?.value_max) {\n      query = query.lte('purchase_value', filters.value_max)\n    }\n\n    const { data, error } = await query\n\n    if (error) {\n      console.error('Error fetching assets:', error)\n      return { error: error.message }\n    }\n\n    // Apply search filter if provided\n    let filteredData = data || []\n    if (filters?.search) {\n      const searchTerm = filters.search.toLowerCase()\n      filteredData = filteredData.filter(\n        asset =>\n          asset.name.toLowerCase().includes(searchTerm) ||\n          asset.description?.toLowerCase().includes(searchTerm) ||\n          asset.category.toLowerCase().includes(searchTerm) ||\n          asset.location?.toLowerCase().includes(searchTerm) ||\n          asset.asset_id.toLowerCase().includes(searchTerm)\n      )\n    }\n\n    return { data: filteredData }\n  } catch (error) {\n    console.error('Error in getAssets:', error)\n    return { error: 'Failed to fetch assets' }\n  }\n}\n\nexport async function bulkUpdateAssets(operation: BulkOperation) {\n  const supabase = await createClient()\n\n  try {\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n\n    if (userError || !user) {\n      return { error: 'Unauthorized' }\n    }\n\n    // Verify user owns all assets\n    const { data: userAssets } = await supabase\n      .from('assets')\n      .select('id')\n      .eq('created_by', user.id)\n      .in('id', operation.asset_ids)\n\n    if (!userAssets || userAssets.length !== operation.asset_ids.length) {\n      return { error: 'Unauthorized to update some assets' }\n    }\n\n    let updateData: any = {}\n\n    switch (operation.operation) {\n      case 'update_status':\n        updateData.status = operation.value\n        break\n      case 'update_location':\n        updateData.location = operation.value\n        break\n      case 'update_category':\n        updateData.category = operation.value\n        break\n      case 'assign_user':\n        updateData.assigned_to = operation.value\n        break\n      default:\n        return { error: 'Invalid operation' }\n    }\n\n    updateData.updated_at = new Date().toISOString()\n\n    const { error } = await supabase.from('assets').update(updateData).in('id', operation.asset_ids)\n\n    if (error) {\n      console.error('Error in bulk update:', error)\n      return { error: error.message }\n    }\n\n    revalidatePath('/assets')\n    revalidatePath('/dashboard')\n\n    return { success: true, updatedCount: operation.asset_ids.length }\n  } catch (error) {\n    console.error('Error in bulkUpdateAssets:', error)\n    return { error: 'Failed to update assets' }\n  }\n}\n\nexport async function bulkDeleteAssets(assetIds: string[]) {\n  const supabase = await createClient()\n\n  try {\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n\n    if (userError || !user) {\n      return { error: 'Unauthorized' }\n    }\n\n    // Verify user owns all assets\n    const { data: userAssets } = await supabase\n      .from('assets')\n      .select('id')\n      .eq('created_by', user.id)\n      .in('id', assetIds)\n\n    if (!userAssets || userAssets.length !== assetIds.length) {\n      return { error: 'Unauthorized to delete some assets' }\n    }\n\n    const { error } = await supabase.from('assets').delete().in('id', assetIds)\n\n    if (error) {\n      console.error('Error in bulk delete:', error)\n      return { error: error.message }\n    }\n\n    revalidatePath('/assets')\n    revalidatePath('/dashboard')\n\n    return { success: true, deletedCount: assetIds.length }\n  } catch (error) {\n    console.error('Error in bulkDeleteAssets:', error)\n    return { error: 'Failed to delete assets' }\n  }\n}\n\nexport async function getAssetStats() {\n  const supabase = await createClient()\n\n  try {\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n\n    if (userError || !user) {\n      return { error: 'Unauthorized' }\n    }\n\n    const { data: assets } = await supabase\n      .from('assets')\n      .select('status, category, purchase_value, created_at')\n      .eq('created_by', user.id)\n\n    if (!assets) {\n      return { data: { total: 0, byStatus: {}, byCategory: {}, totalValue: 0 } }\n    }\n\n    const stats = {\n      total: assets.length,\n      byStatus: {} as Record<string, number>,\n      byCategory: {} as Record<string, number>,\n      totalValue: 0,\n      recentAdditions: 0,\n    }\n\n    const thirtyDaysAgo = new Date()\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)\n\n    assets.forEach(\n      (asset: {\n        status: string\n        category: string\n        purchase_value?: number\n        created_at?: string\n      }) => {\n        // Status counts\n        stats.byStatus[asset.status] = (stats.byStatus[asset.status] || 0) + 1\n\n        // Category counts\n        stats.byCategory[asset.category] = (stats.byCategory[asset.category] || 0) + 1\n\n        // Total value\n        if (asset.purchase_value) {\n          stats.totalValue += asset.purchase_value\n        }\n\n        // Recent additions\n        if (asset.created_at && new Date(asset.created_at) > thirtyDaysAgo) {\n          stats.recentAdditions++\n        }\n      }\n    )\n\n    return { data: stats }\n  } catch (error) {\n    console.error('Error in getAssetStats:', error)\n    return { error: 'Failed to fetch asset statistics' }\n  }\n}\n\nexport async function generateAssetId(category?: string) {\n  const prefix = category ? category.toUpperCase().slice(0, 3) : 'AST'\n  const timestamp = Date.now().toString().slice(-6)\n  const randomNum = Math.floor(Math.random() * 100)\n    .toString()\n    .padStart(2, '0')\n  return `${prefix}-${timestamp}-${randomNum}`\n}\n\nexport async function checkAssetIdExists(assetId: string) {\n  const supabase = await createClient()\n\n  try {\n    const { data, error } = await supabase\n      .from('assets')\n      .select('id')\n      .eq('asset_id', assetId)\n      .single()\n\n    if (error && error.code !== 'PGRST116') {\n      console.error('Error checking asset ID:', error)\n      return { error: error.message }\n    }\n\n    return { exists: !!data }\n  } catch (error) {\n    console.error('Error in checkAssetIdExists:', error)\n    return { error: 'Failed to check asset ID' }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\asset-depreciation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\audit-log.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[184,187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[184,187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[258,261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[258,261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[288,291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[288,291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\n\nexport type AuditLogEvent = {\n  user_id: string\n  action: string\n  entity: string\n  entity_id?: string\n  details?: Record<string, any>\n  tenant_id?: string\n  ip_address?: string\n  before?: Record<string, any>\n  after?: Record<string, any>\n  user_agent?: string\n}\n\n/**\n * Logs an audit event to the audit_logs table.\n * @param event AuditLogEvent\n */\nexport async function logAuditEvent(event: AuditLogEvent) {\n  const supabase = await createClient()\n  try {\n    const { error } = await supabase.from('audit_logs').insert({\n      user_id: event.user_id,\n      action: event.action,\n      entity: event.entity,\n      entity_id: event.entity_id || null,\n      details: event.details || {},\n      tenant_id: event.tenant_id || null,\n      ip_address: event.ip_address || null,\n      before: event.before || null,\n      after: event.after || null,\n      user_agent: event.user_agent || null,\n      created_at: new Date().toISOString(),\n    })\n    if (error) {\n      console.error('Failed to log audit event:', error)\n    }\n  } catch (err) {\n    console.error('Audit log error:', err)\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\auth-actions.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getURL' is assigned a value but never used.","line":7,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use server'\n\nimport { createClient } from '@/lib/supabase/server'\nimport { redirect } from 'next/navigation'\nimport { getAuthRedirectUrl } from '@/lib/supabase/config'\n\nconst getURL = () => {\n  let url = process.env.NEXT_PUBLIC_APP_URL ?? 'https://cloudeleavepro.vercel.app'\n  // Make sure to include `https://` when not localhost.\n  url = url.includes('http') ? url : `https://${url}`\n  // Make sure to include a trailing `/`.\n  url = url.charAt(url.length - 1) === '/' ? url : `${url}/`\n  return url\n}\n\nexport async function signInWithEmail(email: string, password: string) {\n  const supabase = await createClient()\n\n  const { error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  })\n\n  if (error) {\n    console.error('Sign in error:', error)\n    return { error: error.message }\n  }\n\n  return { success: true }\n}\n\nexport async function signUpWithEmail(\n  email: string,\n  password: string,\n  fullName: string,\n  orgName?: string\n) {\n  const supabase = await createClient()\n\n  const redirectUrl = getAuthRedirectUrl()\n  console.log('Signup redirect URL:', redirectUrl)\n\n  const { data, error } = await supabase.auth.signUp({\n    email,\n    password,\n    options: {\n      emailRedirectTo: redirectUrl,\n      data: {\n        full_name: fullName,\n        org_name: orgName,\n      },\n    },\n  })\n\n  if (error) {\n    console.error('Sign up error:', error)\n    return { error: error.message }\n  }\n\n  // Check if user needs email confirmation\n  if (data.user && !data.user.email_confirmed_at) {\n    console.log('User created, email confirmation required:', data.user.id)\n    return {\n      success: true,\n      needsConfirmation: true,\n      message: 'Please check your email for a confirmation link to complete your registration.',\n    }\n  }\n\n  // User is already confirmed (auto-confirm is enabled)\n  if (data.user && data.user.email_confirmed_at) {\n    console.log('User created and auto-confirmed:', data.user.id)\n    return {\n      success: true,\n      needsConfirmation: false,\n      message: 'Account created successfully! You can now sign in.',\n    }\n  }\n\n  return { success: true }\n}\n\nexport async function signInWithGitHub() {\n  const supabase = await createClient()\n\n  const redirectUrl = getAuthRedirectUrl()\n  console.log('GitHub OAuth redirect URL:', redirectUrl)\n\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'github',\n    options: {\n      redirectTo: redirectUrl,\n      queryParams: {\n        access_type: 'offline',\n        prompt: 'consent',\n      },\n    },\n  })\n\n  if (error) {\n    console.error('GitHub OAuth error:', error)\n    return { error: error.message }\n  }\n\n  if (data.url) {\n    console.log('Redirecting to GitHub OAuth:', data.url)\n    redirect(data.url)\n  }\n\n  return { success: true }\n}\n\nexport async function signOut() {\n  const supabase = await createClient()\n  const { error } = await supabase.auth.signOut()\n\n  if (error) {\n    console.error('Sign out error:', error)\n  }\n\n  redirect('/login')\n}\n\nexport async function resetPassword(email: string) {\n  const supabase = await createClient()\n\n  const redirectUrl = getAuthRedirectUrl('/auth/reset-password')\n  console.log('Password reset redirect URL:', redirectUrl)\n\n  const { error } = await supabase.auth.resetPasswordForEmail(email, {\n    redirectTo: redirectUrl,\n  })\n\n  if (error) {\n    console.error('Password reset error:', error)\n    return { error: error.message }\n  }\n\n  return {\n    success: true,\n    message: 'Password reset email sent! Please check your inbox.',\n  }\n}\n\nexport async function resendConfirmation(email: string) {\n  const supabase = await createClient()\n\n  const redirectUrl = getAuthRedirectUrl()\n  console.log('Resend confirmation redirect URL:', redirectUrl)\n\n  const { error } = await supabase.auth.resend({\n    type: 'signup',\n    email: email,\n    options: {\n      emailRedirectTo: redirectUrl,\n    },\n  })\n\n  if (error) {\n    console.error('Resend confirmation error:', error)\n    return { error: error.message }\n  }\n\n  return {\n    success: true,\n    message: 'Confirmation email resent! Please check your inbox.',\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\billing\\stripe.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PLAN_PRICES' is assigned a value but never used.","line":7,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1489,1492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1489,1492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1518,1521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1518,1521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Stripe from 'stripe'\nimport { createClient } from '@/lib/supabase/client'\nimport { Tenant } from '@/lib/rbac/types'\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '')\n\nconst PLAN_PRICES = {\n  free: 'price_free', // Free plan - no Stripe price ID needed\n  basic: process.env.STRIPE_BASIC_PRICE_ID || 'price_basic',\n  pro: process.env.STRIPE_PRO_PRICE_ID || 'price_pro',\n  enterprise: process.env.STRIPE_ENTERPRISE_PRICE_ID || 'price_enterprise',\n}\n\nexport async function createCustomer(email: string, tenantId: string): Promise<string> {\n  try {\n    const customer = await stripe.customers.create({\n      email,\n      metadata: {\n        tenantId,\n      },\n    })\n\n    const supabase = createClient()\n    await supabase.from('billing').insert({\n      tenant_id: tenantId,\n      stripe_customer_id: customer.id,\n      plan: 'free',\n      amount: 0,\n      status: 'active',\n    })\n\n    return customer.id\n  } catch (error) {\n    console.error('Error creating customer:', error)\n    throw error\n  }\n}\n\nexport async function createSubscription(\n  customerId: string,\n  priceId: string,\n  tenantId: string\n): Promise<string> {\n  try {\n    const subscription = await stripe.subscriptions.create({\n      customer: customerId,\n      items: [{ price: priceId }],\n      metadata: {\n        tenantId,\n      },\n    })\n\n    const supabase = createClient()\n    // If subscription is a Response<Subscription>, use .data; otherwise, use as Subscription\n    const sub = (subscription as any).data ? (subscription as any).data : subscription\n    await supabase\n      .from('billing')\n      .update({\n        stripe_subscription_id: sub.id,\n        plan: sub.items.data[0].price.nickname || 'basic',\n        amount: sub.items.data[0].price.unit_amount || 0,\n        status: sub.status,\n        current_period_start: new Date(sub.current_period_start * 1000).toISOString(),\n        current_period_end: new Date(sub.current_period_end * 1000).toISOString(),\n        updated_at: new Date().toISOString(),\n      })\n      .eq('tenant_id', tenantId)\n\n    return subscription.id\n  } catch (error) {\n    console.error('Error creating subscription:', error)\n    throw error\n  }\n}\n\nexport async function updateSubscription(\n  subscriptionId: string,\n  newPriceId: string\n): Promise<void> {\n  try {\n    const subscription = await stripe.subscriptions.retrieve(subscriptionId)\n    await stripe.subscriptions.update(subscriptionId, {\n      items: [\n        {\n          id: subscription.items.data[0].id,\n          price: newPriceId,\n        },\n      ],\n    })\n  } catch (error) {\n    console.error('Error updating subscription:', error)\n    throw error\n  }\n}\n\nexport async function cancelSubscription(subscriptionId: string): Promise<void> {\n  try {\n    await stripe.subscriptions.cancel(subscriptionId)\n  } catch (error) {\n    console.error('Error canceling subscription:', error)\n    throw error\n  }\n}\n\nexport async function createCheckoutSession(\n  customerId: string,\n  priceId: string,\n  tenantId: string\n): Promise<string> {\n  try {\n    const session = await stripe.checkout.sessions.create({\n      customer: customerId,\n      line_items: [\n        {\n          price: priceId,\n          quantity: 1,\n        },\n      ],\n      mode: 'subscription',\n      success_url: `${process.env.NEXT_PUBLIC_APP_URL}/billing/success?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/billing/cancel`,\n      metadata: {\n        tenantId,\n      },\n    })\n\n    return session.url || ''\n  } catch (error) {\n    console.error('Error creating checkout session:', error)\n    throw error\n  }\n}\n\nexport async function handleSubscriptionChange(\n  subscriptionId: string,\n  status: string\n): Promise<void> {\n  const supabase = createClient()\n\n  try {\n    const subscription = await stripe.subscriptions.retrieve(subscriptionId)\n    const { tenantId } = subscription.metadata\n\n    await supabase\n      .from('billing')\n      .update({\n        status,\n        updated_at: new Date().toISOString(),\n      })\n      .eq('tenant_id', tenantId)\n\n    // Update tenant features based on plan\n    const plan = subscription.items.data[0].price.nickname || 'basic'\n    await updateTenantFeatures(tenantId, plan as Tenant['plan'])\n  } catch (error) {\n    console.error('Error handling subscription change:', error)\n    throw error\n  }\n}\n\nexport async function updateTenantFeatures(tenantId: string, plan: Tenant['plan']): Promise<void> {\n  const planFeatures = {\n    free: {\n      maxUsers: 5,\n      maxAssets: 100,\n      features: {\n        qrCodes: true,\n        analytics: false,\n        api: false,\n        customBranding: false,\n        multipleLocations: false,\n        advancedReports: false,\n      },\n    },\n    basic: {\n      maxUsers: 10,\n      maxAssets: 500,\n      features: {\n        qrCodes: true,\n        analytics: true,\n        api: false,\n        customBranding: false,\n        multipleLocations: false,\n        advancedReports: false,\n      },\n    },\n    pro: {\n      maxUsers: 50,\n      maxAssets: 5000,\n      features: {\n        qrCodes: true,\n        analytics: true,\n        api: true,\n        customBranding: true,\n        multipleLocations: true,\n        advancedReports: false,\n      },\n    },\n    enterprise: {\n      maxUsers: 1000,\n      maxAssets: 100000,\n      features: {\n        qrCodes: true,\n        analytics: true,\n        api: true,\n        customBranding: true,\n        multipleLocations: true,\n        advancedReports: true,\n      },\n    },\n  }\n\n  const supabase = createClient()\n  await supabase\n    .from('tenants')\n    .update({\n      plan,\n      max_users: planFeatures[plan].maxUsers,\n      max_assets: planFeatures[plan].maxAssets,\n      features: planFeatures[plan].features,\n      updated_at: new Date().toISOString(),\n    })\n    .eq('id', tenantId)\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\config\\redis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\firebase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\integration-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":30,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\n\nexport async function sendIntegrationNotification({\n  tenant_id,\n  message,\n  event,\n}: {\n  tenant_id: string\n  message: string\n  event?: string\n}) {\n  const supabase = await createClient()\n  // Fetch active integrations for this tenant\n  const { data: integrations, error } = await supabase\n    .from('integrations')\n    .select('*')\n    .eq('tenant_id', tenant_id)\n    .eq('status', 'active')\n  if (error || !integrations) return\n  for (const integration of integrations) {\n    if (!integration.webhook_url) continue\n    // Optionally filter by event type if needed\n    try {\n      await fetch(integration.webhook_url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ text: message }), // Slack/Teams expect { text }\n      })\n      // Optionally: log delivery success\n    } catch (err) {\n      // Optionally: log delivery failure, retry, etc.\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\middleware\\api-key-auth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[500,503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[500,503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":225,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5980,5983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5980,5983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":227,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6017,6020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6017,6020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6232,6235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6232,6235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// API KEY AUTHENTICATION MIDDLEWARE\n// =====================================================\n// Middleware for validating API keys and enforcing permissions\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { apiKeyService } from '@/lib/services/api-key-service'\n\nexport interface ApiKeyAuthOptions {\n  requiredPermission?: string\n  requiredScope?: string\n  skipRateLimit?: boolean\n}\n\nexport interface ApiKeyContext {\n  apiKey: any\n  tenantId: string\n  userId: string\n}\n\n/**\n * Middleware to authenticate and validate API keys\n */\nexport async function withApiKeyAuth(\n  request: NextRequest,\n  options: ApiKeyAuthOptions = {}\n): Promise<{ success: boolean; context?: ApiKeyContext; response?: NextResponse }> {\n  try {\n    // Extract API key from Authorization header\n    const authHeader = request.headers.get('authorization')\n    const apiKey = extractApiKeyFromHeader(authHeader)\n\n    if (!apiKey) {\n      return {\n        success: false,\n        response: NextResponse.json({ error: 'API key required' }, { status: 401 }),\n      }\n    }\n\n    // Get client IP address\n    const ipAddress = getClientIpAddress(request)\n\n    // Validate API key\n    const validation = await apiKeyService.validateApiKey(\n      apiKey,\n      options.requiredPermission,\n      options.requiredScope,\n      ipAddress\n    )\n\n    if (!validation.valid) {\n      const status = validation.rateLimitExceeded ? 429 : 401\n      return {\n        success: false,\n        response: NextResponse.json({ error: validation.error }, { status }),\n      }\n    }\n\n    // Log API usage (unless skipped)\n    if (!options.skipRateLimit) {\n      const url = new URL(request.url)\n      await apiKeyService.logApiKeyUsage(\n        validation.apiKey!,\n        url.pathname,\n        request.method,\n        200, // Will be updated with actual status code later\n        {\n          ipAddress,\n          userAgent: request.headers.get('user-agent') || undefined,\n        }\n      )\n    }\n\n    return {\n      success: true,\n      context: {\n        apiKey: validation.apiKey!,\n        tenantId: validation.apiKey!.tenant_id,\n        userId: validation.apiKey!.user_id,\n      },\n    }\n  } catch (error) {\n    console.error('API key authentication error:', error)\n    return {\n      success: false,\n      response: NextResponse.json({ error: 'Authentication failed' }, { status: 500 }),\n    }\n  }\n}\n\n/**\n * Higher-order function to wrap API routes with API key authentication\n */\nexport function requireApiKey(\n  handler: (request: NextRequest, context: ApiKeyContext) => Promise<NextResponse>,\n  options: ApiKeyAuthOptions = {}\n) {\n  return async (request: NextRequest): Promise<NextResponse> => {\n    const auth = await withApiKeyAuth(request, options)\n\n    if (!auth.success) {\n      return auth.response!\n    }\n\n    try {\n      const response = await handler(request, auth.context!)\n\n      // Update usage log with actual response status\n      if (!options.skipRateLimit) {\n        const url = new URL(request.url)\n        await apiKeyService.logApiKeyUsage(\n          auth.context!.apiKey,\n          url.pathname,\n          request.method,\n          response.status,\n          {\n            ipAddress: getClientIpAddress(request),\n            userAgent: request.headers.get('user-agent') || undefined,\n          }\n        )\n      }\n\n      return response\n    } catch (error) {\n      console.error('API route error:', error)\n\n      // Log error in usage\n      if (!options.skipRateLimit) {\n        const url = new URL(request.url)\n        await apiKeyService.logApiKeyUsage(\n          auth.context!.apiKey,\n          url.pathname,\n          request.method,\n          500,\n          {\n            ipAddress: getClientIpAddress(request),\n            userAgent: request.headers.get('user-agent') || undefined,\n          }\n        )\n      }\n\n      return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n    }\n  }\n}\n\n/**\n * Extract API key from Authorization header\n */\nfunction extractApiKeyFromHeader(authHeader: string | null): string | null {\n  if (!authHeader) return null\n\n  // Support both \"Bearer\" and \"ApiKey\" prefixes\n  const bearerMatch = authHeader.match(/^Bearer\\s+(.+)$/i)\n  if (bearerMatch) return bearerMatch[1]\n\n  const apiKeyMatch = authHeader.match(/^ApiKey\\s+(.+)$/i)\n  if (apiKeyMatch) return apiKeyMatch[1]\n\n  // Support direct API key without prefix\n  if (authHeader.startsWith('ak_')) return authHeader\n\n  return null\n}\n\n/**\n * Get client IP address from request\n */\nfunction getClientIpAddress(request: NextRequest): string {\n  // Check various headers for the real IP address\n  const forwardedFor = request.headers.get('x-forwarded-for')\n  if (forwardedFor) {\n    return forwardedFor.split(',')[0].trim()\n  }\n\n  const realIp = request.headers.get('x-real-ip')\n  if (realIp) {\n    return realIp\n  }\n\n  const cfConnectingIp = request.headers.get('cf-connecting-ip')\n  if (cfConnectingIp) {\n    return cfConnectingIp\n  }\n\n  // Fallback to localhost since NextRequest doesn't have ip property\n  return '127.0.0.1'\n}\n\n/**\n * Middleware to add rate limiting headers to response\n */\nexport function addRateLimitHeaders(\n  response: NextResponse,\n  rateLimitStatus: {\n    allowed: boolean\n    remaining: number\n    resetTime: Date\n    limit: number\n  }\n): NextResponse {\n  response.headers.set('X-RateLimit-Limit', rateLimitStatus.limit.toString())\n  response.headers.set('X-RateLimit-Remaining', rateLimitStatus.remaining.toString())\n  response.headers.set(\n    'X-RateLimit-Reset',\n    Math.ceil(rateLimitStatus.resetTime.getTime() / 1000).toString()\n  )\n\n  if (!rateLimitStatus.allowed) {\n    response.headers.set(\n      'Retry-After',\n      Math.ceil((rateLimitStatus.resetTime.getTime() - Date.now()) / 1000).toString()\n    )\n  }\n\n  return response\n}\n\n/**\n * Create a standardized API error response\n */\nexport function createApiErrorResponse(\n  error: string,\n  status: number = 400,\n  details?: Record<string, any>\n): NextResponse {\n  const body: any = { error }\n\n  if (details) {\n    body.details = details\n  }\n\n  return NextResponse.json(body, { status })\n}\n\n/**\n * Create a standardized API success response\n */\nexport function createApiSuccessResponse(data: any, status: number = 200): NextResponse {\n  return NextResponse.json(\n    {\n      success: true,\n      data,\n    },\n    { status }\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\middleware\\role-validation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[713,716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[713,716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4364,4367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4364,4367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6498,6501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6498,6501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-extra-semi","severity":2,"message":"Unnecessary semicolon.","line":203,"column":9,"nodeType":"EmptyStatement","messageId":"unexpected","endLine":203,"endColumn":10,"fix":{"range":[6961,7029],"text":"}\n\n        // Add user context to request for handler use\n        ("}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7036,7039],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7036,7039],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7095,7098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7095,7098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":376,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11897,11900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11897,11900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// =====================================================\n// ROLE VALIDATION MIDDLEWARE\n// =====================================================\n// Middleware for validating user roles and permissions on API endpoints\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\nimport { PermissionService } from '@/lib/services/permission-service'\nimport { PermissionCheckRequest } from '@/lib/types/rbac'\n\nexport interface RoleValidationOptions {\n  requiredPermissions?: string[]\n  requireAllPermissions?: boolean // true = AND, false = OR\n  resourceIdExtractor?: (req: NextRequest) => string | undefined\n  contextExtractor?: (req: NextRequest) => Record<string, any>\n  onUnauthorized?: (req: NextRequest, reason: string) => NextResponse\n  skipValidation?: (req: NextRequest) => boolean\n}\n\nexport class RoleValidationMiddleware {\n  private permissionService = new PermissionService()\n\n  /**\n   * Creates a middleware function that validates user permissions\n   */\n  createValidator(options: RoleValidationOptions = {}) {\n    return async (req: NextRequest): Promise<NextResponse | null> => {\n      try {\n        // Skip validation if specified\n        if (options.skipValidation?.(req)) {\n          return null\n        }\n\n        // Get user context from request\n        const userContext = await this.extractUserContext(req)\n        if (!userContext) {\n          return this.handleUnauthorized(req, 'User not authenticated', options)\n        }\n\n        // Skip if no permissions required\n        if (!options.requiredPermissions || options.requiredPermissions.length === 0) {\n          return null\n        }\n\n        // Extract resource ID and context\n        const resourceId = options.resourceIdExtractor?.(req)\n        const context = {\n          ...options.contextExtractor?.(req),\n          endpoint: req.nextUrl.pathname,\n          method: req.method,\n          ip_address: this.getClientIP(req),\n          user_agent: req.headers.get('user-agent') || undefined,\n          session_id: userContext.sessionId,\n        }\n\n        // Check permissions\n        const permissionChecks: PermissionCheckRequest[] = options.requiredPermissions.map(\n          permission => ({\n            permission_name: permission,\n            resource_id: resourceId,\n            context,\n          })\n        )\n\n        const results = await this.permissionService.checkMultiplePermissions(\n          userContext.tenantId,\n          userContext.userId,\n          permissionChecks\n        )\n\n        // Evaluate results based on requireAllPermissions setting\n        const hasRequiredPermissions =\n          options.requireAllPermissions !== false\n            ? options.requiredPermissions.every(permission => results[permission]?.granted)\n            : options.requiredPermissions.some(permission => results[permission]?.granted)\n\n        if (!hasRequiredPermissions) {\n          const deniedPermissions = options.requiredPermissions.filter(\n            permission => !results[permission]?.granted\n          )\n          const reason = `Missing required permissions: ${deniedPermissions.join(', ')}`\n          return this.handleUnauthorized(req, reason, options)\n        }\n\n        // Add permission context to request headers for downstream use\n        const permissionContext = {\n          userId: userContext.userId,\n          tenantId: userContext.tenantId,\n          grantedPermissions: Object.entries(results)\n            .filter(([, result]) => result.granted)\n            .map(([permission]) => permission),\n          resourceId,\n          context,\n        }\n\n        // Store in request headers (will be available in API routes)\n        const response = NextResponse.next()\n        response.headers.set('x-permission-context', JSON.stringify(permissionContext))\n\n        return response\n      } catch (error) {\n        console.error('Error in role validation middleware:', error)\n        return this.handleUnauthorized(req, 'Permission validation failed', options)\n      }\n    }\n  }\n\n  /**\n   * Validates permissions for API route handlers\n   */\n  async validateApiRoute(\n    req: NextRequest,\n    requiredPermissions: string[],\n    options: Omit<RoleValidationOptions, 'requiredPermissions'> = {}\n  ): Promise<{\n    valid: boolean\n    userContext?: UserContext\n    reason?: string\n    permissionResults?: Record<string, any>\n  }> {\n    try {\n      const userContext = await this.extractUserContext(req)\n      if (!userContext) {\n        return { valid: false, reason: 'User not authenticated' }\n      }\n\n      if (requiredPermissions.length === 0) {\n        return { valid: true, userContext }\n      }\n\n      const resourceId = options.resourceIdExtractor?.(req)\n      const context = {\n        ...options.contextExtractor?.(req),\n        endpoint: req.nextUrl.pathname,\n        method: req.method,\n        ip_address: this.getClientIP(req),\n        user_agent: req.headers.get('user-agent') || undefined,\n        session_id: userContext.sessionId,\n      }\n\n      const permissionChecks: PermissionCheckRequest[] = requiredPermissions.map(permission => ({\n        permission_name: permission,\n        resource_id: resourceId,\n        context,\n      }))\n\n      const results = await this.permissionService.checkMultiplePermissions(\n        userContext.tenantId,\n        userContext.userId,\n        permissionChecks\n      )\n\n      const hasRequiredPermissions =\n        options.requireAllPermissions !== false\n          ? requiredPermissions.every(permission => results[permission]?.granted)\n          : requiredPermissions.some(permission => results[permission]?.granted)\n\n      if (!hasRequiredPermissions) {\n        const deniedPermissions = requiredPermissions.filter(\n          permission => !results[permission]?.granted\n        )\n        return {\n          valid: false,\n          userContext,\n          reason: `Missing required permissions: ${deniedPermissions.join(', ')}`,\n          permissionResults: results,\n        }\n      }\n\n      return {\n        valid: true,\n        userContext,\n        permissionResults: results,\n      }\n    } catch (error) {\n      console.error('Error validating API route:', error)\n      return { valid: false, reason: 'Permission validation failed' }\n    }\n  }\n\n  /**\n   * Higher-order function to wrap API route handlers with permission validation\n   */\n  withPermissions(\n    requiredPermissions: string[],\n    options: Omit<RoleValidationOptions, 'requiredPermissions'> = {}\n  ) {\n    return function <T extends any[]>(\n      handler: (req: NextRequest, ...args: T) => Promise<NextResponse>\n    ) {\n      return async (req: NextRequest, ...args: T): Promise<NextResponse> => {\n        const validation = await new RoleValidationMiddleware().validateApiRoute(\n          req,\n          requiredPermissions,\n          options\n        )\n\n        if (!validation.valid) {\n          return NextResponse.json({ error: validation.reason || 'Unauthorized' }, { status: 403 })\n        }\n\n        // Add user context to request for handler use\n        ;(req as any).userContext = validation.userContext\n        ;(req as any).permissionResults = validation.permissionResults\n\n        return handler(req, ...args)\n      }\n    }\n  }\n\n  // =====================================================\n  // UTILITY METHODS\n  // =====================================================\n\n  private async extractUserContext(req: NextRequest): Promise<UserContext | null> {\n    try {\n      const supabase = await createClient()\n\n      // Get user from Supabase auth\n      const {\n        data: { user },\n        error,\n      } = await supabase.auth.getUser()\n      if (error || !user) {\n        return null\n      }\n\n      // Get user profile with tenant information\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('tenant_id, role, department')\n        .eq('id', user.id)\n        .single()\n\n      if (!profile) {\n        return null\n      }\n\n      // Extract session ID from request headers or generate one\n      const sessionId =\n        req.headers.get('x-session-id') ||\n        req.headers.get('authorization')?.split(' ')[1]?.slice(-8) ||\n        'unknown'\n\n      return {\n        userId: user.id,\n        tenantId: profile.tenant_id,\n        role: profile.role,\n        department: profile.department,\n        sessionId,\n        email: user.email || '',\n      }\n    } catch (error) {\n      console.error('Error extracting user context:', error)\n      return null\n    }\n  }\n\n  private getClientIP(req: NextRequest): string {\n    const forwarded = req.headers.get('x-forwarded-for')\n    const realIP = req.headers.get('x-real-ip')\n    const cfConnectingIP = req.headers.get('cf-connecting-ip')\n\n    if (forwarded) {\n      return forwarded.split(',')[0].trim()\n    }\n\n    return realIP || cfConnectingIP || 'unknown'\n  }\n\n  private handleUnauthorized(\n    req: NextRequest,\n    reason: string,\n    options: RoleValidationOptions\n  ): NextResponse {\n    if (options.onUnauthorized) {\n      return options.onUnauthorized(req, reason)\n    }\n\n    // Default unauthorized response\n    return NextResponse.json({ error: reason }, { status: 403 })\n  }\n}\n\n// =====================================================\n// HELPER TYPES\n// =====================================================\n\ninterface UserContext {\n  userId: string\n  tenantId: string\n  role: string\n  department?: string\n  sessionId: string\n  email: string\n}\n\n// =====================================================\n// CONVENIENCE FUNCTIONS\n// =====================================================\n\n/**\n * Creates a permission validator middleware\n */\nexport function requirePermissions(\n  permissions: string[],\n  options: Omit<RoleValidationOptions, 'requiredPermissions'> = {}\n) {\n  const middleware = new RoleValidationMiddleware()\n  return middleware.createValidator({\n    ...options,\n    requiredPermissions: permissions,\n  })\n}\n\n/**\n * Validates permissions in API route handlers\n */\nexport async function validatePermissions(\n  req: NextRequest,\n  permissions: string[],\n  options: Omit<RoleValidationOptions, 'requiredPermissions'> = {}\n) {\n  const middleware = new RoleValidationMiddleware()\n  return middleware.validateApiRoute(req, permissions, options)\n}\n\n/**\n * Higher-order function to wrap API handlers with permission validation\n */\nexport function withPermissions(\n  permissions: string[],\n  options: Omit<RoleValidationOptions, 'requiredPermissions'> = {}\n) {\n  const middleware = new RoleValidationMiddleware()\n  return middleware.withPermissions(permissions, options)\n}\n\n// =====================================================\n// COMMON PERMISSION EXTRACTORS\n// =====================================================\n\n/**\n * Extracts asset ID from URL path\n */\nexport function extractAssetId(req: NextRequest): string | undefined {\n  const url = new URL(req.url)\n  const pathParts = url.pathname.split('/')\n  const assetIndex = pathParts.findIndex(part => part === 'assets')\n  return assetIndex !== -1 && pathParts[assetIndex + 1] ? pathParts[assetIndex + 1] : undefined\n}\n\n/**\n * Extracts user ID from URL path\n */\nexport function extractUserId(req: NextRequest): string | undefined {\n  const url = new URL(req.url)\n  const pathParts = url.pathname.split('/')\n  const userIndex = pathParts.findIndex(part => part === 'users')\n  return userIndex !== -1 && pathParts[userIndex + 1] ? pathParts[userIndex + 1] : undefined\n}\n\n/**\n * Extracts department ID from URL path\n */\nexport function extractDepartmentId(req: NextRequest): string | undefined {\n  const url = new URL(req.url)\n  const pathParts = url.pathname.split('/')\n  const deptIndex = pathParts.findIndex(part => part === 'departments')\n  return deptIndex !== -1 && pathParts[deptIndex + 1] ? pathParts[deptIndex + 1] : undefined\n}\n\n/**\n * Creates context with common request information\n */\nexport function createRequestContext(req: NextRequest): Record<string, any> {\n  return {\n    endpoint: req.nextUrl.pathname,\n    method: req.method,\n    query_params: Object.fromEntries(req.nextUrl.searchParams),\n    timestamp: new Date().toISOString(),\n  }\n}\n\n// =====================================================\n// PERMISSION CONSTANTS\n// =====================================================\n\nexport const PERMISSIONS = {\n  // Asset permissions\n  ASSETS: {\n    CREATE: 'create:asset',\n    READ: 'read:asset',\n    UPDATE: 'update:asset',\n    DELETE: 'delete:asset',\n    ASSIGN: 'assign:asset',\n    TRANSFER: 'transfer:asset',\n    MANAGE: 'manage:asset',\n  },\n\n  // User permissions\n  USERS: {\n    CREATE: 'create:user',\n    READ: 'read:user',\n    UPDATE: 'update:user',\n    DELETE: 'delete:user',\n    MANAGE: 'manage:user',\n  },\n\n  // Role permissions\n  ROLES: {\n    CREATE: 'create:role',\n    READ: 'read:role',\n    UPDATE: 'update:role',\n    DELETE: 'delete:role',\n    MANAGE: 'manage:role',\n  },\n\n  // Department permissions\n  DEPARTMENTS: {\n    CREATE: 'create:department',\n    READ: 'read:department',\n    UPDATE: 'update:department',\n    DELETE: 'delete:department',\n    MANAGE: 'manage:department',\n  },\n\n  // Report permissions\n  REPORTS: {\n    CREATE: 'create:report',\n    READ: 'read:report',\n    UPDATE: 'update:report',\n    DELETE: 'delete:report',\n    EXPORT: 'export:report',\n  },\n\n  // Setting permissions\n  SETTINGS: {\n    READ: 'read:setting',\n    UPDATE: 'update:setting',\n    MANAGE: 'manage:setting',\n  },\n\n  // Audit permissions\n  AUDIT: {\n    READ: 'read:audit',\n    EXPORT: 'export:audit',\n  },\n} as const\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\middleware\\tenant-isolation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1207,1210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1207,1210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3162,3165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3162,3165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3424,3427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3424,3427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3788,3791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3788,3791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":184,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4960,4963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4960,4963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":215,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5860,5863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5860,5863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6810,6813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6810,6813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":261,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7339,7342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7339,7342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":269,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7726,7729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7726,7729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8133,8136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8133,8136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// TENANT ISOLATION MIDDLEWARE\n// =====================================================\n// Middleware utilities for enforcing tenant isolation in API routes\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\nimport { headers } from 'next/headers'\nimport { TenantContext } from '@/lib/types/database'\n\nexport class TenantIsolationError extends Error {\n  constructor(\n    message: string,\n    public statusCode: number = 403\n  ) {\n    super(message)\n    this.name = 'TenantIsolationError'\n  }\n}\n\nexport class TenantIsolationManager {\n  /**\n   * Get tenant context from request headers (set by middleware)\n   */\n  static async getTenantContext(): Promise<TenantContext | null> {\n    try {\n      const headersList = await headers()\n\n      const tenantId = headersList.get('x-tenant-id')\n      const userId = headersList.get('x-user-id')\n      const role = headersList.get('x-user-role')\n      const permissions = headersList.get('x-user-permissions')\n\n      if (!tenantId || !userId || !role) {\n        return null\n      }\n\n      return {\n        tenantId,\n        userId,\n        role: role as any,\n        permissions: permissions ? JSON.parse(permissions) : {},\n      }\n    } catch (error) {\n      console.error('Error getting tenant context:', error)\n      return null\n    }\n  }\n\n  /**\n   * Validate tenant access and throw error if unauthorized\n   */\n  static async validateTenantAccess(requiredTenantId?: string): Promise<TenantContext> {\n    const context = await this.getTenantContext()\n\n    if (!context) {\n      throw new TenantIsolationError('Tenant context required', 401)\n    }\n\n    // If a specific tenant ID is required, validate access\n    if (requiredTenantId && context.tenantId !== requiredTenantId) {\n      throw new TenantIsolationError('Unauthorized access to tenant data', 403)\n    }\n\n    return context\n  }\n\n  /**\n   * Create tenant-scoped Supabase query\n   */\n  static async createTenantQuery(tableName: string, context?: TenantContext) {\n    const tenantContext = context || (await this.getTenantContext())\n\n    if (!tenantContext) {\n      throw new TenantIsolationError('Tenant context required for database operations', 401)\n    }\n\n    const supabase = await createClient()\n\n    // Set RLS context\n    await supabase.rpc('set_current_user_context', {\n      user_id: tenantContext.userId,\n      tenant_id: tenantContext.tenantId,\n    })\n\n    return supabase.from(tableName)\n  }\n\n  /**\n   * Validate resource belongs to current tenant\n   */\n  static async validateResourceAccess(\n    tableName: string,\n    resourceId: string,\n    tenantIdColumn: string = 'tenant_id'\n  ): Promise<void> {\n    const context = await this.getTenantContext()\n\n    if (!context) {\n      throw new TenantIsolationError('Tenant context required', 401)\n    }\n\n    const supabase = await createClient()\n    const { data, error } = await supabase\n      .from(tableName)\n      .select(tenantIdColumn)\n      .eq('id', resourceId)\n      .single()\n\n    if (error) {\n      throw new TenantIsolationError('Resource not found', 404)\n    }\n\n    if ((data as any)[tenantIdColumn] !== context.tenantId) {\n      throw new TenantIsolationError('Unauthorized access to resource', 403)\n    }\n  }\n\n  /**\n   * Filter data to only include current tenant's resources\n   */\n  static async filterTenantData<T extends Record<string, any>>(\n    data: T[],\n    tenantIdField: string = 'tenant_id'\n  ): Promise<T[]> {\n    const context = await this.getTenantContext()\n\n    if (!context) {\n      return []\n    }\n\n    return data.filter(item => item[tenantIdField] === context.tenantId)\n  }\n\n  /**\n   * Add tenant ID to data being created\n   */\n  static async addTenantContext<T extends Record<string, any>>(\n    data: T,\n    tenantIdField: string = 'tenant_id'\n  ): Promise<T & { [key: string]: string }> {\n    const context = await this.getTenantContext()\n\n    if (!context) {\n      throw new TenantIsolationError('Tenant context required for data creation', 401)\n    }\n\n    return {\n      ...data,\n      [tenantIdField]: context.tenantId,\n    }\n  }\n\n  /**\n   * Validate user has required role within tenant\n   */\n  static async validateRole(requiredRoles: string | string[]): Promise<void> {\n    const context = await this.getTenantContext()\n\n    if (!context) {\n      throw new TenantIsolationError('Authentication required', 401)\n    }\n\n    const roles = Array.isArray(requiredRoles) ? requiredRoles : [requiredRoles]\n\n    // Owner and admin roles have elevated access\n    if (['owner', 'admin'].includes(context.role)) {\n      return\n    }\n\n    if (!roles.includes(context.role)) {\n      throw new TenantIsolationError(\n        `Insufficient permissions. Required: ${roles.join(' or ')}`,\n        403\n      )\n    }\n  }\n\n  /**\n   * Log security event for tenant isolation violations\n   */\n  static async logSecurityEvent(\n    event: string,\n    details: Record<string, any>,\n    req?: NextRequest\n  ): Promise<void> {\n    try {\n      const context = await this.getTenantContext()\n      const supabase = await createClient()\n\n      await supabase.from('audit_logs').insert({\n        tenant_id: context?.tenantId,\n        action: 'security_event',\n        resource_type: 'security',\n        resource_id: null,\n        after_state: {\n          event,\n          details,\n          ip_address: req?.headers.get('x-forwarded-for') || req?.headers.get('x-real-ip'),\n          user_agent: req?.headers.get('user-agent'),\n          timestamp: new Date().toISOString(),\n        },\n        user_id: context?.userId,\n        compliance_category: 'security',\n      })\n    } catch (error) {\n      console.error('Error logging security event:', error)\n    }\n  }\n}\n\n/**\n * Decorator function to wrap API handlers with tenant isolation\n */\nexport function withTenantIsolation<T extends any[]>(\n  handler: (context: TenantContext, ...args: T) => Promise<Response>\n) {\n  return async (...args: T): Promise<Response> => {\n    try {\n      const context = await TenantIsolationManager.validateTenantAccess()\n      return await handler(context, ...args)\n    } catch (error) {\n      if (error instanceof TenantIsolationError) {\n        await TenantIsolationManager.logSecurityEvent(\n          'tenant_isolation_violation',\n          { error: error.message },\n          args[0] as NextRequest\n        )\n\n        return NextResponse.json({ error: error.message }, { status: error.statusCode })\n      }\n\n      console.error('Unexpected error in tenant isolation:', error)\n      return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n    }\n  }\n}\n\n/**\n * Decorator function to enforce role-based access with tenant isolation\n */\nexport function withTenantRole(requiredRoles: string | string[]) {\n  return function <T extends any[]>(\n    handler: (context: TenantContext, ...args: T) => Promise<Response>\n  ) {\n    return withTenantIsolation(async (context: TenantContext, ...args: T) => {\n      await TenantIsolationManager.validateRole(requiredRoles)\n      return await handler(context, ...args)\n    })\n  }\n}\n\n/**\n * Decorator function to validate resource access with tenant isolation\n */\nexport function withResourceAccess(\n  tableName: string,\n  resourceIdParam: string = 'id',\n  tenantIdColumn: string = 'tenant_id'\n) {\n  return function <T extends any[]>(\n    handler: (context: TenantContext, ...args: T) => Promise<Response>\n  ) {\n    return withTenantIsolation(async (context: TenantContext, ...args: T) => {\n      // Extract resource ID from request parameters\n      const request = args[0] as NextRequest\n      const url = new URL(request.url)\n      const resourceId =\n        url.searchParams.get(resourceIdParam) || (args[1] as any)?.params?.[resourceIdParam]\n\n      if (resourceId) {\n        await TenantIsolationManager.validateResourceAccess(tableName, resourceId, tenantIdColumn)\n      }\n\n      return await handler(context, ...args)\n    })\n  }\n}\n\n/**\n * Helper function to create standardized error responses\n */\nexport function createTenantErrorResponse(\n  message: string,\n  statusCode: number = 403,\n  details?: Record<string, any>\n): NextResponse {\n  return NextResponse.json(\n    {\n      error: message,\n      code: 'TENANT_ISOLATION_ERROR',\n      details,\n    },\n    { status: statusCode }\n  )\n}\n\n/**\n * Helper function to create tenant-aware success responses\n */\nexport function createTenantResponse<T>(\n  data: T,\n  context: TenantContext,\n  status: number = 200\n): NextResponse {\n  const response = NextResponse.json(data, { status })\n\n  // Add tenant context headers for debugging\n  response.headers.set('x-response-tenant-id', context.tenantId)\n  response.headers.set('x-response-user-id', context.userId)\n\n  return response\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\notifications.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'nodemailer' is defined but never used.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[352,355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[352,355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[369,372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[369,372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Notification utility for geofence events\nimport { createClient } from './supabase/server'\nimport nodemailer from 'nodemailer'\n// Add a type-only import for nodemailer to avoid runtime issues in edge/serverless environments\nimport type nodemailerType from 'nodemailer'\n\nexport async function sendGeofenceEventNotification(\n  userId: string,\n  asset: any,\n  geofence: any,\n  eventType: 'entry' | 'exit'\n) {\n  const supabase = await createClient()\n  // In-app notification (insert into notifications table)\n  await supabase.from('notifications').insert({\n    user_id: userId,\n    title: `Asset ${asset.name} ${eventType === 'entry' ? 'entered' : 'exited'} geofence`,\n    body: `Asset ${asset.name} (${asset.asset_id}) ${eventType === 'entry' ? 'entered' : 'exited'} zone: ${geofence.name}`,\n    type: 'geofence',\n    data: { asset_id: asset.id, geofence_id: geofence.id, event_type: eventType },\n    read: false,\n  })\n  // (Optional) Email notification logic can be added here\n}\n\n// Add a transactional email utility for invitations\nexport async function sendInvitationEmail({\n  to,\n  inviteLink,\n  teamName,\n  inviterName,\n}: {\n  to: string\n  inviteLink: string\n  teamName: string\n  inviterName: string\n}) {\n  // Try Resend API if available\n  if (process.env.RESEND_API_KEY) {\n    const res = await fetch('https://api.resend.com/emails', {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${process.env.RESEND_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        from: process.env.RESEND_FROM_EMAIL || 'noreply@yourdomain.com',\n        to,\n        subject: `You're invited to join ${teamName}`,\n        html: `<p>Hello,</p><p>${inviterName} has invited you to join the team <b>${teamName}</b> on AssetPro.</p><p><a href=\"${inviteLink}\">Accept your invitation</a></p><p>If you did not expect this, you can ignore this email.</p>`,\n      }),\n    })\n    if (!res.ok) {\n      throw new Error('Failed to send invitation email via Resend')\n    }\n    return true\n  }\n  // Fallback: use nodemailer SMTP\n  if (process.env.SMTP_HOST && process.env.SMTP_USER && process.env.SMTP_PASS) {\n    // Dynamically import nodemailer only if needed\n    const nodemailer = (await import('nodemailer')) as typeof nodemailerType\n    const transporter = nodemailer.createTransport({\n      host: process.env.SMTP_HOST,\n      port: Number(process.env.SMTP_PORT) || 587,\n      secure: false,\n      auth: {\n        user: process.env.SMTP_USER,\n        pass: process.env.SMTP_PASS,\n      },\n    })\n    await transporter.sendMail({\n      from: process.env.SMTP_FROM_EMAIL || 'noreply@yourdomain.com',\n      to,\n      subject: `You're invited to join ${teamName}`,\n      html: `<p>Hello,</p><p>${inviterName} has invited you to join the team <b>${teamName}</b> on AssetPro.</p><p><a href=\"${inviteLink}\">Accept your invitation</a></p><p>If you did not expect this, you can ignore this email.</p>`,\n    })\n    return true\n  }\n  throw new Error('No email provider configured')\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\profile-actions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\qr-actions.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createClientClient' is defined but never used.","line":4,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4759,4762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4759,4762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5297,5300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5297,5300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5345,5348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5345,5348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use server'\n\nimport { createClient as createClientServer } from '@/lib/supabase/server'\nimport { createClient as createClientClient } from '@/lib/supabase/client'\nimport { QRCodeGenerator } from './qr-code-utils'\nimport { revalidatePath } from 'next/cache'\n\nexport async function generateAssetQRCode(assetId: string) {\n  try {\n    const supabase = await createClientServer()\n\n    // Get the current user session\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n\n    console.log('QR Generation: Checking user authentication')\n    console.log('User ID:', user?.id)\n    console.log('User error:', userError)\n\n    if (userError) {\n      console.error('QR Generation: User authentication error:', userError)\n      return { error: `Authentication error: ${userError.message}` }\n    }\n\n    if (!user) {\n      console.error('QR Generation: No user found in session')\n      return { error: 'You must be logged in to generate QR codes. Please sign in and try again.' }\n    }\n\n    console.log('QR Generation: User authenticated successfully:', user.id)\n\n    // Get asset data with proper user filtering\n    const { data: asset, error: assetError } = await supabase\n      .from('assets')\n      .select('*')\n      .eq('asset_id', assetId)\n      .eq('created_by', user.id) // Ensure user owns the asset\n      .single()\n\n    console.log('QR Generation: Asset query result:', { asset, assetError })\n\n    if (assetError) {\n      console.error('QR Generation: Asset query error:', assetError)\n      return { error: `Failed to find asset: ${assetError.message}` }\n    }\n\n    if (!asset) {\n      return { error: \"Asset not found or you don't have permission to access it\" }\n    }\n\n    console.log('QR Generation: Asset found:', asset.name)\n\n    // Generate QR code\n    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'https://cloudeleavepro.vercel.app'\n    const assetUrl = `${baseUrl}/asset/${asset.asset_id}`\n\n    console.log('QR Generation: Generating QR code for URL:', assetUrl)\n\n    const qrCodeDataURL = await QRCodeGenerator.generateAssetQR({\n      assetId: asset.asset_id,\n      name: asset.name,\n      category: asset.category,\n      url: assetUrl,\n    })\n\n    console.log('QR Generation: QR code generated successfully')\n\n    // Update asset with QR code public URL\n    const { error: updateError } = await supabase\n      .from('assets')\n      .update({ qr_code: qrCodeDataURL })\n      .eq('id', asset.id)\n      .eq('created_by', user.id)\n\n    if (updateError) {\n      console.error('QR Generation: Update error:', updateError)\n      return { error: `Failed to save QR code: ${updateError.message}` }\n    }\n\n    console.log('QR Generation: Asset updated with QR code successfully')\n\n    revalidatePath('/')\n    revalidatePath('/dashboard')\n    revalidatePath('/qr-management')\n\n    return { success: true, qrCode: qrCodeDataURL, assetUrl }\n  } catch (error) {\n    console.error('QR generation error:', error)\n    return {\n      error: `Failed to generate QR code: ${error instanceof Error ? error.message : 'Unknown error'}`,\n    }\n  }\n}\n\nexport async function generateBulkQRCodes(assetIds: string[]) {\n  try {\n    const supabase = await createClientServer()\n\n    // Get the current user session\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n\n    console.log('Bulk QR Generation: Checking user authentication')\n    console.log('User ID:', user?.id)\n\n    if (userError) {\n      console.error('Bulk QR Generation: User authentication error:', userError)\n      return { error: `Authentication error: ${userError.message}` }\n    }\n\n    if (!user) {\n      console.error('Bulk QR Generation: No user found in session')\n      return { error: 'You must be logged in to generate QR codes. Please sign in and try again.' }\n    }\n\n    console.log('Bulk QR Generation: User authenticated successfully:', user.id)\n\n    // Get assets data with proper user filtering\n    const { data: assets, error: assetsError } = await supabase\n      .from('assets')\n      .select('*')\n      .in('asset_id', assetIds)\n      .eq('created_by', user.id) // Ensure user owns the assets\n\n    console.log('Bulk QR Generation: Assets query result:', {\n      assetsCount: assets?.length,\n      assetsError,\n    })\n\n    if (assetsError) {\n      console.error('Bulk QR Generation: Assets query error:', assetsError)\n      return { error: `Failed to fetch assets: ${assetsError.message}` }\n    }\n\n    if (!assets || assets.length === 0) {\n      return { error: \"No assets found or you don't have permission to access them\" }\n    }\n\n    const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'https://cloudeleavepro.vercel.app'\n\n    // Generate QR codes for all assets\n    const assetQRData = assets.map((asset: any) => ({\n      assetId: asset.asset_id,\n      name: asset.name,\n      category: asset.category,\n      url: `${baseUrl}/asset/${asset.asset_id}`,\n    }))\n\n    console.log('Bulk QR Generation: Generating QR codes for', assetQRData.length, 'assets')\n\n    const qrResults = await QRCodeGenerator.generateBulkQRCodes(assetQRData)\n\n    console.log('Bulk QR Generation: QR codes generated, updating database')\n\n    // Update assets with QR codes\n    const updatePromises = qrResults\n      .filter(result => result.success)\n      .map((result: any) => {\n        const asset = assets.find((a: any) => a.asset_id === result.assetId)\n        if (asset) {\n          return supabase\n            .from('assets')\n            .update({ qr_code: result.qrCode })\n            .eq('id', asset.id)\n            .eq('created_by', user.id) // Ensure user owns the asset\n        }\n        return null\n      })\n      .filter(Boolean)\n\n    await Promise.all(updatePromises)\n\n    console.log('Bulk QR Generation: Database updates completed')\n\n    revalidatePath('/')\n    revalidatePath('/dashboard')\n    revalidatePath('/qr-management')\n\n    return { success: true, results: qrResults }\n  } catch (error) {\n    console.error('Bulk QR generation error:', error)\n    return {\n      error: `Failed to generate QR codes: ${error instanceof Error ? error.message : 'Unknown error'}`,\n    }\n  }\n}\n\nexport async function lookupAssetByQR(qrData: string) {\n  try {\n    const supabase = await createClientServer()\n\n    // Get the current user session\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n\n    console.log('QR Lookup: Checking user authentication')\n    console.log('User ID:', user?.id)\n\n    if (userError) {\n      console.error('QR Lookup: User authentication error:', userError)\n      return { error: `Authentication error: ${userError.message}` }\n    }\n\n    if (!user) {\n      console.error('QR Lookup: No user found in session')\n      return { error: 'You must be logged in to lookup assets. Please sign in and try again.' }\n    }\n\n    console.log('QR Lookup: User authenticated successfully:', user.id)\n\n    // Parse QR data\n    const assetData = QRCodeGenerator.parseQRData(qrData)\n    if (!assetData) {\n      return { error: 'Invalid QR code format' }\n    }\n\n    console.log('QR Lookup: Looking up asset:', assetData.assetId)\n\n    // Look up asset with proper user filtering\n    const { data: asset, error: assetError } = await supabase\n      .from('assets')\n      .select(\n        `\n        *,\n        assignee:assignee_id(full_name),\n        created_by_profile:created_by(full_name)\n      `\n      )\n      .eq('asset_id', assetData.assetId)\n      .eq('created_by', user.id) // Ensure user owns the asset\n      .single()\n\n    console.log('QR Lookup: Asset query result:', { asset: asset?.name, assetError })\n\n    if (assetError) {\n      console.error('QR Lookup: Asset query error:', assetError)\n      return { error: `Failed to find asset: ${assetError.message}` }\n    }\n\n    if (!asset) {\n      return { error: \"Asset not found or you don't have permission to access it\" }\n    }\n\n    console.log('QR Lookup: Asset found successfully:', asset.name)\n\n    return { success: true, asset, qrData: assetData }\n  } catch (error) {\n    console.error('QR lookup error:', error)\n    return {\n      error: `Failed to lookup asset: ${error instanceof Error ? error.message : 'Unknown error'}`,\n    }\n  }\n}\n\nexport async function updateAssetQRCodeUrl(assetId: string, qrCodeUrl: string) {\n  try {\n    const supabase = await createClientServer()\n    // Get the current user session\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser()\n    if (userError) {\n      return { error: `Authentication error: ${userError.message}` }\n    }\n    if (!user) {\n      return { error: 'You must be logged in to update QR codes. Please sign in and try again.' }\n    }\n    // Update asset with QR code public URL\n    const { error: updateError } = await supabase\n      .from('assets')\n      .update({ qr_code: qrCodeUrl })\n      .eq('asset_id', assetId)\n      .eq('created_by', user.id)\n    if (updateError) {\n      return { error: `Failed to save QR code: ${updateError.message}` }\n    }\n    revalidatePath('/')\n    revalidatePath('/dashboard')\n    revalidatePath('/qr-management')\n    return { success: true }\n  } catch (error) {\n    return {\n      error: `Failed to update QR code: ${error instanceof Error ? error.message : 'Unknown error'}`,\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\qr-code-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'imageData' is defined but never used.","line":114,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":114,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'imageData' is assigned a value but never used.","line":150,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":150,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import QRCode from 'qrcode'\n\nexport interface QRCodeOptions {\n  size?: number\n  margin?: number\n  color?: {\n    dark?: string\n    light?: string\n  }\n  errorCorrectionLevel?: 'L' | 'M' | 'Q' | 'H'\n}\n\n// Add at the top after the existing imports\nexport interface QRCodeScanResult {\n  success: boolean\n  data?: AssetQRData\n  error?: string\n}\n\nexport interface AssetQRData {\n  assetId: string\n  name: string\n  category: string\n  url: string\n}\n\nexport class QRCodeGenerator {\n  private static defaultOptions: QRCodeOptions = {\n    size: 200,\n    margin: 2,\n    color: {\n      dark: '#000000',\n      light: '#FFFFFF',\n    },\n    errorCorrectionLevel: 'M',\n  }\n\n  static async generateAssetQR(\n    assetData: AssetQRData,\n    options: QRCodeOptions = {}\n  ): Promise<string> {\n    const qrOptions = { ...this.defaultOptions, ...options }\n\n    // Create QR data with asset information\n    const qrData = JSON.stringify({\n      type: 'asset',\n      id: assetData.assetId,\n      name: assetData.name,\n      category: assetData.category,\n      url: assetData.url,\n      timestamp: new Date().toISOString(),\n    })\n\n    try {\n      const qrCodeDataURL = await QRCode.toDataURL(qrData, {\n        width: qrOptions.size,\n        margin: qrOptions.margin,\n        color: qrOptions.color,\n        errorCorrectionLevel: qrOptions.errorCorrectionLevel,\n      })\n\n      return qrCodeDataURL\n    } catch (error) {\n      throw new Error(`Failed to generate QR code: ${error}`)\n    }\n  }\n\n  static async generateBulkQRCodes(\n    assets: AssetQRData[],\n    options: QRCodeOptions = {}\n  ): Promise<{ assetId: string; qrCode: string; success: boolean; error?: string }[]> {\n    const results = await Promise.allSettled(\n      assets.map(async asset => ({\n        assetId: asset.assetId,\n        qrCode: await this.generateAssetQR(asset, options),\n        success: true,\n      }))\n    )\n\n    return results.map((result, index) => {\n      if (result.status === 'fulfilled') {\n        return result.value\n      } else {\n        return {\n          assetId: assets[index].assetId,\n          qrCode: '',\n          success: false,\n          error: result.reason.message,\n        }\n      }\n    })\n  }\n\n  static parseQRData(qrString: string): AssetQRData | null {\n    try {\n      const data = JSON.parse(qrString)\n      if (data.type === 'asset' && data.id && data.name) {\n        return {\n          assetId: data.id,\n          name: data.name,\n          category: data.category || 'unknown',\n          url: data.url || '',\n        }\n      }\n      return null\n    } catch {\n      return null\n    }\n  }\n}\n\n// Add this new utility function for parsing QR codes from images\nexport class QRCodeScanner {\n  static async scanFromImageData(imageData: ImageData): Promise<QRCodeScanResult> {\n    try {\n      // In a real implementation, you would use jsQR here\n      // For now, we'll simulate the scanning process\n\n      // This is a placeholder - in production you'd use:\n      // const code = jsQR(imageData.data, imageData.width, imageData.height)\n\n      return {\n        success: false,\n        error: 'QR scanning requires jsQR library integration',\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: `Scan failed: ${error}`,\n      }\n    }\n  }\n\n  static async scanFromFile(file: File): Promise<QRCodeScanResult> {\n    return new Promise(resolve => {\n      const img = new Image()\n      const canvas = document.createElement('canvas')\n      const ctx = canvas.getContext('2d')\n\n      img.onload = () => {\n        if (!ctx) {\n          resolve({ success: false, error: 'Canvas context not available' })\n          return\n        }\n\n        canvas.width = img.width\n        canvas.height = img.height\n        ctx.drawImage(img, 0, 0)\n\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n\n        // For demo purposes, simulate successful scan with sample data\n        const sampleData: AssetQRData = {\n          assetId: 'DEMO-001',\n          name: 'Sample Asset from Upload',\n          category: 'it-equipment',\n          url: `${window.location.origin}/asset/DEMO-001`,\n        }\n\n        resolve({\n          success: true,\n          data: sampleData,\n        })\n      }\n\n      img.onerror = () => {\n        resolve({ success: false, error: 'Failed to load image' })\n      }\n\n      img.src = URL.createObjectURL(file)\n    })\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\qr-template-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[325,328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[325,328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export async function fetchQRTemplates() {\n  const res = await fetch('/api/qr-templates')\n  const data = await res.json()\n  if (data.error) throw new Error(data.error)\n  return data.templates || []\n}\n\nexport async function fetchDefaultQRTemplate() {\n  const templates = await fetchQRTemplates()\n  return templates.find((tpl: any) => tpl.is_default) || templates[0] || null\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\rate-limit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\rbac\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\rbac\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\realtime-client.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[227,230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[227,230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[246,249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[246,249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[485,488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[485,488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[968,971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[968,971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1664,1667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1664,1667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1754,1757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1754,1757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2303,2306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2303,2306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2393,2396],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2393,2396],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6055,6058],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6055,6058],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6167,6170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6167,6170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6334,6337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6334,6337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { createClient } from '@/lib/supabase/client'\nimport type { RealtimeChannel } from '@supabase/supabase-js'\n\nexport interface RealtimeEvent {\n  type: 'INSERT' | 'UPDATE' | 'DELETE'\n  table: string\n  record: any\n  old_record?: any\n  timestamp: string\n}\n\nexport interface AnalyticsEvent {\n  id: string\n  event_type: 'asset_created' | 'asset_updated' | 'asset_scanned' | 'user_login' | 'qr_generated'\n  asset_id?: string\n  user_id?: string\n  metadata?: Record<string, any>\n  timestamp: string\n}\n\nclass RealtimeAnalytics {\n  private supabase = createClient()\n  private channels: Map<string, RealtimeChannel> = new Map()\n  private eventListeners: Map<string, Set<(event: RealtimeEvent) => void>> = new Map()\n  private analyticsListeners: Set<(event: AnalyticsEvent) => void> = new Set()\n\n  // Subscribe to real-time table changes\n  subscribeToTable(\n    table: string,\n    callback: (event: RealtimeEvent) => void,\n    filter?: { column: string; value: any }\n  ) {\n    const channelName = filter ? `${table}_${filter.column}_${filter.value}` : table\n\n    if (this.channels.has(channelName)) {\n      // Add listener to existing channel\n      const listeners = this.eventListeners.get(channelName) || new Set()\n      listeners.add(callback)\n      this.eventListeners.set(channelName, listeners)\n      return channelName\n    }\n\n    // Create new channel\n    let channel = this.supabase.channel(channelName)\n\n    if (filter) {\n      channel = channel.on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: table,\n          filter: `${filter.column}=eq.${filter.value}`,\n        },\n        (payload: any) => {\n          const event: RealtimeEvent = {\n            type: payload.eventType as any,\n            table: table,\n            record: payload.new,\n            old_record: payload.old,\n            timestamp: new Date().toISOString(),\n          }\n\n          // Notify all listeners for this channel\n          const listeners = this.eventListeners.get(channelName) || new Set()\n          listeners.forEach(listener => listener(event))\n        }\n      )\n    } else {\n      channel = channel.on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: table,\n        },\n        (payload: any) => {\n          const event: RealtimeEvent = {\n            type: payload.eventType as any,\n            table: table,\n            record: payload.new,\n            old_record: payload.old,\n            timestamp: new Date().toISOString(),\n          }\n\n          // Notify all listeners for this channel\n          const listeners = this.eventListeners.get(channelName) || new Set()\n          listeners.forEach(listener => listener(event))\n        }\n      )\n    }\n\n    channel.subscribe()\n    this.channels.set(channelName, channel)\n\n    // Add the callback to listeners\n    const listeners = new Set([callback])\n    this.eventListeners.set(channelName, listeners)\n\n    return channelName\n  }\n\n  // Unsubscribe from a channel\n  unsubscribe(channelName: string, callback?: (event: RealtimeEvent) => void) {\n    if (callback) {\n      const listeners = this.eventListeners.get(channelName)\n      if (listeners) {\n        listeners.delete(callback)\n        if (listeners.size === 0) {\n          this.eventListeners.delete(channelName)\n          const channel = this.channels.get(channelName)\n          if (channel) {\n            this.supabase.removeChannel(channel)\n            this.channels.delete(channelName)\n          }\n        }\n      }\n    } else {\n      // Remove entire channel\n      const channel = this.channels.get(channelName)\n      if (channel) {\n        this.supabase.removeChannel(channel)\n        this.channels.delete(channelName)\n        this.eventListeners.delete(channelName)\n      }\n    }\n  }\n\n  // Subscribe to analytics events\n  subscribeToAnalytics(callback: (event: AnalyticsEvent) => void) {\n    this.analyticsListeners.add(callback)\n\n    // Subscribe to analytics_events table if it exists\n    this.subscribeToTable('analytics_events', event => {\n      if (event.type === 'INSERT' && event.record) {\n        const analyticsEvent: AnalyticsEvent = {\n          id: event.record.id,\n          event_type: event.record.event_type,\n          asset_id: event.record.asset_id,\n          user_id: event.record.user_id,\n          metadata: event.record.metadata,\n          timestamp: event.record.created_at || event.timestamp,\n        }\n\n        this.analyticsListeners.forEach(listener => listener(analyticsEvent))\n      }\n    })\n  }\n\n  // Track analytics event\n  async trackEvent(event: Omit<AnalyticsEvent, 'id' | 'timestamp'>) {\n    try {\n      const { error } = await this.supabase.from('analytics_events').insert({\n        event_type: event.event_type,\n        asset_id: event.asset_id,\n        user_id: event.user_id,\n        metadata: event.metadata,\n        created_at: new Date().toISOString(),\n      })\n\n      if (error) {\n        console.error('Failed to track analytics event:', error)\n      }\n    } catch (error) {\n      console.error('Analytics tracking error:', error)\n    }\n  }\n\n  // Get real-time metrics\n  async getRealtimeMetrics() {\n    try {\n      const [assetsResult, usersResult, scansResult] = await Promise.all([\n        this.supabase\n          .from('assets')\n          .select('id, status, created_at')\n          .order('created_at', { ascending: false }),\n        this.supabase\n          .from('profiles')\n          .select('id, created_at')\n          .order('created_at', { ascending: false }),\n        this.supabase\n          .from('analytics_events')\n          .select('*')\n          .eq('event_type', 'asset_scanned')\n          .order('created_at', { ascending: false })\n          .limit(100),\n      ])\n\n      const now = new Date()\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())\n      const thisWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)\n\n      return {\n        totalAssets: assetsResult.data?.length || 0,\n        activeAssets: assetsResult.data?.filter((a: any) => a.status === 'active').length || 0,\n        assetsCreatedToday:\n          assetsResult.data?.filter((a: any) => new Date(a.created_at) >= today).length || 0,\n        totalUsers: usersResult.data?.length || 0,\n        scansThisWeek:\n          scansResult.data?.filter((s: any) => new Date(s.created_at) >= thisWeek).length || 0,\n        recentScans: scansResult.data?.slice(0, 10) || [],\n      }\n    } catch (error) {\n      console.error('Failed to get realtime metrics:', error)\n      return {\n        totalAssets: 0,\n        activeAssets: 0,\n        assetsCreatedToday: 0,\n        totalUsers: 0,\n        scansThisWeek: 0,\n        recentScans: [],\n      }\n    }\n  }\n\n  // Cleanup all subscriptions\n  cleanup() {\n    this.channels.forEach(channel => {\n      this.supabase.removeChannel(channel)\n    })\n    this.channels.clear()\n    this.eventListeners.clear()\n    this.analyticsListeners.clear()\n  }\n}\n\n// Export singleton instance\nexport const realtimeAnalytics = new RealtimeAnalytics()\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\services\\api-key-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ipAddress' is defined but never used.","line":388,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":388,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":801,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":801,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22763,22766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22763,22766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// API KEY MANAGEMENT SERVICE\n// =====================================================\n// Service for managing API keys, permissions, and rate limiting\n\nimport { createClient } from '@/lib/supabase/server'\nimport {\n  ApiKey,\n  ApiKeyInsert,\n  ApiKeyUpdate,\n  ApiKeyUsage,\n  SecurityEventInsert,\n} from '@/lib/types/database'\nimport crypto from 'crypto'\n\nexport interface ApiKeyCreateResult {\n  success: boolean\n  apiKey?: ApiKey\n  keyValue?: string\n  error?: string\n}\n\nexport interface ApiKeyValidationResult {\n  valid: boolean\n  apiKey?: ApiKey\n  rateLimitExceeded?: boolean\n  error?: string\n}\n\nexport interface RateLimitStatus {\n  allowed: boolean\n  remaining: number\n  resetTime: Date\n  limit: number\n}\n\nexport interface ApiKeyPermissions {\n  // Asset permissions\n  assets?: {\n    read?: boolean\n    create?: boolean\n    update?: boolean\n    delete?: boolean\n  }\n  // User permissions\n  users?: {\n    read?: boolean\n    create?: boolean\n    update?: boolean\n    delete?: boolean\n  }\n  // Report permissions\n  reports?: {\n    read?: boolean\n    create?: boolean\n    export?: boolean\n  }\n  // Analytics permissions\n  analytics?: {\n    read?: boolean\n    export?: boolean\n  }\n  // Admin permissions\n  admin?: {\n    tenant_settings?: boolean\n    user_management?: boolean\n    api_keys?: boolean\n  }\n}\n\nexport class ApiKeyService {\n  private async getSupabase() {\n    return createClient()\n  }\n\n  // =====================================================\n  // API KEY CREATION AND MANAGEMENT\n  // =====================================================\n\n  /**\n   * Create a new API key\n   */\n  async createApiKey(\n    tenantId: string,\n    userId: string,\n    keyName: string,\n    permissions: ApiKeyPermissions = {},\n    scopes: string[] = [],\n    options: {\n      expiresInDays?: number\n      rateLimitRequests?: number\n      rateLimitWindowSeconds?: number\n      allowedIps?: string[]\n    } = {}\n  ): Promise<ApiKeyCreateResult> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Generate API key\n      const keyValue = this.generateApiKey()\n      const keyPrefix = keyValue.substring(0, 8) // First 8 characters for identification\n      const keyHash = this.hashApiKey(keyValue)\n\n      // Calculate expiration\n      let expiresAt: string | undefined\n      if (options.expiresInDays) {\n        const expiration = new Date()\n        expiration.setDate(expiration.getDate() + options.expiresInDays)\n        expiresAt = expiration.toISOString()\n      }\n\n      // Create API key record\n      const keyData: ApiKeyInsert = {\n        tenant_id: tenantId,\n        user_id: userId,\n        key_name: keyName,\n        key_prefix: keyPrefix,\n        key_hash: keyHash,\n        permissions,\n        scopes,\n        allowed_ips: options.allowedIps || [],\n        rate_limit_requests: options.rateLimitRequests || 1000,\n        rate_limit_window_seconds: options.rateLimitWindowSeconds || 3600,\n        expires_at: expiresAt,\n      }\n\n      const { data: apiKey, error } = await supabase\n        .from('api_keys')\n        .insert(keyData)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error creating API key:', error)\n        return { success: false, error: error.message }\n      }\n\n      // Log security event\n      await this.logSecurityEvent(tenantId, userId, 'api_key_created', {\n        api_key_id: apiKey.id,\n        key_name: keyName,\n        permissions,\n        scopes,\n        expires_at: expiresAt,\n      })\n\n      return {\n        success: true,\n        apiKey,\n        keyValue,\n      }\n    } catch (error) {\n      console.error('Error creating API key:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Validate API key and check permissions\n   */\n  async validateApiKey(\n    keyValue: string,\n    requiredPermission?: string,\n    requiredScope?: string,\n    ipAddress?: string\n  ): Promise<ApiKeyValidationResult> {\n    try {\n      const supabase = await this.getSupabase()\n      const keyHash = this.hashApiKey(keyValue)\n\n      const { data: apiKey, error } = await supabase\n        .from('api_keys')\n        .select('*')\n        .eq('key_hash', keyHash)\n        .eq('is_active', true)\n        .single()\n\n      if (error || !apiKey) {\n        return { valid: false, error: 'Invalid API key' }\n      }\n\n      // Check expiration\n      if (apiKey.expires_at && new Date(apiKey.expires_at) < new Date()) {\n        return { valid: false, error: 'API key expired' }\n      }\n\n      // Check IP restrictions\n      if (apiKey.allowed_ips.length > 0 && ipAddress) {\n        const isAllowedIp = apiKey.allowed_ips.some((allowedIp: string) => {\n          return this.matchesIpPattern(ipAddress, allowedIp)\n        })\n\n        if (!isAllowedIp) {\n          return { valid: false, error: 'IP address not allowed' }\n        }\n      }\n\n      // Check rate limiting\n      const rateLimitStatus = await this.checkRateLimit(apiKey)\n      if (!rateLimitStatus.allowed) {\n        return {\n          valid: false,\n          rateLimitExceeded: true,\n          error: 'Rate limit exceeded',\n        }\n      }\n\n      // Check permissions\n      if (requiredPermission && !this.hasPermission(apiKey, requiredPermission)) {\n        return { valid: false, error: 'Insufficient permissions' }\n      }\n\n      // Check scopes\n      if (requiredScope && !apiKey.scopes.includes(requiredScope)) {\n        return { valid: false, error: 'Insufficient scope' }\n      }\n\n      // Update last used timestamp\n      await supabase\n        .from('api_keys')\n        .update({ last_used_at: new Date().toISOString() })\n        .eq('id', apiKey.id)\n\n      return {\n        valid: true,\n        apiKey,\n      }\n    } catch (error) {\n      console.error('Error validating API key:', error)\n      return {\n        valid: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Update API key\n   */\n  async updateApiKey(\n    tenantId: string,\n    userId: string,\n    keyId: string,\n    updates: {\n      keyName?: string\n      permissions?: ApiKeyPermissions\n      scopes?: string[]\n      allowedIps?: string[]\n      rateLimitRequests?: number\n      rateLimitWindowSeconds?: number\n      expiresAt?: string\n    }\n  ): Promise<{ success: boolean; apiKey?: ApiKey; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const updateData: ApiKeyUpdate = {}\n\n      if (updates.keyName) updateData.key_name = updates.keyName\n      if (updates.permissions) updateData.permissions = updates.permissions\n      if (updates.scopes) updateData.scopes = updates.scopes\n      if (updates.allowedIps) updateData.allowed_ips = updates.allowedIps\n      if (updates.rateLimitRequests) updateData.rate_limit_requests = updates.rateLimitRequests\n      if (updates.rateLimitWindowSeconds)\n        updateData.rate_limit_window_seconds = updates.rateLimitWindowSeconds\n      if (updates.expiresAt) updateData.expires_at = updates.expiresAt\n\n      const { data: apiKey, error } = await supabase\n        .from('api_keys')\n        .update(updateData)\n        .eq('id', keyId)\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error updating API key:', error)\n        return { success: false, error: error.message }\n      }\n\n      return { success: true, apiKey }\n    } catch (error) {\n      console.error('Error updating API key:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Revoke API key\n   */\n  async revokeApiKey(\n    tenantId: string,\n    userId: string,\n    keyId: string,\n    reason: string = 'User revoked'\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: apiKey, error } = await supabase\n        .from('api_keys')\n        .update({\n          is_active: false,\n          revoked_at: new Date().toISOString(),\n          revoked_reason: reason,\n        })\n        .eq('id', keyId)\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error revoking API key:', error)\n        return { success: false, error: error.message }\n      }\n\n      // Log security event\n      await this.logSecurityEvent(tenantId, userId, 'api_key_revoked', {\n        api_key_id: keyId,\n        key_name: apiKey.key_name,\n        revoked_reason: reason,\n      })\n\n      return { success: true }\n    } catch (error) {\n      console.error('Error revoking API key:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Get API keys for user\n   */\n  async getUserApiKeys(\n    tenantId: string,\n    userId: string,\n    includeRevoked: boolean = false\n  ): Promise<{ success: boolean; apiKeys?: ApiKey[]; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      let query = supabase\n        .from('api_keys')\n        .select('*')\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false })\n\n      if (!includeRevoked) {\n        query = query.eq('is_active', true)\n      }\n\n      const { data: apiKeys, error } = await query\n\n      if (error) {\n        console.error('Error getting API keys:', error)\n        return { success: false, error: error.message }\n      }\n\n      return { success: true, apiKeys }\n    } catch (error) {\n      console.error('Error getting API keys:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  // =====================================================\n  // RATE LIMITING\n  // =====================================================\n\n  /**\n   * Check rate limit for API key\n   */\n  async checkRateLimit(apiKey: ApiKey, ipAddress?: string): Promise<RateLimitStatus> {\n    try {\n      const supabase = await this.getSupabase()\n      const now = new Date()\n      const windowStart = new Date(now.getTime() - apiKey.rate_limit_window_seconds * 1000)\n\n      // Get or create rate limit bucket\n      const { data: bucket, error } = await supabase\n        .from('rate_limit_buckets')\n        .select('*')\n        .eq('api_key_id', apiKey.id)\n        .gte('window_end', now.toISOString())\n        .order('window_start', { ascending: false })\n        .limit(1)\n        .single()\n\n      let currentCount = 0\n      let resetTime = new Date(now.getTime() + apiKey.rate_limit_window_seconds * 1000)\n\n      if (bucket && !error) {\n        currentCount = bucket.request_count\n        resetTime = new Date(bucket.window_end)\n      } else {\n        // Create new bucket\n        const windowEnd = new Date(now.getTime() + apiKey.rate_limit_window_seconds * 1000)\n\n        await supabase.from('rate_limit_buckets').insert({\n          tenant_id: apiKey.tenant_id,\n          api_key_id: apiKey.id,\n          window_start: windowStart.toISOString(),\n          window_end: windowEnd.toISOString(),\n          request_count: 0,\n        })\n\n        resetTime = windowEnd\n      }\n\n      const allowed = currentCount < apiKey.rate_limit_requests\n      const remaining = Math.max(0, apiKey.rate_limit_requests - currentCount)\n\n      return {\n        allowed,\n        remaining,\n        resetTime,\n        limit: apiKey.rate_limit_requests,\n      }\n    } catch (error) {\n      console.error('Error checking rate limit:', error)\n      // Allow request on error to prevent service disruption\n      return {\n        allowed: true,\n        remaining: apiKey.rate_limit_requests,\n        resetTime: new Date(Date.now() + apiKey.rate_limit_window_seconds * 1000),\n        limit: apiKey.rate_limit_requests,\n      }\n    }\n  }\n\n  /**\n   * Increment rate limit counter\n   */\n  async incrementRateLimit(apiKey: ApiKey): Promise<void> {\n    try {\n      const supabase = await this.getSupabase()\n      const now = new Date()\n\n      // Find current bucket\n      const { data: bucket } = await supabase\n        .from('rate_limit_buckets')\n        .select('*')\n        .eq('api_key_id', apiKey.id)\n        .gte('window_end', now.toISOString())\n        .order('window_start', { ascending: false })\n        .limit(1)\n        .single()\n\n      if (bucket) {\n        // Increment existing bucket\n        await supabase\n          .from('rate_limit_buckets')\n          .update({\n            request_count: bucket.request_count + 1,\n            updated_at: now.toISOString(),\n          })\n          .eq('id', bucket.id)\n      }\n    } catch (error) {\n      console.error('Error incrementing rate limit:', error)\n    }\n  }\n\n  // =====================================================\n  // USAGE TRACKING\n  // =====================================================\n\n  /**\n   * Log API key usage\n   */\n  async logApiKeyUsage(\n    apiKey: ApiKey,\n    endpoint: string,\n    method: string,\n    statusCode: number,\n    options: {\n      responseTimeMs?: number\n      ipAddress?: string\n      userAgent?: string\n      requestSizeBytes?: number\n      responseSizeBytes?: number\n    } = {}\n  ): Promise<void> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const usageData: Omit<ApiKeyUsage, 'id' | 'created_at'> = {\n        tenant_id: apiKey.tenant_id,\n        api_key_id: apiKey.id,\n        endpoint,\n        method,\n        status_code: statusCode,\n        response_time_ms: options.responseTimeMs,\n        ip_address: options.ipAddress,\n        user_agent: options.userAgent,\n        request_size_bytes: options.requestSizeBytes,\n        response_size_bytes: options.responseSizeBytes,\n      }\n\n      await supabase.from('api_key_usage').insert(usageData)\n\n      // Increment rate limit counter\n      await this.incrementRateLimit(apiKey)\n    } catch (error) {\n      console.error('Error logging API key usage:', error)\n    }\n  }\n\n  /**\n   * Get API key usage statistics\n   */\n  async getApiKeyUsageStats(\n    tenantId: string,\n    apiKeyId: string,\n    days: number = 30\n  ): Promise<{\n    success: boolean\n    stats?: {\n      totalRequests: number\n      successfulRequests: number\n      errorRequests: number\n      averageResponseTime: number\n      topEndpoints: Array<{ endpoint: string; count: number }>\n      dailyUsage: Array<{ date: string; requests: number }>\n    }\n    error?: string\n  }> {\n    try {\n      const supabase = await this.getSupabase()\n      const startDate = new Date()\n      startDate.setDate(startDate.getDate() - days)\n\n      // Get usage data\n      const { data: usage, error } = await supabase\n        .from('api_key_usage')\n        .select('*')\n        .eq('tenant_id', tenantId)\n        .eq('api_key_id', apiKeyId)\n        .gte('created_at', startDate.toISOString())\n\n      if (error) {\n        console.error('Error getting usage stats:', error)\n        return { success: false, error: error.message }\n      }\n\n      if (!usage || usage.length === 0) {\n        return {\n          success: true,\n          stats: {\n            totalRequests: 0,\n            successfulRequests: 0,\n            errorRequests: 0,\n            averageResponseTime: 0,\n            topEndpoints: [],\n            dailyUsage: [],\n          },\n        }\n      }\n\n      // Calculate statistics\n      const totalRequests = usage.length\n      const successfulRequests = usage.filter(\n        u => u.status_code >= 200 && u.status_code < 400\n      ).length\n      const errorRequests = totalRequests - successfulRequests\n\n      const responseTimes = usage.filter(u => u.response_time_ms).map(u => u.response_time_ms!)\n      const averageResponseTime =\n        responseTimes.length > 0\n          ? responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length\n          : 0\n\n      // Top endpoints\n      const endpointCounts = usage.reduce(\n        (acc, u) => {\n          acc[u.endpoint] = (acc[u.endpoint] || 0) + 1\n          return acc\n        },\n        {} as Record<string, number>\n      )\n\n      const topEndpoints = Object.entries(endpointCounts)\n        .sort(([, a], [, b]) => (b as number) - (a as number))\n        .slice(0, 10)\n        .map(([endpoint, count]) => ({ endpoint, count: count as number }))\n\n      // Daily usage\n      const dailyUsage = usage.reduce(\n        (acc, u) => {\n          const date = new Date(u.created_at).toISOString().split('T')[0]\n          acc[date] = (acc[date] || 0) + 1\n          return acc\n        },\n        {} as Record<string, number>\n      )\n\n      const dailyUsageArray = Object.entries(dailyUsage)\n        .sort(([a], [b]) => a.localeCompare(b))\n        .map(([date, requests]) => ({ date, requests: requests as number }))\n\n      return {\n        success: true,\n        stats: {\n          totalRequests,\n          successfulRequests,\n          errorRequests,\n          averageResponseTime,\n          topEndpoints,\n          dailyUsage: dailyUsageArray,\n        },\n      }\n    } catch (error) {\n      console.error('Error getting API key usage stats:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  // =====================================================\n  // PUBLIC HELPER METHODS (for testing)\n  // =====================================================\n\n  /**\n   * List API keys for a user (alias for getUserApiKeys)\n   */\n  async listApiKeys(tenantId: string, userId: string): Promise<ApiKey[]> {\n    const result = await this.getUserApiKeys(tenantId, userId)\n    return result.apiKeys || []\n  }\n\n  /**\n   * Check if API key has specific scope\n   */\n  hasScope(scopes: string[], requiredScope: string): boolean {\n    return scopes.includes(requiredScope)\n  }\n\n  /**\n   * Check if IP is allowed for API key\n   */\n  isIpAllowed(ipAddress: string, allowedIps: string[]): boolean {\n    if (allowedIps.length === 0) return true\n    return allowedIps.some(allowedIp => this.matchesIpPattern(ipAddress, allowedIp))\n  }\n\n  /**\n   * Generate TOTP secret (for MFA integration)\n   */\n  generateTOTPSecret(): string {\n    // Use base64 encoding instead of base32 which is not supported by Node.js crypto\n    return crypto.randomBytes(20).toString('base64')\n  }\n\n  /**\n   * Validate TOTP token (for MFA integration)\n   */\n  validateTOTPToken(secret: string, token: string): boolean {\n    // Simple validation - in production use a proper TOTP library\n    return token.length === 6 && /^\\d{6}$/.test(token)\n  }\n\n  /**\n   * Disable MFA for user\n   */\n  async disableMfa(\n    tenantId: string,\n    userId: string\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { error } = await supabase\n        .from('mfa_methods')\n        .update({ is_active: false })\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n\n      if (error) {\n        return { success: false, error: error.message }\n      }\n\n      return { success: true }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  // =====================================================\n  // PRIVATE HELPER METHODS\n  // =====================================================\n\n  private generateApiKey(): string {\n    const prefix = 'ak_'\n    const randomBytes = crypto.randomBytes(32)\n    const keyBody = randomBytes.toString('base64url')\n    return prefix + keyBody\n  }\n\n  private hashApiKey(keyValue: string): string {\n    return crypto.createHash('sha256').update(keyValue).digest('hex')\n  }\n\n  private hasPermission(apiKey: ApiKey, permission: string): boolean\n  private hasPermission(permissions: ApiKeyPermissions, resource: string, action: string): boolean\n  private hasPermission(\n    apiKeyOrPermissions: ApiKey | ApiKeyPermissions,\n    permissionOrResource: string,\n    action?: string\n  ): boolean {\n    if (action !== undefined) {\n      // New signature: hasPermission(permissions, resource, action)\n      const permissions = apiKeyOrPermissions as ApiKeyPermissions\n      const resource = permissionOrResource\n\n      switch (resource) {\n        case 'assets':\n          return permissions.assets?.[action as keyof typeof permissions.assets] === true\n        case 'users':\n          return permissions.users?.[action as keyof typeof permissions.users] === true\n        case 'reports':\n          return permissions.reports?.[action as keyof typeof permissions.reports] === true\n        case 'analytics':\n          return permissions.analytics?.[action as keyof typeof permissions.analytics] === true\n        case 'admin':\n          return permissions.admin?.[action as keyof typeof permissions.admin] === true\n        default:\n          return false\n      }\n    } else {\n      // Old signature: hasPermission(apiKey, permission)\n      const apiKey = apiKeyOrPermissions as ApiKey\n      const permission = permissionOrResource\n      const [resource, actionPart] = permission.split(':')\n      const permissions = apiKey.permissions as ApiKeyPermissions\n\n      switch (resource) {\n        case 'assets':\n          return permissions.assets?.[actionPart as keyof typeof permissions.assets] === true\n        case 'users':\n          return permissions.users?.[actionPart as keyof typeof permissions.users] === true\n        case 'reports':\n          return permissions.reports?.[actionPart as keyof typeof permissions.reports] === true\n        case 'analytics':\n          return permissions.analytics?.[actionPart as keyof typeof permissions.analytics] === true\n        case 'admin':\n          return permissions.admin?.[actionPart as keyof typeof permissions.admin] === true\n        default:\n          return false\n      }\n    }\n  }\n\n  private matchesIpPattern(ip: string, pattern: string): boolean {\n    // Simple IP matching - in production, use a proper CIDR matching library\n    if (pattern === ip) return true\n\n    // Support for CIDR notation (simplified)\n    if (pattern.includes('/')) {\n      const [network, prefixLength] = pattern.split('/')\n      const prefix = parseInt(prefixLength)\n\n      // Convert IPs to integers for comparison (IPv4 only)\n      const ipInt = this.ipToInt(ip)\n      const networkInt = this.ipToInt(network)\n      const mask = (0xffffffff << (32 - prefix)) >>> 0\n\n      return (ipInt & mask) === (networkInt & mask)\n    }\n\n    return false\n  }\n\n  private ipToInt(ip: string): number {\n    return ip.split('.').reduce((acc, octet) => (acc << 8) + parseInt(octet), 0) >>> 0\n  }\n\n  private async logSecurityEvent(\n    tenantId: string,\n    userId: string,\n    eventType: SecurityEventInsert['event_type'],\n    details: Record<string, any>\n  ): Promise<void> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const eventData: SecurityEventInsert = {\n        tenant_id: tenantId,\n        user_id: userId,\n        event_type: eventType,\n        severity: 'low',\n        description: `API key ${eventType.replace('_', ' ')}`,\n        details,\n      }\n\n      await supabase.from('security_events').insert(eventData)\n    } catch (error) {\n      console.error('Error logging security event:', error)\n    }\n  }\n}\n\n// Export singleton instance\nexport const apiKeyService = new ApiKeyService()\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\services\\delegation-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_tenantId' is defined but never used.","line":636,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":636,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_delegatorId' is defined but never used.","line":637,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":637,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_permissionNames' is defined but never used.","line":638,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":638,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":701,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":701,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19355,19358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19355,19358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":702,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":702,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19455,19458],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19455,19458],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":703,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":703,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19556,19559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19556,19559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// DELEGATION SERVICE\n// =====================================================\n// Service for managing permission delegations and guest access\n\nimport { createClient } from '@/lib/supabase/server'\nimport {\n  PermissionDelegation,\n  PermissionDelegationUpdate,\n  GuestAccess,\n  GuestAccessUpdate,\n  CreateDelegationRequest,\n  CreateGuestAccessRequest,\n} from '@/lib/types/rbac'\n\nexport class DelegationService {\n  private async getSupabase() {\n    return await createClient()\n  }\n\n  // =====================================================\n  // PERMISSION DELEGATION MANAGEMENT\n  // =====================================================\n\n  async createDelegation(\n    tenantId: string,\n    delegatorId: string,\n    request: CreateDelegationRequest\n  ): Promise<PermissionDelegation> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Validate delegatee exists\n      const { data: delegatee } = await supabase\n        .from('profiles')\n        .select('id, email')\n        .eq('id', request.delegatee_id)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (!delegatee) {\n        throw new Error('Delegatee not found in tenant')\n      }\n\n      // Validate delegator has the permissions they want to delegate\n      if (request.permission_names && request.permission_names.length > 0) {\n        const hasPermissions = await this.validateDelegatorPermissions(\n          tenantId,\n          delegatorId,\n          request.permission_names\n        )\n\n        if (!hasPermissions) {\n          throw new Error('Delegator does not have all the permissions they are trying to delegate')\n        }\n      }\n\n      // Validate role delegation if specified\n      if (request.role_id) {\n        const hasRole = await this.validateDelegatorRole(tenantId, delegatorId, request.role_id)\n        if (!hasRole) {\n          throw new Error('Delegator does not have the role they are trying to delegate')\n        }\n      }\n\n      // Get permission IDs from names\n      let permissionIds: string[] = []\n      if (request.permission_names && request.permission_names.length > 0) {\n        const { data: permissions } = await supabase\n          .from('permissions')\n          .select('id')\n          .in('name', request.permission_names)\n\n        permissionIds = permissions?.map(p => p.id) || []\n\n        if (permissionIds.length !== request.permission_names.length) {\n          throw new Error('Some permissions were not found')\n        }\n      }\n\n      // Validate expiration date\n      const expiresAt = new Date(request.expires_at)\n      const now = new Date()\n      const maxDuration = new Date(now.getTime() + 365 * 24 * 60 * 60 * 1000) // 1 year max\n\n      if (expiresAt <= now) {\n        throw new Error('Expiration date must be in the future')\n      }\n\n      if (expiresAt > maxDuration) {\n        throw new Error('Delegation cannot exceed 1 year')\n      }\n\n      const { data: delegation, error } = await supabase\n        .from('permission_delegations')\n        .insert({\n          tenant_id: tenantId,\n          delegator_id: delegatorId,\n          delegatee_id: request.delegatee_id,\n          role_id: request.role_id,\n          permission_ids: permissionIds,\n          scope: request.scope || 'personal',\n          resource_filters: request.resource_filters || {},\n          conditions: request.conditions || {},\n          expires_at: request.expires_at,\n          reason: request.reason,\n          notes: request.notes,\n        })\n        .select()\n        .single()\n\n      if (error) {\n        throw new Error(`Failed to create delegation: ${error.message}`)\n      }\n\n      return delegation\n    } catch (error) {\n      console.error('Error creating delegation:', error)\n      throw error\n    }\n  }\n\n  async updateDelegation(\n    tenantId: string,\n    delegationId: string,\n    updates: PermissionDelegationUpdate,\n    updatedBy: string\n  ): Promise<PermissionDelegation> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Check if delegation exists and user can modify it\n      const { data: delegation } = await supabase\n        .from('permission_delegations')\n        .select('id, delegator_id, status')\n        .eq('id', delegationId)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (!delegation) {\n        throw new Error('Delegation not found')\n      }\n\n      if (delegation.delegator_id !== updatedBy) {\n        throw new Error('Only the delegator can modify this delegation')\n      }\n\n      if (delegation.status === 'expired' || delegation.status === 'revoked') {\n        throw new Error('Cannot modify expired or revoked delegations')\n      }\n\n      // Validate expiration date if being updated\n      if (updates.expires_at) {\n        const expiresAt = new Date(updates.expires_at)\n        const now = new Date()\n\n        if (expiresAt <= now) {\n          throw new Error('Expiration date must be in the future')\n        }\n      }\n\n      const { data: updatedDelegation, error } = await supabase\n        .from('permission_delegations')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', delegationId)\n        .eq('tenant_id', tenantId)\n        .select()\n        .single()\n\n      if (error) {\n        throw new Error(`Failed to update delegation: ${error.message}`)\n      }\n\n      return updatedDelegation\n    } catch (error) {\n      console.error('Error updating delegation:', error)\n      throw error\n    }\n  }\n\n  async revokeDelegation(\n    tenantId: string,\n    delegationId: string,\n    revokedBy: string,\n    reason?: string\n  ): Promise<boolean> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: delegation } = await supabase\n        .from('permission_delegations')\n        .select('id, delegator_id, status')\n        .eq('id', delegationId)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (!delegation) {\n        throw new Error('Delegation not found')\n      }\n\n      if (delegation.delegator_id !== revokedBy) {\n        throw new Error('Only the delegator can revoke this delegation')\n      }\n\n      if (delegation.status === 'revoked') {\n        throw new Error('Delegation is already revoked')\n      }\n\n      const { error } = await supabase\n        .from('permission_delegations')\n        .update({\n          status: 'revoked',\n          notes: reason ? `Revoked: ${reason}` : 'Revoked by delegator',\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', delegationId)\n        .eq('tenant_id', tenantId)\n\n      if (error) {\n        throw new Error(`Failed to revoke delegation: ${error.message}`)\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error revoking delegation:', error)\n      throw error\n    }\n  }\n\n  async getDelegation(\n    tenantId: string,\n    delegationId: string\n  ): Promise<PermissionDelegation | null> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: delegation } = await supabase\n        .from('permission_delegations')\n        .select(\n          `\n          *,\n          delegator:profiles!permission_delegations_delegator_id_fkey (\n            id,\n            full_name,\n            email\n          ),\n          delegatee:profiles!permission_delegations_delegatee_id_fkey (\n            id,\n            full_name,\n            email\n          ),\n          role:roles (\n            id,\n            name,\n            display_name\n          )\n        `\n        )\n        .eq('id', delegationId)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      return delegation\n    } catch (error) {\n      console.error('Error getting delegation:', error)\n      return null\n    }\n  }\n\n  async getUserDelegations(\n    tenantId: string,\n    userId: string,\n    type: 'delegated' | 'received' | 'all' = 'all'\n  ): Promise<PermissionDelegation[]> {\n    try {\n      const supabase = await this.getSupabase()\n\n      let query = supabase\n        .from('permission_delegations')\n        .select(\n          `\n          *,\n          delegator:profiles!permission_delegations_delegator_id_fkey (\n            id,\n            full_name,\n            email\n          ),\n          delegatee:profiles!permission_delegations_delegatee_id_fkey (\n            id,\n            full_name,\n            email\n          ),\n          role:roles (\n            id,\n            name,\n            display_name\n          )\n        `\n        )\n        .eq('tenant_id', tenantId)\n\n      switch (type) {\n        case 'delegated':\n          query = query.eq('delegator_id', userId)\n          break\n        case 'received':\n          query = query.eq('delegatee_id', userId)\n          break\n        case 'all':\n          query = query.or(`delegator_id.eq.${userId},delegatee_id.eq.${userId}`)\n          break\n      }\n\n      const { data: delegations, error } = await query.order('created_at', { ascending: false })\n\n      if (error) {\n        throw new Error(`Failed to get user delegations: ${error.message}`)\n      }\n\n      return delegations || []\n    } catch (error) {\n      console.error('Error getting user delegations:', error)\n      throw error\n    }\n  }\n\n  async getActiveDelegations(tenantId: string): Promise<PermissionDelegation[]> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: delegations, error } = await supabase\n        .from('permission_delegations')\n        .select(\n          `\n          *,\n          delegator:profiles!permission_delegations_delegator_id_fkey (\n            id,\n            full_name,\n            email\n          ),\n          delegatee:profiles!permission_delegations_delegatee_id_fkey (\n            id,\n            full_name,\n            email\n          )\n        `\n        )\n        .eq('tenant_id', tenantId)\n        .eq('status', 'active')\n        .gte('expires_at', new Date().toISOString())\n        .order('expires_at', { ascending: true })\n\n      if (error) {\n        throw new Error(`Failed to get active delegations: ${error.message}`)\n      }\n\n      return delegations || []\n    } catch (error) {\n      console.error('Error getting active delegations:', error)\n      throw error\n    }\n  }\n\n  // =====================================================\n  // GUEST ACCESS MANAGEMENT\n  // =====================================================\n\n  async createGuestAccess(\n    tenantId: string,\n    invitedBy: string,\n    request: CreateGuestAccessRequest\n  ): Promise<GuestAccess> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n      if (!emailRegex.test(request.email)) {\n        throw new Error('Invalid email format')\n      }\n\n      // Check if guest access already exists for this email\n      const { data: existingGuest } = await supabase\n        .from('guest_access')\n        .select('id, is_active')\n        .eq('tenant_id', tenantId)\n        .eq('email', request.email)\n        .single()\n\n      if (existingGuest && existingGuest.is_active) {\n        throw new Error('Active guest access already exists for this email')\n      }\n\n      // Validate role if specified\n      if (request.role_id) {\n        const { data: role } = await supabase\n          .from('roles')\n          .select('id, is_active')\n          .eq('id', request.role_id)\n          .eq('tenant_id', tenantId)\n          .single()\n\n        if (!role) {\n          throw new Error('Role not found')\n        }\n\n        if (!role.is_active) {\n          throw new Error('Cannot assign inactive role to guest')\n        }\n      }\n\n      // Validate expiration date\n      const expiresAt = new Date(request.expires_at)\n      const now = new Date()\n      const maxDuration = new Date(now.getTime() + 90 * 24 * 60 * 60 * 1000) // 90 days max\n\n      if (expiresAt <= now) {\n        throw new Error('Expiration date must be in the future')\n      }\n\n      if (expiresAt > maxDuration) {\n        throw new Error('Guest access cannot exceed 90 days')\n      }\n\n      const { data: guestAccess, error } = await supabase\n        .from('guest_access')\n        .insert({\n          tenant_id: tenantId,\n          email: request.email,\n          full_name: request.full_name,\n          invited_by: invitedBy,\n          role_id: request.role_id,\n          permissions: request.permissions || {},\n          resource_access: request.resource_access || {},\n          expires_at: request.expires_at,\n          max_sessions: request.max_sessions || 1,\n        })\n        .select()\n        .single()\n\n      if (error) {\n        throw new Error(`Failed to create guest access: ${error.message}`)\n      }\n\n      return guestAccess\n    } catch (error) {\n      console.error('Error creating guest access:', error)\n      throw error\n    }\n  }\n\n  async updateGuestAccess(\n    tenantId: string,\n    guestId: string,\n    updates: GuestAccessUpdate\n  ): Promise<GuestAccess> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: guestAccess, error } = await supabase\n        .from('guest_access')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', guestId)\n        .eq('tenant_id', tenantId)\n        .select()\n        .single()\n\n      if (error) {\n        throw new Error(`Failed to update guest access: ${error.message}`)\n      }\n\n      return guestAccess\n    } catch (error) {\n      console.error('Error updating guest access:', error)\n      throw error\n    }\n  }\n\n  async revokeGuestAccess(tenantId: string, guestId: string): Promise<boolean> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { error } = await supabase\n        .from('guest_access')\n        .update({\n          is_active: false,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', guestId)\n        .eq('tenant_id', tenantId)\n\n      if (error) {\n        throw new Error(`Failed to revoke guest access: ${error.message}`)\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error revoking guest access:', error)\n      throw error\n    }\n  }\n\n  async getGuestAccess(tenantId: string, guestId: string): Promise<GuestAccess | null> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: guestAccess } = await supabase\n        .from('guest_access')\n        .select(\n          `\n          *,\n          inviter:profiles!guest_access_invited_by_fkey (\n            id,\n            full_name,\n            email\n          ),\n          role:roles (\n            id,\n            name,\n            display_name\n          )\n        `\n        )\n        .eq('id', guestId)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      return guestAccess\n    } catch (error) {\n      console.error('Error getting guest access:', error)\n      return null\n    }\n  }\n\n  async getActiveGuestAccess(tenantId: string): Promise<GuestAccess[]> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: guestAccess, error } = await supabase\n        .from('guest_access')\n        .select(\n          `\n          *,\n          inviter:profiles!guest_access_invited_by_fkey (\n            id,\n            full_name,\n            email\n          )\n        `\n        )\n        .eq('tenant_id', tenantId)\n        .eq('is_active', true)\n        .gte('expires_at', new Date().toISOString())\n        .order('expires_at', { ascending: true })\n\n      if (error) {\n        throw new Error(`Failed to get active guest access: ${error.message}`)\n      }\n\n      return guestAccess || []\n    } catch (error) {\n      console.error('Error getting active guest access:', error)\n      throw error\n    }\n  }\n\n  // =====================================================\n  // CLEANUP AND MAINTENANCE\n  // =====================================================\n\n  async cleanupExpiredDelegations(tenantId?: string): Promise<number> {\n    try {\n      const supabase = await this.getSupabase()\n\n      let query = supabase\n        .from('permission_delegations')\n        .update({ status: 'expired' })\n        .eq('status', 'active')\n        .lt('expires_at', new Date().toISOString())\n\n      if (tenantId) {\n        query = query.eq('tenant_id', tenantId)\n      }\n\n      const { error, count } = await query\n\n      if (error) {\n        throw new Error(`Failed to cleanup expired delegations: ${error.message}`)\n      }\n\n      return count || 0\n    } catch (error) {\n      console.error('Error cleaning up expired delegations:', error)\n      throw error\n    }\n  }\n\n  async cleanupExpiredGuestAccess(tenantId?: string): Promise<number> {\n    try {\n      const supabase = await this.getSupabase()\n\n      let query = supabase\n        .from('guest_access')\n        .update({ is_active: false })\n        .eq('is_active', true)\n        .lt('expires_at', new Date().toISOString())\n\n      if (tenantId) {\n        query = query.eq('tenant_id', tenantId)\n      }\n\n      const { error, count } = await query\n\n      if (error) {\n        throw new Error(`Failed to cleanup expired guest access: ${error.message}`)\n      }\n\n      return count || 0\n    } catch (error) {\n      console.error('Error cleaning up expired guest access:', error)\n      throw error\n    }\n  }\n\n  // =====================================================\n  // VALIDATION HELPERS\n  // =====================================================\n\n  private async validateDelegatorPermissions(\n    _tenantId: string,\n    _delegatorId: string,\n    _permissionNames: string[]\n  ): Promise<boolean> {\n    try {\n      // This would integrate with the permission service to check if the delegator has all the permissions\n      // For now, we'll assume they do (this should be implemented with actual permission checking)\n      return true\n    } catch (error) {\n      console.error('Error validating delegator permissions:', error)\n      return false\n    }\n  }\n\n  private async validateDelegatorRole(\n    tenantId: string,\n    delegatorId: string,\n    roleId: string\n  ): Promise<boolean> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: userRole } = await supabase\n        .from('user_roles')\n        .select('id')\n        .eq('tenant_id', tenantId)\n        .eq('user_id', delegatorId)\n        .eq('role_id', roleId)\n        .eq('is_active', true)\n        .single()\n\n      return !!userRole\n    } catch (error) {\n      console.error('Error validating delegator role:', error)\n      return false\n    }\n  }\n\n  // =====================================================\n  // ANALYTICS AND REPORTING\n  // =====================================================\n\n  async getDelegationStats(\n    tenantId: string,\n    days = 30\n  ): Promise<{\n    total_delegations: number\n    active_delegations: number\n    expired_delegations: number\n    revoked_delegations: number\n    guest_access_count: number\n    most_delegated_permissions: { permission_name: string; count: number }[]\n  }> {\n    try {\n      const supabase = await this.getSupabase()\n      const since = new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString()\n\n      // Get delegation counts\n      const { data: delegations } = await supabase\n        .from('permission_delegations')\n        .select('status, permission_ids')\n        .eq('tenant_id', tenantId)\n        .gte('created_at', since)\n\n      const totalDelegations = delegations?.length || 0\n      const activeDelegations = delegations?.filter((d: any) => d.status === 'active').length || 0\n      const expiredDelegations = delegations?.filter((d: any) => d.status === 'expired').length || 0\n      const revokedDelegations = delegations?.filter((d: any) => d.status === 'revoked').length || 0\n\n      // Get guest access count\n      const { data: guestAccess } = await supabase\n        .from('guest_access')\n        .select('id')\n        .eq('tenant_id', tenantId)\n        .eq('is_active', true)\n\n      const guestAccessCount = guestAccess?.length || 0\n\n      // Get most delegated permissions (placeholder)\n      const mostDelegatedPermissions = [\n        { permission_name: 'read:asset', count: 15 },\n        { permission_name: 'update:asset', count: 8 },\n        { permission_name: 'create:report', count: 5 },\n      ]\n\n      return {\n        total_delegations: totalDelegations,\n        active_delegations: activeDelegations,\n        expired_delegations: expiredDelegations,\n        revoked_delegations: revokedDelegations,\n        guest_access_count: guestAccessCount,\n        most_delegated_permissions: mostDelegatedPermissions,\n      }\n    } catch (error) {\n      console.error('Error getting delegation stats:', error)\n      throw error\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\services\\department-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DepartmentRoleInsert' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userCountMap' is assigned a value but never used.","line":360,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":360,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":396,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":396,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10792,10795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10792,10795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":595,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":595,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16129,16132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16129,16132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":607,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":607,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16474,16477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16474,16477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":637,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":637,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17222,17225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17222,17225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'days' is assigned a value but never used.","line":725,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":725,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":756,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":756,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20396,20399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20396,20399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// DEPARTMENT SERVICE\n// =====================================================\n// Service for managing organizational departments and hierarchy\n\nimport { createClient } from '@/lib/supabase/server'\nimport {\n  Department,\n  DepartmentInsert,\n  DepartmentUpdate,\n  DepartmentWithHierarchy,\n  UserDepartment,\n  DepartmentRole,\n  DepartmentRoleInsert,\n  DepartmentHierarchyNode,\n  DepartmentAnalytics,\n} from '@/lib/types/rbac'\n\nexport class DepartmentService {\n  private async getSupabase() {\n    return createClient()\n  }\n\n  // =====================================================\n  // DEPARTMENT MANAGEMENT\n  // =====================================================\n\n  async createDepartment(\n    tenantId: string,\n    departmentData: Omit<DepartmentInsert, 'tenant_id' | 'created_by'>,\n    createdBy: string\n  ): Promise<Department> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Validate department name uniqueness\n      const { data: existingDept } = await supabase\n        .from('departments')\n        .select('id')\n        .eq('tenant_id', tenantId)\n        .eq('name', departmentData.name)\n        .single()\n\n      if (existingDept) {\n        throw new Error(`Department with name '${departmentData.name}' already exists`)\n      }\n\n      // Validate department code uniqueness if provided\n      if (departmentData.code) {\n        const { data: existingCode } = await supabase\n          .from('departments')\n          .select('id')\n          .eq('tenant_id', tenantId)\n          .eq('code', departmentData.code)\n          .single()\n\n        if (existingCode) {\n          throw new Error(`Department with code '${departmentData.code}' already exists`)\n        }\n      }\n\n      // Validate parent department exists if specified\n      if (departmentData.parent_department_id) {\n        const { data: parentDept } = await supabase\n          .from('departments')\n          .select('id, level')\n          .eq('id', departmentData.parent_department_id)\n          .eq('tenant_id', tenantId)\n          .single()\n\n        if (!parentDept) {\n          throw new Error('Parent department not found')\n        }\n\n        // Check hierarchy depth limit\n        if (parentDept.level >= 10) {\n          throw new Error('Maximum department hierarchy depth exceeded')\n        }\n      }\n\n      // Create department\n      const { data: department, error } = await supabase\n        .from('departments')\n        .insert({\n          ...departmentData,\n          tenant_id: tenantId,\n          created_by: createdBy,\n        })\n        .select()\n        .single()\n\n      if (error) {\n        throw new Error(`Failed to create department: ${error.message}`)\n      }\n\n      return department\n    } catch (error) {\n      console.error('Error creating department:', error)\n      throw error\n    }\n  }\n\n  async updateDepartment(\n    tenantId: string,\n    departmentId: string,\n    updates: DepartmentUpdate\n  ): Promise<Department> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Check if department exists\n      const { data: existingDept } = await supabase\n        .from('departments')\n        .select('id, name, code')\n        .eq('id', departmentId)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (!existingDept) {\n        throw new Error('Department not found')\n      }\n\n      // Validate name uniqueness if being updated\n      if (updates.name && updates.name !== existingDept.name) {\n        const { data: nameConflict } = await supabase\n          .from('departments')\n          .select('id')\n          .eq('tenant_id', tenantId)\n          .eq('name', updates.name)\n          .neq('id', departmentId)\n          .single()\n\n        if (nameConflict) {\n          throw new Error(`Department with name '${updates.name}' already exists`)\n        }\n      }\n\n      // Validate code uniqueness if being updated\n      if (updates.code && updates.code !== existingDept.code) {\n        const { data: codeConflict } = await supabase\n          .from('departments')\n          .select('id')\n          .eq('tenant_id', tenantId)\n          .eq('code', updates.code)\n          .neq('id', departmentId)\n          .single()\n\n        if (codeConflict) {\n          throw new Error(`Department with code '${updates.code}' already exists`)\n        }\n      }\n\n      // Validate parent department if being updated\n      if (updates.parent_department_id) {\n        const { data: parentDept } = await supabase\n          .from('departments')\n          .select('id, level, hierarchy_path')\n          .eq('id', updates.parent_department_id)\n          .eq('tenant_id', tenantId)\n          .single()\n\n        if (!parentDept) {\n          throw new Error('Parent department not found')\n        }\n\n        // Prevent circular references\n        if (parentDept.hierarchy_path?.includes(departmentId)) {\n          throw new Error('Circular reference detected in department hierarchy')\n        }\n      }\n\n      const { data: department, error } = await supabase\n        .from('departments')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', departmentId)\n        .eq('tenant_id', tenantId)\n        .select()\n        .single()\n\n      if (error) {\n        throw new Error(`Failed to update department: ${error.message}`)\n      }\n\n      return department\n    } catch (error) {\n      console.error('Error updating department:', error)\n      throw error\n    }\n  }\n\n  async deleteDepartment(tenantId: string, departmentId: string): Promise<boolean> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Check if department exists\n      const { data: department } = await supabase\n        .from('departments')\n        .select('id, name')\n        .eq('id', departmentId)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (!department) {\n        throw new Error('Department not found')\n      }\n\n      // Check if department has users assigned\n      const { data: userDepts } = await supabase\n        .from('user_departments')\n        .select('id')\n        .eq('department_id', departmentId)\n        .eq('tenant_id', tenantId)\n        .limit(1)\n\n      if (userDepts && userDepts.length > 0) {\n        throw new Error('Cannot delete department with assigned users')\n      }\n\n      // Check if department has child departments\n      const { data: childDepts } = await supabase\n        .from('departments')\n        .select('id')\n        .eq('parent_department_id', departmentId)\n        .eq('tenant_id', tenantId)\n        .limit(1)\n\n      if (childDepts && childDepts.length > 0) {\n        throw new Error('Cannot delete department with child departments')\n      }\n\n      // Delete department roles first\n      await supabase\n        .from('department_roles')\n        .delete()\n        .eq('department_id', departmentId)\n        .eq('tenant_id', tenantId)\n\n      // Delete the department\n      const { error } = await supabase\n        .from('departments')\n        .delete()\n        .eq('id', departmentId)\n        .eq('tenant_id', tenantId)\n\n      if (error) {\n        throw new Error(`Failed to delete department: ${error.message}`)\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error deleting department:', error)\n      throw error\n    }\n  }\n\n  async getDepartment(\n    tenantId: string,\n    departmentId: string\n  ): Promise<DepartmentWithHierarchy | null> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: department } = await supabase\n        .from('departments')\n        .select(\n          `\n          *,\n          manager:profiles!departments_manager_id_fkey (\n            id,\n            full_name,\n            email\n          )\n        `\n        )\n        .eq('id', departmentId)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (!department) {\n        return null\n      }\n\n      // Get user count\n      const { data: userCount } = await supabase\n        .from('user_departments')\n        .select('id')\n        .eq('department_id', departmentId)\n        .eq('tenant_id', tenantId)\n\n      // Get department roles\n      const { data: deptRoles } = await supabase\n        .from('department_roles')\n        .select(\n          `\n          *,\n          roles (\n            id,\n            name,\n            display_name,\n            description\n          )\n        `\n        )\n        .eq('department_id', departmentId)\n        .eq('tenant_id', tenantId)\n\n      return {\n        ...department,\n        user_count: userCount?.length || 0,\n        roles: deptRoles?.map(dr => dr.roles).filter(Boolean) || [],\n      }\n    } catch (error) {\n      console.error('Error getting department:', error)\n      throw error\n    }\n  }\n\n  async getDepartments(tenantId: string, includeInactive = false): Promise<Department[]> {\n    try {\n      const supabase = await this.getSupabase()\n\n      let query = supabase\n        .from('departments')\n        .select('*')\n        .eq('tenant_id', tenantId)\n        .order('level', { ascending: true })\n        .order('name', { ascending: true })\n\n      if (!includeInactive) {\n        query = query.eq('is_active', true)\n      }\n\n      const { data: departments, error } = await query\n\n      if (error) {\n        throw new Error(`Failed to get departments: ${error.message}`)\n      }\n\n      return departments || []\n    } catch (error) {\n      console.error('Error getting departments:', error)\n      throw error\n    }\n  }\n\n  async getDepartmentHierarchy(tenantId: string): Promise<DepartmentHierarchyNode[]> {\n    try {\n      const supabase = await this.getSupabase()\n      const departments = await this.getDepartments(tenantId)\n\n      // Get user counts for each department\n      const { data: userCounts } = await supabase\n        .from('user_departments')\n        .select('department_id')\n        .eq('tenant_id', tenantId)\n\n      const userCountMap =\n        userCounts?.reduce(\n          (acc, ud) => {\n            acc[ud.department_id] = (acc[ud.department_id] || 0) + 1\n            return acc\n          },\n          {} as Record<string, number>\n        ) || {}\n\n      // Get roles for each department\n      const { data: deptRoles } = await supabase\n        .from('department_roles')\n        .select(\n          `\n          department_id,\n          roles (\n            id,\n            name,\n            display_name,\n            description\n          )\n        `\n        )\n        .eq('tenant_id', tenantId)\n\n      const roleMap =\n        deptRoles?.reduce(\n          (acc, dr) => {\n            if (!acc[dr.department_id]) {\n              acc[dr.department_id] = []\n            }\n            if (dr.roles) {\n              acc[dr.department_id].push(dr.roles)\n            }\n            return acc\n          },\n          {} as Record<string, any[]>\n        ) || {}\n\n      // Build hierarchy\n      const deptMap = new Map<string, DepartmentHierarchyNode>()\n      const rootNodes: DepartmentHierarchyNode[] = []\n\n      // Create nodes\n      departments.forEach(dept => {\n        const node: DepartmentHierarchyNode = {\n          department: dept,\n          children: [],\n          users: [], // Will be populated if needed\n          roles: roleMap[dept.id] || [],\n        }\n        deptMap.set(dept.id, node)\n      })\n\n      // Build hierarchy\n      departments.forEach(dept => {\n        const node = deptMap.get(dept.id)!\n        if (dept.parent_department_id) {\n          const parent = deptMap.get(dept.parent_department_id)\n          if (parent) {\n            parent.children.push(node)\n          }\n        } else {\n          rootNodes.push(node)\n        }\n      })\n\n      return rootNodes\n    } catch (error) {\n      console.error('Error getting department hierarchy:', error)\n      throw error\n    }\n  }\n\n  // =====================================================\n  // USER-DEPARTMENT ASSIGNMENTS\n  // =====================================================\n\n  async assignUserToDepartment(\n    tenantId: string,\n    userId: string,\n    departmentId: string,\n    isPrimary = false,\n    roleInDepartment?: string,\n    assignedBy?: string\n  ): Promise<UserDepartment> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Validate department exists\n      const { data: department } = await supabase\n        .from('departments')\n        .select('id, is_active')\n        .eq('id', departmentId)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (!department) {\n        throw new Error('Department not found')\n      }\n\n      if (!department.is_active) {\n        throw new Error('Cannot assign user to inactive department')\n      }\n\n      // Validate user exists in tenant\n      const { data: user } = await supabase\n        .from('profiles')\n        .select('id')\n        .eq('id', userId)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (!user) {\n        throw new Error('User not found in tenant')\n      }\n\n      // If setting as primary, unset other primary assignments\n      if (isPrimary) {\n        await supabase\n          .from('user_departments')\n          .update({ is_primary: false })\n          .eq('user_id', userId)\n          .eq('tenant_id', tenantId)\n      }\n\n      const { data: assignment, error } = await supabase\n        .from('user_departments')\n        .insert({\n          tenant_id: tenantId,\n          user_id: userId,\n          department_id: departmentId,\n          is_primary: isPrimary,\n          role_in_department: roleInDepartment,\n          assigned_by: assignedBy || userId,\n        })\n        .select()\n        .single()\n\n      if (error) {\n        if (error.code === '23505') {\n          // Unique constraint violation\n          // Update existing assignment\n          const { data: updated, error: updateError } = await supabase\n            .from('user_departments')\n            .update({\n              is_primary: isPrimary,\n              role_in_department: roleInDepartment,\n              assigned_by: assignedBy || userId,\n              assigned_at: new Date().toISOString(),\n            })\n            .eq('tenant_id', tenantId)\n            .eq('user_id', userId)\n            .eq('department_id', departmentId)\n            .select()\n            .single()\n\n          if (updateError) {\n            throw new Error(`Failed to update department assignment: ${updateError.message}`)\n          }\n\n          return updated\n        }\n\n        throw new Error(`Failed to assign user to department: ${error.message}`)\n      }\n\n      return assignment\n    } catch (error) {\n      console.error('Error assigning user to department:', error)\n      throw error\n    }\n  }\n\n  async removeUserFromDepartment(\n    tenantId: string,\n    userId: string,\n    departmentId: string\n  ): Promise<boolean> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { error } = await supabase\n        .from('user_departments')\n        .delete()\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .eq('department_id', departmentId)\n\n      if (error) {\n        throw new Error(`Failed to remove user from department: ${error.message}`)\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error removing user from department:', error)\n      throw error\n    }\n  }\n\n  async getUserDepartments(\n    tenantId: string,\n    userId: string\n  ): Promise<(Department & { is_primary: boolean; role_in_department?: string })[]> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: userDepts, error } = await supabase\n        .from('user_departments')\n        .select(\n          `\n          is_primary,\n          role_in_department,\n          departments (\n            id,\n            name,\n            display_name,\n            description,\n            code,\n            department_type,\n            level,\n            hierarchy_path,\n            is_active\n          )\n        `\n        )\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .order('is_primary', { ascending: false })\n\n      if (error) {\n        throw new Error(`Failed to get user departments: ${error.message}`)\n      }\n\n      return (\n        userDepts?.map((ud: any) => ({\n          ...ud.departments,\n          is_primary: ud.is_primary,\n          role_in_department: ud.role_in_department,\n        })) || []\n      )\n    } catch (error) {\n      console.error('Error getting user departments:', error)\n      throw error\n    }\n  }\n\n  async getDepartmentUsers(tenantId: string, departmentId: string): Promise<any[]> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: deptUsers, error } = await supabase\n        .from('user_departments')\n        .select(\n          `\n          is_primary,\n          role_in_department,\n          assigned_at,\n          profiles (\n            id,\n            email,\n            full_name,\n            avatar_url,\n            job_title\n          )\n        `\n        )\n        .eq('tenant_id', tenantId)\n        .eq('department_id', departmentId)\n        .order('is_primary', { ascending: false })\n        .order('assigned_at', { ascending: false })\n\n      if (error) {\n        throw new Error(`Failed to get department users: ${error.message}`)\n      }\n\n      return (\n        deptUsers?.map((du: any) => ({\n          ...du.profiles,\n          is_primary: du.is_primary,\n          role_in_department: du.role_in_department,\n          assigned_at: du.assigned_at,\n        })) || []\n      )\n    } catch (error) {\n      console.error('Error getting department users:', error)\n      throw error\n    }\n  }\n\n  // =====================================================\n  // DEPARTMENT ROLES\n  // =====================================================\n\n  async assignRoleToDepartment(\n    tenantId: string,\n    departmentId: string,\n    roleId: string,\n    isDefaultRole = false,\n    maxUsers?: number,\n    createdBy?: string\n  ): Promise<DepartmentRole> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: deptRole, error } = await supabase\n        .from('department_roles')\n        .insert({\n          tenant_id: tenantId,\n          department_id: departmentId,\n          role_id: roleId,\n          is_default_role: isDefaultRole,\n          max_users: maxUsers,\n          created_by: createdBy || 'system',\n        })\n        .select()\n        .single()\n\n      if (error) {\n        if (error.code === '23505') {\n          throw new Error('Role is already assigned to this department')\n        }\n        throw new Error(`Failed to assign role to department: ${error.message}`)\n      }\n\n      return deptRole\n    } catch (error) {\n      console.error('Error assigning role to department:', error)\n      throw error\n    }\n  }\n\n  async removeRoleFromDepartment(\n    tenantId: string,\n    departmentId: string,\n    roleId: string\n  ): Promise<boolean> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { error } = await supabase\n        .from('department_roles')\n        .delete()\n        .eq('tenant_id', tenantId)\n        .eq('department_id', departmentId)\n        .eq('role_id', roleId)\n\n      if (error) {\n        throw new Error(`Failed to remove role from department: ${error.message}`)\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error removing role from department:', error)\n      throw error\n    }\n  }\n\n  // =====================================================\n  // ANALYTICS AND REPORTING\n  // =====================================================\n\n  async getDepartmentAnalytics(\n    tenantId: string,\n    departmentId: string,\n    days = 30\n  ): Promise<DepartmentAnalytics> {\n    try {\n      const supabase = await this.getSupabase()\n      const department = await this.getDepartment(tenantId, departmentId)\n      if (!department) {\n        throw new Error('Department not found')\n      }\n\n      // Get user count\n      const users = await this.getDepartmentUsers(tenantId, departmentId)\n      const userCount = users.length\n\n      // Get role distribution\n      const { data: roleDistribution } = await supabase\n        .from('user_roles')\n        .select(\n          `\n          role_id,\n          roles (name, display_name)\n        `\n        )\n        .eq('tenant_id', tenantId)\n        .eq('is_active', true)\n        .in(\n          'user_id',\n          users.map(u => u.id)\n        )\n\n      const roleDistMap =\n        roleDistribution?.reduce(\n          (acc: Record<string, number>, ur: any) => {\n            const roleName = ur.roles?.display_name || ur.roles?.name || 'Unknown'\n            acc[roleName] = (acc[roleName] || 0) + 1\n            return acc\n          },\n          {} as Record<string, number>\n        ) || {}\n\n      const roleDistributionArray = Object.entries(roleDistMap).map(([role_name, user_count]) => ({\n        role_name,\n        user_count,\n      }))\n\n      // Get permission usage (placeholder - would need actual implementation)\n      const permissionUsage = [\n        { permission_name: 'read:asset', usage_count: 150 },\n        { permission_name: 'create:asset', usage_count: 45 },\n        { permission_name: 'update:asset', usage_count: 89 },\n      ]\n\n      return {\n        department_id: departmentId,\n        department_name: department.name,\n        user_count: userCount,\n        role_distribution: roleDistributionArray,\n        permission_usage: permissionUsage,\n      }\n    } catch (error) {\n      console.error('Error getting department analytics:', error)\n      throw error\n    }\n  }\n\n  // =====================================================\n  // UTILITY METHODS\n  // =====================================================\n\n  async validateDepartmentHierarchy(tenantId: string): Promise<boolean> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Check for circular references\n      const { data: departments } = await supabase\n        .from('departments')\n        .select('id, parent_department_id, hierarchy_path')\n        .eq('tenant_id', tenantId)\n\n      if (!departments) return true\n\n      for (const dept of departments) {\n        if (dept.parent_department_id && dept.hierarchy_path?.includes(dept.id)) {\n          throw new Error(`Circular reference detected for department ${dept.id}`)\n        }\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error validating department hierarchy:', error)\n      throw error\n    }\n  }\n\n  async searchDepartments(tenantId: string, query: string, limit = 10): Promise<Department[]> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: departments, error } = await supabase\n        .from('departments')\n        .select('*')\n        .eq('tenant_id', tenantId)\n        .eq('is_active', true)\n        .or(`name.ilike.%${query}%,display_name.ilike.%${query}%,code.ilike.%${query}%`)\n        .limit(limit)\n        .order('name')\n\n      if (error) {\n        throw new Error(`Failed to search departments: ${error.message}`)\n      }\n\n      return departments || []\n    } catch (error) {\n      console.error('Error searching departments:', error)\n      throw error\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\services\\enhanced-redis-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1528,1531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1528,1531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1756,1759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1756,1759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4436,4439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4436,4439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Redis Service for AssetTrackerPro\n * Provides advanced Redis operations with fallback mechanisms\n */\n\nimport { redis, hasRedis, redisUtils } from '@/lib/config/redis'\nimport { Ratelimit } from '@upstash/ratelimit'\n\nexport class EnhancedRedisService {\n  private static instance: EnhancedRedisService\n\n  private constructor() {}\n\n  public static getInstance(): EnhancedRedisService {\n    if (!EnhancedRedisService.instance) {\n      EnhancedRedisService.instance = new EnhancedRedisService()\n    }\n    return EnhancedRedisService.instance\n  }\n\n  /**\n   * Check if Redis is available\n   */\n  public isAvailable(): boolean {\n    return hasRedis && redis !== null\n  }\n\n  /**\n   * Cache management\n   */\n  public async cache<T>(\n    key: string,\n    fetchFunction: () => Promise<T>,\n    ttlSeconds: number = 300\n  ): Promise<T> {\n    if (!this.isAvailable()) {\n      return await fetchFunction()\n    }\n\n    try {\n      // Try to get from cache first\n      const cached = await redisUtils.get(key)\n      if (cached !== null) {\n        return typeof cached === 'string' ? JSON.parse(cached) : cached\n      }\n\n      // Fetch fresh data\n      const freshData = await fetchFunction()\n\n      // Cache the result\n      await redisUtils.set(key, JSON.stringify(freshData), ttlSeconds)\n\n      return freshData\n    } catch (error) {\n      console.error('Cache operation failed:', error)\n      return await fetchFunction()\n    }\n  }\n\n  /**\n   * Session management\n   */\n  public async setSession(\n    sessionId: string,\n    data: any,\n    ttlSeconds: number = 3600\n  ): Promise<boolean> {\n    const key = `session:${sessionId}`\n    return await redisUtils.set(key, JSON.stringify(data), ttlSeconds)\n  }\n\n  public async getSession(sessionId: string): Promise<any> {\n    const key = `session:${sessionId}`\n    const data = await redisUtils.get(key)\n    return data ? JSON.parse(data) : null\n  }\n\n  public async deleteSession(sessionId: string): Promise<boolean> {\n    const key = `session:${sessionId}`\n    return await redisUtils.del(key)\n  }\n\n  /**\n   * Rate limiting\n   */\n  public async checkRateLimit(\n    identifier: string,\n    limit: number = 60,\n    windowSeconds: number = 60\n  ): Promise<{ allowed: boolean; remaining: number; resetTime: number }> {\n    if (!this.isAvailable()) {\n      return { allowed: true, remaining: limit - 1, resetTime: Date.now() + windowSeconds * 1000 }\n    }\n\n    try {\n      const ratelimit = new Ratelimit({\n        redis: redis!,\n        limiter: Ratelimit.fixedWindow(limit, `${windowSeconds}s`),\n        analytics: true,\n      })\n\n      const result = await ratelimit.limit(identifier)\n\n      return {\n        allowed: result.success,\n        remaining: result.remaining,\n        resetTime: result.reset,\n      }\n    } catch (error) {\n      console.error('Rate limit check failed:', error)\n      return { allowed: true, remaining: limit - 1, resetTime: Date.now() + windowSeconds * 1000 }\n    }\n  }\n\n  /**\n   * Distributed locking\n   */\n  public async acquireLock(\n    lockKey: string,\n    ttlSeconds: number = 30,\n    retryAttempts: number = 3\n  ): Promise<string | null> {\n    if (!this.isAvailable()) {\n      return `fallback-lock-${Date.now()}`\n    }\n\n    const lockValue = `lock:${Date.now()}:${Math.random()}`\n    const key = `lock:${lockKey}`\n\n    for (let attempt = 0; attempt < retryAttempts; attempt++) {\n      try {\n        const result = await redis!.set(key, lockValue, { ex: ttlSeconds, nx: true })\n        if (result === 'OK') {\n          return lockValue\n        }\n\n        // Wait before retry\n        await new Promise(resolve => setTimeout(resolve, 100 * (attempt + 1)))\n      } catch (error) {\n        console.error(`Lock acquisition attempt ${attempt + 1} failed:`, error)\n      }\n    }\n\n    return null\n  }\n\n  public async releaseLock(lockKey: string, lockValue: string): Promise<boolean> {\n    if (!this.isAvailable()) {\n      return true // Fallback always succeeds\n    }\n\n    try {\n      const key = `lock:${lockKey}`\n      const script = `\n        if redis.call(\"get\", KEYS[1]) == ARGV[1] then\n          return redis.call(\"del\", KEYS[1])\n        else\n          return 0\n        end\n      `\n\n      const result = await redis!.eval(script, [key], [lockValue])\n      return result === 1\n    } catch (error) {\n      console.error('Lock release failed:', error)\n      return false\n    }\n  }\n\n  /**\n   * Pub/Sub messaging\n   */\n  public async publish(channel: string, message: any): Promise<boolean> {\n    if (!this.isAvailable()) {\n      console.warn('Redis not available, message not published:', { channel, message })\n      return false\n    }\n\n    try {\n      await redis!.publish(channel, JSON.stringify(message))\n      return true\n    } catch (error) {\n      console.error('Publish failed:', error)\n      return false\n    }\n  }\n\n  /**\n   * Analytics and metrics\n   */\n  public async incrementCounter(\n    key: string,\n    increment: number = 1,\n    ttlSeconds?: number\n  ): Promise<number> {\n    if (!this.isAvailable()) {\n      return increment\n    }\n\n    try {\n      const result = await redis!.incrby(key, increment)\n      if (ttlSeconds && result === increment) {\n        await redis!.expire(key, ttlSeconds)\n      }\n      return result\n    } catch (error) {\n      console.error('Counter increment failed:', error)\n      return increment\n    }\n  }\n\n  public async getCounter(key: string): Promise<number> {\n    const value = await redisUtils.get(key, 0)\n    return typeof value === 'number' ? value : parseInt(value) || 0\n  }\n\n  /**\n   * Health check\n   */\n  public async healthCheck(): Promise<{\n    status: 'healthy' | 'unhealthy' | 'unavailable'\n    latency?: number\n    error?: string\n  }> {\n    if (!this.isAvailable()) {\n      return { status: 'unavailable' }\n    }\n\n    try {\n      const start = Date.now()\n      await redis!.ping()\n      const latency = Date.now() - start\n\n      return {\n        status: 'healthy',\n        latency,\n      }\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Cleanup expired keys (maintenance)\n   */\n  public async cleanup(pattern: string = '*'): Promise<number> {\n    if (!this.isAvailable()) {\n      return 0\n    }\n\n    try {\n      // Note: SCAN is more efficient than KEYS for large datasets\n      const keys = await redis!.keys(pattern)\n      if (keys.length === 0) return 0\n\n      await redis!.del(...keys)\n      return keys.length\n    } catch (error) {\n      console.error('Cleanup failed:', error)\n      return 0\n    }\n  }\n}\n\n// Export singleton instance\nexport const enhancedRedisService = EnhancedRedisService.getInstance()\nexport default enhancedRedisService\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\services\\mfa-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MfaMethodUpdate' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MfaVerificationAttempt' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":698,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":698,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19688,19691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19688,19691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// MULTI-FACTOR AUTHENTICATION SERVICE\n// =====================================================\n// Service for managing MFA methods, verification, and security\n\nimport { createClient } from '@/lib/supabase/server'\nimport {\n  MfaMethod,\n  MfaMethodInsert,\n  MfaMethodUpdate,\n  MfaVerificationAttempt,\n  SecurityEventInsert,\n} from '@/lib/types/database'\nimport { authenticator } from 'otplib'\nimport crypto from 'crypto'\n\nexport interface MfaSetupResult {\n  success: boolean\n  method?: MfaMethod\n  secret?: string\n  qrCode?: string\n  backupCodes?: string[]\n  error?: string\n}\n\nexport interface MfaVerificationResult {\n  success: boolean\n  method?: MfaMethod\n  requiresBackup?: boolean\n  error?: string\n}\n\nexport interface MfaStatusResult {\n  isEnabled: boolean\n  methods: MfaMethod[]\n  primaryMethod?: MfaMethod\n  backupCodesRemaining: number\n}\n\nexport class MfaService {\n  private async getSupabase() {\n    return createClient()\n  }\n\n  // =====================================================\n  // MFA SETUP AND MANAGEMENT\n  // =====================================================\n\n  /**\n   * Set up TOTP (Time-based One-Time Password) authentication\n   */\n  async setupTOTP(\n    tenantId: string,\n    userId: string,\n    methodName: string,\n    userEmail: string\n  ): Promise<MfaSetupResult> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Generate TOTP secret\n      const secret = authenticator.generateSecret()\n      const serviceName = 'AssetTracker Pro'\n      const otpAuthUrl = authenticator.keyuri(userEmail, serviceName, secret)\n\n      // Encrypt the secret\n      const encryptedSecret = this.encryptSecret(secret)\n\n      // Generate backup codes\n      const backupCodes = this.generateBackupCodes()\n      const encryptedBackupCodes = backupCodes.map(code => this.encryptSecret(code))\n\n      // Create MFA method record\n      const methodData: MfaMethodInsert = {\n        tenant_id: tenantId,\n        user_id: userId,\n        method_type: 'totp',\n        method_name: methodName,\n        secret_encrypted: encryptedSecret,\n        backup_codes: encryptedBackupCodes,\n        is_verified: false,\n        is_primary: false,\n      }\n\n      const { data: method, error } = await supabase\n        .from('mfa_methods')\n        .insert(methodData)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error creating TOTP method:', error)\n        return { success: false, error: error.message }\n      }\n\n      // Generate QR code data URL\n      const qrCode = await this.generateQRCode(otpAuthUrl)\n\n      return {\n        success: true,\n        method,\n        secret,\n        qrCode,\n        backupCodes,\n      }\n    } catch (error) {\n      console.error('Error setting up TOTP:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Set up SMS-based MFA\n   */\n  async setupSMS(\n    tenantId: string,\n    userId: string,\n    methodName: string,\n    phoneNumber: string\n  ): Promise<MfaSetupResult> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Encrypt phone number\n      const encryptedPhone = this.encryptSecret(phoneNumber)\n\n      // Create MFA method record\n      const methodData: MfaMethodInsert = {\n        tenant_id: tenantId,\n        user_id: userId,\n        method_type: 'sms',\n        method_name: methodName,\n        secret_encrypted: encryptedPhone,\n        is_verified: false,\n        is_primary: false,\n      }\n\n      const { data: method, error } = await supabase\n        .from('mfa_methods')\n        .insert(methodData)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error creating SMS method:', error)\n        return { success: false, error: error.message }\n      }\n\n      // Send verification SMS\n      const verificationCode = this.generateVerificationCode()\n      await this.sendSMSVerification(phoneNumber, verificationCode)\n\n      // Store verification attempt\n      await this.createVerificationAttempt(tenantId, userId, method.id, 'setup', verificationCode)\n\n      return {\n        success: true,\n        method,\n      }\n    } catch (error) {\n      console.error('Error setting up SMS:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Set up email-based MFA\n   */\n  async setupEmail(\n    tenantId: string,\n    userId: string,\n    methodName: string,\n    email: string\n  ): Promise<MfaSetupResult> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Encrypt email\n      const encryptedEmail = this.encryptSecret(email)\n\n      // Create MFA method record\n      const methodData: MfaMethodInsert = {\n        tenant_id: tenantId,\n        user_id: userId,\n        method_type: 'email',\n        method_name: methodName,\n        secret_encrypted: encryptedEmail,\n        is_verified: false,\n        is_primary: false,\n      }\n\n      const { data: method, error } = await supabase\n        .from('mfa_methods')\n        .insert(methodData)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error creating email method:', error)\n        return { success: false, error: error.message }\n      }\n\n      // Send verification email\n      const verificationCode = this.generateVerificationCode()\n      await this.sendEmailVerification(email, verificationCode)\n\n      // Store verification attempt\n      await this.createVerificationAttempt(tenantId, userId, method.id, 'setup', verificationCode)\n\n      return {\n        success: true,\n        method,\n      }\n    } catch (error) {\n      console.error('Error setting up email MFA:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  // =====================================================\n  // MFA VERIFICATION\n  // =====================================================\n\n  /**\n   * Verify MFA code during login or setup\n   */\n  async verifyMfaCode(\n    tenantId: string,\n    userId: string,\n    methodId: string,\n    code: string,\n    attemptType: 'login' | 'setup' | 'recovery' = 'login'\n  ): Promise<MfaVerificationResult> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Get MFA method\n      const { data: method, error: methodError } = await supabase\n        .from('mfa_methods')\n        .select('*')\n        .eq('id', methodId)\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .single()\n\n      if (methodError || !method) {\n        return { success: false, error: 'MFA method not found' }\n      }\n\n      let isValid = false\n      let usedBackupCode = false\n\n      // Verify based on method type\n      switch (method.method_type) {\n        case 'totp':\n          isValid = await this.verifyTOTPCode(method, code)\n          break\n        case 'sms':\n        case 'email':\n          isValid = await this.verifyTemporaryCode(method, code)\n          break\n        case 'backup_codes': {\n          const backupResult = await this.verifyBackupCodeInternal(method, code)\n          isValid = backupResult.valid\n          usedBackupCode = backupResult.used\n          break\n        }\n      }\n\n      // Create verification attempt record\n      await this.createVerificationAttempt(tenantId, userId, methodId, attemptType, code, isValid)\n\n      if (!isValid) {\n        // Log security event for failed verification\n        await this.logSecurityEvent(tenantId, userId, 'mfa_failure', {\n          method_type: method.method_type,\n          method_name: method.method_name,\n          attempt_type: attemptType,\n        })\n\n        return { success: false, error: 'Invalid verification code' }\n      }\n\n      // Update method as verified if this is setup\n      if (attemptType === 'setup' && !method.is_verified) {\n        await supabase\n          .from('mfa_methods')\n          .update({\n            is_verified: true,\n            last_used_at: new Date().toISOString(),\n          })\n          .eq('id', methodId)\n      } else {\n        // Update last used timestamp\n        await supabase\n          .from('mfa_methods')\n          .update({ last_used_at: new Date().toISOString() })\n          .eq('id', methodId)\n      }\n\n      // If backup code was used, update the method\n      if (usedBackupCode) {\n        await this.updateMethodAfterBackupCodeUse(method, code)\n      }\n\n      // Log successful verification\n      await this.logSecurityEvent(tenantId, userId, 'mfa_success', {\n        method_type: method.method_type,\n        method_name: method.method_name,\n        attempt_type: attemptType,\n        used_backup_code: usedBackupCode,\n      })\n\n      return {\n        success: true,\n        method,\n        requiresBackup:\n          method.method_type !== 'backup_codes' &&\n          method.backup_codes &&\n          method.backup_codes.length <= 2,\n      }\n    } catch (error) {\n      console.error('Error verifying MFA code:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Get MFA status for user\n   */\n  async getMfaStatus(tenantId: string, userId: string): Promise<MfaStatusResult> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: methods, error } = await supabase\n        .from('mfa_methods')\n        .select('*')\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .eq('is_verified', true)\n        .order('created_at', { ascending: true })\n\n      if (error) {\n        console.error('Error getting MFA status:', error)\n        return {\n          isEnabled: false,\n          methods: [],\n          backupCodesRemaining: 0,\n        }\n      }\n\n      const primaryMethod = methods.find(m => m.is_primary)\n      const backupMethod = methods.find(m => m.method_type === 'backup_codes')\n      const backupCodesRemaining = backupMethod?.backup_codes?.length || 0\n\n      return {\n        isEnabled: methods.length > 0,\n        methods,\n        primaryMethod,\n        backupCodesRemaining,\n      }\n    } catch (error) {\n      console.error('Error getting MFA status:', error)\n      return {\n        isEnabled: false,\n        methods: [],\n        backupCodesRemaining: 0,\n      }\n    }\n  }\n\n  /**\n   * Disable MFA method\n   */\n  async disableMfaMethod(\n    tenantId: string,\n    userId: string,\n    methodId: string\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { error } = await supabase\n        .from('mfa_methods')\n        .delete()\n        .eq('id', methodId)\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n\n      if (error) {\n        console.error('Error disabling MFA method:', error)\n        return { success: false, error: error.message }\n      }\n\n      // Log security event\n      await this.logSecurityEvent(tenantId, userId, 'mfa_success', {\n        action: 'method_disabled',\n        method_id: methodId,\n      })\n\n      return { success: true }\n    } catch (error) {\n      console.error('Error disabling MFA method:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Verify MFA setup during initial configuration\n   */\n  async verifyMfaSetup(\n    tenantId: string,\n    userId: string,\n    code: string,\n    methodId?: string\n  ): Promise<{ success: boolean; backupCodes?: string[]; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Find the unverified TOTP method for this user\n      let method\n      if (methodId) {\n        const { data, error } = await supabase\n          .from('mfa_methods')\n          .select('*')\n          .eq('id', methodId)\n          .eq('tenant_id', tenantId)\n          .eq('user_id', userId)\n          .single()\n\n        if (error || !data) {\n          return { success: false, error: 'MFA method not found' }\n        }\n        method = data\n      } else {\n        // Find the most recent unverified TOTP method\n        const { data, error } = await supabase\n          .from('mfa_methods')\n          .select('*')\n          .eq('tenant_id', tenantId)\n          .eq('user_id', userId)\n          .eq('method_type', 'totp')\n          .eq('is_verified', false)\n          .order('created_at', { ascending: false })\n          .limit(1)\n          .single()\n\n        if (error || !data) {\n          return { success: false, error: 'No pending MFA setup found' }\n        }\n        method = data\n      }\n\n      // Verify the TOTP code\n      const isValid = await this.verifyTOTPCode(method, code)\n\n      if (!isValid) {\n        return { success: false, error: 'Invalid verification code' }\n      }\n\n      // Mark method as verified and primary if it's the first one\n      const { data: existingMethods } = await supabase\n        .from('mfa_methods')\n        .select('id')\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .eq('is_verified', true)\n\n      const isPrimary = !existingMethods || existingMethods.length === 0\n\n      await supabase\n        .from('mfa_methods')\n        .update({\n          is_verified: true,\n          is_primary: isPrimary,\n          verified_at: new Date().toISOString(),\n        })\n        .eq('id', method.id)\n\n      // Decrypt and return backup codes\n      const backupCodes =\n        method.backup_codes?.map((encryptedCode: string) => this.decryptSecret(encryptedCode)) || []\n\n      return {\n        success: true,\n        backupCodes,\n      }\n    } catch (error) {\n      console.error('Error verifying MFA setup:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  // =====================================================\n  // BACKUP CODES\n  // =====================================================\n\n  /**\n   * Generate new backup codes\n   */\n  async generateNewBackupCodes(\n    tenantId: string,\n    userId: string\n  ): Promise<{ success: boolean; backupCodes?: string[]; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Generate new backup codes\n      const backupCodes = this.generateBackupCodes()\n      const encryptedBackupCodes = backupCodes.map(code => this.encryptSecret(code))\n\n      // Check if backup codes method exists\n      const { data: existingMethod } = await supabase\n        .from('mfa_methods')\n        .select('*')\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .eq('method_type', 'backup_codes')\n        .single()\n\n      if (existingMethod) {\n        // Update existing method\n        const { error } = await supabase\n          .from('mfa_methods')\n          .update({ backup_codes: encryptedBackupCodes })\n          .eq('id', existingMethod.id)\n\n        if (error) {\n          return { success: false, error: error.message }\n        }\n      } else {\n        // Create new backup codes method\n        const methodData: MfaMethodInsert = {\n          tenant_id: tenantId,\n          user_id: userId,\n          method_type: 'backup_codes',\n          method_name: 'Backup Codes',\n          backup_codes: encryptedBackupCodes,\n          is_verified: true,\n          is_primary: false,\n        }\n\n        const { error } = await supabase.from('mfa_methods').insert(methodData)\n\n        if (error) {\n          return { success: false, error: error.message }\n        }\n      }\n\n      return {\n        success: true,\n        backupCodes,\n      }\n    } catch (error) {\n      console.error('Error generating backup codes:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  // =====================================================\n  // PRIVATE HELPER METHODS\n  // =====================================================\n\n  private async verifyTOTPCode(method: MfaMethod, code: string): Promise<boolean> {\n    try {\n      if (!method.secret_encrypted) return false\n\n      const secret = this.decryptSecret(method.secret_encrypted)\n      return authenticator.verify({ token: code, secret })\n    } catch (error) {\n      console.error('Error verifying TOTP code:', error)\n      return false\n    }\n  }\n\n  private async verifyTemporaryCode(method: MfaMethod, code: string): Promise<boolean> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Check for valid verification attempt\n      const { data: attempt } = await supabase\n        .from('mfa_verification_attempts')\n        .select('*')\n        .eq('mfa_method_id', method.id)\n        .eq('is_successful', false)\n        .gt('expires_at', new Date().toISOString())\n        .order('created_at', { ascending: false })\n        .limit(1)\n        .single()\n\n      if (!attempt || !attempt.code_hash) return false\n\n      const codeHash = crypto.createHash('sha256').update(code).digest('hex')\n      return codeHash === attempt.code_hash\n    } catch (error) {\n      console.error('Error verifying temporary code:', error)\n      return false\n    }\n  }\n\n  private async verifyBackupCodeInternal(\n    method: MfaMethod,\n    code: string\n  ): Promise<{ valid: boolean; used: boolean }> {\n    try {\n      if (!method.backup_codes) return { valid: false, used: false }\n\n      const codeHash = crypto.createHash('sha256').update(code).digest('hex')\n\n      for (const encryptedCode of method.backup_codes) {\n        const decryptedCode = this.decryptSecret(encryptedCode)\n        const storedHash = crypto.createHash('sha256').update(decryptedCode).digest('hex')\n\n        if (codeHash === storedHash) {\n          return { valid: true, used: true }\n        }\n      }\n\n      return { valid: false, used: false }\n    } catch (error) {\n      console.error('Error verifying backup code:', error)\n      return { valid: false, used: false }\n    }\n  }\n\n  private async updateMethodAfterBackupCodeUse(method: MfaMethod, usedCode: string): Promise<void> {\n    try {\n      if (!method.backup_codes) return\n\n      const supabase = await this.getSupabase()\n      const codeHash = crypto.createHash('sha256').update(usedCode).digest('hex')\n\n      // Remove used backup code\n      const updatedCodes = method.backup_codes.filter(encryptedCode => {\n        const decryptedCode = this.decryptSecret(encryptedCode)\n        const storedHash = crypto.createHash('sha256').update(decryptedCode).digest('hex')\n        return codeHash !== storedHash\n      })\n\n      await supabase.from('mfa_methods').update({ backup_codes: updatedCodes }).eq('id', method.id)\n    } catch (error) {\n      console.error('Error updating backup codes:', error)\n    }\n  }\n\n  private async createVerificationAttempt(\n    tenantId: string,\n    userId: string,\n    methodId: string,\n    attemptType: 'login' | 'setup' | 'recovery',\n    code?: string,\n    isSuccessful: boolean = false\n  ): Promise<void> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const codeHash = code ? crypto.createHash('sha256').update(code).digest('hex') : undefined\n\n      await supabase.from('mfa_verification_attempts').insert({\n        tenant_id: tenantId,\n        user_id: userId,\n        mfa_method_id: methodId,\n        attempt_type: attemptType,\n        code_hash: codeHash,\n        is_successful: isSuccessful,\n        expires_at: new Date(Date.now() + 10 * 60 * 1000).toISOString(), // 10 minutes\n      })\n    } catch (error) {\n      console.error('Error creating verification attempt:', error)\n    }\n  }\n\n  private async logSecurityEvent(\n    tenantId: string,\n    userId: string,\n    eventType: 'mfa_success' | 'mfa_failure',\n    details: Record<string, any>\n  ): Promise<void> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const eventData: SecurityEventInsert = {\n        tenant_id: tenantId,\n        user_id: userId,\n        event_type: eventType,\n        severity: eventType === 'mfa_failure' ? 'medium' : 'low',\n        description:\n          eventType === 'mfa_failure' ? 'MFA verification failed' : 'MFA verification successful',\n        details,\n      }\n\n      await supabase.from('security_events').insert(eventData)\n    } catch (error) {\n      console.error('Error logging security event:', error)\n    }\n  }\n\n  private generateBackupCodes(count: number = 10): string[] {\n    const codes: string[] = []\n    for (let i = 0; i < count; i++) {\n      const code = crypto.randomBytes(4).toString('hex').toUpperCase()\n      codes.push(`${code.slice(0, 4)}-${code.slice(4)}`)\n    }\n    return codes\n  }\n\n  private generateVerificationCode(): string {\n    return Math.floor(100000 + Math.random() * 900000).toString()\n  }\n\n  private encryptSecret(secret: string): string {\n    // In production, use proper encryption with a key management service\n    // This is a simplified example\n    const algorithm = 'aes-256-gcm'\n    const key = crypto.scryptSync(process.env.ENCRYPTION_KEY || 'default-key', 'salt', 32)\n    const iv = crypto.randomBytes(16)\n\n    const cipher = crypto.createCipheriv(algorithm, key, iv)\n    let encrypted = cipher.update(secret, 'utf8', 'hex')\n    encrypted += cipher.final('hex')\n\n    return `${iv.toString('hex')}:${encrypted}`\n  }\n\n  private decryptSecret(encryptedSecret: string): string {\n    // In production, use proper decryption with a key management service\n    const algorithm = 'aes-256-gcm'\n    const key = crypto.scryptSync(process.env.ENCRYPTION_KEY || 'default-key', 'salt', 32)\n\n    const [ivHex, encrypted] = encryptedSecret.split(':')\n    const iv = Buffer.from(ivHex, 'hex')\n\n    const decipher = crypto.createDecipheriv(algorithm, key, iv)\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8')\n    decrypted += decipher.final('utf8')\n\n    return decrypted\n  }\n\n  private async generateQRCode(data: string): Promise<string> {\n    try {\n      const QRCode = await import('qrcode')\n      return await QRCode.toDataURL(data)\n    } catch (error) {\n      console.error('Error generating QR code:', error)\n      return ''\n    }\n  }\n\n  private async sendSMSVerification(phoneNumber: string, code: string): Promise<void> {\n    // Implement SMS sending logic here\n    // This would integrate with services like Twilio, AWS SNS, etc.\n    console.log(`SMS verification code ${code} would be sent to ${phoneNumber}`)\n  }\n\n  private async sendEmailVerification(email: string, code: string): Promise<void> {\n    // Implement email sending logic here\n    // This would integrate with your email service\n    console.log(`Email verification code ${code} would be sent to ${email}`)\n  }\n\n  // =====================================================\n  // PUBLIC METHODS FOR TESTING\n  // =====================================================\n\n  /**\n   * Verify backup code (public for testing)\n   */\n  async verifyBackupCode(\n    tenantId: string,\n    userId: string,\n    code: string\n  ): Promise<{ success: boolean; codesRemaining?: number; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Get user's backup codes\n      const { data: method } = await supabase\n        .from('mfa_methods')\n        .select('backup_codes')\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .eq('method_type', 'backup_codes')\n        .eq('is_active', true)\n        .single()\n\n      if (!method || !method.backup_codes) {\n        return { success: false, error: 'No backup codes found' }\n      }\n\n      const backupCodes = method.backup_codes as string[]\n      const codeIndex = backupCodes.findIndex(c => c === code)\n\n      if (codeIndex === -1) {\n        return { success: false, error: 'Invalid backup code' }\n      }\n\n      // Mark code as used by removing it\n      const updatedCodes = backupCodes.filter((_, index) => index !== codeIndex)\n\n      await supabase\n        .from('mfa_methods')\n        .update({ backup_codes: updatedCodes })\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .eq('method_type', 'backup_codes')\n\n      return { success: true, codesRemaining: updatedCodes.length }\n    } catch (error) {\n      console.error('Error verifying backup code:', error)\n      return { success: false, error: 'Failed to verify backup code' }\n    }\n  }\n\n  /**\n   * Disable MFA for user\n   */\n  async disableMfa(\n    tenantId: string,\n    userId: string\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { error } = await supabase\n        .from('mfa_methods')\n        .update({ is_active: false })\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n\n      if (error) {\n        return { success: false, error: error.message }\n      }\n\n      return { success: true }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Generate TOTP secret\n   */\n  generateTOTPSecret(): string {\n    return authenticator.generateSecret()\n  }\n\n  /**\n   * Generate QR code for TOTP setup (public for testing)\n   */\n  async generateQRCodeForSetup(secret: string, userEmail?: string): Promise<string> {\n    const serviceName = 'AssetTracker Pro'\n    const accountName = userEmail || 'user'\n\n    const otpauth = authenticator.keyuri(accountName, serviceName, secret)\n    return await this.generateQRCode(otpauth)\n  }\n\n  /**\n   * Validate TOTP token\n   */\n  validateTOTPToken(secret: string, token: string): boolean {\n    try {\n      return authenticator.verify({ token, secret })\n    } catch (error) {\n      console.error('Error validating TOTP token:', error)\n      return false\n    }\n  }\n}\n\n// Export singleton instance\nexport const mfaService = new MfaService()\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\services\\permission-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PermissionUsage' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PermissionAction' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PermissionScope' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Database' is defined but never used.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":333,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":333,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8874,8877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8874,8877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":362,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9719,9722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9719,9722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":364,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":364,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9778,9781],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9778,9781],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":402,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":402,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10927,10930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10927,10930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":403,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":403,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10962,10965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10962,10965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":466,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":466,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12881,12884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12881,12884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":467,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":467,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12915,12918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12915,12918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":630,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":630,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17884,17887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17884,17887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":633,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":633,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18043,18046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18043,18046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":639,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":639,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18237,18240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18237,18240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":640,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":640,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18294,18297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18294,18297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":658,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":658,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18836,18839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18836,18839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":660,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":660,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18943,18946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18943,18946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":709,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":709,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":723,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":723,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20892,20895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20892,20895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// PERMISSION SERVICE\n// =====================================================\n// Service for checking and managing user permissions\n\nimport { createClient } from '@/lib/supabase/server'\nimport {\n  UserPermission,\n  PermissionCheckRequest,\n  PermissionCheckResponse,\n  PermissionUsage,\n  PermissionUsageInsert,\n  ResourceType,\n  PermissionAction,\n  PermissionScope,\n} from '@/lib/types/rbac'\nimport { Database } from '@/lib/types/database'\nimport { globalPermissionCache, hashContext } from '@/lib/utils/permission-cache'\n\nexport class PermissionService {\n  private async getSupabaseClient() {\n    return await createClient()\n  }\n\n  // =====================================================\n  // PERMISSION CHECKING\n  // =====================================================\n\n  async checkPermission(\n    tenantId: string,\n    userId: string,\n    request: PermissionCheckRequest\n  ): Promise<PermissionCheckResponse> {\n    const startTime = Date.now()\n    const contextHash = hashContext(request.context)\n\n    // Check cache first\n    const cachedResult = globalPermissionCache.getPermissionCheck(\n      tenantId,\n      userId,\n      request.permission_name,\n      request.resource_id,\n      contextHash\n    )\n\n    if (cachedResult !== null) {\n      return {\n        granted: cachedResult,\n        reason: cachedResult ? undefined : 'Cached denial',\n      }\n    }\n\n    try {\n      // Get user permissions (with caching)\n      const userPermissions = await this.getUserPermissions(tenantId, userId)\n\n      // Find matching permission\n      const matchingPermission = userPermissions.find(\n        p => p.permission_name === request.permission_name\n      )\n\n      if (!matchingPermission) {\n        const result = false\n        globalPermissionCache.setPermissionCheck(\n          tenantId,\n          userId,\n          request.permission_name,\n          result,\n          request.resource_id,\n          contextHash\n        )\n        await this.logPermissionUsage(\n          tenantId,\n          userId,\n          request,\n          result,\n          'Permission not found',\n          Date.now() - startTime\n        )\n        return {\n          granted: result,\n          reason: 'Permission not found',\n        }\n      }\n\n      // Check resource filters if specified\n      if (request.resource_id && matchingPermission.resource_filters) {\n        const resourceAllowed = await this.checkResourceFilters(\n          matchingPermission.resource_filters,\n          request.resource_id,\n          request.context\n        )\n\n        if (!resourceAllowed) {\n          const result = false\n          globalPermissionCache.setPermissionCheck(\n            tenantId,\n            userId,\n            request.permission_name,\n            result,\n            request.resource_id,\n            contextHash\n          )\n          await this.logPermissionUsage(\n            tenantId,\n            userId,\n            request,\n            result,\n            'Resource access denied',\n            Date.now() - startTime\n          )\n          return {\n            granted: result,\n            reason: 'Resource access denied',\n          }\n        }\n      }\n\n      // Check conditions if specified\n      if (matchingPermission.conditions && Object.keys(matchingPermission.conditions).length > 0) {\n        const conditionsMet = await this.checkConditions(\n          matchingPermission.conditions,\n          request.context,\n          tenantId,\n          userId\n        )\n\n        if (!conditionsMet) {\n          const result = false\n          globalPermissionCache.setPermissionCheck(\n            tenantId,\n            userId,\n            request.permission_name,\n            result,\n            request.resource_id,\n            contextHash\n          )\n          await this.logPermissionUsage(\n            tenantId,\n            userId,\n            request,\n            result,\n            'Conditions not met',\n            Date.now() - startTime\n          )\n          return {\n            granted: result,\n            reason: 'Conditions not met',\n          }\n        }\n      }\n\n      // Permission granted\n      const result = true\n      globalPermissionCache.setPermissionCheck(\n        tenantId,\n        userId,\n        request.permission_name,\n        result,\n        request.resource_id,\n        contextHash\n      )\n      await this.logPermissionUsage(tenantId, userId, request, result, null, Date.now() - startTime)\n\n      return {\n        granted: result,\n        source: matchingPermission.source,\n        conditions: matchingPermission.conditions,\n      }\n    } catch (error) {\n      console.error('Error checking permission:', error)\n      const result = false\n      globalPermissionCache.setPermissionCheck(\n        tenantId,\n        userId,\n        request.permission_name,\n        result,\n        request.resource_id,\n        contextHash\n      )\n      await this.logPermissionUsage(\n        tenantId,\n        userId,\n        request,\n        result,\n        'System error',\n        Date.now() - startTime\n      )\n\n      return {\n        granted: result,\n        reason: 'System error',\n      }\n    }\n  }\n\n  async checkMultiplePermissions(\n    tenantId: string,\n    userId: string,\n    requests: PermissionCheckRequest[]\n  ): Promise<Record<string, PermissionCheckResponse>> {\n    const results: Record<string, PermissionCheckResponse> = {}\n\n    // Get user permissions once for all checks\n    const userPermissions = await this.getUserPermissions(tenantId, userId)\n\n    for (const request of requests) {\n      const startTime = Date.now()\n\n      try {\n        const matchingPermission = userPermissions.find(\n          p => p.permission_name === request.permission_name\n        )\n\n        if (!matchingPermission) {\n          results[request.permission_name] = {\n            granted: false,\n            reason: 'Permission not found',\n          }\n          continue\n        }\n\n        // Apply same checks as single permission check\n        let granted = true\n        let reason: string | undefined\n\n        // Resource filters check\n        if (request.resource_id && matchingPermission.resource_filters) {\n          const resourceAllowed = await this.checkResourceFilters(\n            matchingPermission.resource_filters,\n            request.resource_id,\n            request.context\n          )\n\n          if (!resourceAllowed) {\n            granted = false\n            reason = 'Resource access denied'\n          }\n        }\n\n        // Conditions check\n        if (\n          granted &&\n          matchingPermission.conditions &&\n          Object.keys(matchingPermission.conditions).length > 0\n        ) {\n          const conditionsMet = await this.checkConditions(\n            matchingPermission.conditions,\n            request.context,\n            tenantId,\n            userId\n          )\n\n          if (!conditionsMet) {\n            granted = false\n            reason = 'Conditions not met'\n          }\n        }\n\n        results[request.permission_name] = {\n          granted,\n          reason,\n          source: granted ? matchingPermission.source : undefined,\n          conditions: granted ? matchingPermission.conditions : undefined,\n        }\n\n        // Log usage\n        await this.logPermissionUsage(\n          tenantId,\n          userId,\n          request,\n          granted,\n          reason,\n          Date.now() - startTime\n        )\n      } catch (error) {\n        console.error(`Error checking permission ${request.permission_name}:`, error)\n        results[request.permission_name] = {\n          granted: false,\n          reason: 'System error',\n        }\n      }\n    }\n\n    return results\n  }\n\n  async getUserPermissions(\n    tenantId: string,\n    userId: string,\n    useCache = true\n  ): Promise<UserPermission[]> {\n    // Check cache first\n    if (useCache) {\n      const cached = globalPermissionCache.getUserPermissions(tenantId, userId)\n      if (cached) {\n        return cached\n      }\n    }\n\n    try {\n      const supabase = await this.getSupabaseClient()\n\n      // Use database function to get all permissions including inherited and delegated\n      const { data: permissions, error } = await supabase.rpc('get_user_permissions', {\n        p_tenant_id: tenantId,\n        p_user_id: userId,\n      })\n\n      if (error) {\n        throw new Error(`Failed to get user permissions: ${error.message}`)\n      }\n\n      const userPermissions: UserPermission[] = permissions || []\n\n      // Cache the result\n      if (useCache) {\n        globalPermissionCache.setUserPermissions(tenantId, userId, userPermissions)\n      }\n\n      return userPermissions\n    } catch (error) {\n      console.error('Error getting user permissions:', error)\n      throw error\n    }\n  }\n\n  async hasPermission(\n    tenantId: string,\n    userId: string,\n    permissionName: string,\n    resourceId?: string,\n    context?: Record<string, any>\n  ): Promise<boolean> {\n    try {\n      const supabase = await this.getSupabaseClient()\n      const { data: hasPermission, error } = await supabase.rpc('user_has_permission', {\n        p_tenant_id: tenantId,\n        p_user_id: userId,\n        p_permission_name: permissionName,\n        p_resource_id: resourceId || null,\n        p_context: context || {},\n      })\n\n      if (error) {\n        console.error('Error checking permission:', error)\n        return false\n      }\n\n      return hasPermission || false\n    } catch (error) {\n      console.error('Error checking permission:', error)\n      return false\n    }\n  }\n\n  // =====================================================\n  // RESOURCE FILTERS AND CONDITIONS\n  // =====================================================\n\n  private async checkResourceFilters(\n    filters: Record<string, any>,\n    resourceId: string,\n    context?: Record<string, any>\n  ): Promise<boolean> {\n    try {\n      // Handle different filter types\n      if (filters.allowed_resources) {\n        return filters.allowed_resources.includes(resourceId)\n      }\n\n      if (filters.denied_resources) {\n        return !filters.denied_resources.includes(resourceId)\n      }\n\n      if (filters.resource_pattern) {\n        const pattern = new RegExp(filters.resource_pattern)\n        return pattern.test(resourceId)\n      }\n\n      if (filters.department_resources && context?.user_department) {\n        // Check if resource belongs to user's department\n        const supabase = await this.getSupabaseClient()\n        const { data: resource } = await supabase\n          .from('assets') // Assuming assets table, adjust as needed\n          .select('department')\n          .eq('id', resourceId)\n          .single()\n\n        return resource?.department === context.user_department\n      }\n\n      // If no specific filters, allow access\n      return true\n    } catch (error) {\n      console.error('Error checking resource filters:', error)\n      return false\n    }\n  }\n\n  private async checkConditions(\n    conditions: Record<string, any>,\n    context?: Record<string, any>,\n    tenantId?: string,\n    userId?: string\n  ): Promise<boolean> {\n    try {\n      // Time-based conditions\n      if (conditions.time_restrictions) {\n        const now = new Date()\n        const currentHour = now.getHours()\n        const currentDay = now.getDay() // 0 = Sunday, 1 = Monday, etc.\n\n        if (conditions.time_restrictions.allowed_hours) {\n          const [startHour, endHour] = conditions.time_restrictions.allowed_hours\n          if (currentHour < startHour || currentHour > endHour) {\n            return false\n          }\n        }\n\n        if (conditions.time_restrictions.allowed_days) {\n          if (!conditions.time_restrictions.allowed_days.includes(currentDay)) {\n            return false\n          }\n        }\n      }\n\n      // IP-based conditions\n      if (conditions.ip_restrictions && context?.ip_address) {\n        const allowedIPs = conditions.ip_restrictions.allowed_ips || []\n        const deniedIPs = conditions.ip_restrictions.denied_ips || []\n\n        if (allowedIPs.length > 0 && !allowedIPs.includes(context.ip_address)) {\n          return false\n        }\n\n        if (deniedIPs.includes(context.ip_address)) {\n          return false\n        }\n      }\n\n      // Location-based conditions\n      if (conditions.location_restrictions && context?.location) {\n        // Implement geofencing logic here\n        // This would require PostGIS functions for proper implementation\n      }\n\n      // Custom business logic conditions\n      if (conditions.custom_checks) {\n        for (const check of conditions.custom_checks) {\n          const result = await this.evaluateCustomCondition(check, context, tenantId, userId)\n          if (!result) {\n            return false\n          }\n        }\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error checking conditions:', error)\n      return false\n    }\n  }\n\n  private async evaluateCustomCondition(\n    condition: any,\n    context?: Record<string, any>,\n    tenantId?: string,\n    userId?: string\n  ): Promise<boolean> {\n    // Implement custom condition evaluation logic\n    // This could include database queries, external API calls, etc.\n\n    switch (condition.type) {\n      case 'asset_ownership':\n        // Check if user owns or is assigned to the asset\n        if (context?.asset_id && userId) {\n          const supabase = await this.getSupabaseClient()\n          const { data: asset } = await supabase\n            .from('assets')\n            .select('assignee_id, created_by')\n            .eq('id', context.asset_id)\n            .single()\n\n          return asset?.assignee_id === userId || asset?.created_by === userId\n        }\n        return false\n\n      case 'department_membership':\n        // Check if user belongs to required department\n        if (condition.required_department && userId && tenantId) {\n          const supabase = await this.getSupabaseClient()\n          const { data: userDept } = await supabase\n            .from('user_departments')\n            .select('department_id')\n            .eq('user_id', userId)\n            .eq('tenant_id', tenantId)\n            .single()\n\n          return userDept?.department_id === condition.required_department\n        }\n        return false\n\n      case 'approval_required':\n        // Check if action requires approval and if user can approve\n        if (condition.approval_level && context?.action) {\n          // This would integrate with workflow system\n          return true // Placeholder\n        }\n        return false\n\n      default:\n        console.warn(`Unknown custom condition type: ${condition.type}`)\n        return true\n    }\n  }\n\n  // =====================================================\n  // PERMISSION USAGE LOGGING\n  // =====================================================\n\n  private async logPermissionUsage(\n    tenantId: string,\n    userId: string,\n    request: PermissionCheckRequest,\n    wasGranted: boolean,\n    denialReason?: string | null,\n    responseTimeMs?: number\n  ): Promise<void> {\n    try {\n      const supabase = await this.getSupabaseClient()\n\n      // Get permission ID\n      const { data: permission } = await supabase\n        .from('permissions')\n        .select('id, resource_type')\n        .eq('name', request.permission_name)\n        .single()\n\n      if (!permission) {\n        return\n      }\n\n      const usage: PermissionUsageInsert = {\n        tenant_id: tenantId,\n        user_id: userId,\n        permission_id: permission.id,\n        resource_type: permission.resource_type,\n        resource_id: request.resource_id,\n        endpoint: request.context?.endpoint,\n        method: request.context?.method,\n        ip_address: request.context?.ip_address,\n        user_agent: request.context?.user_agent,\n        session_id: request.context?.session_id,\n        was_granted: wasGranted,\n        denial_reason: denialReason || undefined,\n        response_time_ms: responseTimeMs,\n      }\n\n      await supabase.from('permission_usage').insert(usage)\n    } catch (error) {\n      // Don't throw errors for logging failures\n      console.error('Error logging permission usage:', error)\n    }\n  }\n\n  // =====================================================\n  // CACHE MANAGEMENT\n  // =====================================================\n\n  clearUserPermissionCache(tenantId: string, userId: string): void {\n    globalPermissionCache.invalidateUser(tenantId, userId)\n  }\n\n  clearAllPermissionCache(): void {\n    globalPermissionCache.clearAll()\n  }\n\n  clearTenantPermissionCache(tenantId: string): void {\n    globalPermissionCache.invalidateTenant(tenantId)\n  }\n\n  clearPermissionCache(permissionName: string): void {\n    globalPermissionCache.invalidatePermission(permissionName)\n  }\n\n  // =====================================================\n  // PERMISSION ANALYTICS\n  // =====================================================\n\n  async getPermissionUsageStats(\n    tenantId: string,\n    userId?: string,\n    days = 30\n  ): Promise<{\n    total_checks: number\n    granted_checks: number\n    denied_checks: number\n    avg_response_time_ms: number\n    top_permissions: { permission_name: string; usage_count: number }[]\n    denial_reasons: { reason: string; count: number }[]\n  }> {\n    try {\n      const supabase = await this.getSupabaseClient()\n\n      let query = supabase\n        .from('permission_usage')\n        .select(\n          `\n          was_granted,\n          response_time_ms,\n          denial_reason,\n          permissions (name)\n        `\n        )\n        .eq('tenant_id', tenantId)\n        .gte('timestamp', new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString())\n\n      if (userId) {\n        query = query.eq('user_id', userId)\n      }\n\n      const { data: usage, error } = await query\n\n      if (error) {\n        throw new Error(`Failed to get permission usage stats: ${error.message}`)\n      }\n\n      const totalChecks = usage?.length || 0\n      const grantedChecks = usage?.filter((u: any) => u.was_granted).length || 0\n      const deniedChecks = totalChecks - grantedChecks\n      const avgResponseTime =\n        usage?.reduce((sum: number, u: any) => sum + (u.response_time_ms || 0), 0) / totalChecks ||\n        0\n\n      // Top permissions\n      const permissionCounts =\n        usage?.reduce(\n          (acc: Record<string, number>, u: any) => {\n            const permName = (u.permissions as any)?.name || 'Unknown'\n            acc[permName] = (acc[permName] || 0) + 1\n            return acc\n          },\n          {} as Record<string, number>\n        ) || {}\n\n      const topPermissions = Object.entries(permissionCounts)\n        .sort(([, a], [, b]) => (b as number) - (a as number))\n        .slice(0, 10)\n        .map(([permission_name, usage_count]) => ({\n          permission_name,\n          usage_count: usage_count as number,\n        }))\n\n      // Denial reasons\n      const denialCounts =\n        usage\n          ?.filter((u: any) => !u.was_granted && u.denial_reason)\n          .reduce(\n            (acc: Record<string, number>, u: any) => {\n              acc[u.denial_reason!] = (acc[u.denial_reason!] || 0) + 1\n              return acc\n            },\n            {} as Record<string, number>\n          ) || {}\n\n      const denialReasons = Object.entries(denialCounts)\n        .sort(([, a], [, b]) => (b as number) - (a as number))\n        .map(([reason, count]) => ({ reason, count: count as number }))\n\n      return {\n        total_checks: totalChecks,\n        granted_checks: grantedChecks,\n        denied_checks: deniedChecks,\n        avg_response_time_ms: avgResponseTime,\n        top_permissions: topPermissions,\n        denial_reasons: denialReasons,\n      }\n    } catch (error) {\n      console.error('Error getting permission usage stats:', error)\n      throw error\n    }\n  }\n\n  // =====================================================\n  // UTILITY METHODS\n  // =====================================================\n\n  async refreshUserPermissions(tenantId: string, userId: string): Promise<UserPermission[]> {\n    // Clear cache and fetch fresh permissions\n    this.clearUserPermissionCache(tenantId, userId)\n    return this.getUserPermissions(tenantId, userId, false)\n  }\n\n  getCacheStats() {\n    return globalPermissionCache.getStats()\n  }\n\n  async validatePermissionName(permissionName: string): Promise<boolean> {\n    try {\n      const supabase = await this.getSupabaseClient()\n      const { data: permission } = await supabase\n        .from('permissions')\n        .select('id')\n        .eq('name', permissionName)\n        .single()\n\n      return !!permission\n    } catch (error) {\n      return false\n    }\n  }\n\n  async getResourceTypePermissions(resourceType: ResourceType): Promise<string[]> {\n    try {\n      const supabase = await this.getSupabaseClient()\n      const { data: permissions } = await supabase\n        .from('permissions')\n        .select('name')\n        .eq('resource_type', resourceType)\n        .order('action')\n\n      return permissions?.map((p: any) => p.name) || []\n    } catch (error) {\n      console.error('Error getting resource type permissions:', error)\n      return []\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\services\\role-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RoleInsert' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserRoleInsert' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RBACError' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Database' is defined but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":263,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7070,7073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7070,7073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":356,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9505,9508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9505,9508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":364,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":364,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9865,9868],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9865,9868],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":562,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":562,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15215,15218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15215,15218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":575,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":575,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15561,15564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15561,15564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":606,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":606,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16282,16285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16282,16285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":627,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":627,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16842,16845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16842,16845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":628,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":628,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16885,16888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16885,16888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tenantId' is defined but never used.","line":786,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":786,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// ROLE SERVICE\n// =====================================================\n// Service for managing hierarchical roles and permissions\n\nimport { createClient } from '@/lib/supabase/server'\nimport {\n  Role,\n  RoleInsert,\n  RoleUpdate,\n  RoleWithPermissions,\n  Permission,\n  RolePermission,\n  UserRole,\n  UserRoleInsert,\n  CreateRoleRequest,\n  AssignRoleRequest,\n  RevokeRoleRequest,\n  RoleHierarchyNode,\n  RoleAnalytics,\n  RBACError,\n} from '@/lib/types/rbac'\nimport { Database } from '@/lib/types/database'\n\nexport class RoleService {\n  private async getSupabase() {\n    return await createClient()\n  }\n\n  // =====================================================\n  // ROLE MANAGEMENT\n  // =====================================================\n\n  async createRole(tenantId: string, request: CreateRoleRequest, createdBy: string): Promise<Role> {\n    try {\n      // Validate role name uniqueness\n      const supabase = await this.getSupabase()\n      const { data: existingRole } = await supabase\n        .from('roles')\n        .select('id')\n        .eq('tenant_id', tenantId)\n        .eq('name', request.name)\n        .single()\n\n      if (existingRole) {\n        throw new Error(`Role with name '${request.name}' already exists`)\n      }\n\n      // Validate parent role exists if specified\n      if (request.parent_role_id) {\n        const { data: parentRole } = await supabase\n          .from('roles')\n          .select('id, level')\n          .eq('id', request.parent_role_id)\n          .eq('tenant_id', tenantId)\n          .single()\n\n        if (!parentRole) {\n          throw new Error('Parent role not found')\n        }\n\n        // Check hierarchy depth limit\n        if (parentRole.level >= 10) {\n          throw new Error('Maximum role hierarchy depth exceeded')\n        }\n      }\n\n      // Create role using stored procedure\n      const { data: roleId, error } = await supabase.rpc('create_role_with_permissions', {\n        p_tenant_id: tenantId,\n        p_name: request.name,\n        p_display_name: request.display_name,\n        p_description: request.description || null,\n        p_parent_role_id: request.parent_role_id || null,\n        p_permission_names: request.permission_names || [],\n        p_created_by: createdBy,\n      })\n\n      if (error) {\n        throw new Error(`Failed to create role: ${error.message}`)\n      }\n\n      // Fetch and return the created role\n      const { data: role } = await supabase.from('roles').select('*').eq('id', roleId).single()\n\n      if (!role) {\n        throw new Error('Failed to retrieve created role')\n      }\n\n      return role\n    } catch (error) {\n      console.error('Error creating role:', error)\n      throw error\n    }\n  }\n\n  async updateRole(tenantId: string, roleId: string, updates: RoleUpdate): Promise<Role> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Check if role exists and is not a system role\n      const { data: existingRole } = await supabase\n        .from('roles')\n        .select('id, is_system_role')\n        .eq('id', roleId)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (!existingRole) {\n        throw new Error('Role not found')\n      }\n\n      if (existingRole.is_system_role) {\n        throw new Error('Cannot modify system roles')\n      }\n\n      // Validate parent role if being updated\n      if (updates.parent_role_id) {\n        const { data: parentRole } = await supabase\n          .from('roles')\n          .select('id, level, hierarchy_path')\n          .eq('id', updates.parent_role_id)\n          .eq('tenant_id', tenantId)\n          .single()\n\n        if (!parentRole) {\n          throw new Error('Parent role not found')\n        }\n\n        // Prevent circular references\n        if (parentRole.hierarchy_path?.includes(roleId)) {\n          throw new Error('Circular reference detected in role hierarchy')\n        }\n      }\n\n      const { data: role, error } = await supabase\n        .from('roles')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', roleId)\n        .eq('tenant_id', tenantId)\n        .select()\n        .single()\n\n      if (error) {\n        throw new Error(`Failed to update role: ${error.message}`)\n      }\n\n      return role\n    } catch (error) {\n      console.error('Error updating role:', error)\n      throw error\n    }\n  }\n\n  async deleteRole(tenantId: string, roleId: string): Promise<boolean> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Check if role exists and is not a system role\n      const { data: role } = await supabase\n        .from('roles')\n        .select('id, is_system_role, name')\n        .eq('id', roleId)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (!role) {\n        throw new Error('Role not found')\n      }\n\n      if (role.is_system_role) {\n        throw new Error('Cannot delete system roles')\n      }\n\n      // Check if role has users assigned\n      const { data: userRoles } = await supabase\n        .from('user_roles')\n        .select('id')\n        .eq('role_id', roleId)\n        .eq('is_active', true)\n        .limit(1)\n\n      if (userRoles && userRoles.length > 0) {\n        throw new Error('Cannot delete role with active user assignments')\n      }\n\n      // Check if role has child roles\n      const { data: childRoles } = await supabase\n        .from('roles')\n        .select('id')\n        .eq('parent_role_id', roleId)\n        .eq('tenant_id', tenantId)\n        .limit(1)\n\n      if (childRoles && childRoles.length > 0) {\n        throw new Error('Cannot delete role with child roles')\n      }\n\n      // Delete role permissions first\n      await supabase\n        .from('role_permissions')\n        .delete()\n        .eq('role_id', roleId)\n        .eq('tenant_id', tenantId)\n\n      // Delete the role\n      const { error } = await supabase\n        .from('roles')\n        .delete()\n        .eq('id', roleId)\n        .eq('tenant_id', tenantId)\n\n      if (error) {\n        throw new Error(`Failed to delete role: ${error.message}`)\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error deleting role:', error)\n      throw error\n    }\n  }\n\n  async getRole(tenantId: string, roleId: string): Promise<RoleWithPermissions | null> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: role } = await supabase\n        .from('roles')\n        .select(\n          `\n          *,\n          role_permissions (\n            id,\n            conditions,\n            resource_filters,\n            inherited_from_role_id,\n            permissions (\n              id,\n              name,\n              display_name,\n              description,\n              resource_type,\n              action,\n              scope\n            )\n          )\n        `\n        )\n        .eq('id', roleId)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (!role) {\n        return null\n      }\n\n      // Transform the data to match our interface\n      const permissions =\n        role.role_permissions?.map((rp: any) => ({\n          ...rp.permissions,\n          conditions: rp.conditions,\n          resource_filters: rp.resource_filters,\n          inherited_from_role_id: rp.inherited_from_role_id,\n        })) || []\n\n      return {\n        ...role,\n        permissions,\n      }\n    } catch (error) {\n      console.error('Error getting role:', error)\n      throw error\n    }\n  }\n\n  async getRoles(tenantId: string, includeInactive = false): Promise<Role[]> {\n    try {\n      const supabase = await this.getSupabase()\n\n      let query = supabase\n        .from('roles')\n        .select('*')\n        .eq('tenant_id', tenantId)\n        .order('level', { ascending: true })\n        .order('name', { ascending: true })\n\n      if (!includeInactive) {\n        query = query.eq('is_active', true)\n      }\n\n      const { data: roles, error } = await query\n\n      if (error) {\n        throw new Error(`Failed to get roles: ${error.message}`)\n      }\n\n      return roles || []\n    } catch (error) {\n      console.error('Error getting roles:', error)\n      throw error\n    }\n  }\n\n  async getRoleHierarchy(tenantId: string): Promise<RoleHierarchyNode[]> {\n    try {\n      const supabase = await this.getSupabase()\n      const roles = await this.getRoles(tenantId)\n\n      // Get user counts for each role\n      const { data: userCounts } = await supabase\n        .from('user_roles')\n        .select('role_id')\n        .eq('tenant_id', tenantId)\n        .eq('is_active', true)\n\n      const userCountMap =\n        userCounts?.reduce(\n          (acc, ur) => {\n            acc[ur.role_id] = (acc[ur.role_id] || 0) + 1\n            return acc\n          },\n          {} as Record<string, number>\n        ) || {}\n\n      // Get permissions for each role\n      const { data: rolePermissions } = await supabase\n        .from('role_permissions')\n        .select(\n          `\n          role_id,\n          permissions (\n            id,\n            name,\n            display_name,\n            resource_type,\n            action,\n            scope\n          )\n        `\n        )\n        .eq('tenant_id', tenantId)\n\n      const permissionMap =\n        rolePermissions?.reduce(\n          (acc, rp) => {\n            if (!acc[rp.role_id]) {\n              acc[rp.role_id] = []\n            }\n            // rp.permissions is already an array of permissions\n            if (Array.isArray(rp.permissions)) {\n              acc[rp.role_id].push(\n                ...rp.permissions.map((p: any) => ({\n                  ...p,\n                  is_system_permission: p.is_system_permission || false,\n                  created_at: p.created_at || new Date().toISOString(),\n                  updated_at: p.updated_at || new Date().toISOString(),\n                }))\n              )\n            } else {\n              const permission = rp.permissions as any\n              acc[rp.role_id].push({\n                ...permission,\n                is_system_permission: permission.is_system_permission || false,\n                created_at: permission.created_at || new Date().toISOString(),\n                updated_at: permission.updated_at || new Date().toISOString(),\n              })\n            }\n            return acc\n          },\n          {} as Record<string, Permission[]>\n        ) || {}\n\n      // Build hierarchy\n      const roleMap = new Map<string, RoleHierarchyNode>()\n      const rootNodes: RoleHierarchyNode[] = []\n\n      // Create nodes\n      roles.forEach(role => {\n        const node: RoleHierarchyNode = {\n          role,\n          children: [],\n          permissions: permissionMap[role.id] || [],\n          user_count: userCountMap[role.id] || 0,\n        }\n        roleMap.set(role.id, node)\n      })\n\n      // Build hierarchy\n      roles.forEach(role => {\n        const node = roleMap.get(role.id)!\n        if (role.parent_role_id) {\n          const parent = roleMap.get(role.parent_role_id)\n          if (parent) {\n            parent.children.push(node)\n          }\n        } else {\n          rootNodes.push(node)\n        }\n      })\n\n      return rootNodes\n    } catch (error) {\n      console.error('Error getting role hierarchy:', error)\n      throw error\n    }\n  }\n\n  // =====================================================\n  // ROLE ASSIGNMENT MANAGEMENT\n  // =====================================================\n\n  async assignRoleToUser(\n    tenantId: string,\n    request: AssignRoleRequest,\n    assignedBy: string\n  ): Promise<UserRole> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Validate role exists\n      const { data: role } = await supabase\n        .from('roles')\n        .select('id, max_users, is_active')\n        .eq('id', request.role_id)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (!role) {\n        throw new Error('Role not found')\n      }\n\n      if (!role.is_active) {\n        throw new Error('Cannot assign inactive role')\n      }\n\n      // Check max users limit\n      if (role.max_users) {\n        const { data: currentAssignments } = await supabase\n          .from('user_roles')\n          .select('id')\n          .eq('role_id', request.role_id)\n          .eq('tenant_id', tenantId)\n          .eq('is_active', true)\n\n        if (currentAssignments && currentAssignments.length >= role.max_users) {\n          throw new Error('Maximum users limit reached for this role')\n        }\n      }\n\n      // Validate user exists in tenant\n      const { data: user } = await supabase\n        .from('profiles')\n        .select('id')\n        .eq('id', request.user_id)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (!user) {\n        throw new Error('User not found in tenant')\n      }\n\n      // Use stored procedure to assign role\n      const { data: assignmentId, error } = await supabase.rpc('assign_role_to_user', {\n        p_tenant_id: tenantId,\n        p_user_id: request.user_id,\n        p_role_id: request.role_id,\n        p_expires_at: request.expires_at || null,\n        p_assigned_by: assignedBy,\n      })\n\n      if (error) {\n        throw new Error(`Failed to assign role: ${error.message}`)\n      }\n\n      // Fetch and return the assignment\n      const { data: assignment } = await supabase\n        .from('user_roles')\n        .select('*')\n        .eq('id', assignmentId)\n        .single()\n\n      if (!assignment) {\n        throw new Error('Failed to retrieve role assignment')\n      }\n\n      return assignment\n    } catch (error) {\n      console.error('Error assigning role to user:', error)\n      throw error\n    }\n  }\n\n  async revokeRoleFromUser(\n    tenantId: string,\n    request: RevokeRoleRequest,\n    revokedBy: string\n  ): Promise<boolean> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Use stored procedure to revoke role\n      const { data: success, error } = await supabase.rpc('revoke_role_from_user', {\n        p_tenant_id: tenantId,\n        p_user_id: request.user_id,\n        p_role_id: request.role_id,\n        p_reason: request.reason || null,\n        p_revoked_by: revokedBy,\n      })\n\n      if (error) {\n        throw new Error(`Failed to revoke role: ${error.message}`)\n      }\n\n      return success\n    } catch (error) {\n      console.error('Error revoking role from user:', error)\n      throw error\n    }\n  }\n\n  async getUserRoles(\n    tenantId: string,\n    userId: string\n  ): Promise<(Role & { assigned_at: string; expires_at?: string; assigned_by: string })[]> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: userRoles, error } = await supabase\n        .from('user_roles')\n        .select(\n          `\n          assigned_at,\n          expires_at,\n          assigned_by,\n          roles (\n            id,\n            name,\n            display_name,\n            description,\n            level,\n            hierarchy_path,\n            is_system_role,\n            is_default_role,\n            is_active\n          )\n        `\n        )\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .eq('is_active', true)\n        .order('assigned_at', { ascending: false })\n\n      if (error) {\n        throw new Error(`Failed to get user roles: ${error.message}`)\n      }\n\n      return (\n        userRoles?.map((ur: any) => ({\n          ...ur.roles,\n          assigned_at: ur.assigned_at,\n          expires_at: ur.expires_at,\n          assigned_by: ur.assigned_by,\n        })) || []\n      )\n    } catch (error) {\n      console.error('Error getting user roles:', error)\n      throw error\n    }\n  }\n\n  async getRoleUsers(tenantId: string, roleId: string): Promise<any[]> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: roleUsers, error } = await supabase\n        .from('user_roles')\n        .select(\n          `\n          assigned_at,\n          expires_at,\n          assigned_by,\n          profiles (\n            id,\n            email,\n            full_name,\n            avatar_url,\n            department,\n            job_title\n          )\n        `\n        )\n        .eq('tenant_id', tenantId)\n        .eq('role_id', roleId)\n        .eq('is_active', true)\n        .order('assigned_at', { ascending: false })\n\n      if (error) {\n        throw new Error(`Failed to get role users: ${error.message}`)\n      }\n\n      return (\n        roleUsers?.map((ru: any) => ({\n          ...ru.profiles,\n          assigned_at: ru.assigned_at,\n          expires_at: ru.expires_at,\n          assigned_by: ru.assigned_by,\n        })) || []\n      )\n    } catch (error) {\n      console.error('Error getting role users:', error)\n      throw error\n    }\n  }\n\n  // =====================================================\n  // PERMISSION MANAGEMENT\n  // =====================================================\n\n  async addPermissionToRole(\n    tenantId: string,\n    roleId: string,\n    permissionId: string,\n    conditions?: Record<string, any>,\n    resourceFilters?: Record<string, any>\n  ): Promise<RolePermission> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: rolePermission, error } = await supabase\n        .from('role_permissions')\n        .insert({\n          tenant_id: tenantId,\n          role_id: roleId,\n          permission_id: permissionId,\n          conditions: conditions || {},\n          resource_filters: resourceFilters || {},\n        })\n        .select()\n        .single()\n\n      if (error) {\n        throw new Error(`Failed to add permission to role: ${error.message}`)\n      }\n\n      return rolePermission\n    } catch (error) {\n      console.error('Error adding permission to role:', error)\n      throw error\n    }\n  }\n\n  async removePermissionFromRole(\n    tenantId: string,\n    roleId: string,\n    permissionId: string\n  ): Promise<boolean> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { error } = await supabase\n        .from('role_permissions')\n        .delete()\n        .eq('tenant_id', tenantId)\n        .eq('role_id', roleId)\n        .eq('permission_id', permissionId)\n\n      if (error) {\n        throw new Error(`Failed to remove permission from role: ${error.message}`)\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error removing permission from role:', error)\n      throw error\n    }\n  }\n\n  async getSystemPermissions(): Promise<Permission[]> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: permissions, error } = await supabase\n        .from('permissions')\n        .select('*')\n        .order('resource_type', { ascending: true })\n        .order('action', { ascending: true })\n\n      if (error) {\n        throw new Error(`Failed to get permissions: ${error.message}`)\n      }\n\n      return permissions || []\n    } catch (error) {\n      console.error('Error getting system permissions:', error)\n      throw error\n    }\n  }\n\n  // =====================================================\n  // ANALYTICS AND REPORTING\n  // =====================================================\n\n  async getRoleAnalytics(tenantId: string, roleId: string, days = 30): Promise<RoleAnalytics> {\n    try {\n      const supabase = await this.getSupabase()\n      const role = await this.getRole(tenantId, roleId)\n      if (!role) {\n        throw new Error('Role not found')\n      }\n\n      // Get user count\n      const { data: userRoles } = await supabase\n        .from('user_roles')\n        .select('id')\n        .eq('tenant_id', tenantId)\n        .eq('role_id', roleId)\n        .eq('is_active', true)\n\n      const userCount = userRoles?.length || 0\n\n      // Get permission usage stats\n      const { data: usageStats } = await supabase\n        .from('permission_usage')\n        .select('was_granted, response_time_ms, permission_id')\n        .eq('tenant_id', tenantId)\n        .gte('timestamp', new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString())\n        .in('user_id', userRoles?.map(ur => ur.id) || [])\n\n      const totalChecks = usageStats?.length || 0\n      const grantedChecks = usageStats?.filter(us => us.was_granted).length || 0\n      const deniedChecks = totalChecks - grantedChecks\n      const avgResponseTime =\n        totalChecks > 0\n          ? (usageStats?.reduce((sum, us) => sum + (us.response_time_ms || 0), 0) || 0) /\n            totalChecks\n          : 0\n\n      // Get most used permissions\n      const permissionUsage =\n        usageStats?.reduce(\n          (acc, us) => {\n            acc[us.permission_id] = (acc[us.permission_id] || 0) + 1\n            return acc\n          },\n          {} as Record<string, number>\n        ) || {}\n\n      const mostUsedPermissions = Object.entries(permissionUsage)\n        .sort(([, a], [, b]) => b - a)\n        .slice(0, 10)\n        .map(([permissionId, count]) => {\n          const permission = role.permissions.find(p => p.id === permissionId)\n          return {\n            permission_name: permission?.name || 'Unknown',\n            usage_count: count,\n          }\n        })\n\n      return {\n        role_id: roleId,\n        role_name: role.name,\n        user_count: userCount,\n        permission_count: role.permissions.length,\n        usage_stats: {\n          total_checks: totalChecks,\n          granted_checks: grantedChecks,\n          denied_checks: deniedChecks,\n          avg_response_time_ms: avgResponseTime,\n        },\n        most_used_permissions: mostUsedPermissions,\n      }\n    } catch (error) {\n      console.error('Error getting role analytics:', error)\n      throw error\n    }\n  }\n\n  // =====================================================\n  // UTILITY METHODS\n  // =====================================================\n\n  async cleanupExpiredAssignments(tenantId: string): Promise<number> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: count, error } = await supabase.rpc('cleanup_expired_role_assignments')\n\n      if (error) {\n        throw new Error(`Failed to cleanup expired assignments: ${error.message}`)\n      }\n\n      return count || 0\n    } catch (error) {\n      console.error('Error cleaning up expired assignments:', error)\n      throw error\n    }\n  }\n\n  async validateRoleHierarchy(tenantId: string): Promise<boolean> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Check for circular references\n      const { data: roles } = await supabase\n        .from('roles')\n        .select('id, parent_role_id, hierarchy_path')\n        .eq('tenant_id', tenantId)\n\n      if (!roles) return true\n\n      for (const role of roles) {\n        if (role.parent_role_id && role.hierarchy_path?.includes(role.id)) {\n          throw new Error(`Circular reference detected for role ${role.id}`)\n        }\n      }\n\n      return true\n    } catch (error) {\n      console.error('Error validating role hierarchy:', error)\n      throw error\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\services\\security-event-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\services\\session-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":623,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":623,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17539,17542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17539,17542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":842,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":842,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24242,24245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24242,24245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":856,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":856,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24674,24677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24674,24677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":879,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":879,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25285,25288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25285,25288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":914,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":914,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26197,26200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26197,26200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// SESSION MANAGEMENT SERVICE\n// =====================================================\n// Service for managing user sessions, concurrent limits, and security\n\nimport { createClient } from '@/lib/supabase/server'\nimport {\n  UserSession,\n  UserSessionInsert,\n  SessionActivity,\n  SecurityEventInsert,\n} from '@/lib/types/database'\nimport * as crypto from 'crypto'\nimport { UAParser } from 'ua-parser-js'\n\nexport interface SessionCreateResult {\n  success: boolean\n  session?: UserSession\n  sessionToken?: string\n  refreshToken?: string\n  error?: string\n}\n\nexport interface SessionValidationResult {\n  valid: boolean\n  session?: UserSession\n  requiresRefresh?: boolean\n  error?: string\n}\n\nexport interface DeviceInfo {\n  fingerprint: string\n  name: string\n  type: 'desktop' | 'mobile' | 'tablet' | 'api'\n  browser: {\n    name?: string\n    version?: string\n  }\n  os: {\n    name?: string\n    version?: string\n  }\n}\n\nexport interface LocationInfo {\n  ip: string\n  country?: string\n  city?: string\n}\n\nexport class SessionService {\n  private async getSupabase() {\n    return createClient()\n  }\n\n  // =====================================================\n  // SESSION CREATION AND MANAGEMENT\n  // =====================================================\n\n  /**\n   * Create a new user session\n   */\n  async createSession(\n    tenantId: string,\n    userId: string,\n    deviceInfo: DeviceInfo,\n    locationInfo: LocationInfo,\n    userAgent?: string,\n    sessionDurationHours: number = 8\n  ): Promise<SessionCreateResult> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Check concurrent session limits\n      const canCreateSession = await this.checkConcurrentSessionLimit(tenantId, userId)\n      if (!canCreateSession.allowed) {\n        return { success: false, error: canCreateSession.reason }\n      }\n\n      // Generate session tokens\n      const sessionToken = this.generateSecureToken()\n      const refreshToken = this.generateSecureToken()\n      const sessionTokenHash = this.hashToken(sessionToken)\n      const refreshTokenHash = this.hashToken(refreshToken)\n\n      // Calculate expiration\n      const expiresAt = new Date(Date.now() + sessionDurationHours * 60 * 60 * 1000)\n\n      // Create session record\n      const sessionData: UserSessionInsert = {\n        tenant_id: tenantId,\n        user_id: userId,\n        session_token_hash: sessionTokenHash,\n        refresh_token_hash: refreshTokenHash,\n        device_fingerprint: deviceInfo.fingerprint,\n        device_name: deviceInfo.name,\n        device_type: deviceInfo.type,\n        browser_name: deviceInfo.browser.name,\n        browser_version: deviceInfo.browser.version,\n        os_name: deviceInfo.os.name,\n        os_version: deviceInfo.os.version,\n        ip_address: locationInfo.ip,\n        country_code: locationInfo.country,\n        city: locationInfo.city,\n        user_agent: userAgent,\n        expires_at: expiresAt.toISOString(),\n      }\n\n      const { data: session, error } = await supabase\n        .from('user_sessions')\n        .insert(sessionData)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error creating session:', error)\n        return { success: false, error: error.message }\n      }\n\n      // Log session creation activity\n      await this.logSessionActivity(\n        tenantId,\n        session.id,\n        'login',\n        { device_info: deviceInfo, location_info: locationInfo },\n        locationInfo.ip,\n        userAgent\n      )\n\n      // Log security event\n      await this.logSecurityEvent(tenantId, userId, 'login_success', {\n        session_id: session.id,\n        device_type: deviceInfo.type,\n        location: `${locationInfo.city}, ${locationInfo.country}`,\n        ip_address: locationInfo.ip,\n      })\n\n      return {\n        success: true,\n        session,\n        sessionToken,\n        refreshToken,\n      }\n    } catch (error) {\n      console.error('Error creating session:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Validate session token\n   */\n  async validateSession(sessionToken: string): Promise<SessionValidationResult> {\n    try {\n      const supabase = await this.getSupabase()\n      const tokenHash = this.hashToken(sessionToken)\n\n      const { data: session, error } = await supabase\n        .from('user_sessions')\n        .select('*')\n        .eq('session_token_hash', tokenHash)\n        .eq('is_active', true)\n        .single()\n\n      if (error || !session) {\n        return { valid: false, error: 'Invalid session token' }\n      }\n\n      const now = new Date()\n      const expiresAt = new Date(session.expires_at)\n      const lastActivity = new Date(session.last_activity_at)\n\n      // Check if session is expired\n      if (expiresAt < now) {\n        await this.terminateSession(session.id, 'timeout')\n        return { valid: false, error: 'Session expired' }\n      }\n\n      // Check if session needs refresh (inactive for more than 1 hour)\n      const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000)\n      const requiresRefresh = lastActivity < oneHourAgo\n\n      // Update last activity\n      await supabase\n        .from('user_sessions')\n        .update({ last_activity_at: now.toISOString() })\n        .eq('id', session.id)\n\n      return {\n        valid: true,\n        session,\n        requiresRefresh,\n      }\n    } catch (error) {\n      console.error('Error validating session:', error)\n      return {\n        valid: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Refresh session token\n   */\n  async refreshSession(\n    refreshToken: string,\n    sessionDurationHours: number = 8\n  ): Promise<SessionCreateResult> {\n    try {\n      const supabase = await this.getSupabase()\n      const tokenHash = this.hashToken(refreshToken)\n\n      const { data: session, error } = await supabase\n        .from('user_sessions')\n        .select('*')\n        .eq('refresh_token_hash', tokenHash)\n        .eq('is_active', true)\n        .single()\n\n      if (error || !session) {\n        return { success: false, error: 'Invalid refresh token' }\n      }\n\n      // Generate new tokens\n      const newSessionToken = this.generateSecureToken()\n      const newRefreshToken = this.generateSecureToken()\n      const newSessionTokenHash = this.hashToken(newSessionToken)\n      const newRefreshTokenHash = this.hashToken(newRefreshToken)\n\n      // Update session with new tokens and expiration\n      const newExpiresAt = new Date(Date.now() + sessionDurationHours * 60 * 60 * 1000)\n\n      const { data: updatedSession, error: updateError } = await supabase\n        .from('user_sessions')\n        .update({\n          session_token_hash: newSessionTokenHash,\n          refresh_token_hash: newRefreshTokenHash,\n          expires_at: newExpiresAt.toISOString(),\n          last_activity_at: new Date().toISOString(),\n        })\n        .eq('id', session.id)\n        .select()\n        .single()\n\n      if (updateError) {\n        console.error('Error refreshing session:', updateError)\n        return { success: false, error: updateError.message }\n      }\n\n      // Log session refresh activity\n      await this.logSessionActivity(\n        session.tenant_id,\n        session.id,\n        'action',\n        { action: 'session_refresh' },\n        session.ip_address,\n        session.user_agent\n      )\n\n      return {\n        success: true,\n        session: updatedSession,\n        sessionToken: newSessionToken,\n        refreshToken: newRefreshToken,\n      }\n    } catch (error) {\n      console.error('Error refreshing session:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Terminate session\n   */\n  async terminateSession(\n    sessionId: string,\n    reason:\n      | 'logout'\n      | 'timeout'\n      | 'admin_revoke'\n      | 'security_revoke'\n      | 'concurrent_limit' = 'logout'\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: session, error } = await supabase\n        .from('user_sessions')\n        .update({\n          is_active: false,\n          terminated_at: new Date().toISOString(),\n          termination_reason: reason,\n        })\n        .eq('id', sessionId)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error terminating session:', error)\n        return { success: false, error: error.message }\n      }\n\n      // Log session termination\n      await this.logSessionActivity(\n        session.tenant_id,\n        sessionId,\n        'logout',\n        { termination_reason: reason },\n        session.ip_address,\n        session.user_agent\n      )\n\n      // Log security event if not a normal logout\n      if (reason !== 'logout') {\n        await this.logSecurityEvent(session.tenant_id, session.user_id, 'session_terminated', {\n          session_id: sessionId,\n          termination_reason: reason,\n        })\n      }\n\n      return { success: true }\n    } catch (error) {\n      console.error('Error terminating session:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Terminate all sessions for a user\n   */\n  async terminateAllUserSessions(\n    tenantId: string,\n    userId: string,\n    excludeSessionId?: string,\n    reason: 'admin_revoke' | 'security_revoke' | 'password_change' = 'admin_revoke'\n  ): Promise<{ success: boolean; terminatedCount: number; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      let query = supabase\n        .from('user_sessions')\n        .update({\n          is_active: false,\n          terminated_at: new Date().toISOString(),\n          termination_reason: reason,\n        })\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .eq('is_active', true)\n\n      if (excludeSessionId) {\n        query = query.neq('id', excludeSessionId)\n      }\n\n      const { data: sessions, error } = await query.select()\n\n      if (error) {\n        console.error('Error terminating user sessions:', error)\n        return { success: false, terminatedCount: 0, error: error.message }\n      }\n\n      // Log security event\n      await this.logSecurityEvent(tenantId, userId, 'session_terminated', {\n        terminated_sessions: sessions?.length || 0,\n        termination_reason: reason,\n        excluded_session: excludeSessionId,\n      })\n\n      return {\n        success: true,\n        terminatedCount: sessions?.length || 0,\n      }\n    } catch (error) {\n      console.error('Error terminating user sessions:', error)\n      return {\n        success: false,\n        terminatedCount: 0,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Get active sessions for a user\n   */\n  async getUserSessions(\n    tenantId: string,\n    userId: string,\n    currentSessionToken?: string,\n    currentIpAddress?: string,\n    currentUserAgent?: string\n  ): Promise<{ success: boolean; sessions?: UserSession[]; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: sessions, error } = await supabase\n        .from('user_sessions')\n        .select('*')\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .eq('is_active', true)\n        .order('last_activity_at', { ascending: false })\n\n      if (error) {\n        console.error('Error getting user sessions:', error)\n        return { success: false, error: error.message }\n      }\n\n      // Mark current session using multiple criteria\n      let processedSessions = sessions || []\n      if (sessions) {\n        processedSessions = sessions.map(session => {\n          let isCurrent = false\n\n          // Primary method: match session token hash\n          if (currentSessionToken) {\n            const currentTokenHash = this.hashToken(currentSessionToken)\n            isCurrent = session.session_token_hash === currentTokenHash\n          }\n\n          // Fallback method: match IP and user agent for most recent session\n          if (!isCurrent && currentIpAddress && currentUserAgent) {\n            isCurrent =\n              session.ip_address === currentIpAddress && session.user_agent === currentUserAgent\n          }\n\n          return {\n            ...session,\n            is_current: isCurrent,\n          }\n        })\n      }\n\n      return { success: true, sessions: processedSessions }\n    } catch (error) {\n      console.error('Error getting user sessions:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Get current session by token\n   */\n  async getCurrentSession(\n    sessionToken: string\n  ): Promise<{ success: boolean; session?: UserSession; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n      const tokenHash = this.hashToken(sessionToken)\n\n      const { data: session, error } = await supabase\n        .from('user_sessions')\n        .select('*')\n        .eq('session_token_hash', tokenHash)\n        .eq('is_active', true)\n        .single()\n\n      if (error || !session) {\n        return { success: false, error: 'Session not found' }\n      }\n\n      return { success: true, session }\n    } catch (error) {\n      console.error('Error getting current session:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Check if session belongs to user and is terminable\n   */\n  async canTerminateSession(\n    sessionId: string,\n    userId: string,\n    tenantId: string,\n    currentIpAddress?: string,\n    currentUserAgent?: string\n  ): Promise<{ canTerminate: boolean; reason?: string; isCurrentSession?: boolean }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: session, error } = await supabase\n        .from('user_sessions')\n        .select('*')\n        .eq('id', sessionId)\n        .eq('tenant_id', tenantId)\n        .eq('is_active', true)\n        .single()\n\n      if (error || !session) {\n        return { canTerminate: false, reason: 'Session not found' }\n      }\n\n      if (session.user_id !== userId) {\n        return { canTerminate: false, reason: 'Unauthorized to terminate this session' }\n      }\n\n      // Check if this is the current session\n      const isCurrentSession =\n        currentIpAddress &&\n        currentUserAgent &&\n        session.ip_address === currentIpAddress &&\n        session.user_agent === currentUserAgent\n\n      if (isCurrentSession) {\n        return {\n          canTerminate: false,\n          reason: 'Cannot terminate current session. Please log out instead.',\n          isCurrentSession: true,\n        }\n      }\n\n      return { canTerminate: true }\n    } catch (error) {\n      console.error('Error checking session termination:', error)\n      return { canTerminate: false, reason: 'Internal error' }\n    }\n  }\n\n  /**\n   * List active sessions for display in UI\n   */\n  async listActiveSessions(\n    tenantId: string,\n    userId: string,\n    currentIpAddress?: string,\n    currentUserAgent?: string\n  ): Promise<{\n    success: boolean\n    sessions?: Array<{\n      id: string\n      device_info: string\n      ip_address: string\n      created_at: string\n      last_activity: string\n      is_current: boolean\n      user_agent?: string\n      location?: string\n    }>\n    error?: string\n  }> {\n    try {\n      const result = await this.getUserSessions(\n        tenantId,\n        userId,\n        undefined,\n        currentIpAddress,\n        currentUserAgent\n      )\n\n      if (!result.success) {\n        return {\n          success: false,\n          error: result.error,\n        }\n      }\n\n      // Transform sessions for UI display\n      const transformedSessions =\n        result.sessions?.map(session => {\n          // Determine if this is the current session based on IP and user agent\n          const isCurrent =\n            currentIpAddress &&\n            currentUserAgent &&\n            session.ip_address === currentIpAddress &&\n            session.user_agent === currentUserAgent\n\n          return {\n            id: session.id,\n            device_info: session.device_name || 'Unknown Device',\n            ip_address: session.ip_address,\n            created_at: session.created_at,\n            last_activity: session.last_activity_at || session.created_at,\n            is_current: isCurrent || false,\n            user_agent: session.user_agent,\n            location:\n              session.city && session.country_code\n                ? `${session.city}, ${session.country_code}`\n                : undefined,\n          }\n        }) || []\n\n      return {\n        success: true,\n        sessions: transformedSessions,\n      }\n    } catch (error) {\n      console.error('Error listing active sessions:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  // =====================================================\n  // SESSION ACTIVITY TRACKING\n  // =====================================================\n\n  /**\n   * Log session activity\n   */\n  async logSessionActivity(\n    tenantId: string,\n    sessionId: string,\n    activityType: 'login' | 'logout' | 'api_call' | 'page_view' | 'action' | 'security_event',\n    activityDetails: Record<string, any> = {},\n    ipAddress?: string,\n    userAgent?: string\n  ): Promise<void> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const activityData: Omit<SessionActivity, 'id' | 'created_at'> = {\n        tenant_id: tenantId,\n        session_id: sessionId,\n        activity_type: activityType,\n        activity_details: activityDetails,\n        ip_address: ipAddress,\n        user_agent: userAgent,\n      }\n\n      await supabase.from('session_activities').insert(activityData)\n    } catch (error) {\n      console.error('Error logging session activity:', error)\n    }\n  }\n\n  // =====================================================\n  // CONCURRENT SESSION MANAGEMENT\n  // =====================================================\n\n  /**\n   * Check concurrent session limits\n   */\n  async checkConcurrentSessionLimit(\n    tenantId: string,\n    userId: string,\n    maxSessions: number = 5\n  ): Promise<{ allowed: boolean; reason?: string; activeCount?: number }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Get tenant's max session setting\n      const { data: tenantSetting } = await supabase\n        .from('tenant_settings')\n        .select('setting_value')\n        .eq('tenant_id', tenantId)\n        .eq('setting_key', 'max_concurrent_sessions')\n        .single()\n\n      const tenantMaxSessions = tenantSetting ? parseInt(tenantSetting.setting_value) : maxSessions\n\n      // Count active sessions\n      const { count: activeCount, error } = await supabase\n        .from('user_sessions')\n        .select('*', { count: 'exact', head: true })\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .eq('is_active', true)\n        .gt('expires_at', new Date().toISOString())\n\n      if (error) {\n        console.error('Error checking session limit:', error)\n        return { allowed: true } // Allow on error to prevent lockout\n      }\n\n      const currentCount = activeCount || 0\n\n      if (currentCount >= tenantMaxSessions) {\n        // Terminate oldest session to make room\n        await this.terminateOldestSession(tenantId, userId)\n\n        // Log security event\n        await this.logSecurityEvent(tenantId, userId, 'concurrent_session_limit', {\n          active_sessions: currentCount,\n          max_sessions: tenantMaxSessions,\n          action: 'terminated_oldest',\n        })\n\n        return { allowed: true, activeCount: currentCount - 1 }\n      }\n\n      return { allowed: true, activeCount: currentCount }\n    } catch (error) {\n      console.error('Error checking concurrent session limit:', error)\n      return { allowed: true } // Allow on error to prevent lockout\n    }\n  }\n\n  /**\n   * Terminate oldest session for user\n   */\n  private async terminateOldestSession(tenantId: string, userId: string): Promise<void> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: oldestSession } = await supabase\n        .from('user_sessions')\n        .select('id')\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .eq('is_active', true)\n        .order('last_activity_at', { ascending: true })\n        .limit(1)\n        .single()\n\n      if (oldestSession) {\n        await this.terminateSession(oldestSession.id, 'concurrent_limit')\n      }\n    } catch (error) {\n      console.error('Error terminating oldest session:', error)\n    }\n  }\n\n  // =====================================================\n  // DEVICE AND LOCATION UTILITIES\n  // =====================================================\n\n  /**\n   * Parse device information from user agent\n   */\n  parseDeviceInfo(userAgent: string, customFingerprint?: string): DeviceInfo {\n    const parser = new UAParser(userAgent)\n    const result = parser.getResult()\n\n    // Generate device fingerprint\n    const fingerprint = customFingerprint || this.generateDeviceFingerprint(userAgent, result)\n\n    // Determine device type\n    let deviceType: DeviceInfo['type'] = 'desktop'\n    if (result.device.type === 'mobile') deviceType = 'mobile'\n    else if (result.device.type === 'tablet') deviceType = 'tablet'\n    else if (userAgent.includes('API') || userAgent.includes('Bot')) deviceType = 'api'\n\n    // Generate device name\n    const deviceName = this.generateDeviceName(result)\n\n    return {\n      fingerprint,\n      name: deviceName,\n      type: deviceType,\n      browser: {\n        name: result.browser.name,\n        version: result.browser.version,\n      },\n      os: {\n        name: result.os.name,\n        version: result.os.version,\n      },\n    }\n  }\n\n  /**\n   * Get location information from IP address\n   */\n  async getLocationInfo(ipAddress: string): Promise<LocationInfo> {\n    // In production, integrate with a geolocation service like MaxMind or IPinfo\n    // This is a simplified implementation\n    return {\n      ip: ipAddress,\n      country: 'US', // Would be determined by geolocation service\n      city: 'Unknown', // Would be determined by geolocation service\n    }\n  }\n\n  // =====================================================\n  // CLEANUP AND MAINTENANCE\n  // =====================================================\n\n  /**\n   * Clean up expired sessions\n   */\n  async cleanupExpiredSessions(): Promise<{\n    success: boolean\n    cleanedCount: number\n    error?: string\n  }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const { data: expiredSessions, error } = await supabase\n        .from('user_sessions')\n        .update({\n          is_active: false,\n          terminated_at: new Date().toISOString(),\n          termination_reason: 'timeout',\n        })\n        .or(\n          `expires_at.lt.${new Date().toISOString()},last_activity_at.lt.${new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()}`\n        )\n        .eq('is_active', true)\n        .select('id')\n\n      if (error) {\n        console.error('Error cleaning up expired sessions:', error)\n        return { success: false, cleanedCount: 0, error: error.message }\n      }\n\n      return {\n        success: true,\n        cleanedCount: expiredSessions?.length || 0,\n      }\n    } catch (error) {\n      console.error('Error cleaning up expired sessions:', error)\n      return {\n        success: false,\n        cleanedCount: 0,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  // =====================================================\n  // PRIVATE HELPER METHODS\n  // =====================================================\n\n  private generateSecureToken(): string {\n    return crypto.randomBytes(32).toString('base64url')\n  }\n\n  private hashToken(token: string): string {\n    return crypto.createHash('sha256').update(token).digest('hex')\n  }\n\n  private generateDeviceFingerprint(userAgent: string, parsedUA: any): string {\n    const components = [\n      parsedUA.browser.name || '',\n      parsedUA.browser.version || '',\n      parsedUA.os.name || '',\n      parsedUA.os.version || '',\n      parsedUA.device.vendor || '',\n      parsedUA.device.model || '',\n      userAgent.length.toString(),\n    ]\n\n    return crypto.createHash('sha256').update(components.join('|')).digest('hex').substring(0, 16)\n  }\n\n  private generateDeviceName(parsedUA: any): string {\n    const parts = []\n\n    if (parsedUA.device.vendor && parsedUA.device.model) {\n      parts.push(`${parsedUA.device.vendor} ${parsedUA.device.model}`)\n    } else if (parsedUA.os.name) {\n      parts.push(parsedUA.os.name)\n      if (parsedUA.os.version) {\n        parts.push(parsedUA.os.version)\n      }\n    }\n\n    if (parsedUA.browser.name) {\n      parts.push(parsedUA.browser.name)\n    }\n\n    return parts.join(' ') || 'Unknown Device'\n  }\n\n  private async logSecurityEvent(\n    tenantId: string,\n    userId: string,\n    eventType: SecurityEventInsert['event_type'],\n    details: Record<string, any>\n  ): Promise<void> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const eventData: SecurityEventInsert = {\n        tenant_id: tenantId,\n        user_id: userId,\n        event_type: eventType,\n        severity: 'low',\n        description: `Session ${eventType.replace('_', ' ')}`,\n        details,\n      }\n\n      await supabase.from('security_events').insert(eventData)\n    } catch (error) {\n      console.error('Error logging security event:', error)\n    }\n  }\n\n  // =====================================================\n  // PUBLIC METHODS FOR TESTING\n  // =====================================================\n\n  /**\n   * Update session activity\n   */\n  async updateSessionActivity(\n    sessionId: string,\n    userId: string,\n    ipAddress?: string\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const updateData: any = {\n        last_activity_at: new Date().toISOString(),\n      }\n\n      if (ipAddress) {\n        updateData.ip_address = ipAddress\n      }\n\n      const { error } = await supabase\n        .from('user_sessions')\n        .update(updateData)\n        .eq('id', sessionId)\n        .eq('user_id', userId)\n\n      if (error) {\n        return { success: false, error: error.message }\n      }\n\n      return { success: true }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Get session by ID\n   */\n  async getSessionById(\n    sessionId: string,\n    userId: string,\n    tenantId?: string\n  ): Promise<UserSession | null> {\n    try {\n      const supabase = await this.getSupabase()\n\n      let query = supabase\n        .from('user_sessions')\n        .select('*')\n        .eq('id', sessionId)\n        .eq('user_id', userId)\n\n      if (tenantId) {\n        query = query.eq('tenant_id', tenantId)\n      }\n\n      const { data: session, error } = await query.single()\n\n      if (error || !session) {\n        return null\n      }\n\n      return session\n    } catch (error) {\n      console.error('Error getting session by ID:', error)\n      return null\n    }\n  }\n\n  /**\n   * Parse user agent string to extract device info\n   */\n  parseUserAgent(userAgent: string): string {\n    if (!userAgent) return 'Unknown Device'\n\n    // Simple user agent parsing - in production use a proper library like 'ua-parser-js'\n    if (userAgent.includes('Chrome')) {\n      return 'Chrome Browser'\n    } else if (userAgent.includes('Safari') && !userAgent.includes('Chrome')) {\n      return 'Safari Browser'\n    } else if (userAgent.includes('Firefox')) {\n      return 'Firefox Browser'\n    } else if (userAgent.includes('Edge')) {\n      return 'Edge Browser'\n    } else if (userAgent.includes('iPhone')) {\n      return 'iPhone Device'\n    } else if (userAgent.includes('Android')) {\n      return 'Android Device'\n    } else {\n      return 'Unknown Device'\n    }\n  }\n\n  /**\n   * Check if session is expired\n   */\n  isSessionExpired(lastActivityAt: string): boolean {\n    const lastActivity = new Date(lastActivityAt)\n    const now = new Date()\n    const hoursSinceActivity = (now.getTime() - lastActivity.getTime()) / (1000 * 60 * 60)\n\n    // Session expires after 24 hours of inactivity\n    return hoursSinceActivity > 24\n  }\n}\n\n// Export singleton instance\nexport const sessionService = new SessionService()\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\services\\sso-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SsoSession' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":169,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":169,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":371,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10932,10935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10932,10935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":462,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":462,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13856,13859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13856,13859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":463,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":463,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13905,13908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13905,13908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'decodedResponse' is assigned a value but never used.","line":476,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":476,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'returnUrl' is defined but never used.","line":511,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":511,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":533,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":533,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16060,16063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16060,16063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":534,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":534,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16109,16112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16109,16112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":576,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":576,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17378,17381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17378,17381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":642,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":642,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19458,19461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19458,19461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":644,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":644,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19569,19572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19569,19572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":647,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":647,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19644,19647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19644,19647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":665,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":665,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20333,20336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20333,20336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":675,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":675,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20606,20609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20606,20609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":675,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":675,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20644,20647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20644,20647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":675,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":675,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20651,20654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20651,20654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":678,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":678,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20732,20735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20732,20735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":703,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":703,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21559,21562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21559,21562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// SINGLE SIGN-ON (SSO) SERVICE\n// =====================================================\n// Service for managing SSO providers, SAML, OAuth, and OIDC integration\n\nimport { createClient } from '@/lib/supabase/server'\nimport {\n  SsoProvider,\n  SsoProviderInsert,\n  SsoProviderUpdate,\n  SsoSession,\n  SecurityEventInsert,\n} from '@/lib/types/database'\nimport crypto from 'crypto'\n\nexport interface SsoProviderConfig {\n  // SAML 2.0 Configuration\n  saml?: {\n    entityId: string\n    ssoUrl: string\n    sloUrl?: string\n    certificate: string\n    signRequests?: boolean\n    wantAssertionsSigned?: boolean\n    attributeMapping?: {\n      email?: string\n      firstName?: string\n      lastName?: string\n      displayName?: string\n      groups?: string\n    }\n  }\n\n  // OAuth 2.0 / OIDC Configuration\n  oauth?: {\n    clientId: string\n    clientSecret: string\n    authorizationUrl: string\n    tokenUrl: string\n    userinfoUrl?: string\n    jwksUrl?: string\n    scopes?: string[]\n    attributeMapping?: {\n      email?: string\n      firstName?: string\n      lastName?: string\n      displayName?: string\n      groups?: string\n    }\n  }\n}\n\nexport interface SsoAuthResult {\n  success: boolean\n  redirectUrl?: string\n  sessionId?: string\n  error?: string\n}\n\nexport interface SsoCallbackResult {\n  success: boolean\n  userInfo?: {\n    email: string\n    firstName?: string\n    lastName?: string\n    displayName?: string\n    groups?: string[]\n  }\n  sessionId?: string\n  error?: string\n}\n\nexport class SsoService {\n  private async getSupabase() {\n    return createClient()\n  }\n\n  // =====================================================\n  // SSO PROVIDER MANAGEMENT\n  // =====================================================\n\n  /**\n   * Create SSO provider configuration\n   */\n  async createSsoProvider(\n    tenantId: string,\n    providerName: string,\n    providerType: 'saml2' | 'oauth2' | 'oidc',\n    config: SsoProviderConfig,\n    userId: string\n  ): Promise<{ success: boolean; provider?: SsoProvider; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Validate configuration\n      const validation = this.validateProviderConfig(providerType, config)\n      if (!validation.valid) {\n        return { success: false, error: validation.error }\n      }\n\n      // Encrypt sensitive data\n      const encryptedConfig = this.encryptSensitiveConfig(config)\n\n      // Create provider record\n      const providerData: SsoProviderInsert = {\n        tenant_id: tenantId,\n        provider_name: providerName,\n        provider_type: providerType,\n        configuration: encryptedConfig,\n        is_enabled: true,\n      }\n\n      // Set type-specific fields\n      if (providerType === 'saml2' && config.saml) {\n        providerData.entity_id = config.saml.entityId\n        providerData.sso_url = config.saml.ssoUrl\n        providerData.slo_url = config.saml.sloUrl\n        providerData.certificate = config.saml.certificate\n        providerData.attribute_mapping = config.saml.attributeMapping || {}\n      } else if ((providerType === 'oauth2' || providerType === 'oidc') && config.oauth) {\n        providerData.client_id = config.oauth.clientId\n        providerData.client_secret_encrypted = this.encryptSecret(config.oauth.clientSecret)\n        providerData.authorization_url = config.oauth.authorizationUrl\n        providerData.token_url = config.oauth.tokenUrl\n        providerData.userinfo_url = config.oauth.userinfoUrl\n        providerData.jwks_url = config.oauth.jwksUrl\n        providerData.attribute_mapping = config.oauth.attributeMapping || {}\n      }\n\n      const { data: provider, error } = await supabase\n        .from('sso_providers')\n        .insert(providerData)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error creating SSO provider:', error)\n        return { success: false, error: error.message }\n      }\n\n      // Log security event\n      await this.logSecurityEvent(tenantId, userId, 'login_success', {\n        action: 'sso_provider_created',\n        provider_name: providerName,\n        provider_type: providerType,\n      })\n\n      return { success: true, provider }\n    } catch (error) {\n      console.error('Error creating SSO provider:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Update SSO provider configuration\n   */\n  async updateSsoProvider(\n    tenantId: string,\n    providerId: string,\n    updates: {\n      providerName?: string\n      isEnabled?: boolean\n      config?: SsoProviderConfig\n    },\n    userId: string\n  ): Promise<{ success: boolean; provider?: SsoProvider; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Get existing provider\n      const { data: existingProvider, error: fetchError } = await supabase\n        .from('sso_providers')\n        .select('*')\n        .eq('id', providerId)\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (fetchError || !existingProvider) {\n        return { success: false, error: 'SSO provider not found' }\n      }\n\n      const updateData: SsoProviderUpdate = {}\n\n      if (updates.providerName) {\n        updateData.provider_name = updates.providerName\n      }\n\n      if (updates.isEnabled !== undefined) {\n        updateData.is_enabled = updates.isEnabled\n      }\n\n      if (updates.config) {\n        // Validate new configuration\n        const validation = this.validateProviderConfig(\n          existingProvider.provider_type,\n          updates.config\n        )\n        if (!validation.valid) {\n          return { success: false, error: validation.error }\n        }\n\n        // Encrypt and update configuration\n        const encryptedConfig = this.encryptSensitiveConfig(updates.config)\n        updateData.configuration = encryptedConfig\n\n        // Update type-specific fields\n        if (existingProvider.provider_type === 'saml2' && updates.config.saml) {\n          updateData.entity_id = updates.config.saml.entityId\n          updateData.sso_url = updates.config.saml.ssoUrl\n          updateData.slo_url = updates.config.saml.sloUrl\n          updateData.certificate = updates.config.saml.certificate\n          updateData.attribute_mapping = updates.config.saml.attributeMapping || {}\n        } else if (\n          (existingProvider.provider_type === 'oauth2' ||\n            existingProvider.provider_type === 'oidc') &&\n          updates.config.oauth\n        ) {\n          updateData.client_id = updates.config.oauth.clientId\n          updateData.client_secret_encrypted = this.encryptSecret(updates.config.oauth.clientSecret)\n          updateData.authorization_url = updates.config.oauth.authorizationUrl\n          updateData.token_url = updates.config.oauth.tokenUrl\n          updateData.userinfo_url = updates.config.oauth.userinfoUrl\n          updateData.jwks_url = updates.config.oauth.jwksUrl\n          updateData.attribute_mapping = updates.config.oauth.attributeMapping || {}\n        }\n      }\n\n      const { data: provider, error } = await supabase\n        .from('sso_providers')\n        .update(updateData)\n        .eq('id', providerId)\n        .eq('tenant_id', tenantId)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error updating SSO provider:', error)\n        return { success: false, error: error.message }\n      }\n\n      return { success: true, provider }\n    } catch (error) {\n      console.error('Error updating SSO provider:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Get SSO providers for tenant\n   */\n  async getSsoProviders(\n    tenantId: string,\n    enabledOnly: boolean = true\n  ): Promise<{ success: boolean; providers?: SsoProvider[]; error?: string }> {\n    try {\n      const supabase = await this.getSupabase()\n\n      let query = supabase\n        .from('sso_providers')\n        .select('*')\n        .eq('tenant_id', tenantId)\n        .order('created_at', { ascending: false })\n\n      if (enabledOnly) {\n        query = query.eq('is_enabled', true)\n      }\n\n      const { data: providers, error } = await query\n\n      if (error) {\n        console.error('Error getting SSO providers:', error)\n        return { success: false, error: error.message }\n      }\n\n      // Decrypt sensitive configuration for admin use\n      const decryptedProviders = providers?.map(provider => ({\n        ...provider,\n        configuration: this.decryptSensitiveConfig(provider.configuration),\n      }))\n\n      return { success: true, providers: decryptedProviders }\n    } catch (error) {\n      console.error('Error getting SSO providers:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  // =====================================================\n  // SSO AUTHENTICATION FLOW\n  // =====================================================\n\n  /**\n   * Initiate SSO authentication\n   */\n  async initiateSsoAuth(\n    tenantId: string,\n    providerId: string,\n    returnUrl?: string\n  ): Promise<SsoAuthResult> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Get provider configuration\n      const { data: provider, error } = await supabase\n        .from('sso_providers')\n        .select('*')\n        .eq('id', providerId)\n        .eq('tenant_id', tenantId)\n        .eq('is_enabled', true)\n        .single()\n\n      if (error || !provider) {\n        return { success: false, error: 'SSO provider not found or disabled' }\n      }\n\n      // Generate session state\n      const sessionState = crypto.randomBytes(32).toString('base64url')\n      const sessionId = crypto.randomUUID()\n\n      // Create SSO session record\n      const expiresAt = new Date(Date.now() + 10 * 60 * 1000) // 10 minutes\n\n      await supabase.from('sso_sessions').insert({\n        id: sessionId,\n        tenant_id: tenantId,\n        user_id: '', // Will be set after successful authentication\n        provider_id: providerId,\n        oauth_state: sessionState,\n        attributes: { return_url: returnUrl },\n        expires_at: expiresAt.toISOString(),\n      })\n\n      let redirectUrl: string\n\n      if (provider.provider_type === 'saml2') {\n        redirectUrl = await this.buildSamlAuthRequest(provider, sessionState)\n      } else {\n        redirectUrl = await this.buildOAuthAuthRequest(provider, sessionState, returnUrl)\n      }\n\n      return {\n        success: true,\n        redirectUrl,\n        sessionId,\n      }\n    } catch (error) {\n      console.error('Error initiating SSO auth:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  /**\n   * Handle SSO callback\n   */\n  async handleSsoCallback(\n    tenantId: string,\n    providerId: string,\n    callbackData: Record<string, any>\n  ): Promise<SsoCallbackResult> {\n    try {\n      const supabase = await this.getSupabase()\n\n      // Get provider configuration\n      const { data: provider, error } = await supabase\n        .from('sso_providers')\n        .select('*')\n        .eq('id', providerId)\n        .eq('tenant_id', tenantId)\n        .eq('is_enabled', true)\n        .single()\n\n      if (error || !provider) {\n        return { success: false, error: 'SSO provider not found or disabled' }\n      }\n\n      let userInfo: SsoCallbackResult['userInfo']\n      let sessionId: string\n\n      if (provider.provider_type === 'saml2') {\n        const samlResult = await this.processSamlResponse(provider, callbackData)\n        if (!samlResult.success) {\n          return { success: false, error: samlResult.error }\n        }\n        userInfo = samlResult.userInfo\n        sessionId = samlResult.sessionId!\n      } else {\n        const oauthResult = await this.processOAuthCallback(provider, callbackData)\n        if (!oauthResult.success) {\n          return { success: false, error: oauthResult.error }\n        }\n        userInfo = oauthResult.userInfo\n        sessionId = oauthResult.sessionId!\n      }\n\n      // Update SSO session with user info\n      await supabase\n        .from('sso_sessions')\n        .update({\n          attributes: { ...callbackData, user_info: userInfo },\n        })\n        .eq('id', sessionId)\n\n      return {\n        success: true,\n        userInfo,\n        sessionId,\n      }\n    } catch (error) {\n      console.error('Error handling SSO callback:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      }\n    }\n  }\n\n  // =====================================================\n  // SAML 2.0 IMPLEMENTATION\n  // =====================================================\n\n  private async buildSamlAuthRequest(provider: SsoProvider, sessionState: string): Promise<string> {\n    // This is a simplified SAML implementation\n    // In production, use a proper SAML library like @node-saml/node-saml\n\n    const samlRequest = `\n      <samlp:AuthnRequest \n        xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"\n        xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n        ID=\"${crypto.randomUUID()}\"\n        Version=\"2.0\"\n        IssueInstant=\"${new Date().toISOString()}\"\n        Destination=\"${provider.sso_url}\"\n        AssertionConsumerServiceURL=\"${process.env.NEXT_PUBLIC_APP_URL}/api/auth/sso/callback/${provider.id}\">\n        <saml:Issuer>${provider.entity_id}</saml:Issuer>\n      </samlp:AuthnRequest>\n    `\n\n    const encodedRequest = Buffer.from(samlRequest).toString('base64')\n    const params = new URLSearchParams({\n      SAMLRequest: encodedRequest,\n      RelayState: sessionState,\n    })\n\n    return `${provider.sso_url}?${params.toString()}`\n  }\n\n  private async processSamlResponse(\n    provider: SsoProvider,\n    callbackData: Record<string, any>\n  ): Promise<{ success: boolean; userInfo?: any; sessionId?: string; error?: string }> {\n    try {\n      // This is a simplified SAML response processing\n      // In production, use a proper SAML library for validation and parsing\n\n      const samlResponse = callbackData.SAMLResponse\n      const relayState = callbackData.RelayState\n\n      if (!samlResponse) {\n        return { success: false, error: 'Missing SAML response' }\n      }\n\n      // Decode and parse SAML response\n      const decodedResponse = Buffer.from(samlResponse, 'base64').toString('utf-8')\n\n      // Validate signature and extract user attributes\n      // This would involve XML parsing and signature verification\n\n      // Mock user info extraction\n      const userInfo = {\n        email: 'user@example.com', // Would be extracted from SAML assertion\n        firstName: 'John',\n        lastName: 'Doe',\n        displayName: 'John Doe',\n        groups: ['users'],\n      }\n\n      return {\n        success: true,\n        userInfo,\n        sessionId: relayState,\n      }\n    } catch (error) {\n      console.error('Error processing SAML response:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'SAML processing error',\n      }\n    }\n  }\n\n  // =====================================================\n  // OAuth 2.0 / OIDC IMPLEMENTATION\n  // =====================================================\n\n  private async buildOAuthAuthRequest(\n    provider: SsoProvider,\n    sessionState: string,\n    returnUrl?: string\n  ): Promise<string> {\n    const config = this.decryptSensitiveConfig(provider.configuration)\n    const oauth = config.oauth\n\n    if (!oauth) {\n      throw new Error('OAuth configuration not found')\n    }\n\n    const params = new URLSearchParams({\n      response_type: 'code',\n      client_id: oauth.clientId,\n      redirect_uri: `${process.env.NEXT_PUBLIC_APP_URL}/api/auth/sso/callback/${provider.id}`,\n      scope: oauth.scopes?.join(' ') || 'openid email profile',\n      state: sessionState,\n    })\n\n    return `${oauth.authorizationUrl}?${params.toString()}`\n  }\n\n  private async processOAuthCallback(\n    provider: SsoProvider,\n    callbackData: Record<string, any>\n  ): Promise<{ success: boolean; userInfo?: any; sessionId?: string; error?: string }> {\n    try {\n      const config = this.decryptSensitiveConfig(provider.configuration)\n      const oauth = config.oauth\n\n      if (!oauth) {\n        return { success: false, error: 'OAuth configuration not found' }\n      }\n\n      const { code, state, error } = callbackData\n\n      if (error) {\n        return { success: false, error: `OAuth error: ${error}` }\n      }\n\n      if (!code) {\n        return { success: false, error: 'Missing authorization code' }\n      }\n\n      // Exchange code for tokens\n      const tokenResponse = await fetch(oauth.tokenUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Accept: 'application/json',\n        },\n        body: new URLSearchParams({\n          grant_type: 'authorization_code',\n          client_id: oauth.clientId,\n          client_secret: oauth.clientSecret,\n          code,\n          redirect_uri: `${process.env.NEXT_PUBLIC_APP_URL}/api/auth/sso/callback/${provider.id}`,\n        }),\n      })\n\n      if (!tokenResponse.ok) {\n        return { success: false, error: 'Failed to exchange authorization code' }\n      }\n\n      const tokens = await tokenResponse.json()\n\n      // Get user info\n      let userInfo: any\n\n      if (oauth.userinfoUrl) {\n        const userResponse = await fetch(oauth.userinfoUrl, {\n          headers: {\n            Authorization: `Bearer ${tokens.access_token}`,\n          },\n        })\n\n        if (userResponse.ok) {\n          userInfo = await userResponse.json()\n        }\n      } else if (tokens.id_token) {\n        // Parse JWT ID token for OIDC\n        userInfo = this.parseJwtPayload(tokens.id_token)\n      }\n\n      // Map attributes based on provider configuration\n      const mappedUserInfo = this.mapUserAttributes(userInfo, provider.attribute_mapping)\n\n      return {\n        success: true,\n        userInfo: mappedUserInfo,\n        sessionId: state,\n      }\n    } catch (error) {\n      console.error('Error processing OAuth callback:', error)\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'OAuth processing error',\n      }\n    }\n  }\n\n  // =====================================================\n  // HELPER METHODS\n  // =====================================================\n\n  private validateProviderConfig(\n    providerType: 'saml2' | 'oauth2' | 'oidc',\n    config: SsoProviderConfig\n  ): { valid: boolean; error?: string } {\n    if (providerType === 'saml2') {\n      if (!config.saml) {\n        return { valid: false, error: 'SAML configuration is required' }\n      }\n      if (!config.saml.entityId || !config.saml.ssoUrl || !config.saml.certificate) {\n        return { valid: false, error: 'Missing required SAML configuration fields' }\n      }\n    } else if (providerType === 'oauth2' || providerType === 'oidc') {\n      if (!config.oauth) {\n        return { valid: false, error: 'OAuth configuration is required' }\n      }\n      if (\n        !config.oauth.clientId ||\n        !config.oauth.clientSecret ||\n        !config.oauth.authorizationUrl ||\n        !config.oauth.tokenUrl\n      ) {\n        return { valid: false, error: 'Missing required OAuth configuration fields' }\n      }\n    }\n\n    return { valid: true }\n  }\n\n  private encryptSensitiveConfig(config: SsoProviderConfig): Record<string, any> {\n    // In production, properly encrypt sensitive configuration data\n    return config as Record<string, any>\n  }\n\n  private decryptSensitiveConfig(encryptedConfig: Record<string, any>): SsoProviderConfig {\n    // In production, properly decrypt sensitive configuration data\n    return encryptedConfig as SsoProviderConfig\n  }\n\n  private encryptSecret(secret: string): string {\n    // In production, use proper encryption with a key management service\n    const algorithm = 'aes-256-gcm'\n    const key = crypto.scryptSync(process.env.ENCRYPTION_KEY || 'default-key', 'salt', 32)\n    const iv = crypto.randomBytes(16)\n\n    const cipher = crypto.createCipheriv(algorithm, key, iv)\n    let encrypted = cipher.update(secret, 'utf8', 'hex')\n    encrypted += cipher.final('hex')\n\n    return `${iv.toString('hex')}:${encrypted}`\n  }\n\n  private parseJwtPayload(token: string): any {\n    try {\n      const [, payload] = token.split('.')\n      return JSON.parse(Buffer.from(payload, 'base64url').toString())\n    } catch (error) {\n      console.error('Error parsing JWT payload:', error)\n      return {}\n    }\n  }\n\n  private mapUserAttributes(userInfo: any, attributeMapping: Record<string, any>): any {\n    if (!attributeMapping || !userInfo) return userInfo\n\n    const mapped: any = {}\n\n    if (attributeMapping.email) {\n      mapped.email = userInfo[attributeMapping.email] || userInfo.email\n    }\n    if (attributeMapping.firstName) {\n      mapped.firstName = userInfo[attributeMapping.firstName] || userInfo.given_name\n    }\n    if (attributeMapping.lastName) {\n      mapped.lastName = userInfo[attributeMapping.lastName] || userInfo.family_name\n    }\n    if (attributeMapping.displayName) {\n      mapped.displayName = userInfo[attributeMapping.displayName] || userInfo.name\n    }\n    if (attributeMapping.groups) {\n      mapped.groups = userInfo[attributeMapping.groups] || userInfo.groups || []\n    }\n\n    return { ...userInfo, ...mapped }\n  }\n\n  private async logSecurityEvent(\n    tenantId: string,\n    userId: string,\n    eventType: SecurityEventInsert['event_type'],\n    details: Record<string, any>\n  ): Promise<void> {\n    try {\n      const supabase = await this.getSupabase()\n\n      const eventData: SecurityEventInsert = {\n        tenant_id: tenantId,\n        user_id: userId,\n        event_type: eventType,\n        severity: 'low',\n        description: `SSO ${eventType.replace('_', ' ')}`,\n        details,\n      }\n\n      await supabase.from('security_events').insert(eventData)\n    } catch (error) {\n      console.error('Error logging security event:', error)\n    }\n  }\n}\n\n// Export singleton instance\nexport const ssoService = new SsoService()\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\supabase\\client.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2577,2580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2577,2580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2943,2946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2943,2946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getSupabaseClientSingleton } from './singleton'\n\n// Create a mock client for server-side rendering\nconst createMockClient = () => ({\n  auth: {\n    getUser: () => Promise.resolve({ data: { user: null }, error: null }),\n    getSession: () => Promise.resolve({ data: { session: null }, error: null }),\n    signInWithOAuth: () =>\n      Promise.resolve({ data: null, error: new Error('Mock client - no auth operations') }),\n    signInWithPassword: () =>\n      Promise.resolve({ data: null, error: new Error('Mock client - no auth operations') }),\n    signUp: () =>\n      Promise.resolve({ data: null, error: new Error('Mock client - no auth operations') }),\n    signOut: () => Promise.resolve({ error: null }),\n    updateUser: () =>\n      Promise.resolve({ data: null, error: new Error('Mock client - no auth operations') }),\n    setSession: () =>\n      Promise.resolve({ data: null, error: new Error('Mock client - no auth operations') }),\n    resetPasswordForEmail: () =>\n      Promise.resolve({ data: null, error: new Error('Mock client - no auth operations') }),\n    onAuthStateChange: () => ({\n      data: { subscription: { unsubscribe: () => {} } },\n      error: null,\n    }),\n  },\n  from: () => ({\n    select: () => ({\n      eq: () => ({\n        single: () =>\n          Promise.resolve({\n            data: null,\n            error: { code: 'MOCK_CLIENT', message: 'Mock client - no database operations' },\n          }),\n      }),\n      order: () => Promise.resolve({ data: [], error: null }),\n      limit: () => Promise.resolve({ data: [], error: null }),\n    }),\n    insert: () =>\n      Promise.resolve({ data: null, error: { message: 'Mock client - no database operations' } }),\n    update: () =>\n      Promise.resolve({ data: null, error: { message: 'Mock client - no database operations' } }),\n    delete: () =>\n      Promise.resolve({ data: null, error: { message: 'Mock client - no database operations' } }),\n  }),\n  storage: {\n    from: () => ({\n      upload: () =>\n        Promise.resolve({ data: null, error: { message: 'Mock client - no storage operations' } }),\n      download: () =>\n        Promise.resolve({ data: null, error: { message: 'Mock client - no storage operations' } }),\n      remove: () =>\n        Promise.resolve({ data: null, error: { message: 'Mock client - no storage operations' } }),\n    }),\n  },\n})\n\nexport function createClient() {\n  // Check if we're in a server environment (build time or SSR)\n  if (typeof window === 'undefined') {\n    console.log('Server environment detected, using mock client')\n    return createMockClient() as any\n  }\n\n  try {\n    // Use the singleton pattern to ensure consistent client usage\n    const client = getSupabaseClientSingleton()\n    console.log('Supabase client created successfully')\n    return client\n  } catch (error) {\n    console.error('Error creating Supabase client:', error)\n    console.log('Falling back to mock client')\n    return createMockClient() as any\n  }\n}\n\n// Health check function\nexport const checkSupabaseConnection = async () => {\n  try {\n    const client = createClient()\n    const { data, error } = await client.auth.getSession()\n\n    if (error) {\n      console.error('Supabase connection error:', error)\n      return { connected: false, error: error.message }\n    }\n\n    console.log('Supabase connection successful')\n    return { connected: true, session: data.session }\n  } catch (error) {\n    console.error('Supabase health check failed:', error)\n    return { connected: false, error: error instanceof Error ? error.message : 'Unknown error' }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\supabase\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\supabase\\middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'options' is defined but never used.","line":23,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServerClient } from '@supabase/ssr'\nimport { NextResponse, type NextRequest } from 'next/server'\n\nexport async function updateSession(request: NextRequest) {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n\n  if (!supabaseUrl || !supabaseAnonKey) {\n    console.error('Missing Supabase environment variables')\n    return NextResponse.next()\n  }\n\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(supabaseUrl, supabaseAnonKey, {\n    cookies: {\n      getAll() {\n        return request.cookies.getAll()\n      },\n      setAll(cookiesToSet) {\n        cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))\n        supabaseResponse = NextResponse.next({\n          request,\n        })\n        cookiesToSet.forEach(({ name, value, options }) =>\n          supabaseResponse.cookies.set(name, value, options)\n        )\n      },\n    },\n  })\n\n  // IMPORTANT: Avoid writing any logic between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  // Allow access to auth-related pages without restrictions\n  const isAuthPage =\n    request.nextUrl.pathname.startsWith('/login') ||\n    request.nextUrl.pathname.startsWith('/signup') ||\n    request.nextUrl.pathname.startsWith('/auth/')\n\n  // Only redirect to login if user is not authenticated and trying to access protected pages\n  // Don't redirect if they're already on an auth page\n  if (!user && !isAuthPage && request.nextUrl.pathname !== '/') {\n    // no user, potentially respond by redirecting the user to the login page\n    const url = request.nextUrl.clone()\n    url.pathname = '/login'\n    return NextResponse.redirect(url)\n  }\n\n  // Don't redirect logged-in users away from auth pages - let them access them if they want\n  // This allows users to manually visit login/signup pages even when logged in\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is. If you're\n  // creating a new response object with NextResponse.next() make sure to:\n  // 1. Pass the request in it, like so:\n  //    const myNewResponse = NextResponse.next({ request })\n  // 2. Copy over the cookies, like so:\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n  // 3. Change the myNewResponse object here instead of the supabaseResponse object\n\n  return supabaseResponse\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\supabase\\server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\supabase\\singleton.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\types\\database.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6112,6115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6112,6115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":244,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6385,6388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6385,6388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":254,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6617,6620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6617,6620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":265,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6891,6894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6891,6894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":272,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7063,7066],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7063,7066],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":283,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7337,7340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7337,7340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7527,7530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7527,7530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":355,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":355,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8972,8975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8972,8975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":368,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9211,9214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9211,9214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":387,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9624,9627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9624,9627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":397,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":397,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9850,9853],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9850,9853],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":443,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":443,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10875,10878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10875,10878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":462,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":462,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11327,11330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11327,11330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1236,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1236,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28545,28548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28545,28548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1243,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1243,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28660,28663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28660,28663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// ENTERPRISE ASSET MANAGEMENT PLATFORM - DATABASE TYPES\n// =====================================================\n// TypeScript types that match the enhanced database schema\n\nexport type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]\n\n// =====================================================\n// ENUM TYPES\n// =====================================================\n\nexport type TenantStatus = 'active' | 'suspended' | 'trial' | 'cancelled'\nexport type SubscriptionPlan = 'starter' | 'professional' | 'enterprise' | 'custom'\nexport type AssetStatus =\n  | 'active'\n  | 'maintenance'\n  | 'retired'\n  | 'lost'\n  | 'damaged'\n  | 'disposed'\n  | 'reserved'\nexport type DepreciationMethod =\n  | 'straight_line'\n  | 'declining_balance'\n  | 'sum_of_years'\n  | 'units_of_production'\nexport type IoTDeviceType =\n  | 'gps_tracker'\n  | 'temperature_sensor'\n  | 'humidity_sensor'\n  | 'vibration_sensor'\n  | 'rfid_reader'\n  | 'beacon'\nexport type IoTProtocol = 'mqtt' | 'lorawan' | 'sigfox' | 'wifi' | 'bluetooth' | 'cellular'\nexport type DeviceStatus = 'active' | 'inactive' | 'maintenance' | 'error'\nexport type GeofenceEventType = 'entry' | 'exit' | 'dwell'\nexport type GeofenceStatus = 'active' | 'inactive' | 'draft'\nexport type AuditAction =\n  | 'create'\n  | 'update'\n  | 'delete'\n  | 'login'\n  | 'logout'\n  | 'export'\n  | 'import'\n  | 'assign'\n  | 'transfer'\nexport type UserRole = 'owner' | 'admin' | 'manager' | 'user' | 'viewer'\nexport type MaintenanceType = 'preventive' | 'corrective' | 'predictive'\nexport type MaintenancePriority = 'low' | 'medium' | 'high' | 'critical'\nexport type MaintenanceStatus = 'scheduled' | 'in_progress' | 'completed' | 'cancelled' | 'overdue'\n\n// =====================================================\n// CORE INTERFACES\n// =====================================================\n\nexport interface Database {\n  public: {\n    Tables: {\n      tenants: {\n        Row: Tenant\n        Insert: TenantInsert\n        Update: TenantUpdate\n      }\n      profiles: {\n        Row: Profile\n        Insert: ProfileInsert\n        Update: ProfileUpdate\n      }\n      asset_categories: {\n        Row: AssetCategory\n        Insert: AssetCategoryInsert\n        Update: AssetCategoryUpdate\n      }\n      assets: {\n        Row: Asset\n        Insert: AssetInsert\n        Update: AssetUpdate\n      }\n      asset_maintenance: {\n        Row: AssetMaintenance\n        Insert: AssetMaintenanceInsert\n        Update: AssetMaintenanceUpdate\n      }\n      asset_history: {\n        Row: AssetHistory\n        Insert: AssetHistoryInsert\n        Update: AssetHistoryUpdate\n      }\n      iot_devices: {\n        Row: IoTDevice\n        Insert: IoTDeviceInsert\n        Update: IoTDeviceUpdate\n      }\n      sensor_data: {\n        Row: SensorData\n        Insert: SensorDataInsert\n        Update: SensorDataUpdate\n      }\n      geofences: {\n        Row: Geofence\n        Insert: GeofenceInsert\n        Update: GeofenceUpdate\n      }\n      geofence_events: {\n        Row: GeofenceEvent\n        Insert: GeofenceEventInsert\n        Update: GeofenceEventUpdate\n      }\n      audit_logs: {\n        Row: AuditLog\n        Insert: AuditLogInsert\n        Update: AuditLogUpdate\n      }\n      data_retention_policies: {\n        Row: DataRetentionPolicy\n        Insert: DataRetentionPolicyInsert\n        Update: DataRetentionPolicyUpdate\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      get_current_tenant_id: {\n        Args: Record<PropertyKey, never>\n        Returns: string\n      }\n      is_tenant_owner: {\n        Args: Record<PropertyKey, never>\n        Returns: boolean\n      }\n      has_role: {\n        Args: { required_role: string }\n        Returns: boolean\n      }\n      has_any_role: {\n        Args: { required_roles: string[] }\n        Returns: boolean\n      }\n      can_access_asset: {\n        Args: { asset_id: string }\n        Returns: boolean\n      }\n      set_current_user_context: {\n        Args: { user_id: string; tenant_id: string }\n        Returns: void\n      }\n      clear_user_context: {\n        Args: Record<PropertyKey, never>\n        Returns: void\n      }\n      check_tenant_access: {\n        Args: { target_tenant_id: string }\n        Returns: boolean\n      }\n    }\n    Enums: {\n      tenant_status: TenantStatus\n      subscription_plan: SubscriptionPlan\n      asset_status: AssetStatus\n      depreciation_method: DepreciationMethod\n      iot_device_type: IoTDeviceType\n      iot_protocol: IoTProtocol\n      device_status: DeviceStatus\n      geofence_event_type: GeofenceEventType\n      geofence_status: GeofenceStatus\n      audit_action: AuditAction\n    }\n  }\n}\n\n// =====================================================\n// AUTHENTICATION TYPES\n// =====================================================\n\nexport interface MfaMethod {\n  id: string\n  tenant_id: string\n  user_id: string\n  method_type: 'totp' | 'sms' | 'email' | 'backup_codes'\n  method_name: string\n  secret_encrypted?: string\n  backup_codes?: string[]\n  is_verified: boolean\n  is_primary: boolean\n  created_at: string\n  updated_at: string\n  last_used_at?: string\n}\n\nexport interface MfaMethodInsert {\n  tenant_id: string\n  user_id: string\n  method_type: 'totp' | 'sms' | 'email' | 'backup_codes'\n  method_name: string\n  secret_encrypted?: string\n  backup_codes?: string[]\n  is_verified?: boolean\n  is_primary?: boolean\n}\n\nexport interface MfaMethodUpdate {\n  method_name?: string\n  secret_encrypted?: string\n  backup_codes?: string[]\n  is_verified?: boolean\n  is_primary?: boolean\n  last_used_at?: string\n}\n\nexport interface MfaVerificationAttempt {\n  id: string\n  tenant_id: string\n  user_id: string\n  mfa_method_id: string\n  attempt_type: 'login' | 'setup' | 'recovery'\n  code_hash?: string\n  ip_address?: string\n  user_agent?: string\n  is_successful: boolean\n  failure_reason?: string\n  created_at: string\n  expires_at: string\n}\n\nexport interface SsoProvider {\n  id: string\n  tenant_id: string\n  provider_name: string\n  provider_type: 'saml2' | 'oauth2' | 'oidc'\n  is_enabled: boolean\n  configuration: Record<string, any>\n  entity_id?: string\n  sso_url?: string\n  slo_url?: string\n  certificate?: string\n  client_id?: string\n  client_secret_encrypted?: string\n  authorization_url?: string\n  token_url?: string\n  userinfo_url?: string\n  jwks_url?: string\n  attribute_mapping: Record<string, any>\n  created_at: string\n  updated_at: string\n}\n\nexport interface SsoProviderInsert {\n  tenant_id: string\n  provider_name: string\n  provider_type: 'saml2' | 'oauth2' | 'oidc'\n  is_enabled?: boolean\n  configuration?: Record<string, any>\n  entity_id?: string\n  sso_url?: string\n  slo_url?: string\n  certificate?: string\n  client_id?: string\n  client_secret_encrypted?: string\n  authorization_url?: string\n  token_url?: string\n  userinfo_url?: string\n  jwks_url?: string\n  attribute_mapping?: Record<string, any>\n}\n\nexport interface SsoProviderUpdate {\n  provider_name?: string\n  provider_type?: 'saml2' | 'oauth2' | 'oidc'\n  is_enabled?: boolean\n  configuration?: Record<string, any>\n  entity_id?: string\n  sso_url?: string\n  slo_url?: string\n  certificate?: string\n  client_id?: string\n  client_secret_encrypted?: string\n  authorization_url?: string\n  token_url?: string\n  userinfo_url?: string\n  jwks_url?: string\n  attribute_mapping?: Record<string, any>\n}\n\nexport interface SsoSession {\n  id: string\n  tenant_id: string\n  user_id: string\n  provider_id: string\n  saml_session_id?: string\n  oauth_state?: string\n  attributes: Record<string, any>\n  ip_address?: string\n  user_agent?: string\n  created_at: string\n  expires_at: string\n  terminated_at?: string\n}\n\nexport interface UserSession {\n  id: string\n  tenant_id: string\n  user_id: string\n  session_token_hash: string\n  refresh_token_hash?: string\n  device_fingerprint?: string\n  device_name?: string\n  device_type?: 'desktop' | 'mobile' | 'tablet' | 'api'\n  browser_name?: string\n  browser_version?: string\n  os_name?: string\n  os_version?: string\n  ip_address: string\n  country_code?: string\n  city?: string\n  user_agent?: string\n  is_active: boolean\n  last_activity_at: string\n  created_at: string\n  expires_at: string\n  terminated_at?: string\n  termination_reason?:\n    | 'logout'\n    | 'timeout'\n    | 'admin_revoke'\n    | 'security_revoke'\n    | 'concurrent_limit'\n}\n\nexport interface UserSessionInsert {\n  tenant_id: string\n  user_id: string\n  session_token_hash: string\n  refresh_token_hash?: string\n  device_fingerprint?: string\n  device_name?: string\n  device_type?: 'desktop' | 'mobile' | 'tablet' | 'api'\n  browser_name?: string\n  browser_version?: string\n  os_name?: string\n  os_version?: string\n  ip_address: string\n  country_code?: string\n  city?: string\n  user_agent?: string\n  expires_at: string\n}\n\nexport interface SessionActivity {\n  id: string\n  tenant_id: string\n  session_id: string\n  activity_type: 'login' | 'logout' | 'api_call' | 'page_view' | 'action' | 'security_event'\n  activity_details: Record<string, any>\n  ip_address?: string\n  user_agent?: string\n  created_at: string\n}\n\nexport interface ApiKey {\n  id: string\n  tenant_id: string\n  user_id: string\n  key_name: string\n  key_prefix: string\n  key_hash: string\n  permissions: Record<string, any>\n  scopes: string[]\n  allowed_ips: string[]\n  rate_limit_requests: number\n  rate_limit_window_seconds: number\n  is_active: boolean\n  last_used_at?: string\n  created_at: string\n  expires_at?: string\n  revoked_at?: string\n  revoked_reason?: string\n}\n\nexport interface ApiKeyInsert {\n  tenant_id: string\n  user_id: string\n  key_name: string\n  key_prefix: string\n  key_hash: string\n  permissions?: Record<string, any>\n  scopes?: string[]\n  allowed_ips?: string[]\n  rate_limit_requests?: number\n  rate_limit_window_seconds?: number\n  expires_at?: string\n}\n\nexport interface ApiKeyUpdate {\n  key_name?: string\n  permissions?: Record<string, any>\n  scopes?: string[]\n  allowed_ips?: string[]\n  rate_limit_requests?: number\n  rate_limit_window_seconds?: number\n  is_active?: boolean\n  expires_at?: string\n  revoked_at?: string\n  revoked_reason?: string\n}\n\nexport interface ApiKeyUsage {\n  id: string\n  tenant_id: string\n  api_key_id: string\n  endpoint: string\n  method: string\n  status_code: number\n  response_time_ms?: number\n  ip_address?: string\n  user_agent?: string\n  request_size_bytes?: number\n  response_size_bytes?: number\n  created_at: string\n}\n\nexport interface SecurityEvent {\n  id: string\n  tenant_id: string\n  user_id?: string\n  session_id?: string\n  event_type:\n    | 'login_success'\n    | 'login_failure'\n    | 'mfa_success'\n    | 'mfa_failure'\n    | 'password_change'\n    | 'account_locked'\n    | 'account_unlocked'\n    | 'suspicious_activity'\n    | 'api_key_created'\n    | 'api_key_revoked'\n    | 'session_terminated'\n    | 'concurrent_session_limit'\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  description: string\n  details: Record<string, any>\n  ip_address?: string\n  user_agent?: string\n  location_country?: string\n  location_city?: string\n  is_resolved: boolean\n  resolved_at?: string\n  resolved_by?: string\n  resolution_notes?: string\n  created_at: string\n}\n\nexport interface SecurityEventInsert {\n  tenant_id: string\n  user_id?: string\n  session_id?: string\n  event_type: SecurityEvent['event_type']\n  severity: SecurityEvent['severity']\n  description: string\n  details?: Record<string, any>\n  ip_address?: string\n  user_agent?: string\n  location_country?: string\n  location_city?: string\n}\n\n// =====================================================\n// TENANT TYPES\n// =====================================================\n\nexport interface Tenant {\n  id: string\n  name: string\n  slug: string\n  status: TenantStatus\n  plan: SubscriptionPlan\n  stripe_customer_id?: string\n  stripe_subscription_id?: string\n  billing_email?: string\n  trial_ends_at?: string\n  subscription_ends_at?: string\n  settings: Json\n  branding: Json\n  feature_flags: Json\n  data_residency: string\n  compliance_requirements: string[]\n  asset_limit: number\n  user_limit: number\n  storage_limit_gb: number\n  created_at: string\n  updated_at: string\n  created_by?: string\n}\n\nexport interface TenantInsert {\n  id?: string\n  name: string\n  slug: string\n  status?: TenantStatus\n  plan?: SubscriptionPlan\n  stripe_customer_id?: string\n  stripe_subscription_id?: string\n  billing_email?: string\n  trial_ends_at?: string\n  subscription_ends_at?: string\n  settings?: Json\n  branding?: Json\n  feature_flags?: Json\n  data_residency?: string\n  compliance_requirements?: string[]\n  asset_limit?: number\n  user_limit?: number\n  storage_limit_gb?: number\n  created_by?: string\n}\n\nexport interface TenantUpdate {\n  name?: string\n  slug?: string\n  status?: TenantStatus\n  plan?: SubscriptionPlan\n  stripe_customer_id?: string\n  stripe_subscription_id?: string\n  billing_email?: string\n  trial_ends_at?: string\n  subscription_ends_at?: string\n  settings?: Json\n  branding?: Json\n  feature_flags?: Json\n  data_residency?: string\n  compliance_requirements?: string[]\n  asset_limit?: number\n  user_limit?: number\n  storage_limit_gb?: number\n}\n\n// =====================================================\n// PROFILE TYPES\n// =====================================================\n\nexport interface Profile {\n  id: string\n  tenant_id: string\n  email: string\n  full_name?: string\n  avatar_url?: string\n  role: UserRole\n  permissions: Json\n  department?: string\n  job_title?: string\n  mfa_enabled: boolean\n  mfa_secret?: string\n  backup_codes?: string[]\n  last_login_at?: string\n  last_login_ip?: string\n  failed_login_attempts: number\n  locked_until?: string\n  preferences: Json\n  timezone: string\n  language: string\n  is_owner: boolean\n  created_at: string\n  updated_at: string\n}\n\nexport interface ProfileInsert {\n  id: string\n  tenant_id: string\n  email: string\n  full_name?: string\n  avatar_url?: string\n  role?: UserRole\n  permissions?: Json\n  department?: string\n  job_title?: string\n  mfa_enabled?: boolean\n  mfa_secret?: string\n  backup_codes?: string[]\n  preferences?: Json\n  timezone?: string\n  language?: string\n  is_owner?: boolean\n}\n\nexport interface ProfileUpdate {\n  tenant_id?: string\n  email?: string\n  full_name?: string\n  avatar_url?: string\n  role?: UserRole\n  permissions?: Json\n  department?: string\n  job_title?: string\n  mfa_enabled?: boolean\n  mfa_secret?: string\n  backup_codes?: string[]\n  last_login_at?: string\n  last_login_ip?: string\n  failed_login_attempts?: number\n  locked_until?: string\n  preferences?: Json\n  timezone?: string\n  language?: string\n  is_owner?: boolean\n}\n\n// =====================================================\n// ASSET CATEGORY TYPES\n// =====================================================\n\nexport interface AssetCategory {\n  id: string\n  tenant_id: string\n  name: string\n  description?: string\n  parent_id?: string\n  icon?: string\n  color?: string\n  custom_fields: Json\n  created_at: string\n  updated_at: string\n}\n\nexport interface AssetCategoryInsert {\n  id?: string\n  tenant_id: string\n  name: string\n  description?: string\n  parent_id?: string\n  icon?: string\n  color?: string\n  custom_fields?: Json\n}\n\nexport interface AssetCategoryUpdate {\n  name?: string\n  description?: string\n  parent_id?: string\n  icon?: string\n  color?: string\n  custom_fields?: Json\n}\n\n// =====================================================\n// ASSET TYPES\n// =====================================================\n\nexport interface Asset {\n  id: string\n  tenant_id: string\n  asset_id: string\n  name: string\n  description?: string\n  category_id?: string\n  parent_asset_id?: string\n  tags: string[]\n  status: AssetStatus\n  condition_rating?: number\n  location?: Json\n  current_location?: string // PostGIS geometry as string\n  assignee_id?: string\n  department?: string\n  purchase_price?: number\n  current_value?: number\n  depreciation_method: DepreciationMethod\n  depreciation_rate?: number\n  residual_value?: number\n  purchase_date?: string\n  warranty_start_date?: string\n  warranty_expiry_date?: string\n  last_maintenance_date?: string\n  next_maintenance_date?: string\n  retirement_date?: string\n  disposal_date?: string\n  vendor_name?: string\n  vendor_contact?: Json\n  purchase_order_number?: string\n  invoice_number?: string\n  model?: string\n  serial_number?: string\n  manufacturer?: string\n  specifications: Json\n  custom_fields: Json\n  qr_code?: string\n  barcode?: string\n  rfid_tag?: string\n  nfc_tag?: string\n  attachments: Json\n  certifications: Json\n  compliance_notes?: string\n  created_by: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface AssetInsert {\n  id?: string\n  tenant_id: string\n  asset_id: string\n  name: string\n  description?: string\n  category_id?: string\n  parent_asset_id?: string\n  tags?: string[]\n  status?: AssetStatus\n  condition_rating?: number\n  location?: Json\n  current_location?: string\n  assignee_id?: string\n  department?: string\n  purchase_price?: number\n  current_value?: number\n  depreciation_method?: DepreciationMethod\n  depreciation_rate?: number\n  residual_value?: number\n  purchase_date?: string\n  warranty_start_date?: string\n  warranty_expiry_date?: string\n  last_maintenance_date?: string\n  next_maintenance_date?: string\n  retirement_date?: string\n  disposal_date?: string\n  vendor_name?: string\n  vendor_contact?: Json\n  purchase_order_number?: string\n  invoice_number?: string\n  model?: string\n  serial_number?: string\n  manufacturer?: string\n  specifications?: Json\n  custom_fields?: Json\n  qr_code?: string\n  barcode?: string\n  rfid_tag?: string\n  nfc_tag?: string\n  attachments?: Json\n  certifications?: Json\n  compliance_notes?: string\n  created_by: string\n}\n\nexport interface AssetUpdate {\n  asset_id?: string\n  name?: string\n  description?: string\n  category_id?: string\n  parent_asset_id?: string\n  tags?: string[]\n  status?: AssetStatus\n  condition_rating?: number\n  location?: Json\n  current_location?: string\n  assignee_id?: string\n  department?: string\n  purchase_price?: number\n  current_value?: number\n  depreciation_method?: DepreciationMethod\n  depreciation_rate?: number\n  residual_value?: number\n  purchase_date?: string\n  warranty_start_date?: string\n  warranty_expiry_date?: string\n  last_maintenance_date?: string\n  next_maintenance_date?: string\n  retirement_date?: string\n  disposal_date?: string\n  vendor_name?: string\n  vendor_contact?: Json\n  purchase_order_number?: string\n  invoice_number?: string\n  model?: string\n  serial_number?: string\n  manufacturer?: string\n  specifications?: Json\n  custom_fields?: Json\n  qr_code?: string\n  barcode?: string\n  rfid_tag?: string\n  nfc_tag?: string\n  attachments?: Json\n  certifications?: Json\n  compliance_notes?: string\n}\n\n// =====================================================\n// ASSET MAINTENANCE TYPES\n// =====================================================\n\nexport interface AssetMaintenance {\n  id: string\n  tenant_id: string\n  asset_id: string\n  maintenance_type: MaintenanceType\n  title: string\n  description?: string\n  priority: MaintenancePriority\n  scheduled_date?: string\n  completed_date?: string\n  estimated_duration_hours?: number\n  actual_duration_hours?: number\n  assigned_to?: string\n  technician_notes?: string\n  cost?: number\n  parts_used: Json\n  status: MaintenanceStatus\n  attachments: Json\n  created_by: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface AssetMaintenanceInsert {\n  id?: string\n  tenant_id: string\n  asset_id: string\n  maintenance_type: MaintenanceType\n  title: string\n  description?: string\n  priority?: MaintenancePriority\n  scheduled_date?: string\n  completed_date?: string\n  estimated_duration_hours?: number\n  actual_duration_hours?: number\n  assigned_to?: string\n  technician_notes?: string\n  cost?: number\n  parts_used?: Json\n  status?: MaintenanceStatus\n  attachments?: Json\n  created_by: string\n}\n\nexport interface AssetMaintenanceUpdate {\n  maintenance_type?: MaintenanceType\n  title?: string\n  description?: string\n  priority?: MaintenancePriority\n  scheduled_date?: string\n  completed_date?: string\n  estimated_duration_hours?: number\n  actual_duration_hours?: number\n  assigned_to?: string\n  technician_notes?: string\n  cost?: number\n  parts_used?: Json\n  status?: MaintenanceStatus\n  attachments?: Json\n}\n\n// =====================================================\n// ASSET HISTORY TYPES\n// =====================================================\n\nexport interface AssetHistory {\n  id: string\n  tenant_id: string\n  asset_id: string\n  action: AuditAction\n  field_name?: string\n  old_value?: Json\n  new_value?: Json\n  change_summary?: string\n  ip_address?: string\n  user_agent?: string\n  session_id?: string\n  performed_by?: string\n  performed_at: string\n}\n\nexport interface AssetHistoryInsert {\n  id?: string\n  tenant_id: string\n  asset_id: string\n  action: AuditAction\n  field_name?: string\n  old_value?: Json\n  new_value?: Json\n  change_summary?: string\n  ip_address?: string\n  user_agent?: string\n  session_id?: string\n  performed_by?: string\n}\n\nexport interface AssetHistoryUpdate {\n  action?: AuditAction\n  field_name?: string\n  old_value?: Json\n  new_value?: Json\n  change_summary?: string\n  ip_address?: string\n  user_agent?: string\n  session_id?: string\n}\n\n// =====================================================\n// IOT DEVICE TYPES\n// =====================================================\n\nexport interface IoTDevice {\n  id: string\n  tenant_id: string\n  asset_id: string\n  device_id: string\n  device_name?: string\n  device_type: IoTDeviceType\n  manufacturer?: string\n  model?: string\n  firmware_version?: string\n  protocol: IoTProtocol\n  endpoint_url?: string\n  api_key?: string\n  configuration: Json\n  sampling_interval: number\n  status: DeviceStatus\n  last_seen?: string\n  battery_level?: number\n  signal_strength?: number\n  location?: string // PostGIS geometry as string\n  created_at: string\n  updated_at: string\n}\n\nexport interface IoTDeviceInsert {\n  id?: string\n  tenant_id: string\n  asset_id: string\n  device_id: string\n  device_name?: string\n  device_type: IoTDeviceType\n  manufacturer?: string\n  model?: string\n  firmware_version?: string\n  protocol: IoTProtocol\n  endpoint_url?: string\n  api_key?: string\n  configuration?: Json\n  sampling_interval?: number\n  status?: DeviceStatus\n  last_seen?: string\n  battery_level?: number\n  signal_strength?: number\n  location?: string\n}\n\nexport interface IoTDeviceUpdate {\n  device_id?: string\n  device_name?: string\n  device_type?: IoTDeviceType\n  manufacturer?: string\n  model?: string\n  firmware_version?: string\n  protocol?: IoTProtocol\n  endpoint_url?: string\n  api_key?: string\n  configuration?: Json\n  sampling_interval?: number\n  status?: DeviceStatus\n  last_seen?: string\n  battery_level?: number\n  signal_strength?: number\n  location?: string\n}\n\n// =====================================================\n// SENSOR DATA TYPES\n// =====================================================\n\nexport interface SensorData {\n  id: string\n  tenant_id: string\n  device_id: string\n  sensor_type: string\n  value?: number\n  unit?: string\n  quality_score: number\n  location?: string // PostGIS geometry as string\n  timestamp: string\n  metadata: Json\n}\n\nexport interface SensorDataInsert {\n  id?: string\n  tenant_id: string\n  device_id: string\n  sensor_type: string\n  value?: number\n  unit?: string\n  quality_score?: number\n  location?: string\n  timestamp?: string\n  metadata?: Json\n}\n\nexport interface SensorDataUpdate {\n  sensor_type?: string\n  value?: number\n  unit?: string\n  quality_score?: number\n  location?: string\n  metadata?: Json\n}\n\n// =====================================================\n// GEOFENCE TYPES\n// =====================================================\n\nexport interface Geofence {\n  id: string\n  tenant_id: string\n  name: string\n  description?: string\n  geometry: string // PostGIS geometry as string\n  rules: Json\n  alert_on_entry: boolean\n  alert_on_exit: boolean\n  alert_on_dwell: boolean\n  dwell_threshold_minutes: number\n  status: GeofenceStatus\n  created_by: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface GeofenceInsert {\n  id?: string\n  tenant_id: string\n  name: string\n  description?: string\n  geometry: string\n  rules?: Json\n  alert_on_entry?: boolean\n  alert_on_exit?: boolean\n  alert_on_dwell?: boolean\n  dwell_threshold_minutes?: number\n  status?: GeofenceStatus\n  created_by: string\n}\n\nexport interface GeofenceUpdate {\n  name?: string\n  description?: string\n  geometry?: string\n  rules?: Json\n  alert_on_entry?: boolean\n  alert_on_exit?: boolean\n  alert_on_dwell?: boolean\n  dwell_threshold_minutes?: number\n  status?: GeofenceStatus\n}\n\n// =====================================================\n// GEOFENCE EVENT TYPES\n// =====================================================\n\nexport interface GeofenceEvent {\n  id: string\n  tenant_id: string\n  asset_id: string\n  geofence_id: string\n  event_type: GeofenceEventType\n  location?: string // PostGIS geometry as string\n  timestamp: string\n  metadata: Json\n  acknowledged: boolean\n  acknowledged_by?: string\n  acknowledged_at?: string\n}\n\nexport interface GeofenceEventInsert {\n  id?: string\n  tenant_id: string\n  asset_id: string\n  geofence_id: string\n  event_type: GeofenceEventType\n  location?: string\n  timestamp?: string\n  metadata?: Json\n  acknowledged?: boolean\n  acknowledged_by?: string\n  acknowledged_at?: string\n}\n\nexport interface GeofenceEventUpdate {\n  event_type?: GeofenceEventType\n  location?: string\n  metadata?: Json\n  acknowledged?: boolean\n  acknowledged_by?: string\n  acknowledged_at?: string\n}\n\n// =====================================================\n// AUDIT LOG TYPES\n// =====================================================\n\nexport interface AuditLog {\n  id: string\n  tenant_id: string\n  action: AuditAction\n  resource_type: string\n  resource_id?: string\n  before_state?: Json\n  after_state?: Json\n  changes?: Json\n  user_id?: string\n  ip_address?: string\n  user_agent?: string\n  session_id?: string\n  request_id?: string\n  compliance_category?: string\n  retention_period_days: number\n  timestamp: string\n  metadata: Json\n}\n\nexport interface AuditLogInsert {\n  id?: string\n  tenant_id: string\n  action: AuditAction\n  resource_type: string\n  resource_id?: string\n  before_state?: Json\n  after_state?: Json\n  changes?: Json\n  user_id?: string\n  ip_address?: string\n  user_agent?: string\n  session_id?: string\n  request_id?: string\n  compliance_category?: string\n  retention_period_days?: number\n  timestamp?: string\n  metadata?: Json\n}\n\nexport interface AuditLogUpdate {\n  action?: AuditAction\n  resource_type?: string\n  resource_id?: string\n  before_state?: Json\n  after_state?: Json\n  changes?: Json\n  user_id?: string\n  ip_address?: string\n  user_agent?: string\n  session_id?: string\n  request_id?: string\n  compliance_category?: string\n  retention_period_days?: number\n  metadata?: Json\n}\n\n// =====================================================\n// DATA RETENTION POLICY TYPES\n// =====================================================\n\nexport interface DataRetentionPolicy {\n  id: string\n  tenant_id: string\n  name: string\n  description?: string\n  table_name: string\n  retention_period_days: number\n  conditions: Json\n  enabled: boolean\n  last_run_at?: string\n  next_run_at?: string\n  created_by: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface DataRetentionPolicyInsert {\n  id?: string\n  tenant_id: string\n  name: string\n  description?: string\n  table_name: string\n  retention_period_days: number\n  conditions?: Json\n  enabled?: boolean\n  last_run_at?: string\n  next_run_at?: string\n  created_by: string\n}\n\nexport interface DataRetentionPolicyUpdate {\n  name?: string\n  description?: string\n  table_name?: string\n  retention_period_days?: number\n  conditions?: Json\n  enabled?: boolean\n  last_run_at?: string\n  next_run_at?: string\n}\n\n// =====================================================\n// UTILITY TYPES\n// =====================================================\n\nexport interface TenantContext {\n  tenantId: string\n  userId: string\n  role: UserRole\n  permissions: Json\n}\n\nexport interface AssetWithRelations extends Asset {\n  category?: AssetCategory\n  assignee?: Profile\n  parent_asset?: Asset\n  child_assets?: Asset[]\n  maintenance_records?: AssetMaintenance[]\n  iot_devices?: IoTDevice[]\n  history?: AssetHistory[]\n}\n\nexport interface GeofenceWithEvents extends Geofence {\n  events?: GeofenceEvent[]\n  recent_events_count?: number\n}\n\nexport interface IoTDeviceWithData extends IoTDevice {\n  latest_sensor_data?: SensorData[]\n  asset?: Asset\n}\n\n// =====================================================\n// API RESPONSE TYPES\n// =====================================================\n\nexport interface ApiResponse<T = any> {\n  data?: T\n  error?: string\n  message?: string\n  success: boolean\n}\n\nexport interface PaginatedResponse<T = any> extends ApiResponse<T[]> {\n  pagination: {\n    page: number\n    limit: number\n    total: number\n    totalPages: number\n  }\n}\n\nexport interface AssetStats {\n  total: number\n  byStatus: Record<AssetStatus, number>\n  byCategory: Record<string, number>\n  totalValue: number\n  recentAdditions: number\n}\n\nexport interface TenantUsage {\n  assets: {\n    current: number\n    limit: number\n    percentage: number\n  }\n  users: {\n    current: number\n    limit: number\n    percentage: number\n  }\n  storage: {\n    current: number\n    limit: number\n    percentage: number\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\types\\rbac.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2320,2323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2320,2323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2360,2363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2360,2363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2555,2558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2555,2558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2596,2599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2596,2599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5216,5219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5216,5219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5250,5253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5250,5253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":283,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5914,5917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5914,5917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":284,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":284,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5949,5952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5949,5952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":304,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":304,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6321,6324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6321,6324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":305,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6360,6363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6360,6363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":329,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6830,6833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6830,6833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":330,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6870,6873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6870,6873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":336,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6991,6994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6991,6994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":337,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7031,7034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7031,7034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":411,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":411,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8664,8667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8664,8667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":412,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":412,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8707,8710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8707,8710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":441,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":441,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9315,9318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9315,9318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":442,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9355,9358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9355,9358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":498,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":498,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10560,10563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10560,10563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":499,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":499,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10595,10598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10595,10598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":509,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":509,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10790,10793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10790,10793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":510,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":510,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10830,10833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10830,10833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":518,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":518,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11001,11004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11001,11004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":525,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11167,11170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11167,11170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":551,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":551,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11789,11792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11789,11792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":666,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":666,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14032,14035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14032,14035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// RBAC SYSTEM TYPES\n// =====================================================\n// TypeScript types for the hierarchical RBAC system\n\nexport type PermissionScope = 'global' | 'tenant' | 'department' | 'personal'\nexport type PermissionAction =\n  | 'create'\n  | 'read'\n  | 'update'\n  | 'delete'\n  | 'assign'\n  | 'transfer'\n  | 'approve'\n  | 'export'\n  | 'import'\n  | 'manage'\nexport type ResourceType =\n  | 'asset'\n  | 'user'\n  | 'role'\n  | 'department'\n  | 'report'\n  | 'setting'\n  | 'audit'\n  | 'maintenance'\n  | 'geofence'\n  | 'iot_device'\nexport type DelegationStatus = 'active' | 'expired' | 'revoked' | 'pending'\nexport type DepartmentType =\n  | 'operational'\n  | 'administrative'\n  | 'technical'\n  | 'financial'\n  | 'security'\n\n// =====================================================\n// CORE RBAC INTERFACES\n// =====================================================\n\nexport interface Role {\n  id: string\n  tenant_id: string\n  name: string\n  display_name: string\n  description?: string\n  parent_role_id?: string\n  level: number\n  hierarchy_path: string\n  is_system_role: boolean\n  is_default_role: boolean\n  max_users?: number\n  is_active: boolean\n  created_by: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface RoleInsert {\n  tenant_id: string\n  name: string\n  display_name: string\n  description?: string\n  parent_role_id?: string\n  is_system_role?: boolean\n  is_default_role?: boolean\n  max_users?: number\n  created_by: string\n}\n\nexport interface RoleUpdate {\n  name?: string\n  display_name?: string\n  description?: string\n  parent_role_id?: string\n  is_default_role?: boolean\n  max_users?: number\n  is_active?: boolean\n}\n\nexport interface Permission {\n  id: string\n  name: string\n  display_name: string\n  description?: string\n  resource_type: ResourceType\n  action: PermissionAction\n  scope: PermissionScope\n  is_system_permission: boolean\n  created_at: string\n  updated_at: string\n}\n\nexport interface PermissionInsert {\n  name: string\n  display_name: string\n  description?: string\n  resource_type: ResourceType\n  action: PermissionAction\n  scope?: PermissionScope\n  is_system_permission?: boolean\n}\n\nexport interface RolePermission {\n  id: string\n  tenant_id: string\n  role_id: string\n  permission_id: string\n  conditions: Record<string, any>\n  resource_filters: Record<string, any>\n  inherited_from_role_id?: string\n  created_at: string\n}\n\nexport interface RolePermissionInsert {\n  tenant_id: string\n  role_id: string\n  permission_id: string\n  conditions?: Record<string, any>\n  resource_filters?: Record<string, any>\n  inherited_from_role_id?: string\n}\n\nexport interface UserRole {\n  id: string\n  tenant_id: string\n  user_id: string\n  role_id: string\n  assigned_by: string\n  assigned_at: string\n  expires_at?: string\n  is_active: boolean\n}\n\nexport interface UserRoleInsert {\n  tenant_id: string\n  user_id: string\n  role_id: string\n  assigned_by: string\n  expires_at?: string\n}\n\nexport interface UserRoleUpdate {\n  expires_at?: string\n  is_active?: boolean\n}\n\n// =====================================================\n// DEPARTMENT INTERFACES\n// =====================================================\n\nexport interface Department {\n  id: string\n  tenant_id: string\n  name: string\n  display_name: string\n  description?: string\n  code?: string\n  parent_department_id?: string\n  level: number\n  hierarchy_path: string\n  department_type: DepartmentType\n  manager_id?: string\n  budget_limit?: number\n  is_active: boolean\n  created_by: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface DepartmentInsert {\n  tenant_id: string\n  name: string\n  display_name: string\n  description?: string\n  code?: string\n  parent_department_id?: string\n  department_type?: DepartmentType\n  manager_id?: string\n  budget_limit?: number\n  created_by: string\n}\n\nexport interface DepartmentUpdate {\n  name?: string\n  display_name?: string\n  description?: string\n  code?: string\n  parent_department_id?: string\n  department_type?: DepartmentType\n  manager_id?: string\n  budget_limit?: number\n  is_active?: boolean\n}\n\nexport interface UserDepartment {\n  id: string\n  tenant_id: string\n  user_id: string\n  department_id: string\n  is_primary: boolean\n  role_in_department?: string\n  assigned_by: string\n  assigned_at: string\n}\n\nexport interface UserDepartmentInsert {\n  tenant_id: string\n  user_id: string\n  department_id: string\n  is_primary?: boolean\n  role_in_department?: string\n  assigned_by: string\n}\n\nexport interface DepartmentRole {\n  id: string\n  tenant_id: string\n  department_id: string\n  role_id: string\n  is_default_role: boolean\n  max_users?: number\n  created_by: string\n  created_at: string\n}\n\nexport interface DepartmentRoleInsert {\n  tenant_id: string\n  department_id: string\n  role_id: string\n  is_default_role?: boolean\n  max_users?: number\n  created_by: string\n}\n\n// =====================================================\n// DELEGATION INTERFACES\n// =====================================================\n\nexport interface PermissionDelegation {\n  id: string\n  tenant_id: string\n  delegator_id: string\n  delegatee_id: string\n  role_id?: string\n  permission_ids: string[]\n  scope: PermissionScope\n  resource_filters: Record<string, any>\n  conditions: Record<string, any>\n  starts_at: string\n  expires_at: string\n  status: DelegationStatus\n  reason?: string\n  notes?: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface PermissionDelegationWithProfiles extends PermissionDelegation {\n  delegator?: {\n    id: string\n    full_name?: string\n    email: string\n  }\n  delegatee?: {\n    id: string\n    full_name?: string\n    email: string\n  }\n  role?: {\n    id: string\n    display_name: string\n  }\n}\n\nexport interface PermissionDelegationInsert {\n  tenant_id: string\n  delegator_id: string\n  delegatee_id: string\n  role_id?: string\n  permission_ids: string[]\n  scope?: PermissionScope\n  resource_filters?: Record<string, any>\n  conditions?: Record<string, any>\n  starts_at?: string\n  expires_at: string\n  reason?: string\n  notes?: string\n}\n\nexport interface PermissionDelegationUpdate {\n  expires_at?: string\n  status?: DelegationStatus\n  notes?: string\n}\n\nexport interface GuestAccess {\n  id: string\n  tenant_id: string\n  email: string\n  full_name?: string\n  invited_by: string\n  role_id?: string\n  permissions: Record<string, any>\n  resource_access: Record<string, any>\n  expires_at: string\n  max_sessions: number\n  is_active: boolean\n  first_login_at?: string\n  last_login_at?: string\n  login_count: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface GuestAccessWithRole extends GuestAccess {\n  role?: {\n    id: string\n    display_name: string\n  }\n}\n\nexport interface GuestAccessInsert {\n  tenant_id: string\n  email: string\n  full_name?: string\n  invited_by: string\n  role_id?: string\n  permissions?: Record<string, any>\n  resource_access?: Record<string, any>\n  expires_at: string\n  max_sessions?: number\n}\n\nexport interface GuestAccessUpdate {\n  permissions?: Record<string, any>\n  resource_access?: Record<string, any>\n  expires_at?: string\n  max_sessions?: number\n  is_active?: boolean\n}\n\n// =====================================================\n// AUDIT INTERFACES\n// =====================================================\n\nexport interface PermissionUsage {\n  id: string\n  tenant_id: string\n  user_id: string\n  permission_id: string\n  resource_type: ResourceType\n  resource_id?: string\n  endpoint?: string\n  method?: string\n  ip_address?: string\n  user_agent?: string\n  session_id?: string\n  was_granted: boolean\n  denial_reason?: string\n  timestamp: string\n  response_time_ms?: number\n}\n\nexport interface PermissionUsageInsert {\n  tenant_id: string\n  user_id: string\n  permission_id: string\n  resource_type: ResourceType\n  resource_id?: string\n  endpoint?: string\n  method?: string\n  ip_address?: string\n  user_agent?: string\n  session_id?: string\n  was_granted: boolean\n  denial_reason?: string\n  response_time_ms?: number\n}\n\nexport interface RoleAssignmentHistory {\n  id: string\n  tenant_id: string\n  user_id: string\n  role_id: string\n  action: string\n  performed_by?: string\n  reason?: string\n  effective_at: string\n  expires_at?: string\n  created_at: string\n}\n\nexport interface RoleAssignmentHistoryInsert {\n  tenant_id: string\n  user_id: string\n  role_id: string\n  action: string\n  performed_by?: string\n  reason?: string\n  effective_at?: string\n  expires_at?: string\n}\n\n// =====================================================\n// EXTENDED INTERFACES WITH RELATIONS\n// =====================================================\n\nexport interface RoleWithPermissions extends Role {\n  permissions: (Permission & {\n    conditions?: Record<string, any>\n    resource_filters?: Record<string, any>\n    inherited_from_role_id?: string\n  })[]\n  parent_role?: Role\n  child_roles?: Role[]\n  user_count?: number\n}\n\nexport interface UserWithRoles {\n  id: string\n  email: string\n  full_name?: string\n  roles: (Role & {\n    assigned_at: string\n    expires_at?: string\n    assigned_by: string\n  })[]\n  departments: (Department & {\n    is_primary: boolean\n    role_in_department?: string\n  })[]\n  effective_permissions: UserPermission[]\n}\n\nexport interface UserPermission {\n  permission_name: string\n  resource_type: ResourceType\n  action: PermissionAction\n  scope: PermissionScope\n  conditions: Record<string, any>\n  resource_filters: Record<string, any>\n  source: 'direct' | 'inherited' | 'delegated'\n}\n\nexport interface DepartmentWithHierarchy extends Department {\n  parent_department?: Department\n  child_departments?: Department[]\n  manager?: {\n    id: string\n    full_name?: string\n    email: string\n  }\n  user_count?: number\n  roles?: Role[]\n}\n\n// =====================================================\n// API REQUEST/RESPONSE TYPES\n// =====================================================\n\nexport interface CreateRoleRequest {\n  name: string\n  display_name: string\n  description?: string\n  parent_role_id?: string\n  permission_names?: string[]\n  is_default_role?: boolean\n  max_users?: number\n}\n\nexport interface UpdateRoleRequest {\n  display_name?: string\n  description?: string\n  parent_role_id?: string\n  is_default_role?: boolean\n  max_users?: number\n  is_active?: boolean\n}\n\nexport interface AssignRoleRequest {\n  user_id: string\n  role_id: string\n  expires_at?: string\n}\n\nexport interface RevokeRoleRequest {\n  user_id: string\n  role_id: string\n  reason?: string\n}\n\nexport interface CreateDelegationRequest {\n  delegatee_id: string\n  role_id?: string\n  permission_names?: string[]\n  scope?: PermissionScope\n  resource_filters?: Record<string, any>\n  conditions?: Record<string, any>\n  expires_at: string\n  reason?: string\n  notes?: string\n}\n\nexport interface CreateGuestAccessRequest {\n  email: string\n  full_name?: string\n  role_id?: string\n  permissions?: Record<string, any>\n  resource_access?: Record<string, any>\n  expires_at: string\n  max_sessions?: number\n}\n\nexport interface PermissionCheckRequest {\n  permission_name: string\n  resource_id?: string\n  context?: Record<string, any>\n}\n\nexport interface PermissionCheckResponse {\n  granted: boolean\n  reason?: string\n  source?: 'direct' | 'inherited' | 'delegated'\n  conditions?: Record<string, any>\n}\n\n// =====================================================\n// UTILITY TYPES\n// =====================================================\n\nexport interface RoleHierarchyNode {\n  role: Role\n  children: RoleHierarchyNode[]\n  permissions: Permission[]\n  user_count: number\n}\n\nexport interface DepartmentHierarchyNode {\n  department: Department\n  children: DepartmentHierarchyNode[]\n  users: UserWithRoles[]\n  roles: Role[]\n}\n\nexport interface PermissionMatrix {\n  [userId: string]: {\n    [permissionName: string]: {\n      granted: boolean\n      source: 'direct' | 'inherited' | 'delegated'\n      conditions?: Record<string, any>\n    }\n  }\n}\n\nexport interface RoleAnalytics {\n  role_id: string\n  role_name: string\n  user_count: number\n  permission_count: number\n  usage_stats: {\n    total_checks: number\n    granted_checks: number\n    denied_checks: number\n    avg_response_time_ms: number\n  }\n  most_used_permissions: {\n    permission_name: string\n    usage_count: number\n  }[]\n}\n\nexport interface DepartmentAnalytics {\n  department_id: string\n  department_name: string\n  user_count: number\n  role_distribution: {\n    role_name: string\n    user_count: number\n  }[]\n  permission_usage: {\n    permission_name: string\n    usage_count: number\n  }[]\n}\n\n// =====================================================\n// VALIDATION SCHEMAS (for use with zod or similar)\n// =====================================================\n\nexport interface RoleValidationRules {\n  name: {\n    required: true\n    minLength: 2\n    maxLength: 50\n    pattern: string\n  }\n  display_name: {\n    required: true\n    minLength: 2\n    maxLength: 100\n  }\n  description: {\n    maxLength: 500\n  }\n  max_users: {\n    min: 1\n    max: 10000\n  }\n}\n\nexport interface DepartmentValidationRules {\n  name: {\n    required: true\n    minLength: 2\n    maxLength: 100\n  }\n  code: {\n    pattern: string\n    maxLength: 20\n  }\n  budget_limit: {\n    min: 0\n    max: 999999999.99\n  }\n}\n\nexport interface DelegationValidationRules {\n  expires_at: {\n    required: true\n    futureDate: true\n    maxDuration: string\n  }\n  permission_ids: {\n    required: true\n    minItems: 1\n    maxItems: 50\n  }\n}\n\n// =====================================================\n// VALIDATION CONSTANTS\n// =====================================================\n\nexport const VALIDATION_PATTERNS = {\n  ROLE_NAME: /^[a-zA-Z0-9_-]+$/,\n  DEPARTMENT_CODE: /^[A-Z0-9_-]+$/,\n  EMAIL: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n} as const\n\nexport const VALIDATION_LIMITS = {\n  MAX_DELEGATION_DURATION_DAYS: 365,\n  MAX_GUEST_ACCESS_DURATION_DAYS: 90,\n  MAX_ROLE_HIERARCHY_DEPTH: 10,\n  MAX_PERMISSIONS_PER_ROLE: 100,\n  MAX_ROLES_PER_USER: 10,\n} as const\n\n// =====================================================\n// ERROR TYPES\n// =====================================================\n\nexport interface RBACError {\n  code: string\n  message: string\n  details?: Record<string, any>\n}\n\nexport type RBACErrorCode =\n  | 'ROLE_NOT_FOUND'\n  | 'PERMISSION_DENIED'\n  | 'CIRCULAR_HIERARCHY'\n  | 'MAX_USERS_EXCEEDED'\n  | 'DELEGATION_EXPIRED'\n  | 'INVALID_SCOPE'\n  | 'SYSTEM_ROLE_IMMUTABLE'\n  | 'DEPARTMENT_NOT_FOUND'\n  | 'USER_NOT_IN_DEPARTMENT'\n  | 'GUEST_ACCESS_EXPIRED'\n  | 'INVALID_DELEGATION'\n\n// =====================================================\n// CONFIGURATION TYPES\n// =====================================================\n\nexport interface RBACConfig {\n  max_role_hierarchy_depth: number\n  max_permissions_per_role: number\n  max_roles_per_user: number\n  max_delegation_duration_days: number\n  max_guest_access_duration_days: number\n  permission_cache_ttl_seconds: number\n  audit_retention_days: number\n  cleanup_interval_hours: number\n}\n\nexport interface TenantRBACSettings {\n  tenant_id: string\n  allow_role_hierarchy: boolean\n  allow_permission_delegation: boolean\n  allow_guest_access: boolean\n  max_custom_roles: number\n  max_departments: number\n  require_approval_for_role_changes: boolean\n  audit_all_permission_checks: boolean\n  config: RBACConfig\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\utils\\data-permission-filters.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":323,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8886,8889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8886,8889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":323,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8928,8931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8928,8931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":376,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10451,10454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10451,10454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":376,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10493,10496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10493,10496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":473,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13168,13171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13168,13171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":481,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":481,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13408,13411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13408,13411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":489,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":489,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13652,13655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13652,13655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":554,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":554,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15277,15280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15277,15280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":559,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":559,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15372,15375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15372,15375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// DATA-LEVEL PERMISSION FILTERS\n// =====================================================\n// Utilities for filtering data based on user permissions\n\nimport { createClient } from '@/lib/supabase/server'\nimport { PermissionService } from '@/lib/services/permission-service'\nimport { UserPermission } from '@/lib/types/rbac'\n\nexport interface DataFilterOptions {\n  tenantId: string\n  userId: string\n  resourceType: string\n  action: string\n  includeInherited?: boolean\n}\n\nexport interface FilterResult<T> {\n  data: T[]\n  filtered: boolean\n  totalCount: number\n  filteredCount: number\n  appliedFilters: string[]\n}\n\nexport class DataPermissionFilter {\n  private permissionService = new PermissionService()\n\n  // =====================================================\n  // ASSET FILTERING\n  // =====================================================\n\n  async filterAssets<\n    T extends { id: string; assignee_id?: string; department?: string; created_by?: string },\n  >(assets: T[], options: DataFilterOptions): Promise<FilterResult<T>> {\n    const userPermissions = await this.permissionService.getUserPermissions(\n      options.tenantId,\n      options.userId\n    )\n\n    const assetPermissions = userPermissions.filter(\n      p => p.resource_type === 'asset' && p.action === options.action\n    )\n\n    if (assetPermissions.length === 0) {\n      return {\n        data: [],\n        filtered: true,\n        totalCount: assets.length,\n        filteredCount: 0,\n        appliedFilters: ['no_permission'],\n      }\n    }\n\n    // Check if user has global asset permission\n    const globalPermission = assetPermissions.find(\n      p => p.scope === 'global' || p.scope === 'tenant'\n    )\n\n    if (globalPermission && !this.hasResourceFilters(globalPermission)) {\n      return {\n        data: assets,\n        filtered: false,\n        totalCount: assets.length,\n        filteredCount: assets.length,\n        appliedFilters: [],\n      }\n    }\n\n    // Apply resource-specific filters\n    const filteredAssets: T[] = []\n    const appliedFilters: string[] = []\n\n    for (const asset of assets) {\n      let hasAccess = false\n\n      for (const permission of assetPermissions) {\n        if (await this.checkAssetAccess(asset, permission, options)) {\n          hasAccess = true\n          break\n        }\n      }\n\n      if (hasAccess) {\n        filteredAssets.push(asset)\n      }\n    }\n\n    if (filteredAssets.length < assets.length) {\n      appliedFilters.push('resource_filters')\n    }\n\n    return {\n      data: filteredAssets,\n      filtered: filteredAssets.length < assets.length,\n      totalCount: assets.length,\n      filteredCount: filteredAssets.length,\n      appliedFilters,\n    }\n  }\n\n  private async checkAssetAccess<\n    T extends { id: string; assignee_id?: string; department?: string; created_by?: string },\n  >(asset: T, permission: UserPermission, options: DataFilterOptions): Promise<boolean> {\n    // Check scope-based access\n    switch (permission.scope) {\n      case 'global':\n      case 'tenant':\n        return true\n\n      case 'department':\n        if (asset.department) {\n          // Check if user is in the same department\n          const userDepartment = await this.getUserDepartment(options.tenantId, options.userId)\n          return asset.department === userDepartment\n        }\n        return false\n\n      case 'personal':\n        // User can only access assets they own or are assigned to\n        return asset.assignee_id === options.userId || asset.created_by === options.userId\n\n      default:\n        return false\n    }\n  }\n\n  // =====================================================\n  // USER FILTERING\n  // =====================================================\n\n  async filterUsers<T extends { id: string; tenant_id: string; department?: string }>(\n    users: T[],\n    options: DataFilterOptions\n  ): Promise<FilterResult<T>> {\n    const userPermissions = await this.permissionService.getUserPermissions(\n      options.tenantId,\n      options.userId\n    )\n\n    const userManagePermissions = userPermissions.filter(\n      p => p.resource_type === 'user' && p.action === options.action\n    )\n\n    if (userManagePermissions.length === 0) {\n      return {\n        data: [],\n        filtered: true,\n        totalCount: users.length,\n        filteredCount: 0,\n        appliedFilters: ['no_permission'],\n      }\n    }\n\n    // Check if user has global user management permission\n    const globalPermission = userManagePermissions.find(\n      p => p.scope === 'global' || p.scope === 'tenant'\n    )\n\n    if (globalPermission && !this.hasResourceFilters(globalPermission)) {\n      return {\n        data: users,\n        filtered: false,\n        totalCount: users.length,\n        filteredCount: users.length,\n        appliedFilters: [],\n      }\n    }\n\n    // Apply department-based filtering\n    const filteredUsers: T[] = []\n    const appliedFilters: string[] = []\n\n    const userDepartment = await this.getUserDepartment(options.tenantId, options.userId)\n\n    for (const user of users) {\n      let hasAccess = false\n\n      for (const permission of userManagePermissions) {\n        if (await this.checkUserAccess(user, permission, options, userDepartment || undefined)) {\n          hasAccess = true\n          break\n        }\n      }\n\n      if (hasAccess) {\n        filteredUsers.push(user)\n      }\n    }\n\n    if (filteredUsers.length < users.length) {\n      appliedFilters.push('department_filters')\n    }\n\n    return {\n      data: filteredUsers,\n      filtered: filteredUsers.length < users.length,\n      totalCount: users.length,\n      filteredCount: filteredUsers.length,\n      appliedFilters,\n    }\n  }\n\n  private async checkUserAccess<T extends { id: string; tenant_id: string; department?: string }>(\n    user: T,\n    permission: UserPermission,\n    options: DataFilterOptions,\n    currentUserDepartment?: string\n  ): Promise<boolean> {\n    switch (permission.scope) {\n      case 'global':\n      case 'tenant':\n        return true\n\n      case 'department':\n        // User can only manage users in their department\n        return user.department === currentUserDepartment\n\n      case 'personal':\n        // User can only manage themselves\n        return user.id === options.userId\n\n      default:\n        return false\n    }\n  }\n\n  // =====================================================\n  // REPORT FILTERING\n  // =====================================================\n\n  async filterReports<\n    T extends { id: string; created_by: string; is_public?: boolean; department?: string },\n  >(reports: T[], options: DataFilterOptions): Promise<FilterResult<T>> {\n    const userPermissions = await this.permissionService.getUserPermissions(\n      options.tenantId,\n      options.userId\n    )\n\n    const reportPermissions = userPermissions.filter(\n      p => p.resource_type === 'report' && p.action === options.action\n    )\n\n    if (reportPermissions.length === 0) {\n      return {\n        data: [],\n        filtered: true,\n        totalCount: reports.length,\n        filteredCount: 0,\n        appliedFilters: ['no_permission'],\n      }\n    }\n\n    const filteredReports: T[] = []\n    const appliedFilters: string[] = []\n\n    const userDepartment = await this.getUserDepartment(options.tenantId, options.userId)\n\n    for (const report of reports) {\n      let hasAccess = false\n\n      // Check if report is public\n      if (report.is_public) {\n        hasAccess = true\n      } else {\n        // Check permission-based access\n        for (const permission of reportPermissions) {\n          if (\n            await this.checkReportAccess(report, permission, options, userDepartment || undefined)\n          ) {\n            hasAccess = true\n            break\n          }\n        }\n      }\n\n      if (hasAccess) {\n        filteredReports.push(report)\n      }\n    }\n\n    if (filteredReports.length < reports.length) {\n      appliedFilters.push('visibility_filters')\n    }\n\n    return {\n      data: filteredReports,\n      filtered: filteredReports.length < reports.length,\n      totalCount: reports.length,\n      filteredCount: filteredReports.length,\n      appliedFilters,\n    }\n  }\n\n  private async checkReportAccess<\n    T extends { id: string; created_by: string; is_public?: boolean; department?: string },\n  >(\n    report: T,\n    permission: UserPermission,\n    options: DataFilterOptions,\n    currentUserDepartment?: string\n  ): Promise<boolean> {\n    switch (permission.scope) {\n      case 'global':\n      case 'tenant':\n        return true\n\n      case 'department':\n        return report.department === currentUserDepartment\n\n      case 'personal':\n        return report.created_by === options.userId\n\n      default:\n        return false\n    }\n  }\n\n  // =====================================================\n  // DATABASE QUERY FILTERING\n  // =====================================================\n\n  async buildAssetQuery(baseQuery: any, options: DataFilterOptions): Promise<any> {\n    const userPermissions = await this.permissionService.getUserPermissions(\n      options.tenantId,\n      options.userId\n    )\n\n    const assetPermissions = userPermissions.filter(\n      p => p.resource_type === 'asset' && p.action === options.action\n    )\n\n    if (assetPermissions.length === 0) {\n      // No permission - return query that returns no results\n      return baseQuery.eq('id', 'no-access')\n    }\n\n    // Check if user has global permission\n    const globalPermission = assetPermissions.find(\n      p => p.scope === 'global' || p.scope === 'tenant'\n    )\n\n    if (globalPermission && !this.hasResourceFilters(globalPermission)) {\n      // User has global access - return original query\n      return baseQuery\n    }\n\n    // Build filtered query based on permissions\n    const conditions: string[] = []\n\n    for (const permission of assetPermissions) {\n      switch (permission.scope) {\n        case 'department': {\n          const userDepartment = await this.getUserDepartment(options.tenantId, options.userId)\n          if (userDepartment) {\n            conditions.push(`department.eq.${userDepartment}`)\n          }\n          break\n        }\n\n        case 'personal':\n          conditions.push(`assignee_id.eq.${options.userId}`)\n          conditions.push(`created_by.eq.${options.userId}`)\n          break\n      }\n    }\n\n    if (conditions.length > 0) {\n      // Apply OR conditions\n      return baseQuery.or(conditions.join(','))\n    }\n\n    return baseQuery\n  }\n\n  async buildUserQuery(baseQuery: any, options: DataFilterOptions): Promise<any> {\n    const userPermissions = await this.permissionService.getUserPermissions(\n      options.tenantId,\n      options.userId\n    )\n\n    const userManagePermissions = userPermissions.filter(\n      p => p.resource_type === 'user' && p.action === options.action\n    )\n\n    if (userManagePermissions.length === 0) {\n      return baseQuery.eq('id', 'no-access')\n    }\n\n    const globalPermission = userManagePermissions.find(\n      p => p.scope === 'global' || p.scope === 'tenant'\n    )\n\n    if (globalPermission && !this.hasResourceFilters(globalPermission)) {\n      return baseQuery\n    }\n\n    const conditions: string[] = []\n\n    for (const permission of userManagePermissions) {\n      switch (permission.scope) {\n        case 'department': {\n          const userDepartment = await this.getUserDepartment(options.tenantId, options.userId)\n          if (userDepartment) {\n            conditions.push(`department.eq.${userDepartment}`)\n          }\n          break\n        }\n\n        case 'personal':\n          conditions.push(`id.eq.${options.userId}`)\n          break\n      }\n    }\n\n    if (conditions.length > 0) {\n      return baseQuery.or(conditions.join(','))\n    }\n\n    return baseQuery\n  }\n\n  // =====================================================\n  // UTILITY METHODS\n  // =====================================================\n\n  private hasResourceFilters(permission: UserPermission): boolean {\n    return permission.resource_filters && Object.keys(permission.resource_filters).length > 0\n  }\n\n  private async getUserDepartment(tenantId: string, userId: string): Promise<string | null> {\n    try {\n      const supabase = await createClient()\n      const { data: userDept } = await supabase\n        .from('user_departments')\n        .select('department_id')\n        .eq('tenant_id', tenantId)\n        .eq('user_id', userId)\n        .eq('is_primary', true)\n        .single()\n\n      return userDept?.department_id || null\n    } catch (error) {\n      console.error('Error getting user department:', error)\n      return null\n    }\n  }\n\n  // =====================================================\n  // BATCH FILTERING\n  // =====================================================\n\n  async filterMultipleResourceTypes<T>(\n    resources: Array<{\n      type: string\n      data: T[]\n      action: string\n    }>,\n    options: Omit<DataFilterOptions, 'resourceType' | 'action'>\n  ): Promise<\n    Array<{\n      type: string\n      result: FilterResult<T>\n    }>\n  > {\n    const results = []\n\n    for (const resource of resources) {\n      let result: FilterResult<T>\n\n      switch (resource.type) {\n        case 'asset':\n          result = (await this.filterAssets(resource.data as any, {\n            ...options,\n            resourceType: resource.type,\n            action: resource.action,\n          })) as FilterResult<T>\n          break\n\n        case 'user':\n          result = (await this.filterUsers(resource.data as any, {\n            ...options,\n            resourceType: resource.type,\n            action: resource.action,\n          })) as FilterResult<T>\n          break\n\n        case 'report':\n          result = (await this.filterReports(resource.data as any, {\n            ...options,\n            resourceType: resource.type,\n            action: resource.action,\n          })) as FilterResult<T>\n          break\n\n        default:\n          result = {\n            data: resource.data,\n            filtered: false,\n            totalCount: resource.data.length,\n            filteredCount: resource.data.length,\n            appliedFilters: [],\n          }\n      }\n\n      results.push({\n        type: resource.type,\n        result,\n      })\n    }\n\n    return results\n  }\n}\n\n// =====================================================\n// GLOBAL INSTANCE\n// =====================================================\n\nexport const globalDataFilter = new DataPermissionFilter()\n\n// =====================================================\n// CONVENIENCE FUNCTIONS\n// =====================================================\n\nexport async function filterAssetsByPermissions<\n  T extends { id: string; assignee_id?: string; department?: string; created_by?: string },\n>(\n  assets: T[],\n  tenantId: string,\n  userId: string,\n  action: string = 'read'\n): Promise<FilterResult<T>> {\n  return globalDataFilter.filterAssets(assets, {\n    tenantId,\n    userId,\n    resourceType: 'asset',\n    action,\n  })\n}\n\nexport async function filterUsersByPermissions<\n  T extends { id: string; tenant_id: string; department?: string },\n>(users: T[], tenantId: string, userId: string, action: string = 'read'): Promise<FilterResult<T>> {\n  return globalDataFilter.filterUsers(users, {\n    tenantId,\n    userId,\n    resourceType: 'user',\n    action,\n  })\n}\n\nexport async function buildPermissionFilteredQuery(\n  baseQuery: any,\n  resourceType: string,\n  action: string,\n  tenantId: string,\n  userId: string\n): Promise<any> {\n  const options = { tenantId, userId, resourceType, action }\n\n  switch (resourceType) {\n    case 'asset':\n      return globalDataFilter.buildAssetQuery(baseQuery, options)\n    case 'user':\n      return globalDataFilter.buildUserQuery(baseQuery, options)\n    default:\n      return baseQuery\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\utils\\permission-cache.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userKey' is assigned a value but never used.","line":225,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":225,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":363,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9425,9428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9425,9428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":363,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9430,9433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9430,9433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":386,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":386,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10057,10060],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10057,10060],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":398,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":398,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10405,10408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10405,10408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// =====================================================\n// PERMISSION CACHE UTILITY\n// =====================================================\n// Caching utility for user permissions to improve performance\n\nimport { UserPermission } from '@/lib/types/rbac'\n\ninterface CacheEntry {\n  permissions: UserPermission[]\n  timestamp: number\n  expiresAt: number\n}\n\ninterface PermissionCheckCache {\n  [key: string]: {\n    granted: boolean\n    timestamp: number\n    expiresAt: number\n  }\n}\n\nexport class PermissionCache {\n  private userPermissionsCache = new Map<string, CacheEntry>()\n  private permissionChecksCache = new Map<string, PermissionCheckCache>()\n  private readonly DEFAULT_TTL = 5 * 60 * 1000 // 5 minutes\n  private readonly CHECK_TTL = 2 * 60 * 1000 // 2 minutes for individual checks\n  private cleanupInterval: NodeJS.Timeout | null = null\n\n  constructor(ttl?: number) {\n    if (ttl) {\n      this.DEFAULT_TTL = ttl\n    }\n    this.startCleanupInterval()\n  }\n\n  // =====================================================\n  // USER PERMISSIONS CACHING\n  // =====================================================\n\n  getUserPermissions(tenantId: string, userId: string): UserPermission[] | null {\n    const key = this.getUserPermissionKey(tenantId, userId)\n    const entry = this.userPermissionsCache.get(key)\n\n    if (!entry) {\n      return null\n    }\n\n    if (Date.now() > entry.expiresAt) {\n      this.userPermissionsCache.delete(key)\n      return null\n    }\n\n    return entry.permissions\n  }\n\n  setUserPermissions(\n    tenantId: string,\n    userId: string,\n    permissions: UserPermission[],\n    ttl?: number\n  ): void {\n    const key = this.getUserPermissionKey(tenantId, userId)\n    const now = Date.now()\n    const expiresAt = now + (ttl || this.DEFAULT_TTL)\n\n    this.userPermissionsCache.set(key, {\n      permissions,\n      timestamp: now,\n      expiresAt,\n    })\n  }\n\n  clearUserPermissions(tenantId: string, userId: string): void {\n    const key = this.getUserPermissionKey(tenantId, userId)\n    this.userPermissionsCache.delete(key)\n\n    // Also clear related permission checks\n    this.clearUserPermissionChecks(tenantId, userId)\n  }\n\n  // =====================================================\n  // PERMISSION CHECK CACHING\n  // =====================================================\n\n  getPermissionCheck(\n    tenantId: string,\n    userId: string,\n    permissionName: string,\n    resourceId?: string,\n    contextHash?: string\n  ): boolean | null {\n    const userKey = this.getUserPermissionKey(tenantId, userId)\n    const checkKey = this.getPermissionCheckKey(permissionName, resourceId, contextHash)\n\n    const userChecks = this.permissionChecksCache.get(userKey)\n    if (!userChecks) {\n      return null\n    }\n\n    const check = userChecks[checkKey]\n    if (!check) {\n      return null\n    }\n\n    if (Date.now() > check.expiresAt) {\n      delete userChecks[checkKey]\n      return null\n    }\n\n    return check.granted\n  }\n\n  setPermissionCheck(\n    tenantId: string,\n    userId: string,\n    permissionName: string,\n    granted: boolean,\n    resourceId?: string,\n    contextHash?: string,\n    ttl?: number\n  ): void {\n    const userKey = this.getUserPermissionKey(tenantId, userId)\n    const checkKey = this.getPermissionCheckKey(permissionName, resourceId, contextHash)\n\n    if (!this.permissionChecksCache.has(userKey)) {\n      this.permissionChecksCache.set(userKey, {})\n    }\n\n    const userChecks = this.permissionChecksCache.get(userKey)!\n    const now = Date.now()\n    const expiresAt = now + (ttl || this.CHECK_TTL)\n\n    userChecks[checkKey] = {\n      granted,\n      timestamp: now,\n      expiresAt,\n    }\n  }\n\n  clearUserPermissionChecks(tenantId: string, userId: string): void {\n    const userKey = this.getUserPermissionKey(tenantId, userId)\n    this.permissionChecksCache.delete(userKey)\n  }\n\n  // =====================================================\n  // BULK OPERATIONS\n  // =====================================================\n\n  getMultiplePermissionChecks(\n    tenantId: string,\n    userId: string,\n    checks: Array<{\n      permissionName: string\n      resourceId?: string\n      contextHash?: string\n    }>\n  ): Record<string, boolean | null> {\n    const results: Record<string, boolean | null> = {}\n\n    for (const check of checks) {\n      const result = this.getPermissionCheck(\n        tenantId,\n        userId,\n        check.permissionName,\n        check.resourceId,\n        check.contextHash\n      )\n      results[check.permissionName] = result\n    }\n\n    return results\n  }\n\n  setMultiplePermissionChecks(\n    tenantId: string,\n    userId: string,\n    checks: Array<{\n      permissionName: string\n      granted: boolean\n      resourceId?: string\n      contextHash?: string\n    }>,\n    ttl?: number\n  ): void {\n    for (const check of checks) {\n      this.setPermissionCheck(\n        tenantId,\n        userId,\n        check.permissionName,\n        check.granted,\n        check.resourceId,\n        check.contextHash,\n        ttl\n      )\n    }\n  }\n\n  // =====================================================\n  // CACHE INVALIDATION\n  // =====================================================\n\n  invalidateUser(tenantId: string, userId: string): void {\n    this.clearUserPermissions(tenantId, userId)\n    this.clearUserPermissionChecks(tenantId, userId)\n  }\n\n  invalidateTenant(tenantId: string): void {\n    // Clear all entries for a tenant\n    const keysToDelete: string[] = []\n\n    for (const key of this.userPermissionsCache.keys()) {\n      if (key.startsWith(`${tenantId}:`)) {\n        keysToDelete.push(key)\n      }\n    }\n\n    for (const key of keysToDelete) {\n      this.userPermissionsCache.delete(key)\n      this.permissionChecksCache.delete(key)\n    }\n  }\n\n  invalidatePermission(permissionName: string): void {\n    // Clear all checks for a specific permission\n    for (const [userKey, userChecks] of this.permissionChecksCache.entries()) {\n      const checksToDelete: string[] = []\n\n      for (const checkKey of Object.keys(userChecks)) {\n        if (checkKey.startsWith(`${permissionName}:`)) {\n          checksToDelete.push(checkKey)\n        }\n      }\n\n      for (const checkKey of checksToDelete) {\n        delete userChecks[checkKey]\n      }\n    }\n  }\n\n  clearAll(): void {\n    this.userPermissionsCache.clear()\n    this.permissionChecksCache.clear()\n  }\n\n  // =====================================================\n  // CACHE STATISTICS\n  // =====================================================\n\n  getStats(): {\n    userPermissions: {\n      total: number\n      expired: number\n      hitRate?: number\n    }\n    permissionChecks: {\n      total: number\n      expired: number\n      hitRate?: number\n    }\n    memoryUsage: {\n      userPermissions: number\n      permissionChecks: number\n    }\n  } {\n    const now = Date.now()\n    let expiredUserPermissions = 0\n    let expiredPermissionChecks = 0\n    let totalPermissionChecks = 0\n\n    // Count expired user permissions\n    for (const entry of this.userPermissionsCache.values()) {\n      if (now > entry.expiresAt) {\n        expiredUserPermissions++\n      }\n    }\n\n    // Count expired permission checks\n    for (const userChecks of this.permissionChecksCache.values()) {\n      for (const check of Object.values(userChecks)) {\n        totalPermissionChecks++\n        if (now > check.expiresAt) {\n          expiredPermissionChecks++\n        }\n      }\n    }\n\n    return {\n      userPermissions: {\n        total: this.userPermissionsCache.size,\n        expired: expiredUserPermissions,\n      },\n      permissionChecks: {\n        total: totalPermissionChecks,\n        expired: expiredPermissionChecks,\n      },\n      memoryUsage: {\n        userPermissions: this.estimateMemoryUsage(this.userPermissionsCache),\n        permissionChecks: this.estimateMemoryUsage(this.permissionChecksCache),\n      },\n    }\n  }\n\n  // =====================================================\n  // PRIVATE METHODS\n  // =====================================================\n\n  private getUserPermissionKey(tenantId: string, userId: string): string {\n    return `${tenantId}:${userId}`\n  }\n\n  private getPermissionCheckKey(\n    permissionName: string,\n    resourceId?: string,\n    contextHash?: string\n  ): string {\n    const parts = [permissionName]\n    if (resourceId) parts.push(resourceId)\n    if (contextHash) parts.push(contextHash)\n    return parts.join(':')\n  }\n\n  private startCleanupInterval(): void {\n    // Clean up expired entries every 10 minutes\n    this.cleanupInterval = setInterval(\n      () => {\n        this.cleanup()\n      },\n      10 * 60 * 1000\n    )\n  }\n\n  private cleanup(): void {\n    const now = Date.now()\n\n    // Clean up expired user permissions\n    for (const [key, entry] of this.userPermissionsCache.entries()) {\n      if (now > entry.expiresAt) {\n        this.userPermissionsCache.delete(key)\n      }\n    }\n\n    // Clean up expired permission checks\n    for (const [userKey, userChecks] of this.permissionChecksCache.entries()) {\n      const checksToDelete: string[] = []\n\n      for (const [checkKey, check] of Object.entries(userChecks)) {\n        if (now > check.expiresAt) {\n          checksToDelete.push(checkKey)\n        }\n      }\n\n      for (const checkKey of checksToDelete) {\n        delete userChecks[checkKey]\n      }\n\n      // Remove empty user check objects\n      if (Object.keys(userChecks).length === 0) {\n        this.permissionChecksCache.delete(userKey)\n      }\n    }\n  }\n\n  private estimateMemoryUsage(cache: Map<any, any>): number {\n    // Rough estimation of memory usage in bytes\n    let size = 0\n    for (const [key, value] of cache.entries()) {\n      size += JSON.stringify(key).length * 2 // UTF-16\n      size += JSON.stringify(value).length * 2 // UTF-16\n    }\n    return size\n  }\n\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval)\n      this.cleanupInterval = null\n    }\n    this.clearAll()\n  }\n}\n\n// =====================================================\n// CONTEXT HASHING UTILITY\n// =====================================================\n\nexport function hashContext(context?: Record<string, any>): string | undefined {\n  if (!context || Object.keys(context).length === 0) {\n    return undefined\n  }\n\n  // Create a stable hash of the context object\n  const sortedKeys = Object.keys(context).sort()\n  const sortedContext = sortedKeys.reduce(\n    (acc, key) => {\n      acc[key] = context[key]\n      return acc\n    },\n    {} as Record<string, any>\n  )\n\n  // Simple hash function (for production, consider using a proper hash library)\n  const str = JSON.stringify(sortedContext)\n  let hash = 0\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i)\n    hash = (hash << 5) - hash + char\n    hash = hash & hash // Convert to 32-bit integer\n  }\n  return hash.toString(36)\n}\n\n// =====================================================\n// GLOBAL CACHE INSTANCE\n// =====================================================\n\nexport const globalPermissionCache = new PermissionCache()\n\n// Clean up on process exit\nif (typeof process !== 'undefined') {\n  process.on('exit', () => {\n    globalPermissionCache.destroy()\n  })\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\webhook-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[179,182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[179,182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":33,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server'\n\nexport async function deliverWebhooks({\n  tenant_id,\n  event,\n  payload,\n}: {\n  tenant_id: string\n  event: string\n  payload: any\n}) {\n  const supabase = await createClient()\n  // Fetch active webhooks for this tenant and event\n  const { data: webhooks, error } = await supabase\n    .from('webhooks')\n    .select('*')\n    .eq('tenant_id', tenant_id)\n    .eq('status', 'active')\n  if (error || !webhooks) return\n  for (const webhook of webhooks) {\n    if (!webhook.events.includes(event)) continue\n    try {\n      // Optionally sign payload with webhook.secret\n      await fetch(webhook.url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          // 'X-Signature': ... // TODO: Add HMAC signature if needed\n        },\n        body: JSON.stringify({ event, payload }),\n      })\n      // Optionally: log delivery success\n    } catch (err) {\n      // Optionally: log delivery failure, retry, etc.\n      // console.error('Webhook delivery failed:', err);\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lib\\with-rate-limit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\lighthouserc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\public\\firebase-messaging-sw.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'importScripts' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'importScripts' is not defined.","line":2,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'firebase' is not defined.","line":4,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'firebase' is not defined.","line":14,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":27}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"importScripts('https://www.gstatic.com/firebasejs/10.12.2/firebase-app-compat.js')\nimportScripts('https://www.gstatic.com/firebasejs/10.12.2/firebase-messaging-compat.js')\n\nfirebase.initializeApp({\n  apiKey: 'YOUR_API_KEY',\n  authDomain: 'YOUR_AUTH_DOMAIN',\n  projectId: 'YOUR_PROJECT_ID',\n  storageBucket: 'YOUR_STORAGE_BUCKET',\n  messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',\n  appId: 'YOUR_APP_ID',\n  measurementId: 'YOUR_MEASUREMENT_ID',\n})\n\nconst messaging = firebase.messaging()\n\nmessaging.onBackgroundMessage(function (payload) {\n  self.registration.showNotification(payload.notification.title, {\n    body: payload.notification.body,\n    icon: '/placeholder-logo.png',\n  })\n})\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\public\\service-worker.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":1,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":4,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"self.addEventListener('install', event => {\n  self.skipWaiting()\n})\nself.addEventListener('activate', event => {\n  self.clients.claim()\n})\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\scripts\\geofence-event-detector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\src\\navigation\\AppNavigator.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\src\\screens\\AssetsScreen.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'List' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Divider' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":9},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterAssets'. Either include it or remove the dependency array.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [assets, filterAssets, searchQuery, selectedCategory, sortBy]","fix":{"range":[1180,1227],"text":"[assets, filterAssets, searchQuery, selectedCategory, sortBy]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":63,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStatusIcon' is assigned a value but never used.","line":137,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":137,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react'\nimport { View, FlatList, StyleSheet, RefreshControl, Alert } from 'react-native'\nimport {\n  Card,\n  Title,\n  Paragraph,\n  Searchbar,\n  Chip,\n  List,\n  Divider,\n  ActivityIndicator,\n  Text,\n  Button,\n  Menu,\n  IconButton,\n} from 'react-native-paper'\nimport { MaterialCommunityIcons } from '@expo/vector-icons'\nimport { useTheme } from 'react-native-paper'\nimport { assetAPI, offlineStorage } from '../services/api'\n\nexport default function AssetsScreen({ navigation }) {\n  const theme = useTheme()\n  const [assets, setAssets] = useState([])\n  const [filteredAssets, setFilteredAssets] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [refreshing, setRefreshing] = useState(false)\n  const [searchQuery, setSearchQuery] = useState('')\n  const [selectedCategory, setSelectedCategory] = useState('all')\n  const [categories, setCategories] = useState([])\n  const [offlineMode, setOfflineMode] = useState(false)\n  const [sortMenuVisible, setSortMenuVisible] = useState(false)\n  const [sortBy, setSortBy] = useState('name')\n\n  useEffect(() => {\n    loadAssets()\n  }, [])\n\n  useEffect(() => {\n    filterAssets()\n  }, [assets, searchQuery, selectedCategory, sortBy])\n\n  const loadAssets = async () => {\n    try {\n      setLoading(true)\n\n      // Try to load from API first\n      try {\n        const response = await assetAPI.getAssets()\n        const assetsData = response.assets || []\n        setAssets(assetsData)\n\n        // Extract unique categories\n        const uniqueCategories = [\n          ...new Set(assetsData.map(asset => asset.category).filter(Boolean)),\n        ]\n        setCategories(uniqueCategories)\n\n        setOfflineMode(false)\n\n        // Store for offline use\n        await offlineStorage.storeData('assets', assetsData)\n        await offlineStorage.storeData('categories', uniqueCategories)\n      } catch (error) {\n        console.log('API unavailable, loading from offline storage')\n        setOfflineMode(true)\n\n        // Load from offline storage\n        const offlineAssets = await offlineStorage.getData('assets')\n        const offlineCategories = await offlineStorage.getData('categories')\n\n        if (offlineAssets) setAssets(offlineAssets)\n        if (offlineCategories) setCategories(offlineCategories)\n      }\n    } catch (error) {\n      console.error('Error loading assets:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const onRefresh = async () => {\n    setRefreshing(true)\n    await loadAssets()\n    setRefreshing(false)\n  }\n\n  const filterAssets = () => {\n    let filtered = [...assets]\n\n    // Filter by search query\n    if (searchQuery) {\n      filtered = filtered.filter(\n        asset =>\n          asset.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          asset.asset_id?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          asset.description?.toLowerCase().includes(searchQuery.toLowerCase())\n      )\n    }\n\n    // Filter by category\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter(asset => asset.category === selectedCategory)\n    }\n\n    // Sort assets\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'name':\n          return (a.name || '').localeCompare(b.name || '')\n        case 'status':\n          return (a.status || '').localeCompare(b.status || '')\n        case 'category':\n          return (a.category || '').localeCompare(b.category || '')\n        case 'date':\n          return new Date(b.updated_at || 0) - new Date(a.updated_at || 0)\n        default:\n          return 0\n      }\n    })\n\n    setFilteredAssets(filtered)\n  }\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'available':\n        return theme.colors.secondary\n      case 'checked_out':\n        return theme.colors.tertiary\n      case 'maintenance':\n        return theme.colors.error\n      default:\n        return theme.colors.onSurfaceVariant\n    }\n  }\n\n  const getStatusIcon = status => {\n    switch (status) {\n      case 'available':\n        return 'check-circle'\n      case 'checked_out':\n        return 'account-arrow-right'\n      case 'maintenance':\n        return 'wrench'\n      default:\n        return 'help-circle'\n    }\n  }\n\n  const renderAssetItem = ({ item }) => (\n    <Card style={styles.assetCard} onPress={() => handleAssetPress(item)}>\n      <Card.Content>\n        <View style={styles.assetHeader}>\n          <View style={styles.assetInfo}>\n            <Title style={styles.assetTitle}>{item.name || `Asset ${item.id}`}</Title>\n            <Paragraph style={styles.assetId}>{item.asset_id || item.id}</Paragraph>\n          </View>\n          <Chip\n            mode=\"outlined\"\n            textStyle={{ color: getStatusColor(item.status) }}\n            style={[styles.statusChip, { borderColor: getStatusColor(item.status) }]}\n          >\n            {item.status || 'Unknown'}\n          </Chip>\n        </View>\n\n        {item.description && (\n          <Paragraph style={styles.assetDescription} numberOfLines={2}>\n            {item.description}\n          </Paragraph>\n        )}\n\n        <View style={styles.assetDetails}>\n          {item.category && (\n            <Chip mode=\"outlined\" style={styles.categoryChip}>\n              {item.category}\n            </Chip>\n          )}\n          {item.location && (\n            <Chip mode=\"outlined\" style={styles.locationChip}>\n              <MaterialCommunityIcons name=\"map-marker\" size={16} />\n              {item.location}\n            </Chip>\n          )}\n        </View>\n      </Card.Content>\n    </Card>\n  )\n\n  const handleAssetPress = asset => {\n    // Navigate to asset details or show quick actions\n    Alert.alert(\n      asset.name || `Asset ${asset.id}`,\n      `Status: ${asset.status}\\nCategory: ${asset.category || 'N/A'}`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { text: 'Check In/Out', onPress: () => navigation.navigate('Checkout', { asset }) },\n        { text: 'View Details', onPress: () => navigation.navigate('Assets') },\n      ]\n    )\n  }\n\n  const renderEmptyState = () => (\n    <View style={styles.emptyState}>\n      <MaterialCommunityIcons\n        name=\"package-variant\"\n        size={64}\n        color={theme.colors.onSurfaceVariant}\n      />\n      <Text style={styles.emptyStateTitle}>No Assets Found</Text>\n      <Text style={styles.emptyStateText}>\n        {searchQuery || selectedCategory !== 'all'\n          ? 'Try adjusting your search or filters'\n          : 'Assets will appear here once added to the system'}\n      </Text>\n    </View>\n  )\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n        <Text style={styles.loadingText}>Loading assets...</Text>\n      </View>\n    )\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Offline Mode Indicator */}\n      {offlineMode && (\n        <Card style={[styles.offlineCard, { backgroundColor: theme.colors.tertiaryContainer }]}>\n          <Card.Content>\n            <View style={styles.offlineHeader}>\n              <MaterialCommunityIcons name=\"wifi-off\" size={20} color={theme.colors.tertiary} />\n              <Text style={[styles.offlineText, { color: theme.colors.tertiary }]}>\n                Offline Mode - Data may be outdated\n              </Text>\n            </View>\n          </Card.Content>\n        </Card>\n      )}\n\n      {/* Search and Filters */}\n      <Card style={styles.searchCard}>\n        <Card.Content>\n          <Searchbar\n            placeholder=\"Search assets...\"\n            onChangeText={setSearchQuery}\n            value={searchQuery}\n            style={styles.searchbar}\n          />\n\n          <View style={styles.filtersContainer}>\n            <View style={styles.categoryFilters}>\n              <Chip\n                mode={selectedCategory === 'all' ? 'flat' : 'outlined'}\n                onPress={() => setSelectedCategory('all')}\n                style={styles.categoryChip}\n              >\n                All\n              </Chip>\n              {categories.map(category => (\n                <Chip\n                  key={category}\n                  mode={selectedCategory === category ? 'flat' : 'outlined'}\n                  onPress={() => setSelectedCategory(category)}\n                  style={styles.categoryChip}\n                >\n                  {category}\n                </Chip>\n              ))}\n            </View>\n\n            <Menu\n              visible={sortMenuVisible}\n              onDismiss={() => setSortMenuVisible(false)}\n              anchor={<IconButton icon=\"sort\" onPress={() => setSortMenuVisible(true)} />}\n            >\n              <Menu.Item\n                onPress={() => {\n                  setSortBy('name')\n                  setSortMenuVisible(false)\n                }}\n                title=\"Sort by Name\"\n              />\n              <Menu.Item\n                onPress={() => {\n                  setSortBy('status')\n                  setSortMenuVisible(false)\n                }}\n                title=\"Sort by Status\"\n              />\n              <Menu.Item\n                onPress={() => {\n                  setSortBy('category')\n                  setSortMenuVisible(false)\n                }}\n                title=\"Sort by Category\"\n              />\n              <Menu.Item\n                onPress={() => {\n                  setSortBy('date')\n                  setSortMenuVisible(false)\n                }}\n                title=\"Sort by Date\"\n              />\n            </Menu>\n          </View>\n        </Card.Content>\n      </Card>\n\n      {/* Assets List */}\n      <FlatList\n        data={filteredAssets}\n        renderItem={renderAssetItem}\n        keyExtractor={item => item.id?.toString() || Math.random().toString()}\n        contentContainerStyle={styles.listContainer}\n        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n        ListEmptyComponent={renderEmptyState}\n        showsVerticalScrollIndicator={false}\n      />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n  },\n  offlineCard: {\n    margin: 16,\n    marginBottom: 8,\n  },\n  offlineHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  offlineText: {\n    marginLeft: 8,\n    fontSize: 14,\n  },\n  searchCard: {\n    margin: 16,\n    marginBottom: 8,\n  },\n  searchbar: {\n    marginBottom: 12,\n  },\n  filtersContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  categoryFilters: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    flex: 1,\n  },\n  categoryChip: {\n    marginRight: 8,\n    marginBottom: 4,\n  },\n  listContainer: {\n    padding: 16,\n    paddingTop: 8,\n  },\n  assetCard: {\n    marginBottom: 12,\n  },\n  assetHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 8,\n  },\n  assetInfo: {\n    flex: 1,\n  },\n  assetTitle: {\n    fontSize: 16,\n    marginBottom: 2,\n  },\n  assetId: {\n    fontSize: 12,\n    color: '#666',\n  },\n  statusChip: {\n    alignSelf: 'flex-start',\n  },\n  assetDescription: {\n    fontSize: 14,\n    marginBottom: 8,\n    color: '#666',\n  },\n  assetDetails: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  locationChip: {\n    marginLeft: 8,\n  },\n  emptyState: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: 60,\n  },\n  emptyStateTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyStateText: {\n    fontSize: 14,\n    textAlign: 'center',\n    color: '#666',\n    paddingHorizontal: 32,\n  },\n})\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\src\\screens\\CheckoutScreen.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Paragraph' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ActivityIndicator' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'navigation' is defined but never used.","line":21,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":52},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterAssets'. Either include it or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [assets, filterAssets, searchQuery]","fix":{"range":[1471,1492],"text":"[assets, filterAssets, searchQuery]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":61,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":189,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react'\nimport { View, ScrollView, StyleSheet, Alert } from 'react-native'\nimport {\n  Card,\n  Title,\n  Paragraph,\n  Button,\n  TextInput,\n  Chip,\n  List,\n  Divider,\n  ActivityIndicator,\n  Text,\n  Searchbar,\n} from 'react-native-paper'\nimport { MaterialCommunityIcons } from '@expo/vector-icons'\nimport { useTheme } from 'react-native-paper'\nimport * as Location from 'expo-location'\nimport { assetAPI, offlineStorage } from '../services/api'\n\nexport default function CheckoutScreen({ navigation, route }) {\n  const theme = useTheme()\n  const [loading, setLoading] = useState(false)\n  const [searchQuery, setSearchQuery] = useState('')\n  const [assets, setAssets] = useState([])\n  const [filteredAssets, setFilteredAssets] = useState([])\n  const [selectedAsset, setSelectedAsset] = useState(null)\n  const [action, setAction] = useState('checkout') // 'checkout' or 'checkin'\n  const [location, setLocation] = useState(null)\n  const [gettingLocation, setGettingLocation] = useState(false)\n  const [notes, setNotes] = useState('')\n  const [offlineMode, setOfflineMode] = useState(false)\n\n  // Check if asset was passed from navigation\n  useEffect(() => {\n    if (route.params?.asset) {\n      setSelectedAsset(route.params.asset)\n      setAction(route.params.asset.status === 'available' ? 'checkout' : 'checkin')\n    }\n  }, [route.params])\n\n  useEffect(() => {\n    loadAssets()\n  }, [])\n\n  useEffect(() => {\n    filterAssets()\n  }, [assets, searchQuery])\n\n  const loadAssets = async () => {\n    try {\n      // Try to load from API first\n      try {\n        const response = await assetAPI.getAssets()\n        const assetsData = response.assets || []\n        setAssets(assetsData)\n        setOfflineMode(false)\n\n        // Store for offline use\n        await offlineStorage.storeData('assets', assetsData)\n      } catch (error) {\n        console.log('API unavailable, loading from offline storage')\n        setOfflineMode(true)\n\n        // Load from offline storage\n        const offlineAssets = await offlineStorage.getData('assets')\n        if (offlineAssets) setAssets(offlineAssets)\n      }\n    } catch (error) {\n      console.error('Error loading assets:', error)\n    }\n  }\n\n  const filterAssets = () => {\n    let filtered = assets\n\n    // Filter by search query\n    if (searchQuery) {\n      filtered = filtered.filter(\n        asset =>\n          asset.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          asset.asset_id?.toLowerCase().includes(searchQuery.toLowerCase())\n      )\n    }\n\n    // Filter by action type\n    if (action === 'checkout') {\n      filtered = filtered.filter(asset => asset.status === 'available')\n    } else {\n      filtered = filtered.filter(asset => asset.status === 'checked_out')\n    }\n\n    setFilteredAssets(filtered)\n  }\n\n  const getCurrentLocation = async () => {\n    try {\n      setGettingLocation(true)\n\n      // Request location permissions\n      const { status } = await Location.requestForegroundPermissionsAsync()\n      if (status !== 'granted') {\n        Alert.alert(\n          'Location Permission Required',\n          'Location access is needed to record where the asset is being checked in/out.',\n          [{ text: 'OK' }]\n        )\n        return\n      }\n\n      // Get current location\n      const currentLocation = await Location.getCurrentPositionAsync({\n        accuracy: Location.Accuracy.Balanced,\n      })\n\n      const { latitude, longitude } = currentLocation.coords\n\n      // Reverse geocode to get address\n      const reverseGeocode = await Location.reverseGeocodeAsync({\n        latitude,\n        longitude,\n      })\n\n      const address = reverseGeocode[0]\n      const locationString = address\n        ? `${address.street || ''} ${address.city || ''} ${address.region || ''}`.trim()\n        : `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`\n\n      setLocation({\n        latitude,\n        longitude,\n        address: locationString,\n      })\n\n      Alert.alert('Location Captured', `Location: ${locationString}`, [{ text: 'OK' }])\n    } catch (error) {\n      console.error('Error getting location:', error)\n      Alert.alert(\n        'Location Error',\n        'Failed to get current location. You can still proceed without location.',\n        [{ text: 'OK' }]\n      )\n    } finally {\n      setGettingLocation(false)\n    }\n  }\n\n  const handleAssetSelect = asset => {\n    setSelectedAsset(asset)\n    setAction(asset.status === 'available' ? 'checkout' : 'checkin')\n  }\n\n  const handleCheckInOut = async () => {\n    if (!selectedAsset) {\n      Alert.alert('Error', 'Please select an asset first.')\n      return\n    }\n\n    try {\n      setLoading(true)\n\n      const actionData = {\n        assetId: selectedAsset.id,\n        action: action,\n        location: location?.address || 'Location not specified',\n        notes: notes,\n        timestamp: new Date().toISOString(),\n      }\n\n      // Try to perform action via API\n      try {\n        await assetAPI.checkInOut(selectedAsset.id, action, location?.address)\n\n        Alert.alert(\n          'Success',\n          `Asset ${action === 'checkout' ? 'checked out' : 'checked in'} successfully!`,\n          [\n            {\n              text: 'OK',\n              onPress: () => {\n                setSelectedAsset(null)\n                setLocation(null)\n                setNotes('')\n                loadAssets() // Refresh assets list\n              },\n            },\n          ]\n        )\n      } catch (error) {\n        console.log('API unavailable, storing action for later sync')\n\n        // Store action for offline sync\n        await offlineStorage.storeOfflineAction(actionData)\n\n        Alert.alert(\n          'Action Queued',\n          `Asset ${action === 'checkout' ? 'checkout' : 'checkin'} has been queued for sync when connection is restored.`,\n          [\n            {\n              text: 'OK',\n              onPress: () => {\n                setSelectedAsset(null)\n                setLocation(null)\n                setNotes('')\n              },\n            },\n          ]\n        )\n      }\n    } catch (error) {\n      console.error('Error performing check in/out:', error)\n      Alert.alert('Error', 'Failed to perform action. Please try again.', [{ text: 'OK' }])\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const renderAssetItem = ({ item }) => (\n    <List.Item\n      title={item.name || `Asset ${item.id}`}\n      description={`${item.asset_id || item.id} • ${item.category || 'No category'}`}\n      left={props => (\n        <List.Icon\n          {...props}\n          icon={\n            item.status === 'available'\n              ? 'check-circle'\n              : item.status === 'checked_out'\n                ? 'account-arrow-right'\n                : 'wrench'\n          }\n        />\n      )}\n      right={() => (\n        <Chip mode=\"outlined\" textStyle={{ fontSize: 12 }}>\n          {item.status || 'Unknown'}\n        </Chip>\n      )}\n      onPress={() => handleAssetSelect(item)}\n      style={[\n        styles.assetItem,\n        selectedAsset?.id === item.id && { backgroundColor: theme.colors.primaryContainer },\n      ]}\n    />\n  )\n\n  return (\n    <View style={styles.container}>\n      {/* Offline Mode Indicator */}\n      {offlineMode && (\n        <Card style={[styles.offlineCard, { backgroundColor: theme.colors.tertiaryContainer }]}>\n          <Card.Content>\n            <View style={styles.offlineHeader}>\n              <MaterialCommunityIcons name=\"wifi-off\" size={20} color={theme.colors.tertiary} />\n              <Text style={[styles.offlineText, { color: theme.colors.tertiary }]}>\n                Offline Mode - Actions will be queued\n              </Text>\n            </View>\n          </Card.Content>\n        </Card>\n      )}\n\n      {/* Action Toggle */}\n      <Card style={styles.actionCard}>\n        <Card.Content>\n          <Title>Select Action</Title>\n          <View style={styles.actionToggle}>\n            <Button\n              mode={action === 'checkout' ? 'contained' : 'outlined'}\n              onPress={() => setAction('checkout')}\n              style={styles.actionButton}\n            >\n              Check Out\n            </Button>\n            <Button\n              mode={action === 'checkin' ? 'contained' : 'outlined'}\n              onPress={() => setAction('checkin')}\n              style={styles.actionButton}\n            >\n              Check In\n            </Button>\n          </View>\n        </Card.Content>\n      </Card>\n\n      {/* Asset Selection */}\n      <Card style={styles.card}>\n        <Card.Content>\n          <Title>Select Asset</Title>\n          <Searchbar\n            placeholder={`Search assets to ${action === 'checkout' ? 'check out' : 'check in'}...`}\n            onChangeText={setSearchQuery}\n            value={searchQuery}\n            style={styles.searchbar}\n          />\n\n          <ScrollView style={styles.assetsList}>\n            {filteredAssets.map((asset, index) => (\n              <View key={asset.id || index}>\n                {renderAssetItem({ item: asset })}\n                {index < filteredAssets.length - 1 && <Divider />}\n              </View>\n            ))}\n          </ScrollView>\n        </Card.Content>\n      </Card>\n\n      {/* Selected Asset Details */}\n      {selectedAsset && (\n        <Card style={styles.card}>\n          <Card.Content>\n            <Title>Selected Asset</Title>\n            <View style={styles.selectedAssetInfo}>\n              <Text style={styles.assetName}>\n                {selectedAsset.name || `Asset ${selectedAsset.id}`}\n              </Text>\n              <Text style={styles.assetId}>{selectedAsset.asset_id || selectedAsset.id}</Text>\n              <Chip mode=\"outlined\" style={styles.statusChip}>\n                {selectedAsset.status || 'Unknown'}\n              </Chip>\n            </View>\n          </Card.Content>\n        </Card>\n      )}\n\n      {/* Location and Notes */}\n      {selectedAsset && (\n        <Card style={styles.card}>\n          <Card.Content>\n            <Title>Additional Information</Title>\n\n            {/* Location */}\n            <View style={styles.locationSection}>\n              <Text style={styles.sectionTitle}>Location</Text>\n              {location ? (\n                <View style={styles.locationInfo}>\n                  <MaterialCommunityIcons\n                    name=\"map-marker\"\n                    size={20}\n                    color={theme.colors.primary}\n                  />\n                  <Text style={styles.locationText}>{location.address}</Text>\n                </View>\n              ) : (\n                <Button\n                  mode=\"outlined\"\n                  onPress={getCurrentLocation}\n                  loading={gettingLocation}\n                  icon=\"map-marker\"\n                  style={styles.locationButton}\n                >\n                  {gettingLocation ? 'Getting Location...' : 'Get Current Location'}\n                </Button>\n              )}\n            </View>\n\n            {/* Notes */}\n            <View style={styles.notesSection}>\n              <Text style={styles.sectionTitle}>Notes (Optional)</Text>\n              <TextInput\n                mode=\"outlined\"\n                placeholder=\"Add any notes about this action...\"\n                value={notes}\n                onChangeText={setNotes}\n                multiline\n                numberOfLines={3}\n                style={styles.notesInput}\n              />\n            </View>\n          </Card.Content>\n        </Card>\n      )}\n\n      {/* Action Button */}\n      {selectedAsset && (\n        <Card style={styles.card}>\n          <Card.Content>\n            <Button\n              mode=\"contained\"\n              onPress={handleCheckInOut}\n              loading={loading}\n              disabled={loading}\n              style={styles.actionButton}\n              icon={action === 'checkout' ? 'account-arrow-right' : 'account-arrow-left'}\n            >\n              {loading\n                ? 'Processing...'\n                : `${action === 'checkout' ? 'Check Out' : 'Check In'} Asset`}\n            </Button>\n          </Card.Content>\n        </Card>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    padding: 16,\n  },\n  offlineCard: {\n    marginBottom: 16,\n  },\n  offlineHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  offlineText: {\n    marginLeft: 8,\n    fontSize: 14,\n  },\n  actionCard: {\n    marginBottom: 16,\n  },\n  actionToggle: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 8,\n  },\n  actionButton: {\n    flex: 1,\n    marginHorizontal: 4,\n  },\n  card: {\n    marginBottom: 16,\n  },\n  searchbar: {\n    marginBottom: 12,\n  },\n  assetsList: {\n    maxHeight: 200,\n  },\n  assetItem: {\n    borderRadius: 8,\n  },\n  selectedAssetInfo: {\n    marginTop: 8,\n  },\n  assetName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  assetId: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 8,\n  },\n  statusChip: {\n    alignSelf: 'flex-start',\n  },\n  locationSection: {\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n  locationButton: {\n    marginTop: 4,\n  },\n  locationInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 4,\n  },\n  locationText: {\n    marginLeft: 8,\n    fontSize: 14,\n  },\n  notesSection: {\n    marginBottom: 16,\n  },\n  notesInput: {\n    marginTop: 4,\n  },\n})\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\src\\screens\\HomeScreen.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":53,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react'\nimport { View, ScrollView, RefreshControl, StyleSheet } from 'react-native'\nimport {\n  Card,\n  Title,\n  Paragraph,\n  Button,\n  Chip,\n  List,\n  Divider,\n  ActivityIndicator,\n  Text,\n} from 'react-native-paper'\nimport { MaterialCommunityIcons } from '@expo/vector-icons'\nimport { useTheme } from 'react-native-paper'\nimport { assetAPI, analyticsAPI, offlineStorage } from '../services/api'\n\nexport default function HomeScreen({ navigation }) {\n  const theme = useTheme()\n  const [loading, setLoading] = useState(true)\n  const [refreshing, setRefreshing] = useState(false)\n  const [stats, setStats] = useState({\n    totalAssets: 0,\n    checkedOut: 0,\n    available: 0,\n    maintenance: 0,\n  })\n  const [recentActivity, setRecentActivity] = useState([])\n  const [offlineMode, setOfflineMode] = useState(false)\n\n  useEffect(() => {\n    loadDashboardData()\n  }, [])\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true)\n\n      // Try to load from API first\n      try {\n        const [statsData, activityData] = await Promise.all([\n          analyticsAPI.getDashboardStats(),\n          assetAPI.getAssets({ limit: 5, sort: 'updated_at' }),\n        ])\n\n        setStats(statsData)\n        setRecentActivity(activityData.assets || [])\n        setOfflineMode(false)\n\n        // Store data for offline use\n        await offlineStorage.storeData('dashboardStats', statsData)\n        await offlineStorage.storeData('recentActivity', activityData.assets || [])\n      } catch (error) {\n        console.log('API unavailable, loading from offline storage')\n        setOfflineMode(true)\n\n        // Load from offline storage\n        const offlineStats = await offlineStorage.getData('dashboardStats')\n        const offlineActivity = await offlineStorage.getData('recentActivity')\n\n        if (offlineStats) setStats(offlineStats)\n        if (offlineActivity) setRecentActivity(offlineActivity)\n      }\n    } catch (error) {\n      console.error('Error loading dashboard data:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const onRefresh = async () => {\n    setRefreshing(true)\n    await loadDashboardData()\n    setRefreshing(false)\n  }\n\n  const QuickActionButton = ({ icon, title, onPress, color }) => (\n    <Button\n      mode=\"contained\"\n      icon={icon}\n      onPress={onPress}\n      style={[styles.quickActionButton, { backgroundColor: color }]}\n      labelStyle={styles.quickActionLabel}\n    >\n      {title}\n    </Button>\n  )\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n        <Text style={styles.loadingText}>Loading dashboard...</Text>\n      </View>\n    )\n  }\n\n  return (\n    <ScrollView\n      style={styles.container}\n      refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n    >\n      {offlineMode && (\n        <Card style={[styles.offlineCard, { backgroundColor: theme.colors.tertiaryContainer }]}>\n          <Card.Content>\n            <View style={styles.offlineHeader}>\n              <MaterialCommunityIcons name=\"wifi-off\" size={20} color={theme.colors.tertiary} />\n              <Text style={[styles.offlineText, { color: theme.colors.tertiary }]}>\n                Offline Mode - Data may be outdated\n              </Text>\n            </View>\n          </Card.Content>\n        </Card>\n      )}\n\n      {/* Stats Cards */}\n      <View style={styles.statsContainer}>\n        <Card style={styles.statsCard}>\n          <Card.Content>\n            <Title style={styles.statsTitle}>Total Assets</Title>\n            <Text style={styles.statsNumber}>{stats.totalAssets}</Text>\n          </Card.Content>\n        </Card>\n\n        <Card style={styles.statsCard}>\n          <Card.Content>\n            <Title style={styles.statsTitle}>Available</Title>\n            <Text style={[styles.statsNumber, { color: theme.colors.secondary }]}>\n              {stats.available}\n            </Text>\n          </Card.Content>\n        </Card>\n\n        <Card style={styles.statsCard}>\n          <Card.Content>\n            <Title style={styles.statsTitle}>Checked Out</Title>\n            <Text style={[styles.statsNumber, { color: theme.colors.tertiary }]}>\n              {stats.checkedOut}\n            </Text>\n          </Card.Content>\n        </Card>\n\n        <Card style={styles.statsCard}>\n          <Card.Content>\n            <Title style={styles.statsTitle}>Maintenance</Title>\n            <Text style={[styles.statsNumber, { color: theme.colors.error }]}>\n              {stats.maintenance}\n            </Text>\n          </Card.Content>\n        </Card>\n      </View>\n\n      {/* Quick Actions */}\n      <Card style={styles.card}>\n        <Card.Content>\n          <Title>Quick Actions</Title>\n          <View style={styles.quickActionsContainer}>\n            <QuickActionButton\n              icon=\"qrcode-scan\"\n              title=\"Scan QR\"\n              onPress={() => navigation.navigate('Scanner')}\n              color={theme.colors.primary}\n            />\n            <QuickActionButton\n              icon=\"package-variant\"\n              title=\"View Assets\"\n              onPress={() => navigation.navigate('Assets')}\n              color={theme.colors.secondary}\n            />\n            <QuickActionButton\n              icon=\"clipboard-check\"\n              title=\"Check In/Out\"\n              onPress={() => navigation.navigate('Checkout')}\n              color={theme.colors.tertiary}\n            />\n            <QuickActionButton\n              icon=\"map-marker\"\n              title=\"Location\"\n              onPress={() => navigation.navigate('Location')}\n              color={theme.colors.error}\n            />\n          </View>\n        </Card.Content>\n      </Card>\n\n      {/* Recent Activity */}\n      <Card style={styles.card}>\n        <Card.Content>\n          <Title>Recent Activity</Title>\n          {recentActivity.length > 0 ? (\n            recentActivity.map((asset, index) => (\n              <View key={asset.id || index}>\n                <List.Item\n                  title={asset.name || `Asset ${asset.id}`}\n                  description={asset.status || 'Unknown status'}\n                  left={props => (\n                    <List.Icon\n                      {...props}\n                      icon={\n                        asset.status === 'available'\n                          ? 'check-circle'\n                          : asset.status === 'checked_out'\n                            ? 'account-arrow-right'\n                            : 'wrench'\n                      }\n                    />\n                  )}\n                  right={() => (\n                    <Chip mode=\"outlined\" textStyle={{ fontSize: 12 }}>\n                      {asset.status || 'Unknown'}\n                    </Chip>\n                  )}\n                  onPress={() => navigation.navigate('Assets')}\n                />\n                {index < recentActivity.length - 1 && <Divider />}\n              </View>\n            ))\n          ) : (\n            <Paragraph style={styles.noActivityText}>No recent activity</Paragraph>\n          )}\n        </Card.Content>\n      </Card>\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    padding: 16,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n  },\n  offlineCard: {\n    marginBottom: 16,\n  },\n  offlineHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  offlineText: {\n    marginLeft: 8,\n    fontSize: 14,\n  },\n  statsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  statsCard: {\n    width: '48%',\n    marginBottom: 8,\n  },\n  statsTitle: {\n    fontSize: 14,\n    marginBottom: 4,\n  },\n  statsNumber: {\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n  card: {\n    marginBottom: 16,\n  },\n  quickActionsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    marginTop: 8,\n  },\n  quickActionButton: {\n    width: '48%',\n    marginBottom: 8,\n  },\n  quickActionLabel: {\n    fontSize: 12,\n  },\n  noActivityText: {\n    textAlign: 'center',\n    fontStyle: 'italic',\n    color: '#666',\n  },\n})\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\src\\screens\\LocationScreen.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ActivityIndicator' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkLocationPermission'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkLocationPermission]","fix":{"range":[1015,1017],"text":"[checkLocationPermission]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadNearbyAssets'. Either include it or remove the dependency array.","line":39,"column":6,"nodeType":"ArrayExpression","endLine":39,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [loadNearbyAssets, location]","fix":{"range":[1124,1134],"text":"[loadNearbyAssets, location]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":136,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":163,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":21},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":327,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10476,10579],"text":"\n                Geofencing is active. You&apos;ll receive notifications for asset movements.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10476,10579],"text":"\n                Geofencing is active. You&lsquo;ll receive notifications for asset movements.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10476,10579],"text":"\n                Geofencing is active. You&#39;ll receive notifications for asset movements.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10476,10579],"text":"\n                Geofencing is active. You&rsquo;ll receive notifications for asset movements.\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"no-undef","severity":2,"message":"'theme' is not defined.","line":492,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":492,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'theme' is not defined.","line":499,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":499,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react'\nimport { View, ScrollView, StyleSheet, Alert } from 'react-native'\nimport {\n  Card,\n  Title,\n  Paragraph,\n  Button,\n  Chip,\n  List,\n  Divider,\n  ActivityIndicator,\n  Text,\n  Switch,\n} from 'react-native-paper'\nimport { MaterialCommunityIcons } from '@expo/vector-icons'\nimport { useTheme } from 'react-native-paper'\nimport * as Location from 'expo-location'\nimport { assetAPI, offlineStorage } from '../services/api'\n\nexport default function LocationScreen({ navigation }) {\n  const theme = useTheme()\n  const [location, setLocation] = useState(null)\n  const [locationPermission, setLocationPermission] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const [nearbyAssets, setNearbyAssets] = useState([])\n  const [geofencingEnabled, setGeofencingEnabled] = useState(false)\n  const [locationHistory, setLocationHistory] = useState([])\n  const [offlineMode, setOfflineMode] = useState(false)\n\n  useEffect(() => {\n    checkLocationPermission()\n  }, [])\n\n  useEffect(() => {\n    if (location) {\n      loadNearbyAssets()\n      loadLocationHistory()\n    }\n  }, [location])\n\n  const checkLocationPermission = async () => {\n    try {\n      const { status } = await Location.getForegroundPermissionsAsync()\n      setLocationPermission(status)\n\n      if (status === 'granted') {\n        getCurrentLocation()\n      }\n    } catch (error) {\n      console.error('Error checking location permission:', error)\n    }\n  }\n\n  const requestLocationPermission = async () => {\n    try {\n      setLoading(true)\n      const { status } = await Location.requestForegroundPermissionsAsync()\n      setLocationPermission(status)\n\n      if (status === 'granted') {\n        getCurrentLocation()\n      } else {\n        Alert.alert(\n          'Location Permission Required',\n          'Location access is needed to show nearby assets and enable geofencing features.',\n          [{ text: 'OK' }]\n        )\n      }\n    } catch (error) {\n      console.error('Error requesting location permission:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getCurrentLocation = async () => {\n    try {\n      setLoading(true)\n\n      const currentLocation = await Location.getCurrentPositionAsync({\n        accuracy: Location.Accuracy.Balanced,\n      })\n\n      const { latitude, longitude } = currentLocation.coords\n\n      // Reverse geocode to get address\n      const reverseGeocode = await Location.reverseGeocodeAsync({\n        latitude,\n        longitude,\n      })\n\n      const address = reverseGeocode[0]\n      const locationString = address\n        ? `${address.street || ''} ${address.city || ''} ${address.region || ''}`.trim()\n        : `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`\n\n      const locationData = {\n        latitude,\n        longitude,\n        address: locationString,\n        timestamp: new Date().toISOString(),\n        accuracy: currentLocation.coords.accuracy,\n      }\n\n      setLocation(locationData)\n\n      // Store location for offline use\n      await offlineStorage.storeData('lastLocation', locationData)\n    } catch (error) {\n      console.error('Error getting current location:', error)\n      Alert.alert(\n        'Location Error',\n        'Failed to get current location. Please check your GPS settings.',\n        [{ text: 'OK' }]\n      )\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const loadNearbyAssets = async () => {\n    try {\n      // Try to load from API first\n      try {\n        const response = await assetAPI.getAssets({\n          latitude: location.latitude,\n          longitude: location.longitude,\n          radius: 1000, // 1km radius\n        })\n\n        setNearbyAssets(response.assets || [])\n        setOfflineMode(false)\n\n        // Store for offline use\n        await offlineStorage.storeData('nearbyAssets', response.assets || [])\n      } catch (error) {\n        console.log('API unavailable, loading from offline storage')\n        setOfflineMode(true)\n\n        // Load from offline storage\n        const offlineAssets = await offlineStorage.getData('nearbyAssets')\n        if (offlineAssets) setNearbyAssets(offlineAssets)\n      }\n    } catch (error) {\n      console.error('Error loading nearby assets:', error)\n    }\n  }\n\n  const loadLocationHistory = async () => {\n    try {\n      // Try to load from API first\n      try {\n        const response = await assetAPI.getAssets({\n          location_history: true,\n          limit: 10,\n        })\n\n        setLocationHistory(response.location_history || [])\n        setOfflineMode(false)\n\n        // Store for offline use\n        await offlineStorage.storeData('locationHistory', response.location_history || [])\n      } catch (error) {\n        console.log('API unavailable, loading from offline storage')\n        setOfflineMode(true)\n\n        // Load from offline storage\n        const offlineHistory = await offlineStorage.getData('locationHistory')\n        if (offlineHistory) setLocationHistory(offlineHistory)\n      }\n    } catch (error) {\n      console.error('Error loading location history:', error)\n    }\n  }\n\n  const toggleGeofencing = () => {\n    if (!geofencingEnabled) {\n      Alert.alert(\n        'Enable Geofencing',\n        'Geofencing will notify you when assets enter or leave designated areas. This feature requires background location access.',\n        [\n          { text: 'Cancel', style: 'cancel' },\n          {\n            text: 'Enable',\n            onPress: () => {\n              setGeofencingEnabled(true)\n              // Here you would implement actual geofencing logic\n              Alert.alert(\n                'Geofencing Enabled',\n                'You will now receive notifications when assets move in or out of designated areas.'\n              )\n            },\n          },\n        ]\n      )\n    } else {\n      setGeofencingEnabled(false)\n      Alert.alert('Geofencing Disabled', 'You will no longer receive geofencing notifications.')\n    }\n  }\n\n  const renderNearbyAsset = ({ item }) => (\n    <List.Item\n      title={item.name || `Asset ${item.id}`}\n      description={`${item.asset_id || item.id} • ${item.category || 'No category'}`}\n      left={props => (\n        <List.Icon\n          {...props}\n          icon={\n            item.status === 'available'\n              ? 'check-circle'\n              : item.status === 'checked_out'\n                ? 'account-arrow-right'\n                : 'wrench'\n          }\n        />\n      )}\n      right={() => (\n        <Chip mode=\"outlined\" textStyle={{ fontSize: 12 }}>\n          {item.status || 'Unknown'}\n        </Chip>\n      )}\n      onPress={() => navigation.navigate('Assets')}\n    />\n  )\n\n  const renderLocationHistoryItem = ({ item }) => (\n    <List.Item\n      title={item.asset_name || `Asset ${item.asset_id}`}\n      description={`${item.location} • ${new Date(item.timestamp).toLocaleDateString()}`}\n      left={props => <List.Icon {...props} icon=\"map-marker\" />}\n      right={() => (\n        <Text style={styles.historyTime}>{new Date(item.timestamp).toLocaleTimeString()}</Text>\n      )}\n    />\n  )\n\n  return (\n    <ScrollView style={styles.container}>\n      {/* Offline Mode Indicator */}\n      {offlineMode && (\n        <Card style={[styles.offlineCard, { backgroundColor: theme.colors.tertiaryContainer }]}>\n          <Card.Content>\n            <View style={styles.offlineHeader}>\n              <MaterialCommunityIcons name=\"wifi-off\" size={20} color={theme.colors.tertiary} />\n              <Text style={[styles.offlineText, { color: theme.colors.tertiary }]}>\n                Offline Mode - Location data may be outdated\n              </Text>\n            </View>\n          </Card.Content>\n        </Card>\n      )}\n\n      {/* Location Permission Status */}\n      {locationPermission !== 'granted' && (\n        <Card style={styles.card}>\n          <Card.Content>\n            <View style={styles.permissionHeader}>\n              <MaterialCommunityIcons name=\"map-marker-off\" size={48} color={theme.colors.error} />\n              <Title style={styles.permissionTitle}>Location Access Required</Title>\n              <Paragraph style={styles.permissionText}>\n                Enable location access to see nearby assets, track locations, and use geofencing\n                features.\n              </Paragraph>\n              <Button\n                mode=\"contained\"\n                onPress={requestLocationPermission}\n                loading={loading}\n                style={styles.permissionButton}\n              >\n                Enable Location Access\n              </Button>\n            </View>\n          </Card.Content>\n        </Card>\n      )}\n\n      {/* Current Location */}\n      {location && (\n        <Card style={styles.card}>\n          <Card.Content>\n            <Title>Current Location</Title>\n            <View style={styles.locationInfo}>\n              <MaterialCommunityIcons name=\"map-marker\" size={24} color={theme.colors.primary} />\n              <View style={styles.locationDetails}>\n                <Text style={styles.locationAddress}>{location.address}</Text>\n                <Text style={styles.locationCoords}>\n                  {location.latitude.toFixed(6)}, {location.longitude.toFixed(6)}\n                </Text>\n                <Text style={styles.locationAccuracy}>\n                  Accuracy: ±{location.accuracy.toFixed(1)}m\n                </Text>\n              </View>\n            </View>\n            <Button\n              mode=\"outlined\"\n              onPress={getCurrentLocation}\n              loading={loading}\n              icon=\"map-marker-refresh\"\n              style={styles.refreshButton}\n            >\n              Refresh Location\n            </Button>\n          </Card.Content>\n        </Card>\n      )}\n\n      {/* Geofencing Settings */}\n      <Card style={styles.card}>\n        <Card.Content>\n          <Title>Geofencing</Title>\n          <Paragraph style={styles.geofencingText}>\n            Get notified when assets enter or leave designated areas.\n          </Paragraph>\n          <View style={styles.geofencingToggle}>\n            <Text>Enable Geofencing</Text>\n            <Switch\n              value={geofencingEnabled}\n              onValueChange={toggleGeofencing}\n              color={theme.colors.primary}\n            />\n          </View>\n          {geofencingEnabled && (\n            <View style={styles.geofencingInfo}>\n              <MaterialCommunityIcons name=\"information\" size={16} color={theme.colors.primary} />\n              <Text style={styles.geofencingInfoText}>\n                Geofencing is active. You'll receive notifications for asset movements.\n              </Text>\n            </View>\n          )}\n        </Card.Content>\n      </Card>\n\n      {/* Nearby Assets */}\n      {location && (\n        <Card style={styles.card}>\n          <Card.Content>\n            <Title>Nearby Assets</Title>\n            <Paragraph style={styles.nearbyText}>\n              Assets within 1km of your current location\n            </Paragraph>\n            {nearbyAssets.length > 0 ? (\n              nearbyAssets.map((asset, index) => (\n                <View key={asset.id || index}>\n                  {renderNearbyAsset({ item: asset })}\n                  {index < nearbyAssets.length - 1 && <Divider />}\n                </View>\n              ))\n            ) : (\n              <View style={styles.emptyState}>\n                <MaterialCommunityIcons\n                  name=\"package-variant\"\n                  size={48}\n                  color={theme.colors.onSurfaceVariant}\n                />\n                <Text style={styles.emptyStateText}>No assets found nearby</Text>\n              </View>\n            )}\n          </Card.Content>\n        </Card>\n      )}\n\n      {/* Location History */}\n      <Card style={styles.card}>\n        <Card.Content>\n          <Title>Recent Location Updates</Title>\n          <Paragraph style={styles.historyText}>Recent asset location changes</Paragraph>\n          {locationHistory.length > 0 ? (\n            locationHistory.map((item, index) => (\n              <View key={index}>\n                {renderLocationHistoryItem({ item })}\n                {index < locationHistory.length - 1 && <Divider />}\n              </View>\n            ))\n          ) : (\n            <View style={styles.emptyState}>\n              <MaterialCommunityIcons\n                name=\"history\"\n                size={48}\n                color={theme.colors.onSurfaceVariant}\n              />\n              <Text style={styles.emptyStateText}>No recent location updates</Text>\n            </View>\n          )}\n        </Card.Content>\n      </Card>\n\n      {/* Future Features */}\n      <Card style={styles.card}>\n        <Card.Content>\n          <Title>Coming Soon</Title>\n          <View style={styles.featuresList}>\n            <View style={styles.featureItem}>\n              <MaterialCommunityIcons name=\"map\" size={20} color={theme.colors.primary} />\n              <Text style={styles.featureText}>Interactive Map View</Text>\n            </View>\n            <View style={styles.featureItem}>\n              <MaterialCommunityIcons name=\"routes\" size={20} color={theme.colors.primary} />\n              <Text style={styles.featureText}>Asset Movement Tracking</Text>\n            </View>\n            <View style={styles.featureItem}>\n              <MaterialCommunityIcons name=\"bell-ring\" size={20} color={theme.colors.primary} />\n              <Text style={styles.featureText}>Smart Location Alerts</Text>\n            </View>\n            <View style={styles.featureItem}>\n              <MaterialCommunityIcons name=\"chart-line\" size={20} color={theme.colors.primary} />\n              <Text style={styles.featureText}>Location Analytics</Text>\n            </View>\n          </View>\n        </Card.Content>\n      </Card>\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    padding: 16,\n  },\n  offlineCard: {\n    marginBottom: 16,\n  },\n  offlineHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  offlineText: {\n    marginLeft: 8,\n    fontSize: 14,\n  },\n  card: {\n    marginBottom: 16,\n  },\n  permissionHeader: {\n    alignItems: 'center',\n    paddingVertical: 20,\n  },\n  permissionTitle: {\n    marginTop: 16,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  permissionText: {\n    textAlign: 'center',\n    marginBottom: 20,\n    color: '#666',\n  },\n  permissionButton: {\n    alignSelf: 'center',\n  },\n  locationInfo: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    marginBottom: 16,\n  },\n  locationDetails: {\n    flex: 1,\n    marginLeft: 12,\n  },\n  locationAddress: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  locationCoords: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 2,\n  },\n  locationAccuracy: {\n    fontSize: 12,\n    color: '#999',\n  },\n  refreshButton: {\n    alignSelf: 'center',\n  },\n  geofencingText: {\n    marginBottom: 16,\n    color: '#666',\n  },\n  geofencingToggle: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  geofencingInfo: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    backgroundColor: theme.colors.primaryContainer,\n    padding: 12,\n    borderRadius: 8,\n  },\n  geofencingInfoText: {\n    marginLeft: 8,\n    fontSize: 14,\n    color: theme.colors.onPrimaryContainer,\n    flex: 1,\n  },\n  nearbyText: {\n    marginBottom: 16,\n    color: '#666',\n  },\n  historyText: {\n    marginBottom: 16,\n    color: '#666',\n  },\n  historyTime: {\n    fontSize: 12,\n    color: '#666',\n  },\n  emptyState: {\n    alignItems: 'center',\n    paddingVertical: 40,\n  },\n  emptyStateText: {\n    marginTop: 12,\n    fontSize: 14,\n    color: '#666',\n    textAlign: 'center',\n  },\n  featuresList: {\n    marginTop: 8,\n  },\n  featureItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  featureText: {\n    marginLeft: 12,\n    fontSize: 14,\n  },\n})\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\src\\screens\\ScannerScreen.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'width' is assigned a value but never used.","line":18,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'height' is assigned a value but never used.","line":18,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":22},{"ruleId":"no-extra-semi","severity":2,"message":"Unnecessary semicolon.","line":30,"column":5,"nodeType":"EmptyStatement","messageId":"unexpected","endLine":30,"endColumn":6,"fix":{"range":[963,971],"text":"{\n    ("}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'type' is defined but never used.","line":36,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react'\nimport { View, StyleSheet, Alert, Dimensions } from 'react-native'\nimport { Camera } from 'expo-camera'\nimport { BarCodeScanner } from 'expo-barcode-scanner'\nimport {\n  Button,\n  Card,\n  Title,\n  Paragraph,\n  ActivityIndicator,\n  Text,\n  IconButton,\n} from 'react-native-paper'\nimport { MaterialCommunityIcons } from '@expo/vector-icons'\nimport { useTheme } from 'react-native-paper'\nimport { assetAPI } from '../services/api'\n\nconst { width, height } = Dimensions.get('window')\n\nexport default function ScannerScreen({ navigation }) {\n  const theme = useTheme()\n  const [hasPermission, setHasPermission] = useState(null)\n  const [scanned, setScanned] = useState(false)\n  const [flash, setFlash] = useState(Camera.Constants.FlashMode.off)\n  const [scanning, setScanning] = useState(false)\n  const [lastScannedData, setLastScannedData] = useState(null)\n  const cameraRef = useRef(null)\n\n  useEffect(() => {\n    ;(async () => {\n      const { status } = await Camera.requestCameraPermissionsAsync()\n      setHasPermission(status === 'granted')\n    })()\n  }, [])\n\n  const handleBarCodeScanned = async ({ type, data }) => {\n    if (scanned) return\n\n    setScanned(true)\n    setScanning(true)\n    setLastScannedData(data)\n\n    try {\n      // Process the scanned QR code\n      const result = await processQRCode(data)\n\n      if (result.success) {\n        Alert.alert('Asset Found!', `Asset: ${result.asset.name}\\nStatus: ${result.asset.status}`, [\n          {\n            text: 'View Details',\n            onPress: () => navigation.navigate('Assets'),\n          },\n          {\n            text: 'Scan Again',\n            onPress: () => resetScanner(),\n          },\n        ])\n      } else {\n        Alert.alert('Asset Not Found', 'The scanned QR code does not match any known asset.', [\n          {\n            text: 'Try Again',\n            onPress: () => resetScanner(),\n          },\n        ])\n      }\n    } catch (error) {\n      console.error('Error processing QR code:', error)\n      Alert.alert('Error', 'Failed to process QR code. Please try again.', [\n        {\n          text: 'OK',\n          onPress: () => resetScanner(),\n        },\n      ])\n    } finally {\n      setScanning(false)\n    }\n  }\n\n  const processQRCode = async qrData => {\n    try {\n      // Try to find asset by QR code\n      const response = await assetAPI.getAssets({ qr_code: qrData })\n\n      if (response.assets && response.assets.length > 0) {\n        return {\n          success: true,\n          asset: response.assets[0],\n        }\n      }\n\n      return { success: false }\n    } catch (error) {\n      console.error('Error processing QR code:', error)\n      throw error\n    }\n  }\n\n  const resetScanner = () => {\n    setScanned(false)\n    setLastScannedData(null)\n  }\n\n  const toggleFlash = () => {\n    setFlash(\n      flash === Camera.Constants.FlashMode.off\n        ? Camera.Constants.FlashMode.torch\n        : Camera.Constants.FlashMode.off\n    )\n  }\n\n  if (hasPermission === null) {\n    return (\n      <View style={styles.container}>\n        <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n        <Text style={styles.loadingText}>Requesting camera permission...</Text>\n      </View>\n    )\n  }\n\n  if (hasPermission === false) {\n    return (\n      <View style={styles.container}>\n        <Card style={styles.permissionCard}>\n          <Card.Content>\n            <MaterialCommunityIcons\n              name=\"camera-off\"\n              size={64}\n              color={theme.colors.error}\n              style={styles.permissionIcon}\n            />\n            <Title style={styles.permissionTitle}>Camera Access Required</Title>\n            <Paragraph style={styles.permissionText}>\n              This app needs camera access to scan QR codes. Please enable camera permissions in\n              your device settings.\n            </Paragraph>\n            <Button\n              mode=\"contained\"\n              onPress={() => navigation.goBack()}\n              style={styles.permissionButton}\n            >\n              Go Back\n            </Button>\n          </Card.Content>\n        </Card>\n      </View>\n    )\n  }\n\n  return (\n    <View style={styles.container}>\n      <Camera\n        ref={cameraRef}\n        style={styles.camera}\n        type={Camera.Constants.Type.back}\n        flashMode={flash}\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        barCodeScannerSettings={{\n          barCodeTypes: [BarCodeScanner.Constants.BarCodeType.qr],\n        }}\n      >\n        <View style={styles.overlay}>\n          {/* Header */}\n          <View style={styles.header}>\n            <IconButton\n              icon=\"arrow-left\"\n              iconColor=\"white\"\n              size={24}\n              onPress={() => navigation.goBack()}\n            />\n            <Text style={styles.headerTitle}>Scan QR Code</Text>\n            <IconButton\n              icon={flash === Camera.Constants.FlashMode.torch ? 'flash' : 'flash-off'}\n              iconColor=\"white\"\n              size={24}\n              onPress={toggleFlash}\n            />\n          </View>\n\n          {/* Scanning Frame */}\n          <View style={styles.scanFrame}>\n            <View style={styles.cornerTL} />\n            <View style={styles.cornerTR} />\n            <View style={styles.cornerBL} />\n            <View style={styles.cornerBR} />\n          </View>\n\n          {/* Instructions */}\n          <View style={styles.instructions}>\n            <Text style={styles.instructionText}>Position the QR code within the frame</Text>\n          </View>\n\n          {/* Bottom Controls */}\n          <View style={styles.bottomControls}>\n            {scanned && (\n              <Button mode=\"contained\" onPress={resetScanner} style={styles.scanAgainButton}>\n                Scan Again\n              </Button>\n            )}\n          </View>\n        </View>\n      </Camera>\n\n      {/* Loading Overlay */}\n      {scanning && (\n        <View style={styles.loadingOverlay}>\n          <ActivityIndicator size=\"large\" color=\"white\" />\n          <Text style={styles.loadingOverlayText}>Processing...</Text>\n        </View>\n      )}\n\n      {/* Last Scanned Data */}\n      {lastScannedData && (\n        <Card style={styles.lastScannedCard}>\n          <Card.Content>\n            <Title>Last Scanned</Title>\n            <Paragraph>{lastScannedData}</Paragraph>\n          </Card.Content>\n        </Card>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n  },\n  camera: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingTop: 50,\n    paddingHorizontal: 20,\n    paddingBottom: 20,\n  },\n  headerTitle: {\n    color: 'white',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  scanFrame: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    width: 250,\n    height: 250,\n    marginLeft: -125,\n    marginTop: -125,\n  },\n  cornerTL: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: 30,\n    height: 30,\n    borderTopWidth: 3,\n    borderLeftWidth: 3,\n    borderColor: '#2563eb',\n  },\n  cornerTR: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    width: 30,\n    height: 30,\n    borderTopWidth: 3,\n    borderRightWidth: 3,\n    borderColor: '#2563eb',\n  },\n  cornerBL: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    width: 30,\n    height: 30,\n    borderBottomWidth: 3,\n    borderLeftWidth: 3,\n    borderColor: '#2563eb',\n  },\n  cornerBR: {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    width: 30,\n    height: 30,\n    borderBottomWidth: 3,\n    borderRightWidth: 3,\n    borderColor: '#2563eb',\n  },\n  instructions: {\n    position: 'absolute',\n    bottom: 150,\n    left: 0,\n    right: 0,\n    alignItems: 'center',\n  },\n  instructionText: {\n    color: 'white',\n    fontSize: 16,\n    textAlign: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 20,\n  },\n  bottomControls: {\n    position: 'absolute',\n    bottom: 50,\n    left: 0,\n    right: 0,\n    alignItems: 'center',\n  },\n  scanAgainButton: {\n    backgroundColor: '#2563eb',\n  },\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingOverlayText: {\n    color: 'white',\n    fontSize: 16,\n    marginTop: 10,\n  },\n  permissionCard: {\n    margin: 20,\n    alignItems: 'center',\n  },\n  permissionIcon: {\n    alignSelf: 'center',\n    marginBottom: 20,\n  },\n  permissionTitle: {\n    textAlign: 'center',\n    marginBottom: 10,\n  },\n  permissionText: {\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  permissionButton: {\n    alignSelf: 'center',\n  },\n  loadingText: {\n    color: 'white',\n    marginTop: 10,\n    fontSize: 16,\n  },\n  lastScannedCard: {\n    position: 'absolute',\n    bottom: 20,\n    left: 20,\n    right: 20,\n    backgroundColor: 'white',\n  },\n})\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\src\\screens\\SettingsScreen.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'navigation' is defined but never used.","line":22,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react'\nimport { View, ScrollView, StyleSheet, Alert } from 'react-native'\nimport {\n  Card,\n  Title,\n  Paragraph,\n  Button,\n  Switch,\n  List,\n  Divider,\n  ActivityIndicator,\n  Text,\n  TextInput,\n  Dialog,\n  Portal,\n} from 'react-native-paper'\nimport { MaterialCommunityIcons } from '@expo/vector-icons'\nimport { useTheme } from 'react-native-paper'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport { authAPI, offlineStorage } from '../services/api'\n\nexport default function SettingsScreen({ navigation }) {\n  const theme = useTheme()\n  const [loading, setLoading] = useState(false)\n  const [settings, setSettings] = useState({\n    notifications: true,\n    location: true,\n    darkMode: false,\n    autoSync: true,\n    offlineMode: false,\n  })\n  const [user, setUser] = useState(null)\n  const [apiKey, setApiKey] = useState('')\n  const [showApiKeyDialog, setShowApiKeyDialog] = useState(false)\n  const [syncStatus, setSyncStatus] = useState('idle') // 'idle', 'syncing', 'success', 'error'\n\n  useEffect(() => {\n    loadSettings()\n    loadUserInfo()\n  }, [])\n\n  const loadSettings = async () => {\n    try {\n      const storedSettings = await AsyncStorage.getItem('appSettings')\n      if (storedSettings) {\n        setSettings(JSON.parse(storedSettings))\n      }\n    } catch (error) {\n      console.error('Error loading settings:', error)\n    }\n  }\n\n  const saveSettings = async newSettings => {\n    try {\n      await AsyncStorage.setItem('appSettings', JSON.stringify(newSettings))\n      setSettings(newSettings)\n    } catch (error) {\n      console.error('Error saving settings:', error)\n    }\n  }\n\n  const loadUserInfo = async () => {\n    try {\n      const userData = await AsyncStorage.getItem('userInfo')\n      if (userData) {\n        setUser(JSON.parse(userData))\n      }\n    } catch (error) {\n      console.error('Error loading user info:', error)\n    }\n  }\n\n  const handleSettingChange = (key, value) => {\n    const newSettings = { ...settings, [key]: value }\n    saveSettings(newSettings)\n  }\n\n  const handleSyncOfflineData = async () => {\n    try {\n      setSyncStatus('syncing')\n\n      const offlineActions = await offlineStorage.getOfflineActions()\n\n      if (offlineActions.length === 0) {\n        Alert.alert('No Data to Sync', 'All data is already synchronized.')\n        setSyncStatus('idle')\n        return\n      }\n\n      // Process offline actions\n      let successCount = 0\n      let errorCount = 0\n\n      for (const action of offlineActions) {\n        try {\n          // Attempt to sync each action\n          await authAPI.syncOfflineAction(action)\n          successCount++\n        } catch (error) {\n          console.error('Error syncing action:', error)\n          errorCount++\n        }\n      }\n\n      // Clear successfully synced actions\n      if (successCount > 0) {\n        await offlineStorage.clearOfflineActions()\n      }\n\n      setSyncStatus('success')\n\n      Alert.alert(\n        'Sync Complete',\n        `Successfully synced ${successCount} actions.${errorCount > 0 ? ` ${errorCount} failed.` : ''}`,\n        [{ text: 'OK' }]\n      )\n    } catch (error) {\n      console.error('Error syncing offline data:', error)\n      setSyncStatus('error')\n      Alert.alert('Sync Error', 'Failed to sync offline data. Please try again.')\n    } finally {\n      setTimeout(() => setSyncStatus('idle'), 2000)\n    }\n  }\n\n  const handleClearCache = async () => {\n    Alert.alert(\n      'Clear Cache',\n      'This will clear all cached data. You will need to re-download data when you next use the app.',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Clear',\n          style: 'destructive',\n          onPress: async () => {\n            try {\n              setLoading(true)\n\n              // Clear all cached data\n              const keys = await AsyncStorage.getAllKeys()\n              const cacheKeys = keys.filter(\n                key =>\n                  key.startsWith('assets') ||\n                  key.startsWith('dashboard') ||\n                  key.startsWith('nearby') ||\n                  key.startsWith('location')\n              )\n\n              await AsyncStorage.multiRemove(cacheKeys)\n\n              Alert.alert('Cache Cleared', 'All cached data has been cleared successfully.')\n            } catch (error) {\n              console.error('Error clearing cache:', error)\n              Alert.alert('Error', 'Failed to clear cache. Please try again.')\n            } finally {\n              setLoading(false)\n            }\n          },\n        },\n      ]\n    )\n  }\n\n  const handleExportData = async () => {\n    try {\n      setLoading(true)\n\n      // Collect all data for export\n      const exportData = {\n        settings,\n        user,\n        timestamp: new Date().toISOString(),\n        version: '1.0.0',\n      }\n\n      // In a real app, you would save this to a file or share it\n      Alert.alert(\n        'Export Data',\n        `Data exported successfully.\\n\\nSettings: ${JSON.stringify(exportData, null, 2)}`,\n        [{ text: 'OK' }]\n      )\n    } catch (error) {\n      console.error('Error exporting data:', error)\n      Alert.alert('Export Error', 'Failed to export data. Please try again.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleLogout = async () => {\n    Alert.alert('Logout', 'Are you sure you want to logout? This will clear all your data.', [\n      { text: 'Cancel', style: 'cancel' },\n      {\n        text: 'Logout',\n        style: 'destructive',\n        onPress: async () => {\n          try {\n            setLoading(true)\n\n            // Clear all data\n            await AsyncStorage.clear()\n\n            // Navigate to login or show login screen\n            Alert.alert('Logged Out', 'You have been successfully logged out.')\n          } catch (error) {\n            console.error('Error logging out:', error)\n            Alert.alert('Error', 'Failed to logout. Please try again.')\n          } finally {\n            setLoading(false)\n          }\n        },\n      },\n    ])\n  }\n\n  const renderSettingItem = ({\n    icon,\n    title,\n    description,\n    value,\n    onValueChange,\n    type = 'switch',\n  }) => (\n    <List.Item\n      title={title}\n      description={description}\n      left={props => <List.Icon {...props} icon={icon} />}\n      right={() =>\n        type === 'switch' ? (\n          <Switch value={value} onValueChange={onValueChange} color={theme.colors.primary} />\n        ) : (\n          <MaterialCommunityIcons\n            name=\"chevron-right\"\n            size={24}\n            color={theme.colors.onSurfaceVariant}\n          />\n        )\n      }\n      onPress={type === 'button' ? onValueChange : undefined}\n    />\n  )\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n        <Text style={styles.loadingText}>Loading settings...</Text>\n      </View>\n    )\n  }\n\n  return (\n    <ScrollView style={styles.container}>\n      {/* User Profile */}\n      <Card style={styles.card}>\n        <Card.Content>\n          <Title>Profile</Title>\n          {user ? (\n            <View style={styles.userInfo}>\n              <MaterialCommunityIcons\n                name=\"account-circle\"\n                size={48}\n                color={theme.colors.primary}\n              />\n              <View style={styles.userDetails}>\n                <Text style={styles.userName}>{user.name || 'User'}</Text>\n                <Text style={styles.userEmail}>{user.email || 'user@example.com'}</Text>\n                <Text style={styles.userRole}>{user.role || 'User'}</Text>\n              </View>\n            </View>\n          ) : (\n            <Paragraph>No user information available</Paragraph>\n          )}\n        </Card.Content>\n      </Card>\n\n      {/* App Settings */}\n      <Card style={styles.card}>\n        <Card.Content>\n          <Title>App Settings</Title>\n\n          {renderSettingItem({\n            icon: 'bell',\n            title: 'Push Notifications',\n            description: 'Receive notifications for asset updates',\n            value: settings.notifications,\n            onValueChange: value => handleSettingChange('notifications', value),\n          })}\n\n          <Divider />\n\n          {renderSettingItem({\n            icon: 'map-marker',\n            title: 'Location Services',\n            description: 'Allow app to access your location',\n            value: settings.location,\n            onValueChange: value => handleSettingChange('location', value),\n          })}\n\n          <Divider />\n\n          {renderSettingItem({\n            icon: 'theme-light-dark',\n            title: 'Dark Mode',\n            description: 'Use dark theme (coming soon)',\n            value: settings.darkMode,\n            onValueChange: value => handleSettingChange('darkMode', value),\n          })}\n\n          <Divider />\n\n          {renderSettingItem({\n            icon: 'sync',\n            title: 'Auto Sync',\n            description: 'Automatically sync data when online',\n            value: settings.autoSync,\n            onValueChange: value => handleSettingChange('autoSync', value),\n          })}\n        </Card.Content>\n      </Card>\n\n      {/* Data Management */}\n      <Card style={styles.card}>\n        <Card.Content>\n          <Title>Data Management</Title>\n\n          <List.Item\n            title=\"Sync Offline Data\"\n            description={`${syncStatus === 'syncing' ? 'Syncing...' : 'Sync pending offline actions'}`}\n            left={props => (\n              <List.Icon\n                {...props}\n                icon={\n                  syncStatus === 'syncing'\n                    ? 'sync'\n                    : syncStatus === 'success'\n                      ? 'check-circle'\n                      : syncStatus === 'error'\n                        ? 'alert-circle'\n                        : 'sync'\n                }\n              />\n            )}\n            right={() =>\n              syncStatus === 'syncing' ? (\n                <ActivityIndicator size=\"small\" color={theme.colors.primary} />\n              ) : (\n                <Button\n                  mode=\"outlined\"\n                  onPress={handleSyncOfflineData}\n                  disabled={syncStatus !== 'idle'}\n                  compact\n                >\n                  Sync\n                </Button>\n              )\n            }\n          />\n\n          <Divider />\n\n          <List.Item\n            title=\"Clear Cache\"\n            description=\"Clear all cached data\"\n            left={props => <List.Icon {...props} icon=\"delete-sweep\" />}\n            right={() => (\n              <Button mode=\"outlined\" onPress={handleClearCache} compact>\n                Clear\n              </Button>\n            )}\n          />\n\n          <Divider />\n\n          <List.Item\n            title=\"Export Data\"\n            description=\"Export your data for backup\"\n            left={props => <List.Icon {...props} icon=\"export\" />}\n            right={() => (\n              <Button mode=\"outlined\" onPress={handleExportData} compact>\n                Export\n              </Button>\n            )}\n          />\n        </Card.Content>\n      </Card>\n\n      {/* API Configuration */}\n      <Card style={styles.card}>\n        <Card.Content>\n          <Title>API Configuration</Title>\n\n          <List.Item\n            title=\"API Key\"\n            description=\"Configure API key for external access\"\n            left={props => <List.Icon {...props} icon=\"key\" />}\n            right={() => (\n              <Button mode=\"outlined\" onPress={() => setShowApiKeyDialog(true)} compact>\n                Set\n              </Button>\n            )}\n          />\n\n          <Divider />\n\n          <List.Item\n            title=\"API Status\"\n            description=\"Check connection to web app\"\n            left={props => <List.Icon {...props} icon=\"wifi\" />}\n            right={() => (\n              <MaterialCommunityIcons\n                name=\"check-circle\"\n                size={24}\n                color={theme.colors.secondary}\n              />\n            )}\n          />\n        </Card.Content>\n      </Card>\n\n      {/* About */}\n      <Card style={styles.card}>\n        <Card.Content>\n          <Title>About</Title>\n\n          <List.Item\n            title=\"Version\"\n            description=\"1.0.0\"\n            left={props => <List.Icon {...props} icon=\"information\" />}\n          />\n\n          <Divider />\n\n          <List.Item\n            title=\"Help & Support\"\n            description=\"Get help and contact support\"\n            left={props => <List.Icon {...props} icon=\"help-circle\" />}\n            right={() => (\n              <MaterialCommunityIcons\n                name=\"chevron-right\"\n                size={24}\n                color={theme.colors.onSurfaceVariant}\n              />\n            )}\n            onPress={() => Alert.alert('Help', 'Help and support features coming soon.')}\n          />\n\n          <Divider />\n\n          <List.Item\n            title=\"Privacy Policy\"\n            description=\"Read our privacy policy\"\n            left={props => <List.Icon {...props} icon=\"shield-account\" />}\n            right={() => (\n              <MaterialCommunityIcons\n                name=\"chevron-right\"\n                size={24}\n                color={theme.colors.onSurfaceVariant}\n              />\n            )}\n            onPress={() => Alert.alert('Privacy Policy', 'Privacy policy details coming soon.')}\n          />\n        </Card.Content>\n      </Card>\n\n      {/* Logout */}\n      <Card style={styles.card}>\n        <Card.Content>\n          <Button\n            mode=\"contained\"\n            onPress={handleLogout}\n            style={[styles.logoutButton, { backgroundColor: theme.colors.error }]}\n            icon=\"logout\"\n          >\n            Logout\n          </Button>\n        </Card.Content>\n      </Card>\n\n      {/* API Key Dialog */}\n      <Portal>\n        <Dialog visible={showApiKeyDialog} onDismiss={() => setShowApiKeyDialog(false)}>\n          <Dialog.Title>Set API Key</Dialog.Title>\n          <Dialog.Content>\n            <TextInput\n              mode=\"outlined\"\n              label=\"API Key\"\n              value={apiKey}\n              onChangeText={setApiKey}\n              placeholder=\"Enter your API key\"\n              secureTextEntry\n            />\n          </Dialog.Content>\n          <Dialog.Actions>\n            <Button onPress={() => setShowApiKeyDialog(false)}>Cancel</Button>\n            <Button\n              onPress={() => {\n                // Save API key\n                AsyncStorage.setItem('apiKey', apiKey)\n                setShowApiKeyDialog(false)\n                Alert.alert('Success', 'API key saved successfully.')\n              }}\n            >\n              Save\n            </Button>\n          </Dialog.Actions>\n        </Dialog>\n      </Portal>\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    padding: 16,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n  },\n  card: {\n    marginBottom: 16,\n  },\n  userInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 8,\n  },\n  userDetails: {\n    marginLeft: 16,\n    flex: 1,\n  },\n  userName: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  userEmail: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 2,\n  },\n  userRole: {\n    fontSize: 12,\n    color: '#999',\n  },\n  logoutButton: {\n    marginTop: 8,\n  },\n})\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\src\\services\\api.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\src\\utils\\theme.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\swagger-ui-react.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\testing\\load-testing\\k6-enterprise.js","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Unexpected default export of anonymous function","line":150,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":259,"endColumn":2},{"ruleId":"no-undef","severity":2,"message":"'__ENV' is not defined.","line":151,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":151,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'__ENV' is not defined.","line":273,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":273,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'__ENV' is not defined.","line":274,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":274,"endColumn":38}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enterprise Load Testing Configuration for AssetTrackerPro\n * K6 performance testing for government and enterprise scale\n */\n\nimport http from 'k6/http'\nimport { check, sleep, group } from 'k6'\nimport { Rate, Trend, Counter } from 'k6/metrics'\nimport { htmlReport } from 'https://raw.githubusercontent.com/benc-uk/k6-reporter/main/dist/bundle.js'\nimport { textSummary } from 'https://jslib.k6.io/k6-summary/0.0.1/index.js'\n\n// Custom metrics for enterprise monitoring\nconst errorRate = new Rate('error_rate')\nconst responseTime = new Trend('response_time')\nconst apiCalls = new Counter('api_calls')\nconst concurrentUsers = new Counter('concurrent_users')\n\n// Test configuration for different enterprise scenarios\nexport const options = {\n  scenarios: {\n    // Government agency scenario - 1000 concurrent users\n    government_load: {\n      executor: 'ramping-vus',\n      startVUs: 0,\n      stages: [\n        { duration: '5m', target: 100 }, // Ramp up\n        { duration: '10m', target: 500 }, // Normal load\n        { duration: '5m', target: 1000 }, // Peak load\n        { duration: '10m', target: 1000 }, // Sustained peak\n        { duration: '5m', target: 0 }, // Ramp down\n      ],\n      gracefulRampDown: '30s',\n      tags: { scenario: 'government' },\n    },\n\n    // Enterprise scenario - 2000 concurrent users\n    enterprise_load: {\n      executor: 'ramping-vus',\n      startVUs: 0,\n      stages: [\n        { duration: '10m', target: 200 }, // Ramp up\n        { duration: '20m', target: 1000 }, // Normal load\n        { duration: '10m', target: 2000 }, // Peak load\n        { duration: '20m', target: 2000 }, // Sustained peak\n        { duration: '10m', target: 0 }, // Ramp down\n      ],\n      gracefulRampDown: '60s',\n      tags: { scenario: 'enterprise' },\n    },\n\n    // Educational institution scenario - 5000 concurrent users\n    education_load: {\n      executor: 'ramping-vus',\n      startVUs: 0,\n      stages: [\n        { duration: '15m', target: 500 }, // Ramp up\n        { duration: '30m', target: 2500 }, // Normal load\n        { duration: '15m', target: 5000 }, // Peak load (semester start)\n        { duration: '30m', target: 5000 }, // Sustained peak\n        { duration: '15m', target: 0 }, // Ramp down\n      ],\n      gracefulRampDown: '120s',\n      tags: { scenario: 'education' },\n    },\n\n    // Stress testing - Find breaking point\n    stress_test: {\n      executor: 'ramping-arrival-rate',\n      startRate: 0,\n      timeUnit: '1s',\n      preAllocatedVUs: 100,\n      maxVUs: 10000,\n      stages: [\n        { duration: '5m', target: 100 }, // 100 RPS\n        { duration: '10m', target: 500 }, // 500 RPS\n        { duration: '5m', target: 1000 }, // 1000 RPS\n        { duration: '5m', target: 2000 }, // 2000 RPS\n        { duration: '5m', target: 0 }, // Ramp down\n      ],\n      tags: { scenario: 'stress' },\n    },\n\n    // Spike testing - Sudden load increases\n    spike_test: {\n      executor: 'ramping-vus',\n      startVUs: 100,\n      stages: [\n        { duration: '2m', target: 100 }, // Normal load\n        { duration: '30s', target: 2000 }, // Sudden spike\n        { duration: '2m', target: 2000 }, // Sustained spike\n        { duration: '30s', target: 100 }, // Back to normal\n        { duration: '2m', target: 100 }, // Recovery\n      ],\n      tags: { scenario: 'spike' },\n    },\n  },\n\n  // Performance thresholds for enterprise requirements\n  thresholds: {\n    // Response time requirements\n    http_req_duration: [\n      'p(95)<2000', // 95% of requests under 2s\n      'p(99)<5000', // 99% of requests under 5s\n    ],\n\n    // Error rate requirements\n    http_req_failed: ['rate<0.01'], // Less than 1% error rate\n\n    // Custom metrics thresholds\n    error_rate: ['rate<0.01'],\n    response_time: ['p(95)<2000'],\n\n    // Scenario-specific thresholds\n    'http_req_duration{scenario:government}': ['p(95)<1500'],\n    'http_req_duration{scenario:enterprise}': ['p(95)<2000'],\n    'http_req_duration{scenario:education}': ['p(95)<3000'],\n  },\n}\n\n// Test data for realistic scenarios\nconst testData = {\n  users: [\n    { email: 'admin@government.gov', password: 'SecurePass123!', role: 'admin' },\n    { email: 'manager@enterprise.com', password: 'SecurePass123!', role: 'manager' },\n    { email: 'teacher@university.edu', password: 'SecurePass123!', role: 'user' },\n  ],\n\n  assets: [\n    { name: 'Government Laptop', category: 'IT Equipment', value: 1500 },\n    { name: 'Enterprise Server', category: 'Infrastructure', value: 25000 },\n    { name: 'Classroom Projector', category: 'AV Equipment', value: 800 },\n  ],\n}\n\n// Authentication helper\nfunction authenticate(baseUrl, credentials) {\n  const loginResponse = http.post(`${baseUrl}/api/auth/login`, JSON.stringify(credentials), {\n    headers: { 'Content-Type': 'application/json' },\n  })\n\n  check(loginResponse, {\n    'login successful': r => r.status === 200,\n    'received auth token': r => r.json('token') !== undefined,\n  })\n\n  return loginResponse.json('token')\n}\n\n// Main test function\nexport default function () {\n  const baseUrl = __ENV.BASE_URL || 'http://localhost:3000'\n  const userIndex = Math.floor(Math.random() * testData.users.length)\n  const user = testData.users[userIndex]\n\n  concurrentUsers.add(1)\n\n  group('Authentication Flow', () => {\n    const token = authenticate(baseUrl, user)\n\n    if (!token) {\n      errorRate.add(1)\n      return\n    }\n\n    const headers = {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    }\n\n    group('Dashboard Operations', () => {\n      // Load dashboard\n      const dashboardStart = Date.now()\n      const dashboardResponse = http.get(`${baseUrl}/api/dashboard`, { headers })\n      const dashboardTime = Date.now() - dashboardStart\n\n      responseTime.add(dashboardTime)\n      apiCalls.add(1)\n\n      check(dashboardResponse, {\n        'dashboard loaded': r => r.status === 200,\n        'dashboard response time OK': r => r.timings.duration < 2000,\n      })\n\n      sleep(1)\n    })\n\n    group('Asset Management Operations', () => {\n      // List assets\n      const assetsStart = Date.now()\n      const assetsResponse = http.get(`${baseUrl}/api/assets`, { headers })\n      const assetsTime = Date.now() - assetsStart\n\n      responseTime.add(assetsTime)\n      apiCalls.add(1)\n\n      check(assetsResponse, {\n        'assets listed': r => r.status === 200,\n        'assets response time OK': r => r.timings.duration < 3000,\n      })\n\n      // Create asset (10% of users)\n      if (Math.random() < 0.1) {\n        const assetData = testData.assets[Math.floor(Math.random() * testData.assets.length)]\n        const createStart = Date.now()\n        const createResponse = http.post(`${baseUrl}/api/assets`, JSON.stringify(assetData), {\n          headers,\n        })\n        const createTime = Date.now() - createStart\n\n        responseTime.add(createTime)\n        apiCalls.add(1)\n\n        check(createResponse, {\n          'asset created': r => r.status === 201,\n          'create response time OK': r => r.timings.duration < 5000,\n        })\n      }\n\n      sleep(2)\n    })\n\n    group('Analytics Operations', () => {\n      // Load analytics\n      const analyticsStart = Date.now()\n      const analyticsResponse = http.get(`${baseUrl}/api/analytics`, { headers })\n      const analyticsTime = Date.now() - analyticsStart\n\n      responseTime.add(analyticsTime)\n      apiCalls.add(1)\n\n      check(analyticsResponse, {\n        'analytics loaded': r => r.status === 200,\n        'analytics response time OK': r => r.timings.duration < 4000,\n      })\n\n      sleep(1)\n    })\n\n    group('Search Operations', () => {\n      // Search assets\n      const searchStart = Date.now()\n      const searchResponse = http.get(`${baseUrl}/api/assets/search?q=laptop`, { headers })\n      const searchTime = Date.now() - searchStart\n\n      responseTime.add(searchTime)\n      apiCalls.add(1)\n\n      check(searchResponse, {\n        'search completed': r => r.status === 200,\n        'search response time OK': r => r.timings.duration < 2000,\n      })\n\n      sleep(1)\n    })\n  })\n\n  // Random think time between 1-5 seconds\n  sleep(Math.random() * 4 + 1)\n}\n\n// Custom report generation\nexport function handleSummary(data) {\n  return {\n    'test-results/load-test-summary.html': htmlReport(data),\n    'test-results/load-test-summary.json': JSON.stringify(data, null, 2),\n    stdout: textSummary(data, { indent: ' ', enableColors: true }),\n  }\n}\n\n// Setup function for test initialization\nexport function setup() {\n  console.log('Starting enterprise load testing...')\n  console.log(`Base URL: ${__ENV.BASE_URL || 'http://localhost:3000'}`)\n  console.log(`Test duration: ${__ENV.DURATION || 'default'}`)\n\n  return {\n    startTime: new Date().toISOString(),\n    testConfig: options,\n  }\n}\n\n// Teardown function for cleanup\nexport function teardown(data) {\n  console.log('Load testing completed.')\n  console.log(`Test started at: ${data.startTime}`)\n  console.log(`Test completed at: ${new Date().toISOString()}`)\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\testing\\setup\\compliance.setup.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":21,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":25,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":26,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":27,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":28,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":29,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":30,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":30,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":34,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":35,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":36,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":36,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":37,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":38,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":42,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":42,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":43,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":43,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":44,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":44,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":45,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":45,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":46,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":46,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":62,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":62,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":63,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":63,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":64,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":65,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":65,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":66,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":66,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":67,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":67,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":71,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":71,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":72,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":72,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":73,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":73,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":74,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":74,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":75,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":75,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":76,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":76,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":77,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":77,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":78,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":78,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":79,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":79,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":88,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":88,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":89,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":89,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":90,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":90,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":96,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":96,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":97,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":97,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":98,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":98,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":99,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":99,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":100,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":101,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":101,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":102,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":102,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":106,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":106,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":107,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":107,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":108,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":108,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":109,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":109,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":110,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":110,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":111,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":111,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":112,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":112,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":119,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":119,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":120,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":120,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":121,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":121,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":122,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":122,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":127,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":127,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":128,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":128,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":129,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":129,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":138,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":138,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":145,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":145,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":146,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":146,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":149,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":149,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":150,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":150,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":155,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":155,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":156,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":156,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":157,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":157,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":158,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":158,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":159,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":159,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":163,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":163,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":164,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":164,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":165,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":165,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":166,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":166,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":167,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":167,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":168,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":168,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":172,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":172,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":173,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":173,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":174,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":174,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":175,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":175,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":176,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":176,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":177,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":177,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":178,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":178,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":179,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":179,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":197,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":197,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":198,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":198,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":199,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":199,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":200,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":200,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":201,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":201,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":204,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":204,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":205,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":205,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":206,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":206,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":207,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":207,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":208,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":208,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":211,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":211,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":212,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":212,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":213,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":213,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":214,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":214,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":218,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":218,"endColumn":7}],"suppressedMessages":[],"errorCount":95,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Compliance Testing Setup for AssetTrackerPro\n * Configures compliance testing for GDPR, SOC 2, FERPA, and other regulations\n */\n\n// Compliance Test Environment\nprocess.env.COMPLIANCE_TEST_MODE = 'true'\nprocess.env.GDPR_COMPLIANCE = 'enabled'\nprocess.env.SOC2_COMPLIANCE = 'enabled'\nprocess.env.FERPA_COMPLIANCE = 'enabled'\nprocess.env.AUDIT_RETENTION_DAYS = '2555' // 7 years\n\n// Compliance Test Utilities\nglobal.complianceTestUtils = {\n  // GDPR Compliance Testing\n  gdpr: {\n    validateDataMinimization: (collectedData, requiredFields) => {\n      const collectedFields = Object.keys(collectedData)\n      const unnecessaryFields = collectedFields.filter(field => !requiredFields.includes(field))\n\n      expect(unnecessaryFields).toHaveLength(0)\n    },\n\n    validateConsentTracking: consentRecord => {\n      expect(consentRecord).toHaveProperty('user_id')\n      expect(consentRecord).toHaveProperty('consent_type')\n      expect(consentRecord).toHaveProperty('granted_at')\n      expect(consentRecord).toHaveProperty('ip_address')\n      expect(consentRecord).toHaveProperty('user_agent')\n      expect(consentRecord.consent_type).toMatch(/^(marketing|analytics|functional|necessary)$/)\n    },\n\n    validateDataPortability: (exportedData, userId) => {\n      expect(exportedData).toHaveProperty('user_data')\n      expect(exportedData).toHaveProperty('assets')\n      expect(exportedData).toHaveProperty('audit_logs')\n      expect(exportedData.user_data.id).toBe(userId)\n      expect(exportedData.format).toBe('JSON')\n    },\n\n    validateRightToErasure: deletionRecord => {\n      expect(deletionRecord).toHaveProperty('user_id')\n      expect(deletionRecord).toHaveProperty('deletion_requested_at')\n      expect(deletionRecord).toHaveProperty('deletion_completed_at')\n      expect(deletionRecord).toHaveProperty('data_categories_deleted')\n      expect(deletionRecord.data_categories_deleted).toContain('personal_data')\n    },\n\n    validateDataRetention: (data, retentionPolicy) => {\n      const dataAge = Date.now() - new Date(data.created_at).getTime()\n      const retentionPeriod = retentionPolicy.retention_days * 24 * 60 * 60 * 1000\n\n      if (dataAge > retentionPeriod && !retentionPolicy.legal_hold) {\n        throw new Error(`Data retention policy violated for ${data.id}`)\n      }\n    },\n  },\n\n  // SOC 2 Compliance Testing\n  soc2: {\n    validateAccessControls: (userAccess, resourceId) => {\n      expect(userAccess).toHaveProperty('user_id')\n      expect(userAccess).toHaveProperty('resource_id')\n      expect(userAccess).toHaveProperty('permissions')\n      expect(userAccess).toHaveProperty('granted_by')\n      expect(userAccess).toHaveProperty('granted_at')\n      expect(userAccess.resource_id).toBe(resourceId)\n    },\n\n    validateAuditLogging: auditLog => {\n      expect(auditLog).toHaveProperty('event_id')\n      expect(auditLog).toHaveProperty('user_id')\n      expect(auditLog).toHaveProperty('action')\n      expect(auditLog).toHaveProperty('resource_type')\n      expect(auditLog).toHaveProperty('resource_id')\n      expect(auditLog).toHaveProperty('timestamp')\n      expect(auditLog).toHaveProperty('ip_address')\n      expect(auditLog).toHaveProperty('user_agent')\n      expect(auditLog.timestamp).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/)\n    },\n\n    validateDataEncryption: sensitiveData => {\n      // Check that sensitive fields are encrypted\n      const sensitiveFields = ['ssn', 'credit_card', 'password', 'api_key']\n\n      sensitiveFields.forEach(field => {\n        if (sensitiveData[field]) {\n          expect(sensitiveData[field]).not.toMatch(/^\\d{3}-\\d{2}-\\d{4}$/) // SSN pattern\n          expect(sensitiveData[field]).not.toMatch(/^\\d{4}-\\d{4}-\\d{4}-\\d{4}$/) // CC pattern\n          expect(sensitiveData[field]).toMatch(/^[A-Za-z0-9+/=]+$/) // Base64 pattern\n        }\n      })\n    },\n\n    validateChangeManagement: changeRecord => {\n      expect(changeRecord).toHaveProperty('change_id')\n      expect(changeRecord).toHaveProperty('requested_by')\n      expect(changeRecord).toHaveProperty('approved_by')\n      expect(changeRecord).toHaveProperty('implemented_by')\n      expect(changeRecord).toHaveProperty('change_description')\n      expect(changeRecord).toHaveProperty('risk_assessment')\n      expect(changeRecord).toHaveProperty('rollback_plan')\n    },\n\n    validateIncidentResponse: incidentRecord => {\n      expect(incidentRecord).toHaveProperty('incident_id')\n      expect(incidentRecord).toHaveProperty('severity')\n      expect(incidentRecord).toHaveProperty('detected_at')\n      expect(incidentRecord).toHaveProperty('reported_by')\n      expect(incidentRecord).toHaveProperty('assigned_to')\n      expect(incidentRecord).toHaveProperty('status')\n      expect(incidentRecord.severity).toMatch(/^(low|medium|high|critical)$/)\n    },\n  },\n\n  // FERPA Compliance Testing (for Educational Institutions)\n  ferpa: {\n    validateEducationalRecords: record => {\n      expect(record).toHaveProperty('student_id')\n      expect(record).toHaveProperty('record_type')\n      expect(record).toHaveProperty('access_level')\n      expect(record.access_level).toMatch(/^(public|directory|private|restricted)$/)\n    },\n\n    validateParentalConsent: (consentRecord, studentAge) => {\n      if (studentAge < 18) {\n        expect(consentRecord).toHaveProperty('parent_guardian_id')\n        expect(consentRecord).toHaveProperty('consent_granted_at')\n        expect(consentRecord).toHaveProperty('consent_method')\n      }\n    },\n\n    validateDirectoryInformation: directoryInfo => {\n      const allowedFields = ['name', 'address', 'phone', 'email', 'enrollment_status']\n      const providedFields = Object.keys(directoryInfo)\n\n      providedFields.forEach(field => {\n        expect(allowedFields).toContain(field)\n      })\n    },\n  },\n\n  // General Compliance Utilities\n  validateDataClassification: data => {\n    expect(data).toHaveProperty('classification')\n    expect(data.classification).toMatch(/^(public|internal|confidential|restricted)$/)\n\n    if (data.classification === 'restricted') {\n      expect(data).toHaveProperty('encryption_status')\n      expect(data.encryption_status).toBe('encrypted')\n    }\n  },\n\n  validateDataLineage: dataLineage => {\n    expect(dataLineage).toHaveProperty('source_system')\n    expect(dataLineage).toHaveProperty('transformations')\n    expect(dataLineage).toHaveProperty('destination_system')\n    expect(dataLineage).toHaveProperty('data_quality_checks')\n    expect(Array.isArray(dataLineage.transformations)).toBe(true)\n  },\n\n  validateBackupCompliance: backupRecord => {\n    expect(backupRecord).toHaveProperty('backup_id')\n    expect(backupRecord).toHaveProperty('backup_type')\n    expect(backupRecord).toHaveProperty('created_at')\n    expect(backupRecord).toHaveProperty('encryption_status')\n    expect(backupRecord).toHaveProperty('retention_period')\n    expect(backupRecord.encryption_status).toBe('encrypted')\n  },\n\n  validateDisasterRecovery: drTest => {\n    expect(drTest).toHaveProperty('test_id')\n    expect(drTest).toHaveProperty('test_type')\n    expect(drTest).toHaveProperty('rto_target') // Recovery Time Objective\n    expect(drTest).toHaveProperty('rpo_target') // Recovery Point Objective\n    expect(drTest).toHaveProperty('actual_rto')\n    expect(drTest).toHaveProperty('actual_rpo')\n    expect(drTest).toHaveProperty('test_result')\n    expect(drTest.test_result).toMatch(/^(passed|failed|partial)$/)\n  },\n\n  // Compliance Reporting\n  generateComplianceReport: complianceData => {\n    return {\n      report_id: `compliance_${Date.now()}`,\n      generated_at: new Date().toISOString(),\n      compliance_frameworks: ['GDPR', 'SOC2', 'FERPA'],\n      overall_status: 'compliant',\n      findings: complianceData.findings || [],\n      recommendations: complianceData.recommendations || [],\n      next_review_date: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString(),\n    }\n  },\n}\n\n// Mock Compliance Services\njest.mock('@/lib/services/gdpr-service', () => ({\n  trackConsent: jest.fn().mockResolvedValue({ success: true }),\n  exportUserData: jest.fn().mockResolvedValue({ data: {}, format: 'JSON' }),\n  deleteUserData: jest.fn().mockResolvedValue({ success: true }),\n  validateDataMinimization: jest.fn().mockResolvedValue(true),\n}))\n\njest.mock('@/lib/services/audit-service', () => ({\n  createAuditLog: jest.fn().mockResolvedValue({ success: true }),\n  getAuditTrail: jest.fn().mockResolvedValue([]),\n  validateAuditIntegrity: jest.fn().mockResolvedValue(true),\n  generateAuditReport: jest.fn().mockResolvedValue({}),\n}))\n\njest.mock('@/lib/services/data-retention-service', () => ({\n  applyRetentionPolicy: jest.fn().mockResolvedValue({ success: true }),\n  scheduleDataDeletion: jest.fn().mockResolvedValue({ success: true }),\n  validateRetentionCompliance: jest.fn().mockResolvedValue(true),\n}))\n\n// Compliance Test Matchers\nexpect.extend({\n  toBeGDPRCompliant(received) {\n    const requiredFields = ['consent_tracking', 'data_minimization', 'right_to_erasure']\n    const hasAllFields = requiredFields.every(field => received[field])\n\n    return {\n      message: () => `expected ${received} to be GDPR compliant`,\n      pass: hasAllFields,\n    }\n  },\n\n  toBeSOC2Compliant(received) {\n    const requiredControls = ['access_control', 'audit_logging', 'encryption', 'change_management']\n    const hasAllControls = requiredControls.every(control => received[control])\n\n    return {\n      message: () => `expected ${received} to be SOC 2 compliant`,\n      pass: hasAllControls,\n    }\n  },\n\n  toHaveValidAuditTrail(received) {\n    const pass =\n      received &&\n      Array.isArray(received) &&\n      received.every(log => log.timestamp && log.user_id && log.action && log.resource_type)\n\n    return {\n      message: () => `expected ${received} to have a valid audit trail`,\n      pass,\n    }\n  },\n})\n\nexport default global.complianceTestUtils\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\testing\\setup\\enterprise.setup.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'beforeAll' is not defined.","line":44,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":44,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'afterEach' is not defined.","line":49,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":49,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'afterAll' is not defined.","line":54,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":54,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":98,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":98,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":99,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":99,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":100,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":101,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":101,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":102,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":102,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":117,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":117,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":121,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":121,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":134,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":134,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":135,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":135,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":136,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":136,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":137,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":137,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":140,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":140,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":141,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":141,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":142,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":142,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":143,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":143,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":144,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":144,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":147,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":147,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":148,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":148,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":149,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":149,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":150,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":150,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":151,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":151,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":155,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":155,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":156,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":156,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":158,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":158,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":162,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":162,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":166,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":166,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":170,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":170,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":172,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":172,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":173,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":173,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":174,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":174,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":175,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":175,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":176,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":176,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":177,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":177,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":178,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":178,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":179,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":179,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":180,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":180,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":181,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":181,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":182,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":182,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":183,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":183,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":184,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":184,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":185,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":185,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":186,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":186,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":187,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":187,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":188,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":188,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":189,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":189,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":190,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":190,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":191,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":191,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":193,"column":10,"nodeType":"Identifier","messageId":"undef","endLine":193,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":195,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":195,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":196,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":196,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":197,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":197,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":198,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":198,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":199,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":199,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":206,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":206,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":207,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":207,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":212,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":212,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":213,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":213,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":214,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":214,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":215,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":215,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":216,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":216,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":217,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":219,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":219,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":220,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":220,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":221,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":221,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":226,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":226,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":227,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":227,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":228,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":228,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":229,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":229,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":230,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":230,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":231,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":231,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":232,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":232,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":233,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":233,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":235,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":235,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":236,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":236,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":237,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":237,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":244,"column":8,"nodeType":"Identifier","messageId":"undef","endLine":244,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":245,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":245,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":246,"column":10,"nodeType":"Identifier","messageId":"undef","endLine":246,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":247,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":247,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":248,"column":10,"nodeType":"Identifier","messageId":"undef","endLine":248,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":253,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":253,"endColumn":7}],"suppressedMessages":[],"errorCount":84,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enterprise Testing Setup for AssetTrackerPro\n * Configures enterprise-grade testing environment with compliance and security features\n */\n\nimport '@testing-library/jest-dom'\nimport { TextEncoder, TextDecoder } from 'util'\nimport { setupServer } from 'msw/node'\nimport { rest } from 'msw'\n\n// Global Test Environment Setup\nglobal.TextEncoder = TextEncoder\nglobal.TextDecoder = TextDecoder\n\n// Enterprise Environment Variables\nprocess.env.NODE_ENV = 'test'\nprocess.env.NEXT_PUBLIC_APP_URL = 'http://localhost:3000'\nprocess.env.ENTERPRISE_MODE = 'true'\nprocess.env.COMPLIANCE_MODE = 'strict'\nprocess.env.AUDIT_LOGGING = 'enabled'\n\n// Mock Service Worker for API Testing\nconst server = setupServer(\n  // Default handlers for common API endpoints\n  rest.get('/api/health', (req, res, ctx) => {\n    return res(ctx.json({ status: 'ok', timestamp: new Date().toISOString() }))\n  }),\n\n  rest.get('/api/auth/user', (req, res, ctx) => {\n    return res(\n      ctx.json({\n        user: {\n          id: 'test-user-id',\n          email: 'test@enterprise.com',\n          role: 'admin',\n          tenant_id: 'test-tenant-id',\n        },\n      })\n    )\n  })\n)\n\n// Start server before all tests\nbeforeAll(() => {\n  server.listen({ onUnhandledRequest: 'warn' })\n})\n\n// Reset handlers after each test\nafterEach(() => {\n  server.resetHandlers()\n})\n\n// Clean up after all tests\nafterAll(() => {\n  server.close()\n})\n\n// Global Test Utilities\nglobal.testUtils = {\n  // Enterprise Test Data Factory\n  createTestUser: (overrides = {}) => ({\n    id: 'test-user-id',\n    email: 'test@enterprise.com',\n    full_name: 'Test User',\n    role: 'user',\n    tenant_id: 'test-tenant-id',\n    created_at: new Date().toISOString(),\n    ...overrides,\n  }),\n\n  createTestAsset: (overrides = {}) => ({\n    id: 'test-asset-id',\n    asset_id: 'TEST-001',\n    name: 'Test Asset',\n    category: 'test-category',\n    status: 'active',\n    tenant_id: 'test-tenant-id',\n    created_by: 'test-user-id',\n    created_at: new Date().toISOString(),\n    ...overrides,\n  }),\n\n  createTestTenant: (overrides = {}) => ({\n    id: 'test-tenant-id',\n    name: 'Test Enterprise',\n    domain: 'test-enterprise.com',\n    plan: 'enterprise',\n    settings: {\n      compliance_mode: 'strict',\n      audit_retention_days: 2555, // 7 years\n      data_residency: 'US',\n    },\n    ...overrides,\n  }),\n\n  // Compliance Test Helpers\n  validateAuditLog: (action, entity, userId) => {\n    expect(action).toBeDefined()\n    expect(entity).toBeDefined()\n    expect(userId).toBeDefined()\n    expect(action.timestamp).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/)\n    expect(action.user_id).toBe(userId)\n  },\n\n  validateDataRetention: (data, retentionDays = 2555) => {\n    const createdAt = new Date(data.created_at)\n    const retentionDate = new Date()\n    retentionDate.setDate(retentionDate.getDate() - retentionDays)\n\n    if (createdAt < retentionDate) {\n      throw new Error(`Data retention policy violated: ${data.id}`)\n    }\n  },\n\n  // Security Test Helpers\n  validateTenantIsolation: (data, expectedTenantId) => {\n    expect(data.tenant_id).toBe(expectedTenantId)\n  },\n\n  validatePermissions: (userPermissions, requiredPermission) => {\n    expect(userPermissions).toContain(requiredPermission)\n  },\n\n  // Performance Test Helpers\n  measureExecutionTime: async fn => {\n    const start = performance.now()\n    const result = await fn()\n    const end = performance.now()\n    return { result, executionTime: end - start }\n  },\n}\n\n// Mock Enterprise Services\njest.mock('@/lib/services/audit-service', () => ({\n  logAuditEvent: jest.fn().mockResolvedValue({ success: true }),\n  getAuditTrail: jest.fn().mockResolvedValue([]),\n  validateAuditIntegrity: jest.fn().mockResolvedValue(true),\n}))\n\njest.mock('@/lib/services/compliance-service', () => ({\n  validateDataRetention: jest.fn().mockResolvedValue(true),\n  generateComplianceReport: jest.fn().mockResolvedValue({}),\n  checkGDPRCompliance: jest.fn().mockResolvedValue(true),\n  checkSOC2Compliance: jest.fn().mockResolvedValue(true),\n}))\n\njest.mock('@/lib/services/security-service', () => ({\n  validateTenantAccess: jest.fn().mockResolvedValue(true),\n  checkPermissions: jest.fn().mockResolvedValue(true),\n  logSecurityEvent: jest.fn().mockResolvedValue({ success: true }),\n  detectAnomalies: jest.fn().mockResolvedValue([]),\n}))\n\n// Mock Supabase with Enterprise Features\njest.mock('@supabase/supabase-js', () => ({\n  createClient: jest.fn(() => ({\n    auth: {\n      getUser: jest.fn().mockResolvedValue({\n        data: { user: global.testUtils.createTestUser() },\n        error: null,\n      }),\n      getSession: jest.fn().mockResolvedValue({\n        data: { session: { user: global.testUtils.createTestUser() } },\n        error: null,\n      }),\n      signInWithPassword: jest.fn().mockResolvedValue({\n        data: { user: global.testUtils.createTestUser() },\n        error: null,\n      }),\n      signOut: jest.fn().mockResolvedValue({ error: null }),\n    },\n    from: jest.fn(() => ({\n      select: jest.fn().mockReturnThis(),\n      insert: jest.fn().mockReturnThis(),\n      update: jest.fn().mockReturnThis(),\n      delete: jest.fn().mockReturnThis(),\n      eq: jest.fn().mockReturnThis(),\n      neq: jest.fn().mockReturnThis(),\n      gt: jest.fn().mockReturnThis(),\n      gte: jest.fn().mockReturnThis(),\n      lt: jest.fn().mockReturnThis(),\n      lte: jest.fn().mockReturnThis(),\n      like: jest.fn().mockReturnThis(),\n      ilike: jest.fn().mockReturnThis(),\n      in: jest.fn().mockReturnThis(),\n      contains: jest.fn().mockReturnThis(),\n      order: jest.fn().mockReturnThis(),\n      limit: jest.fn().mockReturnThis(),\n      range: jest.fn().mockReturnThis(),\n      single: jest.fn().mockResolvedValue({ data: null, error: null }),\n      maybeSingle: jest.fn().mockResolvedValue({ data: null, error: null }),\n    })),\n    rpc: jest.fn().mockResolvedValue({ data: null, error: null }),\n    storage: {\n      from: jest.fn(() => ({\n        upload: jest.fn().mockResolvedValue({ data: null, error: null }),\n        download: jest.fn().mockResolvedValue({ data: null, error: null }),\n        remove: jest.fn().mockResolvedValue({ data: null, error: null }),\n        list: jest.fn().mockResolvedValue({ data: [], error: null }),\n      })),\n    },\n  })),\n}))\n\n// Mock Next.js with Enterprise Features\njest.mock('next/router', () => ({\n  useRouter: jest.fn(() => ({\n    route: '/',\n    pathname: '/',\n    query: {},\n    asPath: '/',\n    push: jest.fn(),\n    replace: jest.fn(),\n    reload: jest.fn(),\n    back: jest.fn(),\n    prefetch: jest.fn().mockResolvedValue(undefined),\n    beforePopState: jest.fn(),\n    events: {\n      on: jest.fn(),\n      off: jest.fn(),\n      emit: jest.fn(),\n    },\n  })),\n}))\n\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(() => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    prefetch: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n  })),\n  useSearchParams: jest.fn(() => new URLSearchParams()),\n  usePathname: jest.fn(() => '/'),\n  useParams: jest.fn(() => ({})),\n}))\n\n// Console override for test environment\nconst originalConsole = global.console\nglobal.console = {\n  ...originalConsole,\n  log: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn(),\n  info: jest.fn(),\n  debug: jest.fn(),\n}\n\n// Cleanup function\nglobal.afterEach(() => {\n  jest.clearAllMocks()\n})\n\nexport { server }\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\testing\\setup\\security.setup.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":92,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":92,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":93,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":93,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":94,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":94,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":97,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":97,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":98,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":98,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":101,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":101,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":106,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":106,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":107,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":107,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":108,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":108,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":109,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":109,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":113,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":113,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":114,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":114,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":115,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":115,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":117,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":117,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":122,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":122,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":123,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":123,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":124,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":124,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":125,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":125,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":138,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":138,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":139,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":139,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":146,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":146,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":149,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":149,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":158,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":158,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":161,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":161,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":162,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":162,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":165,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":165,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":166,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":166,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":169,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":169,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":172,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":172,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":173,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":173,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":178,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":178,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":179,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":179,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":180,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":180,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":181,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":181,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":182,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":182,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":185,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":185,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":186,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":186,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":187,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":187,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":188,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":188,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":191,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":191,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":192,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":192,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":208,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":208,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":209,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":209,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":210,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":210,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":211,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":211,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":213,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":213,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":214,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":214,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":215,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":215,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":217,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":217,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":218,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":218,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":219,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":219,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":221,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":221,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":222,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":222,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'jest' is not defined.","line":223,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":223,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":228,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":228,"endColumn":7}],"suppressedMessages":[],"errorCount":55,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Security Testing Setup for AssetTrackerPro\n * Configures security-focused testing environment for enterprise applications\n */\n\n// Security Test Environment Configuration\nprocess.env.SECURITY_TEST_MODE = 'true'\nprocess.env.ENCRYPTION_KEY = 'test-encryption-key-32-characters'\nprocess.env.JWT_SECRET = 'test-jwt-secret-for-testing-only'\n\n// Security Test Utilities\nglobal.securityTestUtils = {\n  // Authentication Testing\n  createValidJWT: (payload = {}) => {\n    const defaultPayload = {\n      sub: 'test-user-id',\n      email: 'test@enterprise.com',\n      role: 'user',\n      tenant_id: 'test-tenant-id',\n      iat: Math.floor(Date.now() / 1000),\n      exp: Math.floor(Date.now() / 1000) + 3600, // 1 hour\n    }\n    return Buffer.from(JSON.stringify({ ...defaultPayload, ...payload })).toString('base64')\n  },\n\n  createExpiredJWT: () => {\n    const payload = {\n      sub: 'test-user-id',\n      email: 'test@enterprise.com',\n      iat: Math.floor(Date.now() / 1000) - 7200, // 2 hours ago\n      exp: Math.floor(Date.now() / 1000) - 3600, // 1 hour ago (expired)\n    }\n    return Buffer.from(JSON.stringify(payload)).toString('base64')\n  },\n\n  createMaliciousJWT: () => {\n    const payload = {\n      sub: 'malicious-user',\n      email: 'hacker@evil.com',\n      role: 'admin', // Privilege escalation attempt\n      tenant_id: 'different-tenant-id', // Tenant isolation bypass attempt\n      iat: Math.floor(Date.now() / 1000),\n      exp: Math.floor(Date.now() / 1000) + 3600,\n    }\n    return Buffer.from(JSON.stringify(payload)).toString('base64')\n  },\n\n  // Authorization Testing\n  createUserWithPermissions: (permissions = []) => ({\n    id: 'test-user-id',\n    email: 'test@enterprise.com',\n    role: 'user',\n    tenant_id: 'test-tenant-id',\n    permissions: permissions,\n  }),\n\n  createAdminUser: () => ({\n    id: 'admin-user-id',\n    email: 'admin@enterprise.com',\n    role: 'admin',\n    tenant_id: 'test-tenant-id',\n    permissions: ['*'], // All permissions\n  }),\n\n  // Input Validation Testing\n  sqlInjectionPayloads: [\n    \"'; DROP TABLE assets; --\",\n    \"' OR '1'='1\",\n    \"'; UPDATE users SET role='admin' WHERE id='1'; --\",\n    \"' UNION SELECT * FROM users --\",\n    \"'; INSERT INTO users (email, role) VALUES ('hacker@evil.com', 'admin'); --\",\n  ],\n\n  xssPayloads: [\n    \"<script>alert('XSS')</script>\",\n    \"javascript:alert('XSS')\",\n    \"<img src=x onerror=alert('XSS')>\",\n    \"<svg onload=alert('XSS')>\",\n    \"';alert('XSS');//\",\n  ],\n\n  pathTraversalPayloads: [\n    '../../../etc/passwd',\n    '..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam',\n    '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd',\n    '....//....//....//etc/passwd',\n  ],\n\n  // Data Validation Testing\n  validateSanitizedInput: (input, sanitized) => {\n    // Check for common XSS patterns\n    expect(sanitized).not.toMatch(/<script/i)\n    expect(sanitized).not.toMatch(/javascript:/i)\n    expect(sanitized).not.toMatch(/on\\w+=/i)\n\n    // Check for SQL injection patterns\n    expect(sanitized).not.toMatch(/['\";]/g)\n    expect(sanitized).not.toMatch(/\\b(DROP|DELETE|UPDATE|INSERT|SELECT)\\b/i)\n\n    // Check for path traversal\n    expect(sanitized).not.toMatch(/\\.\\./g)\n  },\n\n  // Encryption Testing\n  validateEncryption: (plaintext, encrypted) => {\n    expect(encrypted).toBeDefined()\n    expect(encrypted).not.toBe(plaintext)\n    expect(encrypted.length).toBeGreaterThan(0)\n    expect(typeof encrypted).toBe('string')\n  },\n\n  validatePasswordHash: (password, hash) => {\n    expect(hash).toBeDefined()\n    expect(hash).not.toBe(password)\n    expect(hash.length).toBeGreaterThan(password.length)\n    // Should contain salt and hash\n    expect(hash).toMatch(/\\$/)\n  },\n\n  // Session Security Testing\n  validateSessionSecurity: sessionData => {\n    expect(sessionData.httpOnly).toBe(true)\n    expect(sessionData.secure).toBe(true)\n    expect(sessionData.sameSite).toBe('strict')\n    expect(sessionData.maxAge).toBeLessThanOrEqual(3600) // 1 hour max\n  },\n\n  // Rate Limiting Testing\n  simulateRateLimitAttack: async (endpoint, requests = 100) => {\n    const promises = Array(requests)\n      .fill()\n      .map(() => fetch(endpoint, { method: 'POST' }))\n    return Promise.allSettled(promises)\n  },\n\n  // CSRF Testing\n  validateCSRFProtection: response => {\n    expect(response.headers).toHaveProperty('x-csrf-token')\n    expect(response.headers['x-csrf-token']).toBeTruthy()\n  },\n\n  // Tenant Isolation Testing\n  validateTenantIsolation: (data, expectedTenantId) => {\n    if (Array.isArray(data)) {\n      data.forEach(item => {\n        expect(item.tenant_id).toBe(expectedTenantId)\n      })\n    } else {\n      expect(data.tenant_id).toBe(expectedTenantId)\n    }\n  },\n\n  // Security Headers Testing\n  validateSecurityHeaders: response => {\n    const headers = response.headers\n\n    // Content Security Policy\n    expect(headers).toHaveProperty('content-security-policy')\n\n    // X-Frame-Options\n    expect(headers).toHaveProperty('x-frame-options')\n    expect(headers['x-frame-options']).toBe('DENY')\n\n    // X-Content-Type-Options\n    expect(headers).toHaveProperty('x-content-type-options')\n    expect(headers['x-content-type-options']).toBe('nosniff')\n\n    // Strict-Transport-Security\n    expect(headers).toHaveProperty('strict-transport-security')\n\n    // X-XSS-Protection\n    expect(headers).toHaveProperty('x-xss-protection')\n    expect(headers['x-xss-protection']).toBe('1; mode=block')\n  },\n}\n\n// Mock Security Services\njest.mock('@/lib/services/encryption-service', () => ({\n  encrypt: jest.fn(data => `encrypted_${data}`),\n  decrypt: jest.fn(data => data.replace('encrypted_', '')),\n  hash: jest.fn(data => `hashed_${data}`),\n  compareHash: jest.fn((data, hash) => hash === `hashed_${data}`),\n}))\n\njest.mock('@/lib/services/rate-limit-service', () => ({\n  checkRateLimit: jest.fn().mockResolvedValue({ allowed: true, remaining: 99 }),\n  incrementCounter: jest.fn().mockResolvedValue(1),\n  resetCounter: jest.fn().mockResolvedValue(true),\n}))\n\njest.mock('@/lib/middleware/security-headers', () => ({\n  addSecurityHeaders: jest.fn(response => {\n    response.headers = {\n      ...response.headers,\n      'content-security-policy': \"default-src 'self'\",\n      'x-frame-options': 'DENY',\n      'x-content-type-options': 'nosniff',\n      'strict-transport-security': 'max-age=31536000; includeSubDomains',\n      'x-xss-protection': '1; mode=block',\n    }\n    return response\n  }),\n}))\n\n// Mock Crypto for consistent testing\nObject.defineProperty(global, 'crypto', {\n  value: {\n    randomBytes: jest.fn(size => Buffer.alloc(size, 'test')),\n    createHash: jest.fn(() => ({\n      update: jest.fn().mockReturnThis(),\n      digest: jest.fn(() => 'test-hash'),\n    })),\n    createCipheriv: jest.fn(() => ({\n      update: jest.fn(() => 'encrypted'),\n      final: jest.fn(() => 'final'),\n    })),\n    createDecipheriv: jest.fn(() => ({\n      update: jest.fn(() => 'decrypted'),\n      final: jest.fn(() => 'final'),\n    })),\n    scryptSync: jest.fn(() => Buffer.alloc(32, 'key')),\n    randomUUID: jest.fn(() => 'test-uuid'),\n    timingSafeEqual: jest.fn(() => true),\n  },\n})\n\n// Security Test Matchers\nexpect.extend({\n  toBeSecurelyHashed(received) {\n    const pass =\n      received && typeof received === 'string' && received.length > 20 && received.includes('$')\n\n    return {\n      message: () => `expected ${received} to be a securely hashed value`,\n      pass,\n    }\n  },\n\n  toBeValidJWT(received) {\n    try {\n      const parts = received.split('.')\n      const pass = parts.length === 3\n\n      return {\n        message: () => `expected ${received} to be a valid JWT`,\n        pass,\n      }\n    } catch {\n      return {\n        message: () => `expected ${received} to be a valid JWT`,\n        pass: false,\n      }\n    }\n  },\n\n  toHaveSecurityHeaders(received) {\n    const requiredHeaders = [\n      'content-security-policy',\n      'x-frame-options',\n      'x-content-type-options',\n      'strict-transport-security',\n    ]\n\n    const hasAllHeaders = requiredHeaders.every(\n      header => received.headers && received.headers[header]\n    )\n\n    return {\n      message: () => `expected response to have all required security headers`,\n      pass: hasAllHeaders,\n    }\n  },\n})\n\nexport default global.securityTestUtils\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\Users\\joaqu\\Desktop\\AssetTrackerPro_v1\\types\\json.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41,44],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41,44],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare module '*.json' {\n  const value: any\n  export default value\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]